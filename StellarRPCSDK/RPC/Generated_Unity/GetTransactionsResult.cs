//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Stellar.RPC
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetTransactionsResult
    {
        [Newtonsoft.Json.JsonProperty("transactions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Transactions> Transactions { get; set; }

        /// <summary>
        /// The sequence number of the latest ledger known to Stellar RPC at the time it handled the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("latestLedger", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long LatestLedger { get; set; }

        /// <summary>
        /// The unix timestamp of the close time of the latest ledger known to Stellar RPC at the time it handled the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("latestLedgerCloseTimestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long LatestLedgerCloseTimestamp { get; set; }

        /// <summary>
        /// The sequence number of the oldest ledger ingested by Stellar RPC at the time it handled the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oldestLedger", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long OldestLedger { get; set; }

        /// <summary>
        /// The unix timestamp of the close time of the oldest ledger ingested by Stellar RPC at the time it handled the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oldestLedgerCloseTimestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long OldestLedgerCloseTimestamp { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetTransactionsResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTransactionsResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class Transactions
    {
        /// <summary>
        /// Indicates whether the transaction was successful or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// The 1-based index of the transaction among all transactions included in the ledger.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("applicationOrder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ApplicationOrder { get; set; }

        /// <summary>
        /// Indicates whether the transaction was fee bumped.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("feeBump", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool FeeBump { get; set; }

        /// <summary>
        /// A base64 encoded string of the raw TransactionEnvelope XDR struct for this transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("envelopeXdr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnvelopeXdr { get; set; }

        /// <summary>
        /// A base64 encoded string of the raw TransactionResult XDR struct for this transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resultXdr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResultXdr { get; set; }

        /// <summary>
        /// A base64 encoded string of the raw TransactionMeta XDR struct for this transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resultMetaXdr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResultMetaXdr { get; set; }

        /// <summary>
        /// (optional) A base64 encoded slice of xdr.DiagnosticEvent. This is only present if the `ENABLE_SOROBAN_DIAGNOSTIC_EVENTS` has been enabled in the stellar-core config.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("diagnosticEventsXdr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DiagnosticEventsXdr { get; set; }

        /// <summary>
        /// The sequence number of the ledger which included the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ledger", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Ledger { get; set; }

        /// <summary>
        /// The unix timestamp of when the transaction was included in the ledger.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long CreatedAt { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Transactions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Transactions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }
}