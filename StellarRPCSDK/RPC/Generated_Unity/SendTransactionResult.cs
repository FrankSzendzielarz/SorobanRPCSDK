//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Stellar.RPC
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [ProtoBuf.ProtoContract] public partial class SendTransactionResult
    {
        /// <summary>
        /// Transaction hash (as a hex-encoded string)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-f\d]{64}$")]
        [ProtoBuf.ProtoMember(1)] public string  Hash { get; set; }

        /// <summary>
        /// The current status of the transaction by hash.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [ProtoBuf.ProtoMember(2)] public SendTransactionResult_Status  Status { get; set; }

        /// <summary>
        /// The sequence number of the latest ledger known to Stellar RPC at the time it handled the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("latestLedger", Required = Newtonsoft.Json.Required.Always)]
        [ProtoBuf.ProtoMember(3)] public long  LatestLedger { get; set; }

        /// <summary>
        /// The unix timestamp of the close time of the latest ledger known to Stellar RPC at the time it handled the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("latestLedgerCloseTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [ProtoBuf.ProtoMember(4)] public string  LatestLedgerCloseTime { get; set; }

        /// <summary>
        /// (optional) If the transaction status is `ERROR`, this will be a base64 encoded string of the raw TransactionResult XDR struct containing details on why stellar-core rejected the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorResultXdr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [ProtoBuf.ProtoMember(5)] public string  ErrorResultXdr { get; set; }

        /// <summary>
        /// (optional) If the transaction status is `ERROR`, this field may be present with an array of base64 encoded strings. Each string will decode to a raw DiagnosticEvent XDR struct containing details on why stellar-core rejected the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("diagnosticEventsXdr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [ProtoBuf.ProtoMember(6)] public System.Collections.Generic.ICollection<string>  DiagnosticEventsXdr { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SendTransactionResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SendTransactionResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [ProtoBuf.ProtoContract] public enum SendTransactionResult_Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"DUPLICATE")]
        DUPLICATE = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"TRY_AGAIN_LATER")]
        TRY_AGAIN_LATER = 2,


        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 3,


    }
}