//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Stellar.RPC
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class GetTransactionResult
    {
        /// <summary>
        /// The current status of the transaction by hash
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public GetTransactionResultStatus Status { get; set; }

        /// <summary>
        /// The sequence number of the latest ledger known to Stellar RPC at the time it handled the request.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("latestLedger")]
        public long LatestLedger { get; set; }

        /// <summary>
        /// The unix timestamp of the close time of the latest ledger known to Stellar RPC at the time it handled the request.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("latestLedgerCloseTime")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LatestLedgerCloseTime { get; set; }

        /// <summary>
        /// The sequence number of the oldest ledger ingested by Stellar RPC at the time it handled the request.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("oldestLedger")]
        public long OldestLedger { get; set; }

        /// <summary>
        /// The unix timestamp of the close time of the oldest ledger ingested by Stellar RPC at the time it handled the request.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("oldestLedgerCloseTime")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OldestLedgerCloseTime { get; set; }

        /// <summary>
        /// (optional) The sequence number of the ledger which included the transaction. This field is only present if `status` is `SUCCESS` or `FAILED`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ledger")]
        public long Ledger { get; set; }

        /// <summary>
        /// (optional) The unix timestamp of when the transaction was included in the ledger. This field is only present if `status` is `SUCCESS` or `FAILED`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public string CreatedAt { get; set; }

        /// <summary>
        /// (optional) The index of the transaction among all transactions included in the ledger. This field is only present if `status` is `SUCCESS` or `FAILED`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("applicationOrder")]
        public long ApplicationOrder { get; set; }

        /// <summary>
        /// (optional) Indicates whether the transaction was fee bumped. This field is only present if `status` is `SUCCESS` or `FAILED`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("feeBump")]
        public bool FeeBump { get; set; }

        /// <summary>
        /// (optional) A base64 encoded string of the raw TransactionEnvelope XDR struct for this transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("envelopeXdr")]
        public string EnvelopeXdr { get; set; }

        /// <summary>
        /// (optional) A base64 encoded string of the raw TransactionResult XDR struct for this transaction. This field is only present if `status` is `SUCCESS` or `FAILED`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("resultXdr")]
        public string ResultXdr { get; set; }

        /// <summary>
        /// (optional) A base64 encoded string of the raw TransactionMeta XDR struct for this transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("resultMetaXdr")]
        public string ResultMetaXdr { get; set; }



        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetTransactionResult FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<GetTransactionResult>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "11.1.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum GetTransactionResultStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESS")]
        SUCCESS = 0,


        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND")]
        NOT_FOUND = 1,


        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 2,


    }
}