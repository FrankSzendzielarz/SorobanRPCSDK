// Generated code - do not modify directly
using System;
using System.IO;
using System.Buffers;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Routing;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using ProtoBuf;
using Stellar;
using Stellar.RPC;

namespace Stellar.RPC.AOT
{
    /// <summary>Extension methods for registering AOT-compatible gRPC services</summary>
    public static class GrpcServiceExtensions
    {
        /// <summary>Add all AOT-compatible gRPC services to the DI container</summary>
        public static IServiceCollection AddAotGrpcServices(this IServiceCollection services)
        {
            // Add base gRPC infrastructure
            services.AddGrpc(options =>
            {
                options.EnableDetailedErrors = true;
                options.MaxReceiveMessageSize = 16 * 1024 * 1024; // 16 MB
                options.MaxSendMessageSize = 16 * 1024 * 1024; // 16 MB
            });

            // Register IXdrProtoService and its gRPC adapter
            services.AddScoped<IXdrProtoService, XdrProtoService>();
            services.AddScoped<XdrProtoServiceGrpcService>();
            // Register IMuxedAccount_ProtoWrapper and its gRPC adapter
            services.AddScoped<IMuxedAccount_ProtoWrapper, MuxedAccount_ProtoWrapper>();
            services.AddScoped<MuxedAccount_ProtoWrapperGrpcService>();
            // Register INetwork_ProtoWrapper and its gRPC adapter
            services.AddScoped<INetwork_ProtoWrapper, Network_ProtoWrapper>();
            services.AddScoped<Network_ProtoWrapperGrpcService>();
            // Register ITransaction_ProtoWrapper and its gRPC adapter
            services.AddScoped<ITransaction_ProtoWrapper, Transaction_ProtoWrapper>();
            services.AddScoped<Transaction_ProtoWrapperGrpcService>();
            // Register ISimulateTransactionResult_ProtoWrapper and its gRPC adapter
            services.AddScoped<ISimulateTransactionResult_ProtoWrapper, SimulateTransactionResult_ProtoWrapper>();
            services.AddScoped<SimulateTransactionResult_ProtoWrapperGrpcService>();
            // Register IStellarRPCClient and its gRPC adapter
            services.AddScoped<IStellarRPCClient, StellarRPCClient>();
            services.AddScoped<StellarRPCClientGrpcService>();
            // Register XdrProtoService and its gRPC adapter
            services.AddScoped<XdrProtoService>();
            services.AddScoped<XdrProtoServiceGrpcService>();
            // Register MuxedAccount_ProtoWrapper and its gRPC adapter
            services.AddScoped<MuxedAccount_ProtoWrapper>();
            services.AddScoped<MuxedAccount_ProtoWrapperGrpcService>();
            // Register Network_ProtoWrapper and its gRPC adapter
            services.AddScoped<Network_ProtoWrapper>();
            services.AddScoped<Network_ProtoWrapperGrpcService>();
            // Register Transaction_ProtoWrapper and its gRPC adapter
            services.AddScoped<Transaction_ProtoWrapper>();
            services.AddScoped<Transaction_ProtoWrapperGrpcService>();
            // Register StellarRPCClient and its gRPC adapter
            services.AddScoped<StellarRPCClient>();
            services.AddScoped<StellarRPCClientGrpcService>();
            // Register SimulateTransactionResult_ProtoWrapper and its gRPC adapter
            services.AddScoped<SimulateTransactionResult_ProtoWrapper>();
            services.AddScoped<SimulateTransactionResult_ProtoWrapperGrpcService>();

            return services;
        }

        /// <summary>Map all AOT-compatible gRPC services to endpoints</summary>
        public static IEndpointRouteBuilder MapAotGrpcServices(this IEndpointRouteBuilder endpoints)
        {
            // Ensure all marshallers are configured
            XdrProtoServiceGrpcMarshaller.ConfigureTypes();
            MuxedAccount_ProtoWrapperGrpcMarshaller.ConfigureTypes();
            Network_ProtoWrapperGrpcMarshaller.ConfigureTypes();
            Transaction_ProtoWrapperGrpcMarshaller.ConfigureTypes();
            SimulateTransactionResult_ProtoWrapperGrpcMarshaller.ConfigureTypes();
            StellarRPCClientGrpcMarshaller.ConfigureTypes();
            XdrProtoServiceGrpcMarshaller.ConfigureTypes();
            MuxedAccount_ProtoWrapperGrpcMarshaller.ConfigureTypes();
            Network_ProtoWrapperGrpcMarshaller.ConfigureTypes();
            Transaction_ProtoWrapperGrpcMarshaller.ConfigureTypes();
            StellarRPCClientGrpcMarshaller.ConfigureTypes();
            SimulateTransactionResult_ProtoWrapperGrpcMarshaller.ConfigureTypes();
            AccountEntryGrpcMarshaller.ConfigureTypes();
            AccountEntryExtensionV1GrpcMarshaller.ConfigureTypes();
            AccountEntryExtensionV2GrpcMarshaller.ConfigureTypes();
            AccountEntryExtensionV3GrpcMarshaller.ConfigureTypes();
            AccountFlagsGrpcMarshaller.ConfigureTypes();
            AccountIDGrpcMarshaller.ConfigureTypes();
            AccountMergeResultGrpcMarshaller.ConfigureTypes();
            AccountMergeResultCodeGrpcMarshaller.ConfigureTypes();
            AllowTrustOpGrpcMarshaller.ConfigureTypes();
            AllowTrustResultGrpcMarshaller.ConfigureTypes();
            AllowTrustResultCodeGrpcMarshaller.ConfigureTypes();
            AlphaNum12GrpcMarshaller.ConfigureTypes();
            AlphaNum4GrpcMarshaller.ConfigureTypes();
            ArchivalProofGrpcMarshaller.ConfigureTypes();
            ArchivalProofNodeGrpcMarshaller.ConfigureTypes();
            ArchivalProofTypeGrpcMarshaller.ConfigureTypes();
            AssetGrpcMarshaller.ConfigureTypes();
            AssetCodeGrpcMarshaller.ConfigureTypes();
            AssetCode12GrpcMarshaller.ConfigureTypes();
            AssetCode4GrpcMarshaller.ConfigureTypes();
            AssetTypeGrpcMarshaller.ConfigureTypes();
            AuthGrpcMarshaller.ConfigureTypes();
            AuthCertGrpcMarshaller.ConfigureTypes();
            AuthenticatedMessageGrpcMarshaller.ConfigureTypes();
            BeginSponsoringFutureReservesOpGrpcMarshaller.ConfigureTypes();
            BeginSponsoringFutureReservesResultGrpcMarshaller.ConfigureTypes();
            BeginSponsoringFutureReservesResultCodeGrpcMarshaller.ConfigureTypes();
            BinaryFuseFilterTypeGrpcMarshaller.ConfigureTypes();
            BucketEntryGrpcMarshaller.ConfigureTypes();
            BucketEntryTypeGrpcMarshaller.ConfigureTypes();
            BucketListTypeGrpcMarshaller.ConfigureTypes();
            BucketMetadataGrpcMarshaller.ConfigureTypes();
            BumpSequenceOpGrpcMarshaller.ConfigureTypes();
            BumpSequenceResultGrpcMarshaller.ConfigureTypes();
            BumpSequenceResultCodeGrpcMarshaller.ConfigureTypes();
            ChangeTrustAssetGrpcMarshaller.ConfigureTypes();
            ChangeTrustOpGrpcMarshaller.ConfigureTypes();
            ChangeTrustResultGrpcMarshaller.ConfigureTypes();
            ChangeTrustResultCodeGrpcMarshaller.ConfigureTypes();
            ClaimableBalanceEntryGrpcMarshaller.ConfigureTypes();
            ClaimableBalanceEntryExtensionV1GrpcMarshaller.ConfigureTypes();
            ClaimableBalanceFlagsGrpcMarshaller.ConfigureTypes();
            ClaimableBalanceIDGrpcMarshaller.ConfigureTypes();
            ClaimableBalanceIDTypeGrpcMarshaller.ConfigureTypes();
            ClaimantGrpcMarshaller.ConfigureTypes();
            ClaimantTypeGrpcMarshaller.ConfigureTypes();
            ClaimAtomGrpcMarshaller.ConfigureTypes();
            ClaimAtomTypeGrpcMarshaller.ConfigureTypes();
            ClaimClaimableBalanceOpGrpcMarshaller.ConfigureTypes();
            ClaimClaimableBalanceResultGrpcMarshaller.ConfigureTypes();
            ClaimClaimableBalanceResultCodeGrpcMarshaller.ConfigureTypes();
            ClaimLiquidityAtomGrpcMarshaller.ConfigureTypes();
            ClaimOfferAtomGrpcMarshaller.ConfigureTypes();
            ClaimOfferAtomV0GrpcMarshaller.ConfigureTypes();
            ClaimPredicateGrpcMarshaller.ConfigureTypes();
            ClaimPredicateTypeGrpcMarshaller.ConfigureTypes();
            ClawbackClaimableBalanceOpGrpcMarshaller.ConfigureTypes();
            ClawbackClaimableBalanceResultGrpcMarshaller.ConfigureTypes();
            ClawbackClaimableBalanceResultCodeGrpcMarshaller.ConfigureTypes();
            ClawbackOpGrpcMarshaller.ConfigureTypes();
            ClawbackResultGrpcMarshaller.ConfigureTypes();
            ClawbackResultCodeGrpcMarshaller.ConfigureTypes();
            ColdArchiveArchivedLeafGrpcMarshaller.ConfigureTypes();
            ColdArchiveBoundaryLeafGrpcMarshaller.ConfigureTypes();
            ColdArchiveBucketEntryGrpcMarshaller.ConfigureTypes();
            ColdArchiveBucketEntryTypeGrpcMarshaller.ConfigureTypes();
            ColdArchiveDeletedLeafGrpcMarshaller.ConfigureTypes();
            ColdArchiveHashEntryGrpcMarshaller.ConfigureTypes();
            ConfigSettingContractBandwidthV0GrpcMarshaller.ConfigureTypes();
            ConfigSettingContractComputeV0GrpcMarshaller.ConfigureTypes();
            ConfigSettingContractEventsV0GrpcMarshaller.ConfigureTypes();
            ConfigSettingContractExecutionLanesV0GrpcMarshaller.ConfigureTypes();
            ConfigSettingContractHistoricalDataV0GrpcMarshaller.ConfigureTypes();
            ConfigSettingContractLedgerCostV0GrpcMarshaller.ConfigureTypes();
            ConfigSettingEntryGrpcMarshaller.ConfigureTypes();
            ConfigSettingIDGrpcMarshaller.ConfigureTypes();
            ConfigUpgradeSetGrpcMarshaller.ConfigureTypes();
            ConfigUpgradeSetKeyGrpcMarshaller.ConfigureTypes();
            ContractCodeCostInputsGrpcMarshaller.ConfigureTypes();
            ContractCodeEntryGrpcMarshaller.ConfigureTypes();
            ContractCostParamEntryGrpcMarshaller.ConfigureTypes();
            ContractCostParamsGrpcMarshaller.ConfigureTypes();
            ContractCostTypeGrpcMarshaller.ConfigureTypes();
            ContractDataDurabilityGrpcMarshaller.ConfigureTypes();
            ContractDataEntryGrpcMarshaller.ConfigureTypes();
            ContractEventGrpcMarshaller.ConfigureTypes();
            ContractEventTypeGrpcMarshaller.ConfigureTypes();
            ContractExecutableGrpcMarshaller.ConfigureTypes();
            ContractExecutableTypeGrpcMarshaller.ConfigureTypes();
            ContractIDPreimageGrpcMarshaller.ConfigureTypes();
            ContractIDPreimageTypeGrpcMarshaller.ConfigureTypes();
            CreateAccountOpGrpcMarshaller.ConfigureTypes();
            CreateAccountResultGrpcMarshaller.ConfigureTypes();
            CreateAccountResultCodeGrpcMarshaller.ConfigureTypes();
            CreateClaimableBalanceOpGrpcMarshaller.ConfigureTypes();
            CreateClaimableBalanceResultGrpcMarshaller.ConfigureTypes();
            CreateClaimableBalanceResultCodeGrpcMarshaller.ConfigureTypes();
            CreateContractArgsGrpcMarshaller.ConfigureTypes();
            CreateContractArgsV2GrpcMarshaller.ConfigureTypes();
            CreatePassiveSellOfferOpGrpcMarshaller.ConfigureTypes();
            CryptoKeyTypeGrpcMarshaller.ConfigureTypes();
            Curve25519PublicGrpcMarshaller.ConfigureTypes();
            Curve25519SecretGrpcMarshaller.ConfigureTypes();
            DataEntryGrpcMarshaller.ConfigureTypes();
            DataValueGrpcMarshaller.ConfigureTypes();
            DecoratedSignatureGrpcMarshaller.ConfigureTypes();
            DiagnosticEventGrpcMarshaller.ConfigureTypes();
            DiagnosticEventsGrpcMarshaller.ConfigureTypes();
            DontHaveGrpcMarshaller.ConfigureTypes();
            DurationGrpcMarshaller.ConfigureTypes();
            EncryptedBodyGrpcMarshaller.ConfigureTypes();
            EndSponsoringFutureReservesResultGrpcMarshaller.ConfigureTypes();
            EndSponsoringFutureReservesResultCodeGrpcMarshaller.ConfigureTypes();
            EnvelopeTypeGrpcMarshaller.ConfigureTypes();
            ErrorGrpcMarshaller.ConfigureTypes();
            ErrorCodeGrpcMarshaller.ConfigureTypes();
            EvictionIteratorGrpcMarshaller.ConfigureTypes();
            ExistenceProofBodyGrpcMarshaller.ConfigureTypes();
            ExtendFootprintTTLOpGrpcMarshaller.ConfigureTypes();
            ExtendFootprintTTLResultGrpcMarshaller.ConfigureTypes();
            ExtendFootprintTTLResultCodeGrpcMarshaller.ConfigureTypes();
            ExtensionPointGrpcMarshaller.ConfigureTypes();
            FeeBumpTransactionGrpcMarshaller.ConfigureTypes();
            FeeBumpTransactionEnvelopeGrpcMarshaller.ConfigureTypes();
            FloodAdvertGrpcMarshaller.ConfigureTypes();
            FloodDemandGrpcMarshaller.ConfigureTypes();
            GeneralizedTransactionSetGrpcMarshaller.ConfigureTypes();
            HashGrpcMarshaller.ConfigureTypes();
            HashIDPreimageGrpcMarshaller.ConfigureTypes();
            HelloGrpcMarshaller.ConfigureTypes();
            HmacSha256KeyGrpcMarshaller.ConfigureTypes();
            HmacSha256MacGrpcMarshaller.ConfigureTypes();
            HostFunctionGrpcMarshaller.ConfigureTypes();
            HostFunctionTypeGrpcMarshaller.ConfigureTypes();
            HotArchiveBucketEntryGrpcMarshaller.ConfigureTypes();
            HotArchiveBucketEntryTypeGrpcMarshaller.ConfigureTypes();
            InflationPayoutGrpcMarshaller.ConfigureTypes();
            InflationResultGrpcMarshaller.ConfigureTypes();
            InflationResultCodeGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultPairGrpcMarshaller.ConfigureTypes();
            Int128PartsGrpcMarshaller.ConfigureTypes();
            Int256PartsGrpcMarshaller.ConfigureTypes();
            int32GrpcMarshaller.ConfigureTypes();
            int64GrpcMarshaller.ConfigureTypes();
            InvokeContractArgsGrpcMarshaller.ConfigureTypes();
            InvokeHostFunctionOpGrpcMarshaller.ConfigureTypes();
            InvokeHostFunctionResultGrpcMarshaller.ConfigureTypes();
            InvokeHostFunctionResultCodeGrpcMarshaller.ConfigureTypes();
            InvokeHostFunctionSuccessPreImageGrpcMarshaller.ConfigureTypes();
            IPAddrTypeGrpcMarshaller.ConfigureTypes();
            LedgerBoundsGrpcMarshaller.ConfigureTypes();
            LedgerCloseMetaGrpcMarshaller.ConfigureTypes();
            LedgerCloseMetaExtGrpcMarshaller.ConfigureTypes();
            LedgerCloseMetaExtV1GrpcMarshaller.ConfigureTypes();
            LedgerCloseMetaV0GrpcMarshaller.ConfigureTypes();
            LedgerCloseMetaV1GrpcMarshaller.ConfigureTypes();
            LedgerCloseValueSignatureGrpcMarshaller.ConfigureTypes();
            LedgerEntryGrpcMarshaller.ConfigureTypes();
            LedgerEntryChangeGrpcMarshaller.ConfigureTypes();
            LedgerEntryChangesGrpcMarshaller.ConfigureTypes();
            LedgerEntryChangeTypeGrpcMarshaller.ConfigureTypes();
            LedgerEntryExtensionV1GrpcMarshaller.ConfigureTypes();
            LedgerEntryTypeGrpcMarshaller.ConfigureTypes();
            LedgerFootprintGrpcMarshaller.ConfigureTypes();
            LedgerHeaderGrpcMarshaller.ConfigureTypes();
            LedgerHeaderExtensionV1GrpcMarshaller.ConfigureTypes();
            LedgerHeaderFlagsGrpcMarshaller.ConfigureTypes();
            LedgerHeaderHistoryEntryGrpcMarshaller.ConfigureTypes();
            LedgerKeyGrpcMarshaller.ConfigureTypes();
            LedgerSCPMessagesGrpcMarshaller.ConfigureTypes();
            LedgerUpgradeGrpcMarshaller.ConfigureTypes();
            LedgerUpgradeTypeGrpcMarshaller.ConfigureTypes();
            LiabilitiesGrpcMarshaller.ConfigureTypes();
            LiquidityPoolConstantProductParametersGrpcMarshaller.ConfigureTypes();
            LiquidityPoolDepositOpGrpcMarshaller.ConfigureTypes();
            LiquidityPoolDepositResultGrpcMarshaller.ConfigureTypes();
            LiquidityPoolDepositResultCodeGrpcMarshaller.ConfigureTypes();
            LiquidityPoolEntryGrpcMarshaller.ConfigureTypes();
            LiquidityPoolParametersGrpcMarshaller.ConfigureTypes();
            LiquidityPoolTypeGrpcMarshaller.ConfigureTypes();
            LiquidityPoolWithdrawOpGrpcMarshaller.ConfigureTypes();
            LiquidityPoolWithdrawResultGrpcMarshaller.ConfigureTypes();
            LiquidityPoolWithdrawResultCodeGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferOpGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferResultGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferResultCodeGrpcMarshaller.ConfigureTypes();
            ManageDataOpGrpcMarshaller.ConfigureTypes();
            ManageDataResultGrpcMarshaller.ConfigureTypes();
            ManageDataResultCodeGrpcMarshaller.ConfigureTypes();
            ManageOfferEffectGrpcMarshaller.ConfigureTypes();
            ManageOfferSuccessResultGrpcMarshaller.ConfigureTypes();
            ManageSellOfferOpGrpcMarshaller.ConfigureTypes();
            ManageSellOfferResultGrpcMarshaller.ConfigureTypes();
            ManageSellOfferResultCodeGrpcMarshaller.ConfigureTypes();
            MemoGrpcMarshaller.ConfigureTypes();
            MemoTypeGrpcMarshaller.ConfigureTypes();
            MessageTypeGrpcMarshaller.ConfigureTypes();
            MuxedAccountGrpcMarshaller.ConfigureTypes();
            NodeIDGrpcMarshaller.ConfigureTypes();
            NonexistenceProofBodyGrpcMarshaller.ConfigureTypes();
            OfferEntryGrpcMarshaller.ConfigureTypes();
            OfferEntryFlagsGrpcMarshaller.ConfigureTypes();
            OperationGrpcMarshaller.ConfigureTypes();
            OperationMetaGrpcMarshaller.ConfigureTypes();
            OperationResultGrpcMarshaller.ConfigureTypes();
            OperationResultCodeGrpcMarshaller.ConfigureTypes();
            OperationTypeGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveOpGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveResultGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveResultCodeGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendOpGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendResultGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendResultCodeGrpcMarshaller.ConfigureTypes();
            PaymentOpGrpcMarshaller.ConfigureTypes();
            PaymentResultGrpcMarshaller.ConfigureTypes();
            PaymentResultCodeGrpcMarshaller.ConfigureTypes();
            PeerAddressGrpcMarshaller.ConfigureTypes();
            PeerStatListGrpcMarshaller.ConfigureTypes();
            PeerStatsGrpcMarshaller.ConfigureTypes();
            PersistedSCPStateGrpcMarshaller.ConfigureTypes();
            PersistedSCPStateV0GrpcMarshaller.ConfigureTypes();
            PersistedSCPStateV1GrpcMarshaller.ConfigureTypes();
            PoolIDGrpcMarshaller.ConfigureTypes();
            PreconditionsGrpcMarshaller.ConfigureTypes();
            PreconditionsV2GrpcMarshaller.ConfigureTypes();
            PreconditionTypeGrpcMarshaller.ConfigureTypes();
            PriceGrpcMarshaller.ConfigureTypes();
            ProofLevelGrpcMarshaller.ConfigureTypes();
            PublicKeyGrpcMarshaller.ConfigureTypes();
            PublicKeyTypeGrpcMarshaller.ConfigureTypes();
            RestoreFootprintOpGrpcMarshaller.ConfigureTypes();
            RestoreFootprintResultGrpcMarshaller.ConfigureTypes();
            RestoreFootprintResultCodeGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipOpGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipResultGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipResultCodeGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipTypeGrpcMarshaller.ConfigureTypes();
            SCAddressGrpcMarshaller.ConfigureTypes();
            SCAddressTypeGrpcMarshaller.ConfigureTypes();
            SCBytesGrpcMarshaller.ConfigureTypes();
            SCContractInstanceGrpcMarshaller.ConfigureTypes();
            SCEnvMetaEntryGrpcMarshaller.ConfigureTypes();
            SCEnvMetaKindGrpcMarshaller.ConfigureTypes();
            SCErrorGrpcMarshaller.ConfigureTypes();
            SCErrorCodeGrpcMarshaller.ConfigureTypes();
            SCErrorTypeGrpcMarshaller.ConfigureTypes();
            SCMapGrpcMarshaller.ConfigureTypes();
            SCMapEntryGrpcMarshaller.ConfigureTypes();
            SCMetaEntryGrpcMarshaller.ConfigureTypes();
            SCMetaKindGrpcMarshaller.ConfigureTypes();
            SCMetaV0GrpcMarshaller.ConfigureTypes();
            SCNonceKeyGrpcMarshaller.ConfigureTypes();
            SCPBallotGrpcMarshaller.ConfigureTypes();
            SCPEnvelopeGrpcMarshaller.ConfigureTypes();
            SCPHistoryEntryGrpcMarshaller.ConfigureTypes();
            SCPHistoryEntryV0GrpcMarshaller.ConfigureTypes();
            SCPNominationGrpcMarshaller.ConfigureTypes();
            SCPQuorumSetGrpcMarshaller.ConfigureTypes();
            SCPStatementGrpcMarshaller.ConfigureTypes();
            SCPStatementTypeGrpcMarshaller.ConfigureTypes();
            SCSpecEntryGrpcMarshaller.ConfigureTypes();
            SCSpecEntryKindGrpcMarshaller.ConfigureTypes();
            SCSpecFunctionInputV0GrpcMarshaller.ConfigureTypes();
            SCSpecFunctionV0GrpcMarshaller.ConfigureTypes();
            SCSpecTypeGrpcMarshaller.ConfigureTypes();
            SCSpecTypeBytesNGrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefGrpcMarshaller.ConfigureTypes();
            SCSpecTypeMapGrpcMarshaller.ConfigureTypes();
            SCSpecTypeOptionGrpcMarshaller.ConfigureTypes();
            SCSpecTypeResultGrpcMarshaller.ConfigureTypes();
            SCSpecTypeTupleGrpcMarshaller.ConfigureTypes();
            SCSpecTypeUDTGrpcMarshaller.ConfigureTypes();
            SCSpecTypeVecGrpcMarshaller.ConfigureTypes();
            SCSpecUDTEnumCaseV0GrpcMarshaller.ConfigureTypes();
            SCSpecUDTEnumV0GrpcMarshaller.ConfigureTypes();
            SCSpecUDTErrorEnumCaseV0GrpcMarshaller.ConfigureTypes();
            SCSpecUDTErrorEnumV0GrpcMarshaller.ConfigureTypes();
            SCSpecUDTStructFieldV0GrpcMarshaller.ConfigureTypes();
            SCSpecUDTStructV0GrpcMarshaller.ConfigureTypes();
            SCSpecUDTUnionCaseTupleV0GrpcMarshaller.ConfigureTypes();
            SCSpecUDTUnionCaseV0GrpcMarshaller.ConfigureTypes();
            SCSpecUDTUnionCaseV0KindGrpcMarshaller.ConfigureTypes();
            SCSpecUDTUnionCaseVoidV0GrpcMarshaller.ConfigureTypes();
            SCSpecUDTUnionV0GrpcMarshaller.ConfigureTypes();
            SCStringGrpcMarshaller.ConfigureTypes();
            SCSymbolGrpcMarshaller.ConfigureTypes();
            SCValGrpcMarshaller.ConfigureTypes();
            SCValTypeGrpcMarshaller.ConfigureTypes();
            SCVecGrpcMarshaller.ConfigureTypes();
            SendMoreGrpcMarshaller.ConfigureTypes();
            SendMoreExtendedGrpcMarshaller.ConfigureTypes();
            SequenceNumberGrpcMarshaller.ConfigureTypes();
            SerializedBinaryFuseFilterGrpcMarshaller.ConfigureTypes();
            SetOptionsOpGrpcMarshaller.ConfigureTypes();
            SetOptionsResultGrpcMarshaller.ConfigureTypes();
            SetOptionsResultCodeGrpcMarshaller.ConfigureTypes();
            SetTrustLineFlagsOpGrpcMarshaller.ConfigureTypes();
            SetTrustLineFlagsResultGrpcMarshaller.ConfigureTypes();
            SetTrustLineFlagsResultCodeGrpcMarshaller.ConfigureTypes();
            ShortHashSeedGrpcMarshaller.ConfigureTypes();
            SignatureGrpcMarshaller.ConfigureTypes();
            SignatureHintGrpcMarshaller.ConfigureTypes();
            SignedSurveyRequestMessageGrpcMarshaller.ConfigureTypes();
            SignedSurveyResponseMessageGrpcMarshaller.ConfigureTypes();
            SignedTimeSlicedSurveyRequestMessageGrpcMarshaller.ConfigureTypes();
            SignedTimeSlicedSurveyResponseMessageGrpcMarshaller.ConfigureTypes();
            SignedTimeSlicedSurveyStartCollectingMessageGrpcMarshaller.ConfigureTypes();
            SignedTimeSlicedSurveyStopCollectingMessageGrpcMarshaller.ConfigureTypes();
            SignerGrpcMarshaller.ConfigureTypes();
            SignerKeyGrpcMarshaller.ConfigureTypes();
            SignerKeyTypeGrpcMarshaller.ConfigureTypes();
            SimplePaymentResultGrpcMarshaller.ConfigureTypes();
            SorobanAddressCredentialsGrpcMarshaller.ConfigureTypes();
            SorobanAuthorizationEntryGrpcMarshaller.ConfigureTypes();
            SorobanAuthorizedFunctionGrpcMarshaller.ConfigureTypes();
            SorobanAuthorizedFunctionTypeGrpcMarshaller.ConfigureTypes();
            SorobanAuthorizedInvocationGrpcMarshaller.ConfigureTypes();
            SorobanCredentialsGrpcMarshaller.ConfigureTypes();
            SorobanCredentialsTypeGrpcMarshaller.ConfigureTypes();
            SorobanResourcesGrpcMarshaller.ConfigureTypes();
            SorobanTransactionDataGrpcMarshaller.ConfigureTypes();
            SorobanTransactionMetaGrpcMarshaller.ConfigureTypes();
            SorobanTransactionMetaExtGrpcMarshaller.ConfigureTypes();
            SorobanTransactionMetaExtV1GrpcMarshaller.ConfigureTypes();
            SponsorshipDescriptorGrpcMarshaller.ConfigureTypes();
            StateArchivalSettingsGrpcMarshaller.ConfigureTypes();
            StellarMessageGrpcMarshaller.ConfigureTypes();
            StellarValueGrpcMarshaller.ConfigureTypes();
            StellarValueTypeGrpcMarshaller.ConfigureTypes();
            StoredDebugTransactionSetGrpcMarshaller.ConfigureTypes();
            StoredTransactionSetGrpcMarshaller.ConfigureTypes();
            string32GrpcMarshaller.ConfigureTypes();
            string64GrpcMarshaller.ConfigureTypes();
            SurveyMessageCommandTypeGrpcMarshaller.ConfigureTypes();
            SurveyMessageResponseTypeGrpcMarshaller.ConfigureTypes();
            SurveyRequestMessageGrpcMarshaller.ConfigureTypes();
            SurveyResponseBodyGrpcMarshaller.ConfigureTypes();
            SurveyResponseMessageGrpcMarshaller.ConfigureTypes();
            ThresholdIndexesGrpcMarshaller.ConfigureTypes();
            ThresholdsGrpcMarshaller.ConfigureTypes();
            TimeBoundsGrpcMarshaller.ConfigureTypes();
            TimePointGrpcMarshaller.ConfigureTypes();
            TimeSlicedNodeDataGrpcMarshaller.ConfigureTypes();
            TimeSlicedPeerDataGrpcMarshaller.ConfigureTypes();
            TimeSlicedPeerDataListGrpcMarshaller.ConfigureTypes();
            TimeSlicedSurveyRequestMessageGrpcMarshaller.ConfigureTypes();
            TimeSlicedSurveyResponseMessageGrpcMarshaller.ConfigureTypes();
            TimeSlicedSurveyStartCollectingMessageGrpcMarshaller.ConfigureTypes();
            TimeSlicedSurveyStopCollectingMessageGrpcMarshaller.ConfigureTypes();
            TopologyResponseBodyV0GrpcMarshaller.ConfigureTypes();
            TopologyResponseBodyV1GrpcMarshaller.ConfigureTypes();
            TopologyResponseBodyV2GrpcMarshaller.ConfigureTypes();
            TransactionGrpcMarshaller.ConfigureTypes();
            TransactionEnvelopeGrpcMarshaller.ConfigureTypes();
            TransactionHistoryEntryGrpcMarshaller.ConfigureTypes();
            TransactionHistoryResultEntryGrpcMarshaller.ConfigureTypes();
            TransactionMetaGrpcMarshaller.ConfigureTypes();
            TransactionMetaV1GrpcMarshaller.ConfigureTypes();
            TransactionMetaV2GrpcMarshaller.ConfigureTypes();
            TransactionMetaV3GrpcMarshaller.ConfigureTypes();
            TransactionPhaseGrpcMarshaller.ConfigureTypes();
            TransactionResultGrpcMarshaller.ConfigureTypes();
            TransactionResultCodeGrpcMarshaller.ConfigureTypes();
            TransactionResultMetaGrpcMarshaller.ConfigureTypes();
            TransactionResultPairGrpcMarshaller.ConfigureTypes();
            TransactionResultSetGrpcMarshaller.ConfigureTypes();
            TransactionSetGrpcMarshaller.ConfigureTypes();
            TransactionSetV1GrpcMarshaller.ConfigureTypes();
            TransactionSignaturePayloadGrpcMarshaller.ConfigureTypes();
            TransactionV0GrpcMarshaller.ConfigureTypes();
            TransactionV0EnvelopeGrpcMarshaller.ConfigureTypes();
            TransactionV1EnvelopeGrpcMarshaller.ConfigureTypes();
            TrustLineAssetGrpcMarshaller.ConfigureTypes();
            TrustLineEntryGrpcMarshaller.ConfigureTypes();
            TrustLineEntryExtensionV2GrpcMarshaller.ConfigureTypes();
            TrustLineFlagsGrpcMarshaller.ConfigureTypes();
            TTLEntryGrpcMarshaller.ConfigureTypes();
            TxAdvertVectorGrpcMarshaller.ConfigureTypes();
            TxDemandVectorGrpcMarshaller.ConfigureTypes();
            TxSetComponentGrpcMarshaller.ConfigureTypes();
            TxSetComponentTypeGrpcMarshaller.ConfigureTypes();
            UInt128PartsGrpcMarshaller.ConfigureTypes();
            uint256GrpcMarshaller.ConfigureTypes();
            UInt256PartsGrpcMarshaller.ConfigureTypes();
            uint32GrpcMarshaller.ConfigureTypes();
            uint64GrpcMarshaller.ConfigureTypes();
            UpgradeEntryMetaGrpcMarshaller.ConfigureTypes();
            UpgradeTypeGrpcMarshaller.ConfigureTypes();
            ValueGrpcMarshaller.ConfigureTypes();
            ConfigSettingContractExecutionLanesV0EncodeRequestGrpcMarshaller.ConfigureTypes();
            ConfigSettingContractExecutionLanesV0EncodeResponseGrpcMarshaller.ConfigureTypes();
            ConfigSettingContractExecutionLanesV0DecodeRequestGrpcMarshaller.ConfigureTypes();
            ConfigSettingContractExecutionLanesV0DecodeResponseGrpcMarshaller.ConfigureTypes();
            ConfigSettingContractComputeV0EncodeRequestGrpcMarshaller.ConfigureTypes();
            ConfigSettingContractComputeV0EncodeResponseGrpcMarshaller.ConfigureTypes();
            ConfigSettingContractComputeV0DecodeRequestGrpcMarshaller.ConfigureTypes();
            ConfigSettingContractComputeV0DecodeResponseGrpcMarshaller.ConfigureTypes();
            ConfigSettingContractLedgerCostV0EncodeRequestGrpcMarshaller.ConfigureTypes();
            ConfigSettingContractLedgerCostV0EncodeResponseGrpcMarshaller.ConfigureTypes();
            ConfigSettingContractLedgerCostV0DecodeRequestGrpcMarshaller.ConfigureTypes();
            ConfigSettingContractLedgerCostV0DecodeResponseGrpcMarshaller.ConfigureTypes();
            ConfigSettingContractHistoricalDataV0EncodeRequestGrpcMarshaller.ConfigureTypes();
            ConfigSettingContractHistoricalDataV0EncodeResponseGrpcMarshaller.ConfigureTypes();
            ConfigSettingContractHistoricalDataV0DecodeRequestGrpcMarshaller.ConfigureTypes();
            ConfigSettingContractHistoricalDataV0DecodeResponseGrpcMarshaller.ConfigureTypes();
            ConfigSettingContractEventsV0EncodeRequestGrpcMarshaller.ConfigureTypes();
            ConfigSettingContractEventsV0EncodeResponseGrpcMarshaller.ConfigureTypes();
            ConfigSettingContractEventsV0DecodeRequestGrpcMarshaller.ConfigureTypes();
            ConfigSettingContractEventsV0DecodeResponseGrpcMarshaller.ConfigureTypes();
            ConfigSettingContractBandwidthV0EncodeRequestGrpcMarshaller.ConfigureTypes();
            ConfigSettingContractBandwidthV0EncodeResponseGrpcMarshaller.ConfigureTypes();
            ConfigSettingContractBandwidthV0DecodeRequestGrpcMarshaller.ConfigureTypes();
            ConfigSettingContractBandwidthV0DecodeResponseGrpcMarshaller.ConfigureTypes();
            ContractCostTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            ContractCostTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            ContractCostTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            ContractCostTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            ContractCostParamEntryEncodeRequestGrpcMarshaller.ConfigureTypes();
            ContractCostParamEntryEncodeResponseGrpcMarshaller.ConfigureTypes();
            ContractCostParamEntryDecodeRequestGrpcMarshaller.ConfigureTypes();
            ContractCostParamEntryDecodeResponseGrpcMarshaller.ConfigureTypes();
            StateArchivalSettingsEncodeRequestGrpcMarshaller.ConfigureTypes();
            StateArchivalSettingsEncodeResponseGrpcMarshaller.ConfigureTypes();
            StateArchivalSettingsDecodeRequestGrpcMarshaller.ConfigureTypes();
            StateArchivalSettingsDecodeResponseGrpcMarshaller.ConfigureTypes();
            EvictionIteratorEncodeRequestGrpcMarshaller.ConfigureTypes();
            EvictionIteratorEncodeResponseGrpcMarshaller.ConfigureTypes();
            EvictionIteratorDecodeRequestGrpcMarshaller.ConfigureTypes();
            EvictionIteratorDecodeResponseGrpcMarshaller.ConfigureTypes();
            ContractCostParamsEncodeRequestGrpcMarshaller.ConfigureTypes();
            ContractCostParamsEncodeResponseGrpcMarshaller.ConfigureTypes();
            ContractCostParamsDecodeRequestGrpcMarshaller.ConfigureTypes();
            ContractCostParamsDecodeResponseGrpcMarshaller.ConfigureTypes();
            ConfigSettingIDEncodeRequestGrpcMarshaller.ConfigureTypes();
            ConfigSettingIDEncodeResponseGrpcMarshaller.ConfigureTypes();
            ConfigSettingIDDecodeRequestGrpcMarshaller.ConfigureTypes();
            ConfigSettingIDDecodeResponseGrpcMarshaller.ConfigureTypes();
            ConfigSettingEntryEncodeRequestGrpcMarshaller.ConfigureTypes();
            ConfigSettingEntryEncodeResponseGrpcMarshaller.ConfigureTypes();
            ConfigSettingEntryDecodeRequestGrpcMarshaller.ConfigureTypes();
            ConfigSettingEntryDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCEnvMetaKindEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCEnvMetaKindEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCEnvMetaKindDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCEnvMetaKindDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCEnvMetaEntryEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCEnvMetaEntryEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCEnvMetaEntryDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCEnvMetaEntryDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCMetaV0EncodeRequestGrpcMarshaller.ConfigureTypes();
            SCMetaV0EncodeResponseGrpcMarshaller.ConfigureTypes();
            SCMetaV0DecodeRequestGrpcMarshaller.ConfigureTypes();
            SCMetaV0DecodeResponseGrpcMarshaller.ConfigureTypes();
            SCMetaKindEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCMetaKindEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCMetaKindDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCMetaKindDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCMetaEntryEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCMetaEntryEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCMetaEntryDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCMetaEntryDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecTypeOptionEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecTypeOptionEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecTypeOptionDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecTypeOptionDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecTypeResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecTypeResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecTypeResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecTypeResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecTypeVecEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecTypeVecEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecTypeVecDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecTypeVecDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecTypeMapEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecTypeMapEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecTypeMapDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecTypeMapDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecTypeTupleEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecTypeTupleEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecTypeTupleDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecTypeTupleDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecTypeBytesNEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecTypeBytesNEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecTypeBytesNDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecTypeBytesNDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecTypeUDTEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecTypeUDTEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecTypeUDTDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecTypeUDTDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecUDTStructFieldV0EncodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecUDTStructFieldV0EncodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecUDTStructFieldV0DecodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecUDTStructFieldV0DecodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecUDTStructV0EncodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecUDTStructV0EncodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecUDTStructV0DecodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecUDTStructV0DecodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecUDTUnionCaseVoidV0EncodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecUDTUnionCaseVoidV0EncodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecUDTUnionCaseVoidV0DecodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecUDTUnionCaseVoidV0DecodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecUDTUnionCaseTupleV0EncodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecUDTUnionCaseTupleV0EncodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecUDTUnionCaseTupleV0DecodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecUDTUnionCaseTupleV0DecodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecUDTUnionCaseV0KindEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecUDTUnionCaseV0KindEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecUDTUnionCaseV0KindDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecUDTUnionCaseV0KindDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecUDTUnionCaseV0EncodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecUDTUnionCaseV0EncodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecUDTUnionCaseV0DecodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecUDTUnionCaseV0DecodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecUDTUnionV0EncodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecUDTUnionV0EncodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecUDTUnionV0DecodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecUDTUnionV0DecodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecUDTEnumCaseV0EncodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecUDTEnumCaseV0EncodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecUDTEnumCaseV0DecodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecUDTEnumCaseV0DecodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecUDTEnumV0EncodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecUDTEnumV0EncodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecUDTEnumV0DecodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecUDTEnumV0DecodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecUDTErrorEnumCaseV0EncodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecUDTErrorEnumCaseV0EncodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecUDTErrorEnumCaseV0DecodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecUDTErrorEnumCaseV0DecodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecUDTErrorEnumV0EncodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecUDTErrorEnumV0EncodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecUDTErrorEnumV0DecodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecUDTErrorEnumV0DecodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecFunctionInputV0EncodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecFunctionInputV0EncodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecFunctionInputV0DecodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecFunctionInputV0DecodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecFunctionV0EncodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecFunctionV0EncodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecFunctionV0DecodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecFunctionV0DecodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecEntryKindEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecEntryKindEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecEntryKindDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecEntryKindDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecEntryEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecEntryEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCSpecEntryDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCSpecEntryDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCValTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCValTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCValTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCValTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCErrorTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCErrorTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCErrorTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCErrorTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCErrorCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCErrorCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCErrorCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCErrorCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCErrorEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCErrorEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCErrorDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCErrorDecodeResponseGrpcMarshaller.ConfigureTypes();
            UInt128PartsEncodeRequestGrpcMarshaller.ConfigureTypes();
            UInt128PartsEncodeResponseGrpcMarshaller.ConfigureTypes();
            UInt128PartsDecodeRequestGrpcMarshaller.ConfigureTypes();
            UInt128PartsDecodeResponseGrpcMarshaller.ConfigureTypes();
            Int128PartsEncodeRequestGrpcMarshaller.ConfigureTypes();
            Int128PartsEncodeResponseGrpcMarshaller.ConfigureTypes();
            Int128PartsDecodeRequestGrpcMarshaller.ConfigureTypes();
            Int128PartsDecodeResponseGrpcMarshaller.ConfigureTypes();
            UInt256PartsEncodeRequestGrpcMarshaller.ConfigureTypes();
            UInt256PartsEncodeResponseGrpcMarshaller.ConfigureTypes();
            UInt256PartsDecodeRequestGrpcMarshaller.ConfigureTypes();
            UInt256PartsDecodeResponseGrpcMarshaller.ConfigureTypes();
            Int256PartsEncodeRequestGrpcMarshaller.ConfigureTypes();
            Int256PartsEncodeResponseGrpcMarshaller.ConfigureTypes();
            Int256PartsDecodeRequestGrpcMarshaller.ConfigureTypes();
            Int256PartsDecodeResponseGrpcMarshaller.ConfigureTypes();
            ContractExecutableTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            ContractExecutableTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            ContractExecutableTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            ContractExecutableTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            ContractExecutableEncodeRequestGrpcMarshaller.ConfigureTypes();
            ContractExecutableEncodeResponseGrpcMarshaller.ConfigureTypes();
            ContractExecutableDecodeRequestGrpcMarshaller.ConfigureTypes();
            ContractExecutableDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCAddressTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCAddressTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCAddressTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCAddressTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCAddressEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCAddressEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCAddressDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCAddressDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCVecEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCVecEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCVecDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCVecDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCMapEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCMapEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCMapDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCMapDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCBytesEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCBytesEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCBytesDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCBytesDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCStringEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCStringEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCStringDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCStringDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCSymbolEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCSymbolEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCSymbolDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCSymbolDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCNonceKeyEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCNonceKeyEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCNonceKeyDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCNonceKeyDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCContractInstanceEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCContractInstanceEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCContractInstanceDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCContractInstanceDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCValEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCValEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCValDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCValDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCMapEntryEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCMapEntryEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCMapEntryDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCMapEntryDecodeResponseGrpcMarshaller.ConfigureTypes();
            StoredTransactionSetEncodeRequestGrpcMarshaller.ConfigureTypes();
            StoredTransactionSetEncodeResponseGrpcMarshaller.ConfigureTypes();
            StoredTransactionSetDecodeRequestGrpcMarshaller.ConfigureTypes();
            StoredTransactionSetDecodeResponseGrpcMarshaller.ConfigureTypes();
            StoredDebugTransactionSetEncodeRequestGrpcMarshaller.ConfigureTypes();
            StoredDebugTransactionSetEncodeResponseGrpcMarshaller.ConfigureTypes();
            StoredDebugTransactionSetDecodeRequestGrpcMarshaller.ConfigureTypes();
            StoredDebugTransactionSetDecodeResponseGrpcMarshaller.ConfigureTypes();
            PersistedSCPStateV0EncodeRequestGrpcMarshaller.ConfigureTypes();
            PersistedSCPStateV0EncodeResponseGrpcMarshaller.ConfigureTypes();
            PersistedSCPStateV0DecodeRequestGrpcMarshaller.ConfigureTypes();
            PersistedSCPStateV0DecodeResponseGrpcMarshaller.ConfigureTypes();
            PersistedSCPStateV1EncodeRequestGrpcMarshaller.ConfigureTypes();
            PersistedSCPStateV1EncodeResponseGrpcMarshaller.ConfigureTypes();
            PersistedSCPStateV1DecodeRequestGrpcMarshaller.ConfigureTypes();
            PersistedSCPStateV1DecodeResponseGrpcMarshaller.ConfigureTypes();
            PersistedSCPStateEncodeRequestGrpcMarshaller.ConfigureTypes();
            PersistedSCPStateEncodeResponseGrpcMarshaller.ConfigureTypes();
            PersistedSCPStateDecodeRequestGrpcMarshaller.ConfigureTypes();
            PersistedSCPStateDecodeResponseGrpcMarshaller.ConfigureTypes();
            ThresholdsEncodeRequestGrpcMarshaller.ConfigureTypes();
            ThresholdsEncodeResponseGrpcMarshaller.ConfigureTypes();
            ThresholdsDecodeRequestGrpcMarshaller.ConfigureTypes();
            ThresholdsDecodeResponseGrpcMarshaller.ConfigureTypes();
            string32EncodeRequestGrpcMarshaller.ConfigureTypes();
            string32EncodeResponseGrpcMarshaller.ConfigureTypes();
            string32DecodeRequestGrpcMarshaller.ConfigureTypes();
            string32DecodeResponseGrpcMarshaller.ConfigureTypes();
            string64EncodeRequestGrpcMarshaller.ConfigureTypes();
            string64EncodeResponseGrpcMarshaller.ConfigureTypes();
            string64DecodeRequestGrpcMarshaller.ConfigureTypes();
            string64DecodeResponseGrpcMarshaller.ConfigureTypes();
            SequenceNumberEncodeRequestGrpcMarshaller.ConfigureTypes();
            SequenceNumberEncodeResponseGrpcMarshaller.ConfigureTypes();
            SequenceNumberDecodeRequestGrpcMarshaller.ConfigureTypes();
            SequenceNumberDecodeResponseGrpcMarshaller.ConfigureTypes();
            DataValueEncodeRequestGrpcMarshaller.ConfigureTypes();
            DataValueEncodeResponseGrpcMarshaller.ConfigureTypes();
            DataValueDecodeRequestGrpcMarshaller.ConfigureTypes();
            DataValueDecodeResponseGrpcMarshaller.ConfigureTypes();
            PoolIDEncodeRequestGrpcMarshaller.ConfigureTypes();
            PoolIDEncodeResponseGrpcMarshaller.ConfigureTypes();
            PoolIDDecodeRequestGrpcMarshaller.ConfigureTypes();
            PoolIDDecodeResponseGrpcMarshaller.ConfigureTypes();
            AssetCode4EncodeRequestGrpcMarshaller.ConfigureTypes();
            AssetCode4EncodeResponseGrpcMarshaller.ConfigureTypes();
            AssetCode4DecodeRequestGrpcMarshaller.ConfigureTypes();
            AssetCode4DecodeResponseGrpcMarshaller.ConfigureTypes();
            AssetCode12EncodeRequestGrpcMarshaller.ConfigureTypes();
            AssetCode12EncodeResponseGrpcMarshaller.ConfigureTypes();
            AssetCode12DecodeRequestGrpcMarshaller.ConfigureTypes();
            AssetCode12DecodeResponseGrpcMarshaller.ConfigureTypes();
            AssetTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            AssetTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            AssetTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            AssetTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            AssetCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            AssetCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            AssetCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            AssetCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            AlphaNum4EncodeRequestGrpcMarshaller.ConfigureTypes();
            AlphaNum4EncodeResponseGrpcMarshaller.ConfigureTypes();
            AlphaNum4DecodeRequestGrpcMarshaller.ConfigureTypes();
            AlphaNum4DecodeResponseGrpcMarshaller.ConfigureTypes();
            AlphaNum12EncodeRequestGrpcMarshaller.ConfigureTypes();
            AlphaNum12EncodeResponseGrpcMarshaller.ConfigureTypes();
            AlphaNum12DecodeRequestGrpcMarshaller.ConfigureTypes();
            AlphaNum12DecodeResponseGrpcMarshaller.ConfigureTypes();
            AssetEncodeRequestGrpcMarshaller.ConfigureTypes();
            AssetEncodeResponseGrpcMarshaller.ConfigureTypes();
            AssetDecodeRequestGrpcMarshaller.ConfigureTypes();
            AssetDecodeResponseGrpcMarshaller.ConfigureTypes();
            PriceEncodeRequestGrpcMarshaller.ConfigureTypes();
            PriceEncodeResponseGrpcMarshaller.ConfigureTypes();
            PriceDecodeRequestGrpcMarshaller.ConfigureTypes();
            PriceDecodeResponseGrpcMarshaller.ConfigureTypes();
            LiabilitiesEncodeRequestGrpcMarshaller.ConfigureTypes();
            LiabilitiesEncodeResponseGrpcMarshaller.ConfigureTypes();
            LiabilitiesDecodeRequestGrpcMarshaller.ConfigureTypes();
            LiabilitiesDecodeResponseGrpcMarshaller.ConfigureTypes();
            ThresholdIndexesEncodeRequestGrpcMarshaller.ConfigureTypes();
            ThresholdIndexesEncodeResponseGrpcMarshaller.ConfigureTypes();
            ThresholdIndexesDecodeRequestGrpcMarshaller.ConfigureTypes();
            ThresholdIndexesDecodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerEntryTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerEntryTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerEntryTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerEntryTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            SignerEncodeRequestGrpcMarshaller.ConfigureTypes();
            SignerEncodeResponseGrpcMarshaller.ConfigureTypes();
            SignerDecodeRequestGrpcMarshaller.ConfigureTypes();
            SignerDecodeResponseGrpcMarshaller.ConfigureTypes();
            AccountFlagsEncodeRequestGrpcMarshaller.ConfigureTypes();
            AccountFlagsEncodeResponseGrpcMarshaller.ConfigureTypes();
            AccountFlagsDecodeRequestGrpcMarshaller.ConfigureTypes();
            AccountFlagsDecodeResponseGrpcMarshaller.ConfigureTypes();
            SponsorshipDescriptorEncodeRequestGrpcMarshaller.ConfigureTypes();
            SponsorshipDescriptorEncodeResponseGrpcMarshaller.ConfigureTypes();
            SponsorshipDescriptorDecodeRequestGrpcMarshaller.ConfigureTypes();
            SponsorshipDescriptorDecodeResponseGrpcMarshaller.ConfigureTypes();
            AccountEntryExtensionV3EncodeRequestGrpcMarshaller.ConfigureTypes();
            AccountEntryExtensionV3EncodeResponseGrpcMarshaller.ConfigureTypes();
            AccountEntryExtensionV3DecodeRequestGrpcMarshaller.ConfigureTypes();
            AccountEntryExtensionV3DecodeResponseGrpcMarshaller.ConfigureTypes();
            AccountEntryExtensionV2EncodeRequestGrpcMarshaller.ConfigureTypes();
            AccountEntryExtensionV2EncodeResponseGrpcMarshaller.ConfigureTypes();
            AccountEntryExtensionV2DecodeRequestGrpcMarshaller.ConfigureTypes();
            AccountEntryExtensionV2DecodeResponseGrpcMarshaller.ConfigureTypes();
            AccountEntryExtensionV1EncodeRequestGrpcMarshaller.ConfigureTypes();
            AccountEntryExtensionV1EncodeResponseGrpcMarshaller.ConfigureTypes();
            AccountEntryExtensionV1DecodeRequestGrpcMarshaller.ConfigureTypes();
            AccountEntryExtensionV1DecodeResponseGrpcMarshaller.ConfigureTypes();
            AccountEntryEncodeRequestGrpcMarshaller.ConfigureTypes();
            AccountEntryEncodeResponseGrpcMarshaller.ConfigureTypes();
            AccountEntryDecodeRequestGrpcMarshaller.ConfigureTypes();
            AccountEntryDecodeResponseGrpcMarshaller.ConfigureTypes();
            TrustLineFlagsEncodeRequestGrpcMarshaller.ConfigureTypes();
            TrustLineFlagsEncodeResponseGrpcMarshaller.ConfigureTypes();
            TrustLineFlagsDecodeRequestGrpcMarshaller.ConfigureTypes();
            TrustLineFlagsDecodeResponseGrpcMarshaller.ConfigureTypes();
            LiquidityPoolTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            LiquidityPoolTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            LiquidityPoolTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            LiquidityPoolTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            TrustLineAssetEncodeRequestGrpcMarshaller.ConfigureTypes();
            TrustLineAssetEncodeResponseGrpcMarshaller.ConfigureTypes();
            TrustLineAssetDecodeRequestGrpcMarshaller.ConfigureTypes();
            TrustLineAssetDecodeResponseGrpcMarshaller.ConfigureTypes();
            TrustLineEntryExtensionV2EncodeRequestGrpcMarshaller.ConfigureTypes();
            TrustLineEntryExtensionV2EncodeResponseGrpcMarshaller.ConfigureTypes();
            TrustLineEntryExtensionV2DecodeRequestGrpcMarshaller.ConfigureTypes();
            TrustLineEntryExtensionV2DecodeResponseGrpcMarshaller.ConfigureTypes();
            TrustLineEntryEncodeRequestGrpcMarshaller.ConfigureTypes();
            TrustLineEntryEncodeResponseGrpcMarshaller.ConfigureTypes();
            TrustLineEntryDecodeRequestGrpcMarshaller.ConfigureTypes();
            TrustLineEntryDecodeResponseGrpcMarshaller.ConfigureTypes();
            OfferEntryFlagsEncodeRequestGrpcMarshaller.ConfigureTypes();
            OfferEntryFlagsEncodeResponseGrpcMarshaller.ConfigureTypes();
            OfferEntryFlagsDecodeRequestGrpcMarshaller.ConfigureTypes();
            OfferEntryFlagsDecodeResponseGrpcMarshaller.ConfigureTypes();
            OfferEntryEncodeRequestGrpcMarshaller.ConfigureTypes();
            OfferEntryEncodeResponseGrpcMarshaller.ConfigureTypes();
            OfferEntryDecodeRequestGrpcMarshaller.ConfigureTypes();
            OfferEntryDecodeResponseGrpcMarshaller.ConfigureTypes();
            DataEntryEncodeRequestGrpcMarshaller.ConfigureTypes();
            DataEntryEncodeResponseGrpcMarshaller.ConfigureTypes();
            DataEntryDecodeRequestGrpcMarshaller.ConfigureTypes();
            DataEntryDecodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimPredicateTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimPredicateTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimPredicateTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimPredicateTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimPredicateEncodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimPredicateEncodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimPredicateDecodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimPredicateDecodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimantTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimantTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimantTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimantTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimantEncodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimantEncodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimantDecodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimantDecodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimableBalanceIDTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimableBalanceIDTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimableBalanceIDTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimableBalanceIDTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimableBalanceIDEncodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimableBalanceIDEncodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimableBalanceIDDecodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimableBalanceIDDecodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimableBalanceFlagsEncodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimableBalanceFlagsEncodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimableBalanceFlagsDecodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimableBalanceFlagsDecodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimableBalanceEntryExtensionV1EncodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimableBalanceEntryExtensionV1EncodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimableBalanceEntryExtensionV1DecodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimableBalanceEntryExtensionV1DecodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimableBalanceEntryEncodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimableBalanceEntryEncodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimableBalanceEntryDecodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimableBalanceEntryDecodeResponseGrpcMarshaller.ConfigureTypes();
            LiquidityPoolConstantProductParametersEncodeRequestGrpcMarshaller.ConfigureTypes();
            LiquidityPoolConstantProductParametersEncodeResponseGrpcMarshaller.ConfigureTypes();
            LiquidityPoolConstantProductParametersDecodeRequestGrpcMarshaller.ConfigureTypes();
            LiquidityPoolConstantProductParametersDecodeResponseGrpcMarshaller.ConfigureTypes();
            LiquidityPoolEntryEncodeRequestGrpcMarshaller.ConfigureTypes();
            LiquidityPoolEntryEncodeResponseGrpcMarshaller.ConfigureTypes();
            LiquidityPoolEntryDecodeRequestGrpcMarshaller.ConfigureTypes();
            LiquidityPoolEntryDecodeResponseGrpcMarshaller.ConfigureTypes();
            ContractDataDurabilityEncodeRequestGrpcMarshaller.ConfigureTypes();
            ContractDataDurabilityEncodeResponseGrpcMarshaller.ConfigureTypes();
            ContractDataDurabilityDecodeRequestGrpcMarshaller.ConfigureTypes();
            ContractDataDurabilityDecodeResponseGrpcMarshaller.ConfigureTypes();
            ContractDataEntryEncodeRequestGrpcMarshaller.ConfigureTypes();
            ContractDataEntryEncodeResponseGrpcMarshaller.ConfigureTypes();
            ContractDataEntryDecodeRequestGrpcMarshaller.ConfigureTypes();
            ContractDataEntryDecodeResponseGrpcMarshaller.ConfigureTypes();
            ContractCodeCostInputsEncodeRequestGrpcMarshaller.ConfigureTypes();
            ContractCodeCostInputsEncodeResponseGrpcMarshaller.ConfigureTypes();
            ContractCodeCostInputsDecodeRequestGrpcMarshaller.ConfigureTypes();
            ContractCodeCostInputsDecodeResponseGrpcMarshaller.ConfigureTypes();
            ContractCodeEntryEncodeRequestGrpcMarshaller.ConfigureTypes();
            ContractCodeEntryEncodeResponseGrpcMarshaller.ConfigureTypes();
            ContractCodeEntryDecodeRequestGrpcMarshaller.ConfigureTypes();
            ContractCodeEntryDecodeResponseGrpcMarshaller.ConfigureTypes();
            TTLEntryEncodeRequestGrpcMarshaller.ConfigureTypes();
            TTLEntryEncodeResponseGrpcMarshaller.ConfigureTypes();
            TTLEntryDecodeRequestGrpcMarshaller.ConfigureTypes();
            TTLEntryDecodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerEntryExtensionV1EncodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerEntryExtensionV1EncodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerEntryExtensionV1DecodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerEntryExtensionV1DecodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerEntryEncodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerEntryEncodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerEntryDecodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerEntryDecodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerKeyEncodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerKeyEncodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerKeyDecodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerKeyDecodeResponseGrpcMarshaller.ConfigureTypes();
            EnvelopeTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            EnvelopeTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            EnvelopeTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            EnvelopeTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            BucketListTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            BucketListTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            BucketListTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            BucketListTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            BucketEntryTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            BucketEntryTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            BucketEntryTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            BucketEntryTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            HotArchiveBucketEntryTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            HotArchiveBucketEntryTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            HotArchiveBucketEntryTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            HotArchiveBucketEntryTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            ColdArchiveBucketEntryTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            ColdArchiveBucketEntryTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            ColdArchiveBucketEntryTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            ColdArchiveBucketEntryTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            BucketMetadataEncodeRequestGrpcMarshaller.ConfigureTypes();
            BucketMetadataEncodeResponseGrpcMarshaller.ConfigureTypes();
            BucketMetadataDecodeRequestGrpcMarshaller.ConfigureTypes();
            BucketMetadataDecodeResponseGrpcMarshaller.ConfigureTypes();
            BucketEntryEncodeRequestGrpcMarshaller.ConfigureTypes();
            BucketEntryEncodeResponseGrpcMarshaller.ConfigureTypes();
            BucketEntryDecodeRequestGrpcMarshaller.ConfigureTypes();
            BucketEntryDecodeResponseGrpcMarshaller.ConfigureTypes();
            HotArchiveBucketEntryEncodeRequestGrpcMarshaller.ConfigureTypes();
            HotArchiveBucketEntryEncodeResponseGrpcMarshaller.ConfigureTypes();
            HotArchiveBucketEntryDecodeRequestGrpcMarshaller.ConfigureTypes();
            HotArchiveBucketEntryDecodeResponseGrpcMarshaller.ConfigureTypes();
            ColdArchiveArchivedLeafEncodeRequestGrpcMarshaller.ConfigureTypes();
            ColdArchiveArchivedLeafEncodeResponseGrpcMarshaller.ConfigureTypes();
            ColdArchiveArchivedLeafDecodeRequestGrpcMarshaller.ConfigureTypes();
            ColdArchiveArchivedLeafDecodeResponseGrpcMarshaller.ConfigureTypes();
            ColdArchiveDeletedLeafEncodeRequestGrpcMarshaller.ConfigureTypes();
            ColdArchiveDeletedLeafEncodeResponseGrpcMarshaller.ConfigureTypes();
            ColdArchiveDeletedLeafDecodeRequestGrpcMarshaller.ConfigureTypes();
            ColdArchiveDeletedLeafDecodeResponseGrpcMarshaller.ConfigureTypes();
            ColdArchiveBoundaryLeafEncodeRequestGrpcMarshaller.ConfigureTypes();
            ColdArchiveBoundaryLeafEncodeResponseGrpcMarshaller.ConfigureTypes();
            ColdArchiveBoundaryLeafDecodeRequestGrpcMarshaller.ConfigureTypes();
            ColdArchiveBoundaryLeafDecodeResponseGrpcMarshaller.ConfigureTypes();
            ColdArchiveHashEntryEncodeRequestGrpcMarshaller.ConfigureTypes();
            ColdArchiveHashEntryEncodeResponseGrpcMarshaller.ConfigureTypes();
            ColdArchiveHashEntryDecodeRequestGrpcMarshaller.ConfigureTypes();
            ColdArchiveHashEntryDecodeResponseGrpcMarshaller.ConfigureTypes();
            ColdArchiveBucketEntryEncodeRequestGrpcMarshaller.ConfigureTypes();
            ColdArchiveBucketEntryEncodeResponseGrpcMarshaller.ConfigureTypes();
            ColdArchiveBucketEntryDecodeRequestGrpcMarshaller.ConfigureTypes();
            ColdArchiveBucketEntryDecodeResponseGrpcMarshaller.ConfigureTypes();
            UpgradeTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            UpgradeTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            UpgradeTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            UpgradeTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            StellarValueTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            StellarValueTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            StellarValueTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            StellarValueTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerCloseValueSignatureEncodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerCloseValueSignatureEncodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerCloseValueSignatureDecodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerCloseValueSignatureDecodeResponseGrpcMarshaller.ConfigureTypes();
            StellarValueEncodeRequestGrpcMarshaller.ConfigureTypes();
            StellarValueEncodeResponseGrpcMarshaller.ConfigureTypes();
            StellarValueDecodeRequestGrpcMarshaller.ConfigureTypes();
            StellarValueDecodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerHeaderFlagsEncodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerHeaderFlagsEncodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerHeaderFlagsDecodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerHeaderFlagsDecodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerHeaderExtensionV1EncodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerHeaderExtensionV1EncodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerHeaderExtensionV1DecodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerHeaderExtensionV1DecodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerHeaderEncodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerHeaderEncodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerHeaderDecodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerHeaderDecodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerUpgradeTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerUpgradeTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerUpgradeTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerUpgradeTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            ConfigUpgradeSetKeyEncodeRequestGrpcMarshaller.ConfigureTypes();
            ConfigUpgradeSetKeyEncodeResponseGrpcMarshaller.ConfigureTypes();
            ConfigUpgradeSetKeyDecodeRequestGrpcMarshaller.ConfigureTypes();
            ConfigUpgradeSetKeyDecodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerUpgradeEncodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerUpgradeEncodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerUpgradeDecodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerUpgradeDecodeResponseGrpcMarshaller.ConfigureTypes();
            ConfigUpgradeSetEncodeRequestGrpcMarshaller.ConfigureTypes();
            ConfigUpgradeSetEncodeResponseGrpcMarshaller.ConfigureTypes();
            ConfigUpgradeSetDecodeRequestGrpcMarshaller.ConfigureTypes();
            ConfigUpgradeSetDecodeResponseGrpcMarshaller.ConfigureTypes();
            TxSetComponentTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            TxSetComponentTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            TxSetComponentTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            TxSetComponentTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            TxSetComponentEncodeRequestGrpcMarshaller.ConfigureTypes();
            TxSetComponentEncodeResponseGrpcMarshaller.ConfigureTypes();
            TxSetComponentDecodeRequestGrpcMarshaller.ConfigureTypes();
            TxSetComponentDecodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionPhaseEncodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionPhaseEncodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionPhaseDecodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionPhaseDecodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionSetEncodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionSetEncodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionSetDecodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionSetDecodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionSetV1EncodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionSetV1EncodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionSetV1DecodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionSetV1DecodeResponseGrpcMarshaller.ConfigureTypes();
            GeneralizedTransactionSetEncodeRequestGrpcMarshaller.ConfigureTypes();
            GeneralizedTransactionSetEncodeResponseGrpcMarshaller.ConfigureTypes();
            GeneralizedTransactionSetDecodeRequestGrpcMarshaller.ConfigureTypes();
            GeneralizedTransactionSetDecodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionResultPairEncodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionResultPairEncodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionResultPairDecodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionResultPairDecodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionResultSetEncodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionResultSetEncodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionResultSetDecodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionResultSetDecodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionHistoryEntryEncodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionHistoryEntryEncodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionHistoryEntryDecodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionHistoryEntryDecodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionHistoryResultEntryEncodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionHistoryResultEntryEncodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionHistoryResultEntryDecodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionHistoryResultEntryDecodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerHeaderHistoryEntryEncodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerHeaderHistoryEntryEncodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerHeaderHistoryEntryDecodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerHeaderHistoryEntryDecodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerSCPMessagesEncodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerSCPMessagesEncodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerSCPMessagesDecodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerSCPMessagesDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCPHistoryEntryV0EncodeRequestGrpcMarshaller.ConfigureTypes();
            SCPHistoryEntryV0EncodeResponseGrpcMarshaller.ConfigureTypes();
            SCPHistoryEntryV0DecodeRequestGrpcMarshaller.ConfigureTypes();
            SCPHistoryEntryV0DecodeResponseGrpcMarshaller.ConfigureTypes();
            SCPHistoryEntryEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCPHistoryEntryEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCPHistoryEntryDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCPHistoryEntryDecodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerEntryChangeTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerEntryChangeTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerEntryChangeTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerEntryChangeTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerEntryChangeEncodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerEntryChangeEncodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerEntryChangeDecodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerEntryChangeDecodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerEntryChangesEncodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerEntryChangesEncodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerEntryChangesDecodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerEntryChangesDecodeResponseGrpcMarshaller.ConfigureTypes();
            OperationMetaEncodeRequestGrpcMarshaller.ConfigureTypes();
            OperationMetaEncodeResponseGrpcMarshaller.ConfigureTypes();
            OperationMetaDecodeRequestGrpcMarshaller.ConfigureTypes();
            OperationMetaDecodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionMetaV1EncodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionMetaV1EncodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionMetaV1DecodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionMetaV1DecodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionMetaV2EncodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionMetaV2EncodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionMetaV2DecodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionMetaV2DecodeResponseGrpcMarshaller.ConfigureTypes();
            ContractEventTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            ContractEventTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            ContractEventTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            ContractEventTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            ContractEventEncodeRequestGrpcMarshaller.ConfigureTypes();
            ContractEventEncodeResponseGrpcMarshaller.ConfigureTypes();
            ContractEventDecodeRequestGrpcMarshaller.ConfigureTypes();
            ContractEventDecodeResponseGrpcMarshaller.ConfigureTypes();
            DiagnosticEventEncodeRequestGrpcMarshaller.ConfigureTypes();
            DiagnosticEventEncodeResponseGrpcMarshaller.ConfigureTypes();
            DiagnosticEventDecodeRequestGrpcMarshaller.ConfigureTypes();
            DiagnosticEventDecodeResponseGrpcMarshaller.ConfigureTypes();
            DiagnosticEventsEncodeRequestGrpcMarshaller.ConfigureTypes();
            DiagnosticEventsEncodeResponseGrpcMarshaller.ConfigureTypes();
            DiagnosticEventsDecodeRequestGrpcMarshaller.ConfigureTypes();
            DiagnosticEventsDecodeResponseGrpcMarshaller.ConfigureTypes();
            SorobanTransactionMetaExtV1EncodeRequestGrpcMarshaller.ConfigureTypes();
            SorobanTransactionMetaExtV1EncodeResponseGrpcMarshaller.ConfigureTypes();
            SorobanTransactionMetaExtV1DecodeRequestGrpcMarshaller.ConfigureTypes();
            SorobanTransactionMetaExtV1DecodeResponseGrpcMarshaller.ConfigureTypes();
            SorobanTransactionMetaExtEncodeRequestGrpcMarshaller.ConfigureTypes();
            SorobanTransactionMetaExtEncodeResponseGrpcMarshaller.ConfigureTypes();
            SorobanTransactionMetaExtDecodeRequestGrpcMarshaller.ConfigureTypes();
            SorobanTransactionMetaExtDecodeResponseGrpcMarshaller.ConfigureTypes();
            SorobanTransactionMetaEncodeRequestGrpcMarshaller.ConfigureTypes();
            SorobanTransactionMetaEncodeResponseGrpcMarshaller.ConfigureTypes();
            SorobanTransactionMetaDecodeRequestGrpcMarshaller.ConfigureTypes();
            SorobanTransactionMetaDecodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionMetaV3EncodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionMetaV3EncodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionMetaV3DecodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionMetaV3DecodeResponseGrpcMarshaller.ConfigureTypes();
            InvokeHostFunctionSuccessPreImageEncodeRequestGrpcMarshaller.ConfigureTypes();
            InvokeHostFunctionSuccessPreImageEncodeResponseGrpcMarshaller.ConfigureTypes();
            InvokeHostFunctionSuccessPreImageDecodeRequestGrpcMarshaller.ConfigureTypes();
            InvokeHostFunctionSuccessPreImageDecodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionMetaEncodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionMetaEncodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionMetaDecodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionMetaDecodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionResultMetaEncodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionResultMetaEncodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionResultMetaDecodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionResultMetaDecodeResponseGrpcMarshaller.ConfigureTypes();
            UpgradeEntryMetaEncodeRequestGrpcMarshaller.ConfigureTypes();
            UpgradeEntryMetaEncodeResponseGrpcMarshaller.ConfigureTypes();
            UpgradeEntryMetaDecodeRequestGrpcMarshaller.ConfigureTypes();
            UpgradeEntryMetaDecodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerCloseMetaV0EncodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerCloseMetaV0EncodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerCloseMetaV0DecodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerCloseMetaV0DecodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerCloseMetaExtV1EncodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerCloseMetaExtV1EncodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerCloseMetaExtV1DecodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerCloseMetaExtV1DecodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerCloseMetaExtEncodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerCloseMetaExtEncodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerCloseMetaExtDecodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerCloseMetaExtDecodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerCloseMetaV1EncodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerCloseMetaV1EncodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerCloseMetaV1DecodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerCloseMetaV1DecodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerCloseMetaEncodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerCloseMetaEncodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerCloseMetaDecodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerCloseMetaDecodeResponseGrpcMarshaller.ConfigureTypes();
            ErrorCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            ErrorCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            ErrorCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            ErrorCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            ErrorEncodeRequestGrpcMarshaller.ConfigureTypes();
            ErrorEncodeResponseGrpcMarshaller.ConfigureTypes();
            ErrorDecodeRequestGrpcMarshaller.ConfigureTypes();
            ErrorDecodeResponseGrpcMarshaller.ConfigureTypes();
            SendMoreEncodeRequestGrpcMarshaller.ConfigureTypes();
            SendMoreEncodeResponseGrpcMarshaller.ConfigureTypes();
            SendMoreDecodeRequestGrpcMarshaller.ConfigureTypes();
            SendMoreDecodeResponseGrpcMarshaller.ConfigureTypes();
            SendMoreExtendedEncodeRequestGrpcMarshaller.ConfigureTypes();
            SendMoreExtendedEncodeResponseGrpcMarshaller.ConfigureTypes();
            SendMoreExtendedDecodeRequestGrpcMarshaller.ConfigureTypes();
            SendMoreExtendedDecodeResponseGrpcMarshaller.ConfigureTypes();
            AuthCertEncodeRequestGrpcMarshaller.ConfigureTypes();
            AuthCertEncodeResponseGrpcMarshaller.ConfigureTypes();
            AuthCertDecodeRequestGrpcMarshaller.ConfigureTypes();
            AuthCertDecodeResponseGrpcMarshaller.ConfigureTypes();
            HelloEncodeRequestGrpcMarshaller.ConfigureTypes();
            HelloEncodeResponseGrpcMarshaller.ConfigureTypes();
            HelloDecodeRequestGrpcMarshaller.ConfigureTypes();
            HelloDecodeResponseGrpcMarshaller.ConfigureTypes();
            AuthEncodeRequestGrpcMarshaller.ConfigureTypes();
            AuthEncodeResponseGrpcMarshaller.ConfigureTypes();
            AuthDecodeRequestGrpcMarshaller.ConfigureTypes();
            AuthDecodeResponseGrpcMarshaller.ConfigureTypes();
            IPAddrTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            IPAddrTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            IPAddrTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            IPAddrTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            PeerAddressEncodeRequestGrpcMarshaller.ConfigureTypes();
            PeerAddressEncodeResponseGrpcMarshaller.ConfigureTypes();
            PeerAddressDecodeRequestGrpcMarshaller.ConfigureTypes();
            PeerAddressDecodeResponseGrpcMarshaller.ConfigureTypes();
            MessageTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            MessageTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            MessageTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            MessageTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            DontHaveEncodeRequestGrpcMarshaller.ConfigureTypes();
            DontHaveEncodeResponseGrpcMarshaller.ConfigureTypes();
            DontHaveDecodeRequestGrpcMarshaller.ConfigureTypes();
            DontHaveDecodeResponseGrpcMarshaller.ConfigureTypes();
            SurveyMessageCommandTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            SurveyMessageCommandTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            SurveyMessageCommandTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            SurveyMessageCommandTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            SurveyMessageResponseTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            SurveyMessageResponseTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            SurveyMessageResponseTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            SurveyMessageResponseTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            TimeSlicedSurveyStartCollectingMessageEncodeRequestGrpcMarshaller.ConfigureTypes();
            TimeSlicedSurveyStartCollectingMessageEncodeResponseGrpcMarshaller.ConfigureTypes();
            TimeSlicedSurveyStartCollectingMessageDecodeRequestGrpcMarshaller.ConfigureTypes();
            TimeSlicedSurveyStartCollectingMessageDecodeResponseGrpcMarshaller.ConfigureTypes();
            SignedTimeSlicedSurveyStartCollectingMessageEncodeRequestGrpcMarshaller.ConfigureTypes();
            SignedTimeSlicedSurveyStartCollectingMessageEncodeResponseGrpcMarshaller.ConfigureTypes();
            SignedTimeSlicedSurveyStartCollectingMessageDecodeRequestGrpcMarshaller.ConfigureTypes();
            SignedTimeSlicedSurveyStartCollectingMessageDecodeResponseGrpcMarshaller.ConfigureTypes();
            TimeSlicedSurveyStopCollectingMessageEncodeRequestGrpcMarshaller.ConfigureTypes();
            TimeSlicedSurveyStopCollectingMessageEncodeResponseGrpcMarshaller.ConfigureTypes();
            TimeSlicedSurveyStopCollectingMessageDecodeRequestGrpcMarshaller.ConfigureTypes();
            TimeSlicedSurveyStopCollectingMessageDecodeResponseGrpcMarshaller.ConfigureTypes();
            SignedTimeSlicedSurveyStopCollectingMessageEncodeRequestGrpcMarshaller.ConfigureTypes();
            SignedTimeSlicedSurveyStopCollectingMessageEncodeResponseGrpcMarshaller.ConfigureTypes();
            SignedTimeSlicedSurveyStopCollectingMessageDecodeRequestGrpcMarshaller.ConfigureTypes();
            SignedTimeSlicedSurveyStopCollectingMessageDecodeResponseGrpcMarshaller.ConfigureTypes();
            SurveyRequestMessageEncodeRequestGrpcMarshaller.ConfigureTypes();
            SurveyRequestMessageEncodeResponseGrpcMarshaller.ConfigureTypes();
            SurveyRequestMessageDecodeRequestGrpcMarshaller.ConfigureTypes();
            SurveyRequestMessageDecodeResponseGrpcMarshaller.ConfigureTypes();
            TimeSlicedSurveyRequestMessageEncodeRequestGrpcMarshaller.ConfigureTypes();
            TimeSlicedSurveyRequestMessageEncodeResponseGrpcMarshaller.ConfigureTypes();
            TimeSlicedSurveyRequestMessageDecodeRequestGrpcMarshaller.ConfigureTypes();
            TimeSlicedSurveyRequestMessageDecodeResponseGrpcMarshaller.ConfigureTypes();
            SignedSurveyRequestMessageEncodeRequestGrpcMarshaller.ConfigureTypes();
            SignedSurveyRequestMessageEncodeResponseGrpcMarshaller.ConfigureTypes();
            SignedSurveyRequestMessageDecodeRequestGrpcMarshaller.ConfigureTypes();
            SignedSurveyRequestMessageDecodeResponseGrpcMarshaller.ConfigureTypes();
            SignedTimeSlicedSurveyRequestMessageEncodeRequestGrpcMarshaller.ConfigureTypes();
            SignedTimeSlicedSurveyRequestMessageEncodeResponseGrpcMarshaller.ConfigureTypes();
            SignedTimeSlicedSurveyRequestMessageDecodeRequestGrpcMarshaller.ConfigureTypes();
            SignedTimeSlicedSurveyRequestMessageDecodeResponseGrpcMarshaller.ConfigureTypes();
            EncryptedBodyEncodeRequestGrpcMarshaller.ConfigureTypes();
            EncryptedBodyEncodeResponseGrpcMarshaller.ConfigureTypes();
            EncryptedBodyDecodeRequestGrpcMarshaller.ConfigureTypes();
            EncryptedBodyDecodeResponseGrpcMarshaller.ConfigureTypes();
            SurveyResponseMessageEncodeRequestGrpcMarshaller.ConfigureTypes();
            SurveyResponseMessageEncodeResponseGrpcMarshaller.ConfigureTypes();
            SurveyResponseMessageDecodeRequestGrpcMarshaller.ConfigureTypes();
            SurveyResponseMessageDecodeResponseGrpcMarshaller.ConfigureTypes();
            TimeSlicedSurveyResponseMessageEncodeRequestGrpcMarshaller.ConfigureTypes();
            TimeSlicedSurveyResponseMessageEncodeResponseGrpcMarshaller.ConfigureTypes();
            TimeSlicedSurveyResponseMessageDecodeRequestGrpcMarshaller.ConfigureTypes();
            TimeSlicedSurveyResponseMessageDecodeResponseGrpcMarshaller.ConfigureTypes();
            SignedSurveyResponseMessageEncodeRequestGrpcMarshaller.ConfigureTypes();
            SignedSurveyResponseMessageEncodeResponseGrpcMarshaller.ConfigureTypes();
            SignedSurveyResponseMessageDecodeRequestGrpcMarshaller.ConfigureTypes();
            SignedSurveyResponseMessageDecodeResponseGrpcMarshaller.ConfigureTypes();
            SignedTimeSlicedSurveyResponseMessageEncodeRequestGrpcMarshaller.ConfigureTypes();
            SignedTimeSlicedSurveyResponseMessageEncodeResponseGrpcMarshaller.ConfigureTypes();
            SignedTimeSlicedSurveyResponseMessageDecodeRequestGrpcMarshaller.ConfigureTypes();
            SignedTimeSlicedSurveyResponseMessageDecodeResponseGrpcMarshaller.ConfigureTypes();
            PeerStatsEncodeRequestGrpcMarshaller.ConfigureTypes();
            PeerStatsEncodeResponseGrpcMarshaller.ConfigureTypes();
            PeerStatsDecodeRequestGrpcMarshaller.ConfigureTypes();
            PeerStatsDecodeResponseGrpcMarshaller.ConfigureTypes();
            PeerStatListEncodeRequestGrpcMarshaller.ConfigureTypes();
            PeerStatListEncodeResponseGrpcMarshaller.ConfigureTypes();
            PeerStatListDecodeRequestGrpcMarshaller.ConfigureTypes();
            PeerStatListDecodeResponseGrpcMarshaller.ConfigureTypes();
            TimeSlicedNodeDataEncodeRequestGrpcMarshaller.ConfigureTypes();
            TimeSlicedNodeDataEncodeResponseGrpcMarshaller.ConfigureTypes();
            TimeSlicedNodeDataDecodeRequestGrpcMarshaller.ConfigureTypes();
            TimeSlicedNodeDataDecodeResponseGrpcMarshaller.ConfigureTypes();
            TimeSlicedPeerDataEncodeRequestGrpcMarshaller.ConfigureTypes();
            TimeSlicedPeerDataEncodeResponseGrpcMarshaller.ConfigureTypes();
            TimeSlicedPeerDataDecodeRequestGrpcMarshaller.ConfigureTypes();
            TimeSlicedPeerDataDecodeResponseGrpcMarshaller.ConfigureTypes();
            TimeSlicedPeerDataListEncodeRequestGrpcMarshaller.ConfigureTypes();
            TimeSlicedPeerDataListEncodeResponseGrpcMarshaller.ConfigureTypes();
            TimeSlicedPeerDataListDecodeRequestGrpcMarshaller.ConfigureTypes();
            TimeSlicedPeerDataListDecodeResponseGrpcMarshaller.ConfigureTypes();
            TopologyResponseBodyV0EncodeRequestGrpcMarshaller.ConfigureTypes();
            TopologyResponseBodyV0EncodeResponseGrpcMarshaller.ConfigureTypes();
            TopologyResponseBodyV0DecodeRequestGrpcMarshaller.ConfigureTypes();
            TopologyResponseBodyV0DecodeResponseGrpcMarshaller.ConfigureTypes();
            TopologyResponseBodyV1EncodeRequestGrpcMarshaller.ConfigureTypes();
            TopologyResponseBodyV1EncodeResponseGrpcMarshaller.ConfigureTypes();
            TopologyResponseBodyV1DecodeRequestGrpcMarshaller.ConfigureTypes();
            TopologyResponseBodyV1DecodeResponseGrpcMarshaller.ConfigureTypes();
            TopologyResponseBodyV2EncodeRequestGrpcMarshaller.ConfigureTypes();
            TopologyResponseBodyV2EncodeResponseGrpcMarshaller.ConfigureTypes();
            TopologyResponseBodyV2DecodeRequestGrpcMarshaller.ConfigureTypes();
            TopologyResponseBodyV2DecodeResponseGrpcMarshaller.ConfigureTypes();
            SurveyResponseBodyEncodeRequestGrpcMarshaller.ConfigureTypes();
            SurveyResponseBodyEncodeResponseGrpcMarshaller.ConfigureTypes();
            SurveyResponseBodyDecodeRequestGrpcMarshaller.ConfigureTypes();
            SurveyResponseBodyDecodeResponseGrpcMarshaller.ConfigureTypes();
            TxAdvertVectorEncodeRequestGrpcMarshaller.ConfigureTypes();
            TxAdvertVectorEncodeResponseGrpcMarshaller.ConfigureTypes();
            TxAdvertVectorDecodeRequestGrpcMarshaller.ConfigureTypes();
            TxAdvertVectorDecodeResponseGrpcMarshaller.ConfigureTypes();
            FloodAdvertEncodeRequestGrpcMarshaller.ConfigureTypes();
            FloodAdvertEncodeResponseGrpcMarshaller.ConfigureTypes();
            FloodAdvertDecodeRequestGrpcMarshaller.ConfigureTypes();
            FloodAdvertDecodeResponseGrpcMarshaller.ConfigureTypes();
            TxDemandVectorEncodeRequestGrpcMarshaller.ConfigureTypes();
            TxDemandVectorEncodeResponseGrpcMarshaller.ConfigureTypes();
            TxDemandVectorDecodeRequestGrpcMarshaller.ConfigureTypes();
            TxDemandVectorDecodeResponseGrpcMarshaller.ConfigureTypes();
            FloodDemandEncodeRequestGrpcMarshaller.ConfigureTypes();
            FloodDemandEncodeResponseGrpcMarshaller.ConfigureTypes();
            FloodDemandDecodeRequestGrpcMarshaller.ConfigureTypes();
            FloodDemandDecodeResponseGrpcMarshaller.ConfigureTypes();
            StellarMessageEncodeRequestGrpcMarshaller.ConfigureTypes();
            StellarMessageEncodeResponseGrpcMarshaller.ConfigureTypes();
            StellarMessageDecodeRequestGrpcMarshaller.ConfigureTypes();
            StellarMessageDecodeResponseGrpcMarshaller.ConfigureTypes();
            AuthenticatedMessageEncodeRequestGrpcMarshaller.ConfigureTypes();
            AuthenticatedMessageEncodeResponseGrpcMarshaller.ConfigureTypes();
            AuthenticatedMessageDecodeRequestGrpcMarshaller.ConfigureTypes();
            AuthenticatedMessageDecodeResponseGrpcMarshaller.ConfigureTypes();
            ValueEncodeRequestGrpcMarshaller.ConfigureTypes();
            ValueEncodeResponseGrpcMarshaller.ConfigureTypes();
            ValueDecodeRequestGrpcMarshaller.ConfigureTypes();
            ValueDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCPBallotEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCPBallotEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCPBallotDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCPBallotDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCPStatementTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCPStatementTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCPStatementTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCPStatementTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCPNominationEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCPNominationEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCPNominationDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCPNominationDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCPStatementEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCPStatementEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCPStatementDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCPStatementDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCPEnvelopeEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCPEnvelopeEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCPEnvelopeDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCPEnvelopeDecodeResponseGrpcMarshaller.ConfigureTypes();
            SCPQuorumSetEncodeRequestGrpcMarshaller.ConfigureTypes();
            SCPQuorumSetEncodeResponseGrpcMarshaller.ConfigureTypes();
            SCPQuorumSetDecodeRequestGrpcMarshaller.ConfigureTypes();
            SCPQuorumSetDecodeResponseGrpcMarshaller.ConfigureTypes();
            LiquidityPoolParametersEncodeRequestGrpcMarshaller.ConfigureTypes();
            LiquidityPoolParametersEncodeResponseGrpcMarshaller.ConfigureTypes();
            LiquidityPoolParametersDecodeRequestGrpcMarshaller.ConfigureTypes();
            LiquidityPoolParametersDecodeResponseGrpcMarshaller.ConfigureTypes();
            MuxedAccountEncodeRequestGrpcMarshaller.ConfigureTypes();
            MuxedAccountEncodeResponseGrpcMarshaller.ConfigureTypes();
            MuxedAccountDecodeRequestGrpcMarshaller.ConfigureTypes();
            MuxedAccountDecodeResponseGrpcMarshaller.ConfigureTypes();
            DecoratedSignatureEncodeRequestGrpcMarshaller.ConfigureTypes();
            DecoratedSignatureEncodeResponseGrpcMarshaller.ConfigureTypes();
            DecoratedSignatureDecodeRequestGrpcMarshaller.ConfigureTypes();
            DecoratedSignatureDecodeResponseGrpcMarshaller.ConfigureTypes();
            OperationTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            OperationTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            OperationTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            OperationTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            CreateAccountOpEncodeRequestGrpcMarshaller.ConfigureTypes();
            CreateAccountOpEncodeResponseGrpcMarshaller.ConfigureTypes();
            CreateAccountOpDecodeRequestGrpcMarshaller.ConfigureTypes();
            CreateAccountOpDecodeResponseGrpcMarshaller.ConfigureTypes();
            PaymentOpEncodeRequestGrpcMarshaller.ConfigureTypes();
            PaymentOpEncodeResponseGrpcMarshaller.ConfigureTypes();
            PaymentOpDecodeRequestGrpcMarshaller.ConfigureTypes();
            PaymentOpDecodeResponseGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveOpEncodeRequestGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveOpEncodeResponseGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveOpDecodeRequestGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveOpDecodeResponseGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendOpEncodeRequestGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendOpEncodeResponseGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendOpDecodeRequestGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendOpDecodeResponseGrpcMarshaller.ConfigureTypes();
            ManageSellOfferOpEncodeRequestGrpcMarshaller.ConfigureTypes();
            ManageSellOfferOpEncodeResponseGrpcMarshaller.ConfigureTypes();
            ManageSellOfferOpDecodeRequestGrpcMarshaller.ConfigureTypes();
            ManageSellOfferOpDecodeResponseGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferOpEncodeRequestGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferOpEncodeResponseGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferOpDecodeRequestGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferOpDecodeResponseGrpcMarshaller.ConfigureTypes();
            CreatePassiveSellOfferOpEncodeRequestGrpcMarshaller.ConfigureTypes();
            CreatePassiveSellOfferOpEncodeResponseGrpcMarshaller.ConfigureTypes();
            CreatePassiveSellOfferOpDecodeRequestGrpcMarshaller.ConfigureTypes();
            CreatePassiveSellOfferOpDecodeResponseGrpcMarshaller.ConfigureTypes();
            SetOptionsOpEncodeRequestGrpcMarshaller.ConfigureTypes();
            SetOptionsOpEncodeResponseGrpcMarshaller.ConfigureTypes();
            SetOptionsOpDecodeRequestGrpcMarshaller.ConfigureTypes();
            SetOptionsOpDecodeResponseGrpcMarshaller.ConfigureTypes();
            ChangeTrustAssetEncodeRequestGrpcMarshaller.ConfigureTypes();
            ChangeTrustAssetEncodeResponseGrpcMarshaller.ConfigureTypes();
            ChangeTrustAssetDecodeRequestGrpcMarshaller.ConfigureTypes();
            ChangeTrustAssetDecodeResponseGrpcMarshaller.ConfigureTypes();
            ChangeTrustOpEncodeRequestGrpcMarshaller.ConfigureTypes();
            ChangeTrustOpEncodeResponseGrpcMarshaller.ConfigureTypes();
            ChangeTrustOpDecodeRequestGrpcMarshaller.ConfigureTypes();
            ChangeTrustOpDecodeResponseGrpcMarshaller.ConfigureTypes();
            AllowTrustOpEncodeRequestGrpcMarshaller.ConfigureTypes();
            AllowTrustOpEncodeResponseGrpcMarshaller.ConfigureTypes();
            AllowTrustOpDecodeRequestGrpcMarshaller.ConfigureTypes();
            AllowTrustOpDecodeResponseGrpcMarshaller.ConfigureTypes();
            ManageDataOpEncodeRequestGrpcMarshaller.ConfigureTypes();
            ManageDataOpEncodeResponseGrpcMarshaller.ConfigureTypes();
            ManageDataOpDecodeRequestGrpcMarshaller.ConfigureTypes();
            ManageDataOpDecodeResponseGrpcMarshaller.ConfigureTypes();
            BumpSequenceOpEncodeRequestGrpcMarshaller.ConfigureTypes();
            BumpSequenceOpEncodeResponseGrpcMarshaller.ConfigureTypes();
            BumpSequenceOpDecodeRequestGrpcMarshaller.ConfigureTypes();
            BumpSequenceOpDecodeResponseGrpcMarshaller.ConfigureTypes();
            CreateClaimableBalanceOpEncodeRequestGrpcMarshaller.ConfigureTypes();
            CreateClaimableBalanceOpEncodeResponseGrpcMarshaller.ConfigureTypes();
            CreateClaimableBalanceOpDecodeRequestGrpcMarshaller.ConfigureTypes();
            CreateClaimableBalanceOpDecodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimClaimableBalanceOpEncodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimClaimableBalanceOpEncodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimClaimableBalanceOpDecodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimClaimableBalanceOpDecodeResponseGrpcMarshaller.ConfigureTypes();
            BeginSponsoringFutureReservesOpEncodeRequestGrpcMarshaller.ConfigureTypes();
            BeginSponsoringFutureReservesOpEncodeResponseGrpcMarshaller.ConfigureTypes();
            BeginSponsoringFutureReservesOpDecodeRequestGrpcMarshaller.ConfigureTypes();
            BeginSponsoringFutureReservesOpDecodeResponseGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipOpEncodeRequestGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipOpEncodeResponseGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipOpDecodeRequestGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipOpDecodeResponseGrpcMarshaller.ConfigureTypes();
            ClawbackOpEncodeRequestGrpcMarshaller.ConfigureTypes();
            ClawbackOpEncodeResponseGrpcMarshaller.ConfigureTypes();
            ClawbackOpDecodeRequestGrpcMarshaller.ConfigureTypes();
            ClawbackOpDecodeResponseGrpcMarshaller.ConfigureTypes();
            ClawbackClaimableBalanceOpEncodeRequestGrpcMarshaller.ConfigureTypes();
            ClawbackClaimableBalanceOpEncodeResponseGrpcMarshaller.ConfigureTypes();
            ClawbackClaimableBalanceOpDecodeRequestGrpcMarshaller.ConfigureTypes();
            ClawbackClaimableBalanceOpDecodeResponseGrpcMarshaller.ConfigureTypes();
            SetTrustLineFlagsOpEncodeRequestGrpcMarshaller.ConfigureTypes();
            SetTrustLineFlagsOpEncodeResponseGrpcMarshaller.ConfigureTypes();
            SetTrustLineFlagsOpDecodeRequestGrpcMarshaller.ConfigureTypes();
            SetTrustLineFlagsOpDecodeResponseGrpcMarshaller.ConfigureTypes();
            LiquidityPoolDepositOpEncodeRequestGrpcMarshaller.ConfigureTypes();
            LiquidityPoolDepositOpEncodeResponseGrpcMarshaller.ConfigureTypes();
            LiquidityPoolDepositOpDecodeRequestGrpcMarshaller.ConfigureTypes();
            LiquidityPoolDepositOpDecodeResponseGrpcMarshaller.ConfigureTypes();
            LiquidityPoolWithdrawOpEncodeRequestGrpcMarshaller.ConfigureTypes();
            LiquidityPoolWithdrawOpEncodeResponseGrpcMarshaller.ConfigureTypes();
            LiquidityPoolWithdrawOpDecodeRequestGrpcMarshaller.ConfigureTypes();
            LiquidityPoolWithdrawOpDecodeResponseGrpcMarshaller.ConfigureTypes();
            HostFunctionTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            HostFunctionTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            HostFunctionTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            HostFunctionTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            ContractIDPreimageTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            ContractIDPreimageTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            ContractIDPreimageTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            ContractIDPreimageTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            ContractIDPreimageEncodeRequestGrpcMarshaller.ConfigureTypes();
            ContractIDPreimageEncodeResponseGrpcMarshaller.ConfigureTypes();
            ContractIDPreimageDecodeRequestGrpcMarshaller.ConfigureTypes();
            ContractIDPreimageDecodeResponseGrpcMarshaller.ConfigureTypes();
            CreateContractArgsEncodeRequestGrpcMarshaller.ConfigureTypes();
            CreateContractArgsEncodeResponseGrpcMarshaller.ConfigureTypes();
            CreateContractArgsDecodeRequestGrpcMarshaller.ConfigureTypes();
            CreateContractArgsDecodeResponseGrpcMarshaller.ConfigureTypes();
            CreateContractArgsV2EncodeRequestGrpcMarshaller.ConfigureTypes();
            CreateContractArgsV2EncodeResponseGrpcMarshaller.ConfigureTypes();
            CreateContractArgsV2DecodeRequestGrpcMarshaller.ConfigureTypes();
            CreateContractArgsV2DecodeResponseGrpcMarshaller.ConfigureTypes();
            InvokeContractArgsEncodeRequestGrpcMarshaller.ConfigureTypes();
            InvokeContractArgsEncodeResponseGrpcMarshaller.ConfigureTypes();
            InvokeContractArgsDecodeRequestGrpcMarshaller.ConfigureTypes();
            InvokeContractArgsDecodeResponseGrpcMarshaller.ConfigureTypes();
            HostFunctionEncodeRequestGrpcMarshaller.ConfigureTypes();
            HostFunctionEncodeResponseGrpcMarshaller.ConfigureTypes();
            HostFunctionDecodeRequestGrpcMarshaller.ConfigureTypes();
            HostFunctionDecodeResponseGrpcMarshaller.ConfigureTypes();
            SorobanAuthorizedFunctionTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            SorobanAuthorizedFunctionTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            SorobanAuthorizedFunctionTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            SorobanAuthorizedFunctionTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            SorobanAuthorizedFunctionEncodeRequestGrpcMarshaller.ConfigureTypes();
            SorobanAuthorizedFunctionEncodeResponseGrpcMarshaller.ConfigureTypes();
            SorobanAuthorizedFunctionDecodeRequestGrpcMarshaller.ConfigureTypes();
            SorobanAuthorizedFunctionDecodeResponseGrpcMarshaller.ConfigureTypes();
            SorobanAuthorizedInvocationEncodeRequestGrpcMarshaller.ConfigureTypes();
            SorobanAuthorizedInvocationEncodeResponseGrpcMarshaller.ConfigureTypes();
            SorobanAuthorizedInvocationDecodeRequestGrpcMarshaller.ConfigureTypes();
            SorobanAuthorizedInvocationDecodeResponseGrpcMarshaller.ConfigureTypes();
            SorobanAddressCredentialsEncodeRequestGrpcMarshaller.ConfigureTypes();
            SorobanAddressCredentialsEncodeResponseGrpcMarshaller.ConfigureTypes();
            SorobanAddressCredentialsDecodeRequestGrpcMarshaller.ConfigureTypes();
            SorobanAddressCredentialsDecodeResponseGrpcMarshaller.ConfigureTypes();
            SorobanCredentialsTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            SorobanCredentialsTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            SorobanCredentialsTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            SorobanCredentialsTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            SorobanCredentialsEncodeRequestGrpcMarshaller.ConfigureTypes();
            SorobanCredentialsEncodeResponseGrpcMarshaller.ConfigureTypes();
            SorobanCredentialsDecodeRequestGrpcMarshaller.ConfigureTypes();
            SorobanCredentialsDecodeResponseGrpcMarshaller.ConfigureTypes();
            SorobanAuthorizationEntryEncodeRequestGrpcMarshaller.ConfigureTypes();
            SorobanAuthorizationEntryEncodeResponseGrpcMarshaller.ConfigureTypes();
            SorobanAuthorizationEntryDecodeRequestGrpcMarshaller.ConfigureTypes();
            SorobanAuthorizationEntryDecodeResponseGrpcMarshaller.ConfigureTypes();
            InvokeHostFunctionOpEncodeRequestGrpcMarshaller.ConfigureTypes();
            InvokeHostFunctionOpEncodeResponseGrpcMarshaller.ConfigureTypes();
            InvokeHostFunctionOpDecodeRequestGrpcMarshaller.ConfigureTypes();
            InvokeHostFunctionOpDecodeResponseGrpcMarshaller.ConfigureTypes();
            ExtendFootprintTTLOpEncodeRequestGrpcMarshaller.ConfigureTypes();
            ExtendFootprintTTLOpEncodeResponseGrpcMarshaller.ConfigureTypes();
            ExtendFootprintTTLOpDecodeRequestGrpcMarshaller.ConfigureTypes();
            ExtendFootprintTTLOpDecodeResponseGrpcMarshaller.ConfigureTypes();
            RestoreFootprintOpEncodeRequestGrpcMarshaller.ConfigureTypes();
            RestoreFootprintOpEncodeResponseGrpcMarshaller.ConfigureTypes();
            RestoreFootprintOpDecodeRequestGrpcMarshaller.ConfigureTypes();
            RestoreFootprintOpDecodeResponseGrpcMarshaller.ConfigureTypes();
            OperationEncodeRequestGrpcMarshaller.ConfigureTypes();
            OperationEncodeResponseGrpcMarshaller.ConfigureTypes();
            OperationDecodeRequestGrpcMarshaller.ConfigureTypes();
            OperationDecodeResponseGrpcMarshaller.ConfigureTypes();
            HashIDPreimageEncodeRequestGrpcMarshaller.ConfigureTypes();
            HashIDPreimageEncodeResponseGrpcMarshaller.ConfigureTypes();
            HashIDPreimageDecodeRequestGrpcMarshaller.ConfigureTypes();
            HashIDPreimageDecodeResponseGrpcMarshaller.ConfigureTypes();
            MemoTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            MemoTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            MemoTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            MemoTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            MemoEncodeRequestGrpcMarshaller.ConfigureTypes();
            MemoEncodeResponseGrpcMarshaller.ConfigureTypes();
            MemoDecodeRequestGrpcMarshaller.ConfigureTypes();
            MemoDecodeResponseGrpcMarshaller.ConfigureTypes();
            TimeBoundsEncodeRequestGrpcMarshaller.ConfigureTypes();
            TimeBoundsEncodeResponseGrpcMarshaller.ConfigureTypes();
            TimeBoundsDecodeRequestGrpcMarshaller.ConfigureTypes();
            TimeBoundsDecodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerBoundsEncodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerBoundsEncodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerBoundsDecodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerBoundsDecodeResponseGrpcMarshaller.ConfigureTypes();
            PreconditionsV2EncodeRequestGrpcMarshaller.ConfigureTypes();
            PreconditionsV2EncodeResponseGrpcMarshaller.ConfigureTypes();
            PreconditionsV2DecodeRequestGrpcMarshaller.ConfigureTypes();
            PreconditionsV2DecodeResponseGrpcMarshaller.ConfigureTypes();
            PreconditionTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            PreconditionTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            PreconditionTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            PreconditionTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            PreconditionsEncodeRequestGrpcMarshaller.ConfigureTypes();
            PreconditionsEncodeResponseGrpcMarshaller.ConfigureTypes();
            PreconditionsDecodeRequestGrpcMarshaller.ConfigureTypes();
            PreconditionsDecodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerFootprintEncodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerFootprintEncodeResponseGrpcMarshaller.ConfigureTypes();
            LedgerFootprintDecodeRequestGrpcMarshaller.ConfigureTypes();
            LedgerFootprintDecodeResponseGrpcMarshaller.ConfigureTypes();
            ArchivalProofTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            ArchivalProofTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            ArchivalProofTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            ArchivalProofTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            ArchivalProofNodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            ArchivalProofNodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            ArchivalProofNodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            ArchivalProofNodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            ProofLevelEncodeRequestGrpcMarshaller.ConfigureTypes();
            ProofLevelEncodeResponseGrpcMarshaller.ConfigureTypes();
            ProofLevelDecodeRequestGrpcMarshaller.ConfigureTypes();
            ProofLevelDecodeResponseGrpcMarshaller.ConfigureTypes();
            NonexistenceProofBodyEncodeRequestGrpcMarshaller.ConfigureTypes();
            NonexistenceProofBodyEncodeResponseGrpcMarshaller.ConfigureTypes();
            NonexistenceProofBodyDecodeRequestGrpcMarshaller.ConfigureTypes();
            NonexistenceProofBodyDecodeResponseGrpcMarshaller.ConfigureTypes();
            ExistenceProofBodyEncodeRequestGrpcMarshaller.ConfigureTypes();
            ExistenceProofBodyEncodeResponseGrpcMarshaller.ConfigureTypes();
            ExistenceProofBodyDecodeRequestGrpcMarshaller.ConfigureTypes();
            ExistenceProofBodyDecodeResponseGrpcMarshaller.ConfigureTypes();
            ArchivalProofEncodeRequestGrpcMarshaller.ConfigureTypes();
            ArchivalProofEncodeResponseGrpcMarshaller.ConfigureTypes();
            ArchivalProofDecodeRequestGrpcMarshaller.ConfigureTypes();
            ArchivalProofDecodeResponseGrpcMarshaller.ConfigureTypes();
            SorobanResourcesEncodeRequestGrpcMarshaller.ConfigureTypes();
            SorobanResourcesEncodeResponseGrpcMarshaller.ConfigureTypes();
            SorobanResourcesDecodeRequestGrpcMarshaller.ConfigureTypes();
            SorobanResourcesDecodeResponseGrpcMarshaller.ConfigureTypes();
            SorobanTransactionDataEncodeRequestGrpcMarshaller.ConfigureTypes();
            SorobanTransactionDataEncodeResponseGrpcMarshaller.ConfigureTypes();
            SorobanTransactionDataDecodeRequestGrpcMarshaller.ConfigureTypes();
            SorobanTransactionDataDecodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionV0EncodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionV0EncodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionV0DecodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionV0DecodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionV0EnvelopeEncodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionV0EnvelopeEncodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionV0EnvelopeDecodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionV0EnvelopeDecodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionEncodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionEncodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionDecodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionDecodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionV1EnvelopeEncodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionV1EnvelopeEncodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionV1EnvelopeDecodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionV1EnvelopeDecodeResponseGrpcMarshaller.ConfigureTypes();
            FeeBumpTransactionEncodeRequestGrpcMarshaller.ConfigureTypes();
            FeeBumpTransactionEncodeResponseGrpcMarshaller.ConfigureTypes();
            FeeBumpTransactionDecodeRequestGrpcMarshaller.ConfigureTypes();
            FeeBumpTransactionDecodeResponseGrpcMarshaller.ConfigureTypes();
            FeeBumpTransactionEnvelopeEncodeRequestGrpcMarshaller.ConfigureTypes();
            FeeBumpTransactionEnvelopeEncodeResponseGrpcMarshaller.ConfigureTypes();
            FeeBumpTransactionEnvelopeDecodeRequestGrpcMarshaller.ConfigureTypes();
            FeeBumpTransactionEnvelopeDecodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionEnvelopeEncodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionEnvelopeEncodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionEnvelopeDecodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionEnvelopeDecodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionSignaturePayloadEncodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionSignaturePayloadEncodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionSignaturePayloadDecodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionSignaturePayloadDecodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimAtomTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimAtomTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimAtomTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimAtomTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimOfferAtomV0EncodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimOfferAtomV0EncodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimOfferAtomV0DecodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimOfferAtomV0DecodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimOfferAtomEncodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimOfferAtomEncodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimOfferAtomDecodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimOfferAtomDecodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimLiquidityAtomEncodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimLiquidityAtomEncodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimLiquidityAtomDecodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimLiquidityAtomDecodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimAtomEncodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimAtomEncodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimAtomDecodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimAtomDecodeResponseGrpcMarshaller.ConfigureTypes();
            CreateAccountResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            CreateAccountResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            CreateAccountResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            CreateAccountResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            CreateAccountResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            CreateAccountResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            CreateAccountResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            CreateAccountResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            PaymentResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            PaymentResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            PaymentResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            PaymentResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            PaymentResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            PaymentResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            PaymentResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            PaymentResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            SimplePaymentResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            SimplePaymentResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            SimplePaymentResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            SimplePaymentResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            ManageSellOfferResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            ManageSellOfferResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            ManageSellOfferResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            ManageSellOfferResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            ManageOfferEffectEncodeRequestGrpcMarshaller.ConfigureTypes();
            ManageOfferEffectEncodeResponseGrpcMarshaller.ConfigureTypes();
            ManageOfferEffectDecodeRequestGrpcMarshaller.ConfigureTypes();
            ManageOfferEffectDecodeResponseGrpcMarshaller.ConfigureTypes();
            ManageOfferSuccessResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            ManageOfferSuccessResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            ManageOfferSuccessResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            ManageOfferSuccessResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            ManageSellOfferResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            ManageSellOfferResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            ManageSellOfferResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            ManageSellOfferResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            SetOptionsResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            SetOptionsResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            SetOptionsResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            SetOptionsResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            SetOptionsResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            SetOptionsResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            SetOptionsResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            SetOptionsResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            ChangeTrustResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            ChangeTrustResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            ChangeTrustResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            ChangeTrustResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            ChangeTrustResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            ChangeTrustResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            ChangeTrustResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            ChangeTrustResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            AllowTrustResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            AllowTrustResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            AllowTrustResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            AllowTrustResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            AllowTrustResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            AllowTrustResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            AllowTrustResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            AllowTrustResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            AccountMergeResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            AccountMergeResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            AccountMergeResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            AccountMergeResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            AccountMergeResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            AccountMergeResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            AccountMergeResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            AccountMergeResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            InflationResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            InflationResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            InflationResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            InflationResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            InflationPayoutEncodeRequestGrpcMarshaller.ConfigureTypes();
            InflationPayoutEncodeResponseGrpcMarshaller.ConfigureTypes();
            InflationPayoutDecodeRequestGrpcMarshaller.ConfigureTypes();
            InflationPayoutDecodeResponseGrpcMarshaller.ConfigureTypes();
            InflationResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            InflationResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            InflationResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            InflationResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            ManageDataResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            ManageDataResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            ManageDataResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            ManageDataResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            ManageDataResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            ManageDataResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            ManageDataResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            ManageDataResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            BumpSequenceResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            BumpSequenceResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            BumpSequenceResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            BumpSequenceResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            BumpSequenceResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            BumpSequenceResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            BumpSequenceResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            BumpSequenceResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            CreateClaimableBalanceResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            CreateClaimableBalanceResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            CreateClaimableBalanceResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            CreateClaimableBalanceResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            CreateClaimableBalanceResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            CreateClaimableBalanceResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            CreateClaimableBalanceResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            CreateClaimableBalanceResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimClaimableBalanceResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimClaimableBalanceResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimClaimableBalanceResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimClaimableBalanceResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimClaimableBalanceResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimClaimableBalanceResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            ClaimClaimableBalanceResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            ClaimClaimableBalanceResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            BeginSponsoringFutureReservesResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            BeginSponsoringFutureReservesResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            BeginSponsoringFutureReservesResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            BeginSponsoringFutureReservesResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            BeginSponsoringFutureReservesResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            BeginSponsoringFutureReservesResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            BeginSponsoringFutureReservesResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            BeginSponsoringFutureReservesResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            EndSponsoringFutureReservesResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            EndSponsoringFutureReservesResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            EndSponsoringFutureReservesResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            EndSponsoringFutureReservesResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            EndSponsoringFutureReservesResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            EndSponsoringFutureReservesResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            EndSponsoringFutureReservesResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            EndSponsoringFutureReservesResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            ClawbackResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            ClawbackResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            ClawbackResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            ClawbackResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            ClawbackResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            ClawbackResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            ClawbackResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            ClawbackResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            ClawbackClaimableBalanceResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            ClawbackClaimableBalanceResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            ClawbackClaimableBalanceResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            ClawbackClaimableBalanceResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            ClawbackClaimableBalanceResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            ClawbackClaimableBalanceResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            ClawbackClaimableBalanceResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            ClawbackClaimableBalanceResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            SetTrustLineFlagsResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            SetTrustLineFlagsResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            SetTrustLineFlagsResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            SetTrustLineFlagsResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            SetTrustLineFlagsResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            SetTrustLineFlagsResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            SetTrustLineFlagsResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            SetTrustLineFlagsResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            LiquidityPoolDepositResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            LiquidityPoolDepositResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            LiquidityPoolDepositResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            LiquidityPoolDepositResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            LiquidityPoolDepositResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            LiquidityPoolDepositResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            LiquidityPoolDepositResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            LiquidityPoolDepositResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            LiquidityPoolWithdrawResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            LiquidityPoolWithdrawResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            LiquidityPoolWithdrawResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            LiquidityPoolWithdrawResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            LiquidityPoolWithdrawResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            LiquidityPoolWithdrawResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            LiquidityPoolWithdrawResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            LiquidityPoolWithdrawResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            InvokeHostFunctionResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            InvokeHostFunctionResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            InvokeHostFunctionResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            InvokeHostFunctionResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            InvokeHostFunctionResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            InvokeHostFunctionResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            InvokeHostFunctionResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            InvokeHostFunctionResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            ExtendFootprintTTLResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            ExtendFootprintTTLResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            ExtendFootprintTTLResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            ExtendFootprintTTLResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            ExtendFootprintTTLResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            ExtendFootprintTTLResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            ExtendFootprintTTLResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            ExtendFootprintTTLResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            RestoreFootprintResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            RestoreFootprintResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            RestoreFootprintResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            RestoreFootprintResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            RestoreFootprintResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            RestoreFootprintResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            RestoreFootprintResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            RestoreFootprintResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            OperationResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            OperationResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            OperationResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            OperationResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            OperationResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            OperationResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            OperationResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            OperationResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionResultCodeEncodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionResultCodeEncodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionResultCodeDecodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionResultCodeDecodeResponseGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultPairEncodeRequestGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultPairEncodeResponseGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultPairDecodeRequestGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultPairDecodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionResultEncodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionResultEncodeResponseGrpcMarshaller.ConfigureTypes();
            TransactionResultDecodeRequestGrpcMarshaller.ConfigureTypes();
            TransactionResultDecodeResponseGrpcMarshaller.ConfigureTypes();
            HashEncodeRequestGrpcMarshaller.ConfigureTypes();
            HashEncodeResponseGrpcMarshaller.ConfigureTypes();
            HashDecodeRequestGrpcMarshaller.ConfigureTypes();
            HashDecodeResponseGrpcMarshaller.ConfigureTypes();
            uint256EncodeRequestGrpcMarshaller.ConfigureTypes();
            uint256EncodeResponseGrpcMarshaller.ConfigureTypes();
            uint256DecodeRequestGrpcMarshaller.ConfigureTypes();
            uint256DecodeResponseGrpcMarshaller.ConfigureTypes();
            uint32EncodeRequestGrpcMarshaller.ConfigureTypes();
            uint32EncodeResponseGrpcMarshaller.ConfigureTypes();
            uint32DecodeRequestGrpcMarshaller.ConfigureTypes();
            uint32DecodeResponseGrpcMarshaller.ConfigureTypes();
            int32EncodeRequestGrpcMarshaller.ConfigureTypes();
            int32EncodeResponseGrpcMarshaller.ConfigureTypes();
            int32DecodeRequestGrpcMarshaller.ConfigureTypes();
            int32DecodeResponseGrpcMarshaller.ConfigureTypes();
            uint64EncodeRequestGrpcMarshaller.ConfigureTypes();
            uint64EncodeResponseGrpcMarshaller.ConfigureTypes();
            uint64DecodeRequestGrpcMarshaller.ConfigureTypes();
            uint64DecodeResponseGrpcMarshaller.ConfigureTypes();
            int64EncodeRequestGrpcMarshaller.ConfigureTypes();
            int64EncodeResponseGrpcMarshaller.ConfigureTypes();
            int64DecodeRequestGrpcMarshaller.ConfigureTypes();
            int64DecodeResponseGrpcMarshaller.ConfigureTypes();
            TimePointEncodeRequestGrpcMarshaller.ConfigureTypes();
            TimePointEncodeResponseGrpcMarshaller.ConfigureTypes();
            TimePointDecodeRequestGrpcMarshaller.ConfigureTypes();
            TimePointDecodeResponseGrpcMarshaller.ConfigureTypes();
            DurationEncodeRequestGrpcMarshaller.ConfigureTypes();
            DurationEncodeResponseGrpcMarshaller.ConfigureTypes();
            DurationDecodeRequestGrpcMarshaller.ConfigureTypes();
            DurationDecodeResponseGrpcMarshaller.ConfigureTypes();
            ExtensionPointEncodeRequestGrpcMarshaller.ConfigureTypes();
            ExtensionPointEncodeResponseGrpcMarshaller.ConfigureTypes();
            ExtensionPointDecodeRequestGrpcMarshaller.ConfigureTypes();
            ExtensionPointDecodeResponseGrpcMarshaller.ConfigureTypes();
            CryptoKeyTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            CryptoKeyTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            CryptoKeyTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            CryptoKeyTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            PublicKeyTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            PublicKeyTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            PublicKeyTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            PublicKeyTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            SignerKeyTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            SignerKeyTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            SignerKeyTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            SignerKeyTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            PublicKeyEncodeRequestGrpcMarshaller.ConfigureTypes();
            PublicKeyEncodeResponseGrpcMarshaller.ConfigureTypes();
            PublicKeyDecodeRequestGrpcMarshaller.ConfigureTypes();
            PublicKeyDecodeResponseGrpcMarshaller.ConfigureTypes();
            SignerKeyEncodeRequestGrpcMarshaller.ConfigureTypes();
            SignerKeyEncodeResponseGrpcMarshaller.ConfigureTypes();
            SignerKeyDecodeRequestGrpcMarshaller.ConfigureTypes();
            SignerKeyDecodeResponseGrpcMarshaller.ConfigureTypes();
            SignatureEncodeRequestGrpcMarshaller.ConfigureTypes();
            SignatureEncodeResponseGrpcMarshaller.ConfigureTypes();
            SignatureDecodeRequestGrpcMarshaller.ConfigureTypes();
            SignatureDecodeResponseGrpcMarshaller.ConfigureTypes();
            SignatureHintEncodeRequestGrpcMarshaller.ConfigureTypes();
            SignatureHintEncodeResponseGrpcMarshaller.ConfigureTypes();
            SignatureHintDecodeRequestGrpcMarshaller.ConfigureTypes();
            SignatureHintDecodeResponseGrpcMarshaller.ConfigureTypes();
            NodeIDEncodeRequestGrpcMarshaller.ConfigureTypes();
            NodeIDEncodeResponseGrpcMarshaller.ConfigureTypes();
            NodeIDDecodeRequestGrpcMarshaller.ConfigureTypes();
            NodeIDDecodeResponseGrpcMarshaller.ConfigureTypes();
            AccountIDEncodeRequestGrpcMarshaller.ConfigureTypes();
            AccountIDEncodeResponseGrpcMarshaller.ConfigureTypes();
            AccountIDDecodeRequestGrpcMarshaller.ConfigureTypes();
            AccountIDDecodeResponseGrpcMarshaller.ConfigureTypes();
            Curve25519SecretEncodeRequestGrpcMarshaller.ConfigureTypes();
            Curve25519SecretEncodeResponseGrpcMarshaller.ConfigureTypes();
            Curve25519SecretDecodeRequestGrpcMarshaller.ConfigureTypes();
            Curve25519SecretDecodeResponseGrpcMarshaller.ConfigureTypes();
            Curve25519PublicEncodeRequestGrpcMarshaller.ConfigureTypes();
            Curve25519PublicEncodeResponseGrpcMarshaller.ConfigureTypes();
            Curve25519PublicDecodeRequestGrpcMarshaller.ConfigureTypes();
            Curve25519PublicDecodeResponseGrpcMarshaller.ConfigureTypes();
            HmacSha256KeyEncodeRequestGrpcMarshaller.ConfigureTypes();
            HmacSha256KeyEncodeResponseGrpcMarshaller.ConfigureTypes();
            HmacSha256KeyDecodeRequestGrpcMarshaller.ConfigureTypes();
            HmacSha256KeyDecodeResponseGrpcMarshaller.ConfigureTypes();
            HmacSha256MacEncodeRequestGrpcMarshaller.ConfigureTypes();
            HmacSha256MacEncodeResponseGrpcMarshaller.ConfigureTypes();
            HmacSha256MacDecodeRequestGrpcMarshaller.ConfigureTypes();
            HmacSha256MacDecodeResponseGrpcMarshaller.ConfigureTypes();
            ShortHashSeedEncodeRequestGrpcMarshaller.ConfigureTypes();
            ShortHashSeedEncodeResponseGrpcMarshaller.ConfigureTypes();
            ShortHashSeedDecodeRequestGrpcMarshaller.ConfigureTypes();
            ShortHashSeedDecodeResponseGrpcMarshaller.ConfigureTypes();
            BinaryFuseFilterTypeEncodeRequestGrpcMarshaller.ConfigureTypes();
            BinaryFuseFilterTypeEncodeResponseGrpcMarshaller.ConfigureTypes();
            BinaryFuseFilterTypeDecodeRequestGrpcMarshaller.ConfigureTypes();
            BinaryFuseFilterTypeDecodeResponseGrpcMarshaller.ConfigureTypes();
            SerializedBinaryFuseFilterEncodeRequestGrpcMarshaller.ConfigureTypes();
            SerializedBinaryFuseFilterEncodeResponseGrpcMarshaller.ConfigureTypes();
            SerializedBinaryFuseFilterDecodeRequestGrpcMarshaller.ConfigureTypes();
            SerializedBinaryFuseFilterDecodeResponseGrpcMarshaller.ConfigureTypes();
            NetworkGrpcMarshaller.ConfigureTypes();
            StringWrapperGrpcMarshaller.ConfigureTypes();
            ByteArrayWrapperGrpcMarshaller.ConfigureTypes();
            BoolWrapperGrpcMarshaller.ConfigureTypes();
            EntriesGrpcMarshaller.ConfigureTypes();
            GetEventsParamsGrpcMarshaller.ConfigureTypes();
            FiltersGrpcMarshaller.ConfigureTypes();
            PaginationGrpcMarshaller.ConfigureTypes();
            GetEventsResultGrpcMarshaller.ConfigureTypes();
            EventsGrpcMarshaller.ConfigureTypes();
            Events_TypeGrpcMarshaller.ConfigureTypes();
            GetFeeStatsResultGrpcMarshaller.ConfigureTypes();
            SorobanInclusionFeeGrpcMarshaller.ConfigureTypes();
            InclusionFeeGrpcMarshaller.ConfigureTypes();
            GetHealthResultGrpcMarshaller.ConfigureTypes();
            GetLatestLedgerResultGrpcMarshaller.ConfigureTypes();
            GetLedgerEntriesParamsGrpcMarshaller.ConfigureTypes();
            GetLedgerEntriesResultGrpcMarshaller.ConfigureTypes();
            GetNetworkResultGrpcMarshaller.ConfigureTypes();
            GetTransactionParamsGrpcMarshaller.ConfigureTypes();
            GetTransactionResultGrpcMarshaller.ConfigureTypes();
            GetTransactionResult_StatusGrpcMarshaller.ConfigureTypes();
            GetTransactionsParamsGrpcMarshaller.ConfigureTypes();
            GetTransactionsResultGrpcMarshaller.ConfigureTypes();
            TransactionsGrpcMarshaller.ConfigureTypes();
            GetVersionInfoResultGrpcMarshaller.ConfigureTypes();
            SendTransactionParamsGrpcMarshaller.ConfigureTypes();
            SendTransactionResultGrpcMarshaller.ConfigureTypes();
            SendTransactionResult_StatusGrpcMarshaller.ConfigureTypes();
            SimulateTransactionParamsGrpcMarshaller.ConfigureTypes();
            ResourceConfigResourceConfigGrpcMarshaller.ConfigureTypes();
            SimulateTransactionResultGrpcMarshaller.ConfigureTypes();
            CostGrpcMarshaller.ConfigureTypes();
            ResultsGrpcMarshaller.ConfigureTypes();
            RestorePreambleGrpcMarshaller.ConfigureTypes();
            StateChangesGrpcMarshaller.ConfigureTypes();
            StateChanges_TypeGrpcMarshaller.ConfigureTypes();
            AccountEntryextUnionGrpcMarshaller.ConfigureTypes();
            AccountEntryExtensionV1extUnionGrpcMarshaller.ConfigureTypes();
            AccountEntryExtensionV2extUnionGrpcMarshaller.ConfigureTypes();
            AccountMergeResultAccountMergeSuccessGrpcMarshaller.ConfigureTypes();
            AccountMergeResultAccountMergeMalformedGrpcMarshaller.ConfigureTypes();
            AccountMergeResultAccountMergeNoAccountGrpcMarshaller.ConfigureTypes();
            AccountMergeResultAccountMergeImmutableSetGrpcMarshaller.ConfigureTypes();
            AccountMergeResultAccountMergeHasSubEntriesGrpcMarshaller.ConfigureTypes();
            AccountMergeResultAccountMergeSeqnumTooFarGrpcMarshaller.ConfigureTypes();
            AccountMergeResultAccountMergeDestFullGrpcMarshaller.ConfigureTypes();
            AccountMergeResultAccountMergeIsSponsorGrpcMarshaller.ConfigureTypes();
            AllowTrustResultAllowTrustSuccessGrpcMarshaller.ConfigureTypes();
            AllowTrustResultAllowTrustMalformedGrpcMarshaller.ConfigureTypes();
            AllowTrustResultAllowTrustNoTrustLineGrpcMarshaller.ConfigureTypes();
            AllowTrustResultAllowTrustTrustNotRequiredGrpcMarshaller.ConfigureTypes();
            AllowTrustResultAllowTrustCantRevokeGrpcMarshaller.ConfigureTypes();
            AllowTrustResultAllowTrustSelfNotAllowedGrpcMarshaller.ConfigureTypes();
            AllowTrustResultAllowTrustLowReserveGrpcMarshaller.ConfigureTypes();
            ArchivalProofbodyUnionGrpcMarshaller.ConfigureTypes();
            AssetAssetTypeNativeGrpcMarshaller.ConfigureTypes();
            AssetAssetTypeCreditAlphanum4GrpcMarshaller.ConfigureTypes();
            AssetAssetTypeCreditAlphanum12GrpcMarshaller.ConfigureTypes();
            AssetCodeAssetTypeCreditAlphanum4GrpcMarshaller.ConfigureTypes();
            AssetCodeAssetTypeCreditAlphanum12GrpcMarshaller.ConfigureTypes();
            AuthenticatedMessagev0StructGrpcMarshaller.ConfigureTypes();
            AuthenticatedMessagecase_0GrpcMarshaller.ConfigureTypes();
            BeginSponsoringFutureReservesResultBeginSponsoringFutureReservesSuccessGrpcMarshaller.ConfigureTypes();
            BeginSponsoringFutureReservesResultBeginSponsoringFutureReservesMalformedGrpcMarshaller.ConfigureTypes();
            BeginSponsoringFutureReservesResultBeginSponsoringFutureReservesAlreadySponsoredGrpcMarshaller.ConfigureTypes();
            BeginSponsoringFutureReservesResultBeginSponsoringFutureReservesRecursiveGrpcMarshaller.ConfigureTypes();
            BucketEntryLiveentryGrpcMarshaller.ConfigureTypes();
            BucketEntryInitentryGrpcMarshaller.ConfigureTypes();
            BucketEntryDeadentryGrpcMarshaller.ConfigureTypes();
            BucketEntryMetaentryGrpcMarshaller.ConfigureTypes();
            BucketMetadataextUnionGrpcMarshaller.ConfigureTypes();
            BumpSequenceResultBumpSequenceSuccessGrpcMarshaller.ConfigureTypes();
            BumpSequenceResultBumpSequenceBadSeqGrpcMarshaller.ConfigureTypes();
            ChangeTrustAssetAssetTypeNativeGrpcMarshaller.ConfigureTypes();
            ChangeTrustAssetAssetTypeCreditAlphanum4GrpcMarshaller.ConfigureTypes();
            ChangeTrustAssetAssetTypeCreditAlphanum12GrpcMarshaller.ConfigureTypes();
            ChangeTrustAssetAssetTypePoolShareGrpcMarshaller.ConfigureTypes();
            ChangeTrustResultChangeTrustSuccessGrpcMarshaller.ConfigureTypes();
            ChangeTrustResultChangeTrustMalformedGrpcMarshaller.ConfigureTypes();
            ChangeTrustResultChangeTrustNoIssuerGrpcMarshaller.ConfigureTypes();
            ChangeTrustResultChangeTrustInvalidLimitGrpcMarshaller.ConfigureTypes();
            ChangeTrustResultChangeTrustLowReserveGrpcMarshaller.ConfigureTypes();
            ChangeTrustResultChangeTrustSelfNotAllowedGrpcMarshaller.ConfigureTypes();
            ChangeTrustResultChangeTrustTrustLineMissingGrpcMarshaller.ConfigureTypes();
            ChangeTrustResultChangeTrustCannotDeleteGrpcMarshaller.ConfigureTypes();
            ChangeTrustResultChangeTrustNotAuthMaintainLiabilitiesGrpcMarshaller.ConfigureTypes();
            ClaimableBalanceEntryextUnionGrpcMarshaller.ConfigureTypes();
            ClaimableBalanceEntryExtensionV1extUnionGrpcMarshaller.ConfigureTypes();
            ClaimableBalanceIDClaimableBalanceIdTypeV0GrpcMarshaller.ConfigureTypes();
            Claimantv0StructGrpcMarshaller.ConfigureTypes();
            ClaimantClaimantTypeV0GrpcMarshaller.ConfigureTypes();
            ClaimAtomClaimAtomTypeV0GrpcMarshaller.ConfigureTypes();
            ClaimAtomClaimAtomTypeOrderBookGrpcMarshaller.ConfigureTypes();
            ClaimAtomClaimAtomTypeLiquidityPoolGrpcMarshaller.ConfigureTypes();
            ClaimClaimableBalanceResultClaimClaimableBalanceSuccessGrpcMarshaller.ConfigureTypes();
            ClaimClaimableBalanceResultClaimClaimableBalanceDoesNotExistGrpcMarshaller.ConfigureTypes();
            ClaimClaimableBalanceResultClaimClaimableBalanceCannotClaimGrpcMarshaller.ConfigureTypes();
            ClaimClaimableBalanceResultClaimClaimableBalanceLineFullGrpcMarshaller.ConfigureTypes();
            ClaimClaimableBalanceResultClaimClaimableBalanceNoTrustGrpcMarshaller.ConfigureTypes();
            ClaimClaimableBalanceResultClaimClaimableBalanceNotAuthorizedGrpcMarshaller.ConfigureTypes();
            ClaimPredicateClaimPredicateUnconditionalGrpcMarshaller.ConfigureTypes();
            ClaimPredicateClaimPredicateAndGrpcMarshaller.ConfigureTypes();
            ClaimPredicateClaimPredicateOrGrpcMarshaller.ConfigureTypes();
            ClaimPredicateClaimPredicateNotGrpcMarshaller.ConfigureTypes();
            ClaimPredicateClaimPredicateBeforeAbsoluteTimeGrpcMarshaller.ConfigureTypes();
            ClaimPredicateClaimPredicateBeforeRelativeTimeGrpcMarshaller.ConfigureTypes();
            ClawbackClaimableBalanceResultClawbackClaimableBalanceSuccessGrpcMarshaller.ConfigureTypes();
            ClawbackClaimableBalanceResultClawbackClaimableBalanceDoesNotExistGrpcMarshaller.ConfigureTypes();
            ClawbackClaimableBalanceResultClawbackClaimableBalanceNotIssuerGrpcMarshaller.ConfigureTypes();
            ClawbackClaimableBalanceResultClawbackClaimableBalanceNotClawbackEnabledGrpcMarshaller.ConfigureTypes();
            ClawbackResultClawbackSuccessGrpcMarshaller.ConfigureTypes();
            ClawbackResultClawbackMalformedGrpcMarshaller.ConfigureTypes();
            ClawbackResultClawbackNotClawbackEnabledGrpcMarshaller.ConfigureTypes();
            ClawbackResultClawbackNoTrustGrpcMarshaller.ConfigureTypes();
            ClawbackResultClawbackUnderfundedGrpcMarshaller.ConfigureTypes();
            ColdArchiveBucketEntryColdArchiveMetaentryGrpcMarshaller.ConfigureTypes();
            ColdArchiveBucketEntryColdArchiveArchivedLeafCaseGrpcMarshaller.ConfigureTypes();
            ColdArchiveBucketEntryColdArchiveDeletedLeafCaseGrpcMarshaller.ConfigureTypes();
            ColdArchiveBucketEntryColdArchiveBoundaryLeafCaseGrpcMarshaller.ConfigureTypes();
            ColdArchiveBucketEntryColdArchiveHashGrpcMarshaller.ConfigureTypes();
            ConfigSettingEntryConfigSettingContractMaxSizeBytesGrpcMarshaller.ConfigureTypes();
            ConfigSettingEntryConfigSettingContractComputeV0CaseGrpcMarshaller.ConfigureTypes();
            ConfigSettingEntryConfigSettingContractLedgerCostV0CaseGrpcMarshaller.ConfigureTypes();
            ConfigSettingEntryConfigSettingContractHistoricalDataV0CaseGrpcMarshaller.ConfigureTypes();
            ConfigSettingEntryConfigSettingContractEventsV0CaseGrpcMarshaller.ConfigureTypes();
            ConfigSettingEntryConfigSettingContractBandwidthV0CaseGrpcMarshaller.ConfigureTypes();
            ConfigSettingEntryConfigSettingContractCostParamsCpuInstructionsGrpcMarshaller.ConfigureTypes();
            ConfigSettingEntryConfigSettingContractCostParamsMemoryBytesGrpcMarshaller.ConfigureTypes();
            ConfigSettingEntryConfigSettingContractDataKeySizeBytesGrpcMarshaller.ConfigureTypes();
            ConfigSettingEntryConfigSettingContractDataEntrySizeBytesGrpcMarshaller.ConfigureTypes();
            ConfigSettingEntryConfigSettingStateArchivalGrpcMarshaller.ConfigureTypes();
            ConfigSettingEntryConfigSettingContractExecutionLanesGrpcMarshaller.ConfigureTypes();
            ConfigSettingEntryConfigSettingBucketlistSizeWindowGrpcMarshaller.ConfigureTypes();
            ConfigSettingEntryConfigSettingEvictionIteratorGrpcMarshaller.ConfigureTypes();
            ContractCodeEntryextUnionGrpcMarshaller.ConfigureTypes();
            ContractEventbodyUnionGrpcMarshaller.ConfigureTypes();
            ContractExecutableContractExecutableWasmGrpcMarshaller.ConfigureTypes();
            ContractExecutableContractExecutableStellarAssetGrpcMarshaller.ConfigureTypes();
            ContractIDPreimagefromAddressStructGrpcMarshaller.ConfigureTypes();
            ContractIDPreimageContractIdPreimageFromAddressGrpcMarshaller.ConfigureTypes();
            ContractIDPreimageContractIdPreimageFromAssetGrpcMarshaller.ConfigureTypes();
            CreateAccountResultCreateAccountSuccessGrpcMarshaller.ConfigureTypes();
            CreateAccountResultCreateAccountMalformedGrpcMarshaller.ConfigureTypes();
            CreateAccountResultCreateAccountUnderfundedGrpcMarshaller.ConfigureTypes();
            CreateAccountResultCreateAccountLowReserveGrpcMarshaller.ConfigureTypes();
            CreateAccountResultCreateAccountAlreadyExistGrpcMarshaller.ConfigureTypes();
            CreateClaimableBalanceResultCreateClaimableBalanceSuccessGrpcMarshaller.ConfigureTypes();
            CreateClaimableBalanceResultCreateClaimableBalanceMalformedGrpcMarshaller.ConfigureTypes();
            CreateClaimableBalanceResultCreateClaimableBalanceLowReserveGrpcMarshaller.ConfigureTypes();
            CreateClaimableBalanceResultCreateClaimableBalanceNoTrustGrpcMarshaller.ConfigureTypes();
            CreateClaimableBalanceResultCreateClaimableBalanceNotAuthorizedGrpcMarshaller.ConfigureTypes();
            CreateClaimableBalanceResultCreateClaimableBalanceUnderfundedGrpcMarshaller.ConfigureTypes();
            DataEntryextUnionGrpcMarshaller.ConfigureTypes();
            EndSponsoringFutureReservesResultEndSponsoringFutureReservesSuccessGrpcMarshaller.ConfigureTypes();
            EndSponsoringFutureReservesResultEndSponsoringFutureReservesNotSponsoredGrpcMarshaller.ConfigureTypes();
            ExtendFootprintTTLResultExtendFootprintTtlSuccessGrpcMarshaller.ConfigureTypes();
            ExtendFootprintTTLResultExtendFootprintTtlMalformedGrpcMarshaller.ConfigureTypes();
            ExtendFootprintTTLResultExtendFootprintTtlResourceLimitExceededGrpcMarshaller.ConfigureTypes();
            ExtendFootprintTTLResultExtendFootprintTtlInsufficientRefundableFeeGrpcMarshaller.ConfigureTypes();
            ExtensionPointcase_0GrpcMarshaller.ConfigureTypes();
            FeeBumpTransactioninnerTxUnionGrpcMarshaller.ConfigureTypes();
            FeeBumpTransactionextUnionGrpcMarshaller.ConfigureTypes();
            GeneralizedTransactionSetcase_1GrpcMarshaller.ConfigureTypes();
            HashIDPreimageoperationIDStructGrpcMarshaller.ConfigureTypes();
            HashIDPreimagerevokeIDStructGrpcMarshaller.ConfigureTypes();
            HashIDPreimagecontractIDStructGrpcMarshaller.ConfigureTypes();
            HashIDPreimagesorobanAuthorizationStructGrpcMarshaller.ConfigureTypes();
            HashIDPreimageEnvelopeTypeOpIdGrpcMarshaller.ConfigureTypes();
            HashIDPreimageEnvelopeTypePoolRevokeOpIdGrpcMarshaller.ConfigureTypes();
            HashIDPreimageEnvelopeTypeContractIdGrpcMarshaller.ConfigureTypes();
            HashIDPreimageEnvelopeTypeSorobanAuthorizationGrpcMarshaller.ConfigureTypes();
            HostFunctionHostFunctionTypeInvokeContractGrpcMarshaller.ConfigureTypes();
            HostFunctionHostFunctionTypeCreateContractGrpcMarshaller.ConfigureTypes();
            HostFunctionHostFunctionTypeUploadContractWasmGrpcMarshaller.ConfigureTypes();
            HostFunctionHostFunctionTypeCreateContractV2GrpcMarshaller.ConfigureTypes();
            HotArchiveBucketEntryHotArchiveArchivedGrpcMarshaller.ConfigureTypes();
            HotArchiveBucketEntryHotArchiveLiveGrpcMarshaller.ConfigureTypes();
            HotArchiveBucketEntryHotArchiveDeletedGrpcMarshaller.ConfigureTypes();
            HotArchiveBucketEntryHotArchiveMetaentryGrpcMarshaller.ConfigureTypes();
            InflationResultInflationSuccessGrpcMarshaller.ConfigureTypes();
            InflationResultInflationNotTimeGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultresultUnionGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultextUnionGrpcMarshaller.ConfigureTypes();
            InvokeHostFunctionResultInvokeHostFunctionSuccessGrpcMarshaller.ConfigureTypes();
            InvokeHostFunctionResultInvokeHostFunctionMalformedGrpcMarshaller.ConfigureTypes();
            InvokeHostFunctionResultInvokeHostFunctionTrappedGrpcMarshaller.ConfigureTypes();
            InvokeHostFunctionResultInvokeHostFunctionResourceLimitExceededGrpcMarshaller.ConfigureTypes();
            InvokeHostFunctionResultInvokeHostFunctionEntryArchivedGrpcMarshaller.ConfigureTypes();
            InvokeHostFunctionResultInvokeHostFunctionInsufficientRefundableFeeGrpcMarshaller.ConfigureTypes();
            LedgerCloseMetacase_0GrpcMarshaller.ConfigureTypes();
            LedgerCloseMetacase_1GrpcMarshaller.ConfigureTypes();
            LedgerCloseMetaExtcase_0GrpcMarshaller.ConfigureTypes();
            LedgerCloseMetaExtcase_1GrpcMarshaller.ConfigureTypes();
            LedgerEntrydataUnionGrpcMarshaller.ConfigureTypes();
            LedgerEntryextUnionGrpcMarshaller.ConfigureTypes();
            LedgerEntryChangeLedgerEntryCreatedGrpcMarshaller.ConfigureTypes();
            LedgerEntryChangeLedgerEntryUpdatedGrpcMarshaller.ConfigureTypes();
            LedgerEntryChangeLedgerEntryRemovedGrpcMarshaller.ConfigureTypes();
            LedgerEntryChangeLedgerEntryStateGrpcMarshaller.ConfigureTypes();
            LedgerEntryExtensionV1extUnionGrpcMarshaller.ConfigureTypes();
            LedgerHeaderextUnionGrpcMarshaller.ConfigureTypes();
            LedgerHeaderExtensionV1extUnionGrpcMarshaller.ConfigureTypes();
            LedgerHeaderHistoryEntryextUnionGrpcMarshaller.ConfigureTypes();
            LedgerKeyaccountStructGrpcMarshaller.ConfigureTypes();
            LedgerKeytrustLineStructGrpcMarshaller.ConfigureTypes();
            LedgerKeyofferStructGrpcMarshaller.ConfigureTypes();
            LedgerKeydataStructGrpcMarshaller.ConfigureTypes();
            LedgerKeyclaimableBalanceStructGrpcMarshaller.ConfigureTypes();
            LedgerKeyliquidityPoolStructGrpcMarshaller.ConfigureTypes();
            LedgerKeycontractDataStructGrpcMarshaller.ConfigureTypes();
            LedgerKeycontractCodeStructGrpcMarshaller.ConfigureTypes();
            LedgerKeyconfigSettingStructGrpcMarshaller.ConfigureTypes();
            LedgerKeyttlStructGrpcMarshaller.ConfigureTypes();
            LedgerKeyAccountGrpcMarshaller.ConfigureTypes();
            LedgerKeyTrustlineGrpcMarshaller.ConfigureTypes();
            LedgerKeyOfferGrpcMarshaller.ConfigureTypes();
            LedgerKeyDataGrpcMarshaller.ConfigureTypes();
            LedgerKeyClaimableBalanceGrpcMarshaller.ConfigureTypes();
            LedgerKeyLiquidityPoolGrpcMarshaller.ConfigureTypes();
            LedgerKeyContractDataGrpcMarshaller.ConfigureTypes();
            LedgerKeyContractCodeGrpcMarshaller.ConfigureTypes();
            LedgerKeyConfigSettingGrpcMarshaller.ConfigureTypes();
            LedgerKeyTtlGrpcMarshaller.ConfigureTypes();
            LedgerUpgradeLedgerUpgradeVersionGrpcMarshaller.ConfigureTypes();
            LedgerUpgradeLedgerUpgradeBaseFeeGrpcMarshaller.ConfigureTypes();
            LedgerUpgradeLedgerUpgradeMaxTxSetSizeGrpcMarshaller.ConfigureTypes();
            LedgerUpgradeLedgerUpgradeBaseReserveGrpcMarshaller.ConfigureTypes();
            LedgerUpgradeLedgerUpgradeFlagsGrpcMarshaller.ConfigureTypes();
            LedgerUpgradeLedgerUpgradeConfigGrpcMarshaller.ConfigureTypes();
            LedgerUpgradeLedgerUpgradeMaxSorobanTxSetSizeGrpcMarshaller.ConfigureTypes();
            LiquidityPoolDepositResultLiquidityPoolDepositSuccessGrpcMarshaller.ConfigureTypes();
            LiquidityPoolDepositResultLiquidityPoolDepositMalformedGrpcMarshaller.ConfigureTypes();
            LiquidityPoolDepositResultLiquidityPoolDepositNoTrustGrpcMarshaller.ConfigureTypes();
            LiquidityPoolDepositResultLiquidityPoolDepositNotAuthorizedGrpcMarshaller.ConfigureTypes();
            LiquidityPoolDepositResultLiquidityPoolDepositUnderfundedGrpcMarshaller.ConfigureTypes();
            LiquidityPoolDepositResultLiquidityPoolDepositLineFullGrpcMarshaller.ConfigureTypes();
            LiquidityPoolDepositResultLiquidityPoolDepositBadPriceGrpcMarshaller.ConfigureTypes();
            LiquidityPoolDepositResultLiquidityPoolDepositPoolFullGrpcMarshaller.ConfigureTypes();
            LiquidityPoolEntrybodyUnionGrpcMarshaller.ConfigureTypes();
            LiquidityPoolParametersLiquidityPoolConstantProductGrpcMarshaller.ConfigureTypes();
            LiquidityPoolWithdrawResultLiquidityPoolWithdrawSuccessGrpcMarshaller.ConfigureTypes();
            LiquidityPoolWithdrawResultLiquidityPoolWithdrawMalformedGrpcMarshaller.ConfigureTypes();
            LiquidityPoolWithdrawResultLiquidityPoolWithdrawNoTrustGrpcMarshaller.ConfigureTypes();
            LiquidityPoolWithdrawResultLiquidityPoolWithdrawUnderfundedGrpcMarshaller.ConfigureTypes();
            LiquidityPoolWithdrawResultLiquidityPoolWithdrawLineFullGrpcMarshaller.ConfigureTypes();
            LiquidityPoolWithdrawResultLiquidityPoolWithdrawUnderMinimumGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferResultManageBuyOfferSuccessGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferResultManageBuyOfferMalformedGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferResultManageBuyOfferSellNoTrustGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferResultManageBuyOfferBuyNoTrustGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferResultManageBuyOfferSellNotAuthorizedGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferResultManageBuyOfferBuyNotAuthorizedGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferResultManageBuyOfferLineFullGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferResultManageBuyOfferUnderfundedGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferResultManageBuyOfferCrossSelfGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferResultManageBuyOfferSellNoIssuerGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferResultManageBuyOfferBuyNoIssuerGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferResultManageBuyOfferNotFoundGrpcMarshaller.ConfigureTypes();
            ManageBuyOfferResultManageBuyOfferLowReserveGrpcMarshaller.ConfigureTypes();
            ManageDataResultManageDataSuccessGrpcMarshaller.ConfigureTypes();
            ManageDataResultManageDataNotSupportedYetGrpcMarshaller.ConfigureTypes();
            ManageDataResultManageDataNameNotFoundGrpcMarshaller.ConfigureTypes();
            ManageDataResultManageDataLowReserveGrpcMarshaller.ConfigureTypes();
            ManageDataResultManageDataInvalidNameGrpcMarshaller.ConfigureTypes();
            ManageOfferSuccessResultofferUnionGrpcMarshaller.ConfigureTypes();
            ManageSellOfferResultManageSellOfferSuccessGrpcMarshaller.ConfigureTypes();
            ManageSellOfferResultManageSellOfferMalformedGrpcMarshaller.ConfigureTypes();
            ManageSellOfferResultManageSellOfferSellNoTrustGrpcMarshaller.ConfigureTypes();
            ManageSellOfferResultManageSellOfferBuyNoTrustGrpcMarshaller.ConfigureTypes();
            ManageSellOfferResultManageSellOfferSellNotAuthorizedGrpcMarshaller.ConfigureTypes();
            ManageSellOfferResultManageSellOfferBuyNotAuthorizedGrpcMarshaller.ConfigureTypes();
            ManageSellOfferResultManageSellOfferLineFullGrpcMarshaller.ConfigureTypes();
            ManageSellOfferResultManageSellOfferUnderfundedGrpcMarshaller.ConfigureTypes();
            ManageSellOfferResultManageSellOfferCrossSelfGrpcMarshaller.ConfigureTypes();
            ManageSellOfferResultManageSellOfferSellNoIssuerGrpcMarshaller.ConfigureTypes();
            ManageSellOfferResultManageSellOfferBuyNoIssuerGrpcMarshaller.ConfigureTypes();
            ManageSellOfferResultManageSellOfferNotFoundGrpcMarshaller.ConfigureTypes();
            ManageSellOfferResultManageSellOfferLowReserveGrpcMarshaller.ConfigureTypes();
            MemoMemoNoneGrpcMarshaller.ConfigureTypes();
            MemoMemoTextGrpcMarshaller.ConfigureTypes();
            MemoMemoIdGrpcMarshaller.ConfigureTypes();
            MemoMemoHashGrpcMarshaller.ConfigureTypes();
            MemoMemoReturnGrpcMarshaller.ConfigureTypes();
            MuxedAccountmed25519StructGrpcMarshaller.ConfigureTypes();
            MuxedAccountKeyTypeEd25519GrpcMarshaller.ConfigureTypes();
            MuxedAccountKeyTypeMuxedEd25519GrpcMarshaller.ConfigureTypes();
            OfferEntryextUnionGrpcMarshaller.ConfigureTypes();
            OperationbodyUnionGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionGrpcMarshaller.ConfigureTypes();
            OperationResultOpINNERGrpcMarshaller.ConfigureTypes();
            OperationResultOpbadAuthGrpcMarshaller.ConfigureTypes();
            OperationResultOpnoAccountGrpcMarshaller.ConfigureTypes();
            OperationResultOpnotSupportedGrpcMarshaller.ConfigureTypes();
            OperationResultOptooManySubentriesGrpcMarshaller.ConfigureTypes();
            OperationResultOpexceededWorkLimitGrpcMarshaller.ConfigureTypes();
            OperationResultOptooManySponsoringGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveResultsuccessStructGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveResultPathPaymentStrictReceiveSuccessGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveResultPathPaymentStrictReceiveMalformedGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveResultPathPaymentStrictReceiveUnderfundedGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveResultPathPaymentStrictReceiveSrcNoTrustGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveResultPathPaymentStrictReceiveSrcNotAuthorizedGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveResultPathPaymentStrictReceiveNoDestinationGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveResultPathPaymentStrictReceiveNoTrustGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveResultPathPaymentStrictReceiveNotAuthorizedGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveResultPathPaymentStrictReceiveLineFullGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveResultPathPaymentStrictReceiveNoIssuerGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveResultPathPaymentStrictReceiveTooFewOffersGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveResultPathPaymentStrictReceiveOfferCrossSelfGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictReceiveResultPathPaymentStrictReceiveOverSendmaxGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendResultsuccessStructGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendResultPathPaymentStrictSendSuccessGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendResultPathPaymentStrictSendMalformedGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendResultPathPaymentStrictSendUnderfundedGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendResultPathPaymentStrictSendSrcNoTrustGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendResultPathPaymentStrictSendSrcNotAuthorizedGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendResultPathPaymentStrictSendNoDestinationGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendResultPathPaymentStrictSendNoTrustGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendResultPathPaymentStrictSendNotAuthorizedGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendResultPathPaymentStrictSendLineFullGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendResultPathPaymentStrictSendNoIssuerGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendResultPathPaymentStrictSendTooFewOffersGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendResultPathPaymentStrictSendOfferCrossSelfGrpcMarshaller.ConfigureTypes();
            PathPaymentStrictSendResultPathPaymentStrictSendUnderDestminGrpcMarshaller.ConfigureTypes();
            PaymentResultPaymentSuccessGrpcMarshaller.ConfigureTypes();
            PaymentResultPaymentMalformedGrpcMarshaller.ConfigureTypes();
            PaymentResultPaymentUnderfundedGrpcMarshaller.ConfigureTypes();
            PaymentResultPaymentSrcNoTrustGrpcMarshaller.ConfigureTypes();
            PaymentResultPaymentSrcNotAuthorizedGrpcMarshaller.ConfigureTypes();
            PaymentResultPaymentNoDestinationGrpcMarshaller.ConfigureTypes();
            PaymentResultPaymentNoTrustGrpcMarshaller.ConfigureTypes();
            PaymentResultPaymentNotAuthorizedGrpcMarshaller.ConfigureTypes();
            PaymentResultPaymentLineFullGrpcMarshaller.ConfigureTypes();
            PaymentResultPaymentNoIssuerGrpcMarshaller.ConfigureTypes();
            PeerAddressipUnionGrpcMarshaller.ConfigureTypes();
            PersistedSCPStatecase_0GrpcMarshaller.ConfigureTypes();
            PersistedSCPStatecase_1GrpcMarshaller.ConfigureTypes();
            PreconditionsPrecondNoneGrpcMarshaller.ConfigureTypes();
            PreconditionsPrecondTimeGrpcMarshaller.ConfigureTypes();
            PreconditionsPrecondV2GrpcMarshaller.ConfigureTypes();
            PublicKeyPublicKeyTypeEd25519GrpcMarshaller.ConfigureTypes();
            RestoreFootprintResultRestoreFootprintSuccessGrpcMarshaller.ConfigureTypes();
            RestoreFootprintResultRestoreFootprintMalformedGrpcMarshaller.ConfigureTypes();
            RestoreFootprintResultRestoreFootprintResourceLimitExceededGrpcMarshaller.ConfigureTypes();
            RestoreFootprintResultRestoreFootprintInsufficientRefundableFeeGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipOpsignerStructGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipOpRevokeSponsorshipLedgerEntryGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipOpRevokeSponsorshipSignerGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipResultRevokeSponsorshipSuccessGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipResultRevokeSponsorshipDoesNotExistGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipResultRevokeSponsorshipNotSponsorGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipResultRevokeSponsorshipLowReserveGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipResultRevokeSponsorshipOnlyTransferableGrpcMarshaller.ConfigureTypes();
            RevokeSponsorshipResultRevokeSponsorshipMalformedGrpcMarshaller.ConfigureTypes();
            SCAddressScAddressTypeAccountGrpcMarshaller.ConfigureTypes();
            SCAddressScAddressTypeContractGrpcMarshaller.ConfigureTypes();
            SCEnvMetaEntryinterfaceVersionStructGrpcMarshaller.ConfigureTypes();
            SCEnvMetaEntryScEnvMetaKindInterfaceVersionGrpcMarshaller.ConfigureTypes();
            SCErrorSceContractGrpcMarshaller.ConfigureTypes();
            SCErrorSceWasmVmGrpcMarshaller.ConfigureTypes();
            SCErrorSceContextGrpcMarshaller.ConfigureTypes();
            SCErrorSceStorageGrpcMarshaller.ConfigureTypes();
            SCErrorSceObjectGrpcMarshaller.ConfigureTypes();
            SCErrorSceCryptoGrpcMarshaller.ConfigureTypes();
            SCErrorSceEventsGrpcMarshaller.ConfigureTypes();
            SCErrorSceBudgetGrpcMarshaller.ConfigureTypes();
            SCErrorSceValueGrpcMarshaller.ConfigureTypes();
            SCErrorSceAuthGrpcMarshaller.ConfigureTypes();
            SCMetaEntryScMetaV0GrpcMarshaller.ConfigureTypes();
            SCPHistoryEntrycase_0GrpcMarshaller.ConfigureTypes();
            SCPStatementpledgesUnionGrpcMarshaller.ConfigureTypes();
            SCSpecEntryScSpecEntryFunctionV0GrpcMarshaller.ConfigureTypes();
            SCSpecEntryScSpecEntryUdtStructV0GrpcMarshaller.ConfigureTypes();
            SCSpecEntryScSpecEntryUdtUnionV0GrpcMarshaller.ConfigureTypes();
            SCSpecEntryScSpecEntryUdtEnumV0GrpcMarshaller.ConfigureTypes();
            SCSpecEntryScSpecEntryUdtErrorEnumV0GrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefScSpecTypeValGrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefScSpecTypeBoolGrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefScSpecTypeVoidGrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefScSpecTypeErrorGrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefScSpecTypeU32GrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefScSpecTypeI32GrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefScSpecTypeU64GrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefScSpecTypeI64GrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefScSpecTypeTimepointGrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefScSpecTypeDurationGrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefScSpecTypeU128GrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefScSpecTypeI128GrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefScSpecTypeU256GrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefScSpecTypeI256GrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefScSpecTypeBytesGrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefScSpecTypeStringGrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefScSpecTypeSymbolGrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefScSpecTypeAddressGrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefScSpecTypeOptionGrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefScSpecTypeResultGrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefScSpecTypeVecGrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefScSpecTypeMapGrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefScSpecTypeTupleGrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefScSpecTypeBytesNGrpcMarshaller.ConfigureTypes();
            SCSpecTypeDefScSpecTypeUdtGrpcMarshaller.ConfigureTypes();
            SCSpecUDTUnionCaseV0ScSpecUdtUnionCaseVoidV0GrpcMarshaller.ConfigureTypes();
            SCSpecUDTUnionCaseV0ScSpecUdtUnionCaseTupleV0GrpcMarshaller.ConfigureTypes();
            SCValScvBoolGrpcMarshaller.ConfigureTypes();
            SCValScvVoidGrpcMarshaller.ConfigureTypes();
            SCValScvErrorGrpcMarshaller.ConfigureTypes();
            SCValScvU32GrpcMarshaller.ConfigureTypes();
            SCValScvI32GrpcMarshaller.ConfigureTypes();
            SCValScvU64GrpcMarshaller.ConfigureTypes();
            SCValScvI64GrpcMarshaller.ConfigureTypes();
            SCValScvTimepointGrpcMarshaller.ConfigureTypes();
            SCValScvDurationGrpcMarshaller.ConfigureTypes();
            SCValScvU128GrpcMarshaller.ConfigureTypes();
            SCValScvI128GrpcMarshaller.ConfigureTypes();
            SCValScvU256GrpcMarshaller.ConfigureTypes();
            SCValScvI256GrpcMarshaller.ConfigureTypes();
            SCValScvBytesGrpcMarshaller.ConfigureTypes();
            SCValScvStringGrpcMarshaller.ConfigureTypes();
            SCValScvSymbolGrpcMarshaller.ConfigureTypes();
            SCValScvVecGrpcMarshaller.ConfigureTypes();
            SCValScvMapGrpcMarshaller.ConfigureTypes();
            SCValScvAddressGrpcMarshaller.ConfigureTypes();
            SCValScvLedgerKeyContractInstanceGrpcMarshaller.ConfigureTypes();
            SCValScvLedgerKeyNonceGrpcMarshaller.ConfigureTypes();
            SCValScvContractInstanceGrpcMarshaller.ConfigureTypes();
            SetOptionsResultSetOptionsSuccessGrpcMarshaller.ConfigureTypes();
            SetOptionsResultSetOptionsLowReserveGrpcMarshaller.ConfigureTypes();
            SetOptionsResultSetOptionsTooManySignersGrpcMarshaller.ConfigureTypes();
            SetOptionsResultSetOptionsBadFlagsGrpcMarshaller.ConfigureTypes();
            SetOptionsResultSetOptionsInvalidInflationGrpcMarshaller.ConfigureTypes();
            SetOptionsResultSetOptionsCantChangeGrpcMarshaller.ConfigureTypes();
            SetOptionsResultSetOptionsUnknownFlagGrpcMarshaller.ConfigureTypes();
            SetOptionsResultSetOptionsThresholdOutOfRangeGrpcMarshaller.ConfigureTypes();
            SetOptionsResultSetOptionsBadSignerGrpcMarshaller.ConfigureTypes();
            SetOptionsResultSetOptionsInvalidHomeDomainGrpcMarshaller.ConfigureTypes();
            SetOptionsResultSetOptionsAuthRevocableRequiredGrpcMarshaller.ConfigureTypes();
            SetTrustLineFlagsResultSetTrustLineFlagsSuccessGrpcMarshaller.ConfigureTypes();
            SetTrustLineFlagsResultSetTrustLineFlagsMalformedGrpcMarshaller.ConfigureTypes();
            SetTrustLineFlagsResultSetTrustLineFlagsNoTrustLineGrpcMarshaller.ConfigureTypes();
            SetTrustLineFlagsResultSetTrustLineFlagsCantRevokeGrpcMarshaller.ConfigureTypes();
            SetTrustLineFlagsResultSetTrustLineFlagsInvalidStateGrpcMarshaller.ConfigureTypes();
            SetTrustLineFlagsResultSetTrustLineFlagsLowReserveGrpcMarshaller.ConfigureTypes();
            SignerKeyed25519SignedPayloadStructGrpcMarshaller.ConfigureTypes();
            SignerKeySignerKeyTypeEd25519GrpcMarshaller.ConfigureTypes();
            SignerKeySignerKeyTypePreAuthTxGrpcMarshaller.ConfigureTypes();
            SignerKeySignerKeyTypeHashXGrpcMarshaller.ConfigureTypes();
            SignerKeySignerKeyTypeEd25519SignedPayloadGrpcMarshaller.ConfigureTypes();
            SorobanAuthorizedFunctionSorobanAuthorizedFunctionTypeContractFnGrpcMarshaller.ConfigureTypes();
            SorobanAuthorizedFunctionSorobanAuthorizedFunctionTypeCreateContractHostFnGrpcMarshaller.ConfigureTypes();
            SorobanAuthorizedFunctionSorobanAuthorizedFunctionTypeCreateContractV2HostFnGrpcMarshaller.ConfigureTypes();
            SorobanCredentialsSorobanCredentialsSourceAccountGrpcMarshaller.ConfigureTypes();
            SorobanCredentialsSorobanCredentialsAddressGrpcMarshaller.ConfigureTypes();
            SorobanTransactionMetaExtcase_0GrpcMarshaller.ConfigureTypes();
            SorobanTransactionMetaExtcase_1GrpcMarshaller.ConfigureTypes();
            StellarMessageErrorMsgGrpcMarshaller.ConfigureTypes();
            StellarMessageHelloCaseGrpcMarshaller.ConfigureTypes();
            StellarMessageAuthCaseGrpcMarshaller.ConfigureTypes();
            StellarMessageDontHaveCaseGrpcMarshaller.ConfigureTypes();
            StellarMessagePeersGrpcMarshaller.ConfigureTypes();
            StellarMessageGetTxSetGrpcMarshaller.ConfigureTypes();
            StellarMessageTxSetGrpcMarshaller.ConfigureTypes();
            StellarMessageGeneralizedTxSetGrpcMarshaller.ConfigureTypes();
            StellarMessageTransactionCaseGrpcMarshaller.ConfigureTypes();
            StellarMessageSurveyRequestGrpcMarshaller.ConfigureTypes();
            StellarMessageSurveyResponseGrpcMarshaller.ConfigureTypes();
            StellarMessageTimeSlicedSurveyRequestGrpcMarshaller.ConfigureTypes();
            StellarMessageTimeSlicedSurveyResponseGrpcMarshaller.ConfigureTypes();
            StellarMessageTimeSlicedSurveyStartCollectingGrpcMarshaller.ConfigureTypes();
            StellarMessageTimeSlicedSurveyStopCollectingGrpcMarshaller.ConfigureTypes();
            StellarMessageGetScpQuorumsetGrpcMarshaller.ConfigureTypes();
            StellarMessageScpQuorumsetGrpcMarshaller.ConfigureTypes();
            StellarMessageScpMessageGrpcMarshaller.ConfigureTypes();
            StellarMessageGetScpStateGrpcMarshaller.ConfigureTypes();
            StellarMessageSendMoreCaseGrpcMarshaller.ConfigureTypes();
            StellarMessageSendMoreExtendedCaseGrpcMarshaller.ConfigureTypes();
            StellarMessageFloodAdvertCaseGrpcMarshaller.ConfigureTypes();
            StellarMessageFloodDemandCaseGrpcMarshaller.ConfigureTypes();
            StellarValueextUnionGrpcMarshaller.ConfigureTypes();
            StoredTransactionSetcase_0GrpcMarshaller.ConfigureTypes();
            StoredTransactionSetcase_1GrpcMarshaller.ConfigureTypes();
            SurveyResponseBodySurveyTopologyResponseV0GrpcMarshaller.ConfigureTypes();
            SurveyResponseBodySurveyTopologyResponseV1GrpcMarshaller.ConfigureTypes();
            SurveyResponseBodySurveyTopologyResponseV2GrpcMarshaller.ConfigureTypes();
            TransactionextUnionGrpcMarshaller.ConfigureTypes();
            TransactionEnvelopeEnvelopeTypeTxV0GrpcMarshaller.ConfigureTypes();
            TransactionEnvelopeEnvelopeTypeTxGrpcMarshaller.ConfigureTypes();
            TransactionEnvelopeEnvelopeTypeTxFeeBumpGrpcMarshaller.ConfigureTypes();
            TransactionHistoryEntryextUnionGrpcMarshaller.ConfigureTypes();
            TransactionHistoryResultEntryextUnionGrpcMarshaller.ConfigureTypes();
            TransactionMetacase_0GrpcMarshaller.ConfigureTypes();
            TransactionMetacase_1GrpcMarshaller.ConfigureTypes();
            TransactionMetacase_2GrpcMarshaller.ConfigureTypes();
            TransactionMetacase_3GrpcMarshaller.ConfigureTypes();
            TransactionPhasecase_0GrpcMarshaller.ConfigureTypes();
            TransactionResultresultUnionGrpcMarshaller.ConfigureTypes();
            TransactionResultextUnionGrpcMarshaller.ConfigureTypes();
            TransactionSignaturePayloadtaggedTransactionUnionGrpcMarshaller.ConfigureTypes();
            TransactionV0extUnionGrpcMarshaller.ConfigureTypes();
            TrustLineAssetAssetTypeNativeGrpcMarshaller.ConfigureTypes();
            TrustLineAssetAssetTypeCreditAlphanum4GrpcMarshaller.ConfigureTypes();
            TrustLineAssetAssetTypeCreditAlphanum12GrpcMarshaller.ConfigureTypes();
            TrustLineAssetAssetTypePoolShareGrpcMarshaller.ConfigureTypes();
            TrustLineEntryextUnionGrpcMarshaller.ConfigureTypes();
            TrustLineEntryExtensionV2extUnionGrpcMarshaller.ConfigureTypes();
            TxSetComponenttxsMaybeDiscountedFeeStructGrpcMarshaller.ConfigureTypes();
            TxSetComponentTxsetCompTxsMaybeDiscountedFeeGrpcMarshaller.ConfigureTypes();
            MuxedAccount_ProtoWrapperBIP39SeedParamGrpcMarshaller.ConfigureTypes();
            MuxedAccount_ProtoWrapperBIP39SeedBytesParamGrpcMarshaller.ConfigureTypes();
            MuxedAccount_ProtoWrapperSignMessageGrpcMarshaller.ConfigureTypes();
            MuxedAccount_ProtoWrapperVerifyMessageGrpcMarshaller.ConfigureTypes();
            MuxedAccount_ProtoWrapperCreateEd25519ParamGrpcMarshaller.ConfigureTypes();
            MuxedAccount_ProtoWrapperCreateMuxedEd25519ParamGrpcMarshaller.ConfigureTypes();
            Network_ProtoWrapperUseParamGrpcMarshaller.ConfigureTypes();
            Network_ProtoWrapperCreateNetworkParamGrpcMarshaller.ConfigureTypes();
            Network_ProtoWrapperSetUrlParamGrpcMarshaller.ConfigureTypes();
            Network_ProtoWrapperGetCurrentResultGrpcMarshaller.ConfigureTypes();
            Network_ProtoWrapperIsPublicNetworkParamGrpcMarshaller.ConfigureTypes();
            Transaction_ProtoWrapperSignParamGrpcMarshaller.ConfigureTypes();
            Transaction_ProtoWrapperCloneParamGrpcMarshaller.ConfigureTypes();
            Transaction_ProtoWrapperIsSorobanParamGrpcMarshaller.ConfigureTypes();
            SimulateTransactionResult_ProtoWrapperApplyToParamGrpcMarshaller.ConfigureTypes();
            AccountEntryextUnioncase_0GrpcMarshaller.ConfigureTypes();
            AccountEntryextUnioncase_1GrpcMarshaller.ConfigureTypes();
            AccountEntryExtensionV1extUnioncase_0GrpcMarshaller.ConfigureTypes();
            AccountEntryExtensionV1extUnioncase_2GrpcMarshaller.ConfigureTypes();
            AccountEntryExtensionV2extUnioncase_0GrpcMarshaller.ConfigureTypes();
            AccountEntryExtensionV2extUnioncase_3GrpcMarshaller.ConfigureTypes();
            ArchivalProofbodyUnionExistenceGrpcMarshaller.ConfigureTypes();
            ArchivalProofbodyUnionNonexistenceGrpcMarshaller.ConfigureTypes();
            BucketMetadataextUnioncase_0GrpcMarshaller.ConfigureTypes();
            BucketMetadataextUnioncase_1GrpcMarshaller.ConfigureTypes();
            ClaimableBalanceEntryextUnioncase_0GrpcMarshaller.ConfigureTypes();
            ClaimableBalanceEntryextUnioncase_1GrpcMarshaller.ConfigureTypes();
            ClaimableBalanceEntryExtensionV1extUnioncase_0GrpcMarshaller.ConfigureTypes();
            ContractCodeEntryextUnionv1StructGrpcMarshaller.ConfigureTypes();
            ContractCodeEntryextUnioncase_0GrpcMarshaller.ConfigureTypes();
            ContractCodeEntryextUnioncase_1GrpcMarshaller.ConfigureTypes();
            ContractEventbodyUnionv0StructGrpcMarshaller.ConfigureTypes();
            ContractEventbodyUnioncase_0GrpcMarshaller.ConfigureTypes();
            DataEntryextUnioncase_0GrpcMarshaller.ConfigureTypes();
            FeeBumpTransactioninnerTxUnionEnvelopeTypeTxGrpcMarshaller.ConfigureTypes();
            FeeBumpTransactionextUnioncase_0GrpcMarshaller.ConfigureTypes();
            InnerTransactionResultresultUnionTxSUCCESSGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultresultUnionTxFAILEDGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultresultUnionTxtooEarlyGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultresultUnionTxtooLateGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultresultUnionTxmissingOperationGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultresultUnionTxbadSeqGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultresultUnionTxbadAuthGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultresultUnionTxinsufficientBalanceGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultresultUnionTxnoAccountGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultresultUnionTxinsufficientFeeGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultresultUnionTxbadAuthExtraGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultresultUnionTxinternalErrorGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultresultUnionTxnotSupportedGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultresultUnionTxbadSponsorshipGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultresultUnionTxbadMinSeqAgeOrGapGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultresultUnionTxMALFORMEDGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultresultUnionTxsorobanInvalidGrpcMarshaller.ConfigureTypes();
            InnerTransactionResultextUnioncase_0GrpcMarshaller.ConfigureTypes();
            LedgerEntrydataUnionAccountGrpcMarshaller.ConfigureTypes();
            LedgerEntrydataUnionTrustlineGrpcMarshaller.ConfigureTypes();
            LedgerEntrydataUnionOfferGrpcMarshaller.ConfigureTypes();
            LedgerEntrydataUnionDataGrpcMarshaller.ConfigureTypes();
            LedgerEntrydataUnionClaimableBalanceGrpcMarshaller.ConfigureTypes();
            LedgerEntrydataUnionLiquidityPoolGrpcMarshaller.ConfigureTypes();
            LedgerEntrydataUnionContractDataGrpcMarshaller.ConfigureTypes();
            LedgerEntrydataUnionContractCodeGrpcMarshaller.ConfigureTypes();
            LedgerEntrydataUnionConfigSettingGrpcMarshaller.ConfigureTypes();
            LedgerEntrydataUnionTtlGrpcMarshaller.ConfigureTypes();
            LedgerEntryextUnioncase_0GrpcMarshaller.ConfigureTypes();
            LedgerEntryextUnioncase_1GrpcMarshaller.ConfigureTypes();
            LedgerEntryExtensionV1extUnioncase_0GrpcMarshaller.ConfigureTypes();
            LedgerHeaderextUnioncase_0GrpcMarshaller.ConfigureTypes();
            LedgerHeaderextUnioncase_1GrpcMarshaller.ConfigureTypes();
            LedgerHeaderExtensionV1extUnioncase_0GrpcMarshaller.ConfigureTypes();
            LedgerHeaderHistoryEntryextUnioncase_0GrpcMarshaller.ConfigureTypes();
            LiquidityPoolEntrybodyUnionconstantProductStructGrpcMarshaller.ConfigureTypes();
            LiquidityPoolEntrybodyUnionLiquidityPoolConstantProductGrpcMarshaller.ConfigureTypes();
            ManageOfferSuccessResultofferUnionManageOfferCreatedGrpcMarshaller.ConfigureTypes();
            ManageOfferSuccessResultofferUnionManageOfferUpdatedGrpcMarshaller.ConfigureTypes();
            ManageOfferSuccessResultofferUnionManageOfferDeletedGrpcMarshaller.ConfigureTypes();
            OfferEntryextUnioncase_0GrpcMarshaller.ConfigureTypes();
            OperationbodyUnionCreateAccountGrpcMarshaller.ConfigureTypes();
            OperationbodyUnionPaymentGrpcMarshaller.ConfigureTypes();
            OperationbodyUnionPathPaymentStrictReceiveGrpcMarshaller.ConfigureTypes();
            OperationbodyUnionManageSellOfferGrpcMarshaller.ConfigureTypes();
            OperationbodyUnionCreatePassiveSellOfferGrpcMarshaller.ConfigureTypes();
            OperationbodyUnionSetOptionsGrpcMarshaller.ConfigureTypes();
            OperationbodyUnionChangeTrustGrpcMarshaller.ConfigureTypes();
            OperationbodyUnionAllowTrustGrpcMarshaller.ConfigureTypes();
            OperationbodyUnionAccountMergeGrpcMarshaller.ConfigureTypes();
            OperationbodyUnionInflationGrpcMarshaller.ConfigureTypes();
            OperationbodyUnionManageDataGrpcMarshaller.ConfigureTypes();
            OperationbodyUnionBumpSequenceGrpcMarshaller.ConfigureTypes();
            OperationbodyUnionManageBuyOfferGrpcMarshaller.ConfigureTypes();
            OperationbodyUnionPathPaymentStrictSendGrpcMarshaller.ConfigureTypes();
            OperationbodyUnionCreateClaimableBalanceGrpcMarshaller.ConfigureTypes();
            OperationbodyUnionClaimClaimableBalanceGrpcMarshaller.ConfigureTypes();
            OperationbodyUnionBeginSponsoringFutureReservesGrpcMarshaller.ConfigureTypes();
            OperationbodyUnionEndSponsoringFutureReservesGrpcMarshaller.ConfigureTypes();
            OperationbodyUnionRevokeSponsorshipGrpcMarshaller.ConfigureTypes();
            OperationbodyUnionClawbackGrpcMarshaller.ConfigureTypes();
            OperationbodyUnionClawbackClaimableBalanceGrpcMarshaller.ConfigureTypes();
            OperationbodyUnionSetTrustLineFlagsGrpcMarshaller.ConfigureTypes();
            OperationbodyUnionLiquidityPoolDepositGrpcMarshaller.ConfigureTypes();
            OperationbodyUnionLiquidityPoolWithdrawGrpcMarshaller.ConfigureTypes();
            OperationbodyUnionInvokeHostFunctionGrpcMarshaller.ConfigureTypes();
            OperationbodyUnionExtendFootprintTtlGrpcMarshaller.ConfigureTypes();
            OperationbodyUnionRestoreFootprintGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionCreateAccountGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionPaymentGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionPathPaymentStrictReceiveGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionManageSellOfferGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionCreatePassiveSellOfferGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionSetOptionsGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionChangeTrustGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionAllowTrustGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionAccountMergeGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionInflationGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionManageDataGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionBumpSequenceGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionManageBuyOfferGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionPathPaymentStrictSendGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionCreateClaimableBalanceGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionClaimClaimableBalanceGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionBeginSponsoringFutureReservesGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionEndSponsoringFutureReservesGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionRevokeSponsorshipGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionClawbackGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionClawbackClaimableBalanceGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionSetTrustLineFlagsGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionLiquidityPoolDepositGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionLiquidityPoolWithdrawGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionInvokeHostFunctionGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionExtendFootprintTtlGrpcMarshaller.ConfigureTypes();
            OperationResulttrUnionRestoreFootprintGrpcMarshaller.ConfigureTypes();
            PeerAddressipUnionIPv4GrpcMarshaller.ConfigureTypes();
            PeerAddressipUnionIPv6GrpcMarshaller.ConfigureTypes();
            SCPStatementpledgesUnionprepareStructGrpcMarshaller.ConfigureTypes();
            SCPStatementpledgesUnionconfirmStructGrpcMarshaller.ConfigureTypes();
            SCPStatementpledgesUnionexternalizeStructGrpcMarshaller.ConfigureTypes();
            SCPStatementpledgesUnionScpStPrepareGrpcMarshaller.ConfigureTypes();
            SCPStatementpledgesUnionScpStConfirmGrpcMarshaller.ConfigureTypes();
            SCPStatementpledgesUnionScpStExternalizeGrpcMarshaller.ConfigureTypes();
            SCPStatementpledgesUnionScpStNominateGrpcMarshaller.ConfigureTypes();
            StellarValueextUnionStellarValueBasicGrpcMarshaller.ConfigureTypes();
            StellarValueextUnionStellarValueSignedGrpcMarshaller.ConfigureTypes();
            TransactionextUnioncase_0GrpcMarshaller.ConfigureTypes();
            TransactionextUnioncase_1GrpcMarshaller.ConfigureTypes();
            TransactionHistoryEntryextUnioncase_0GrpcMarshaller.ConfigureTypes();
            TransactionHistoryEntryextUnioncase_1GrpcMarshaller.ConfigureTypes();
            TransactionHistoryResultEntryextUnioncase_0GrpcMarshaller.ConfigureTypes();
            TransactionResultresultUnionTxfeeBumpInnerSuccessGrpcMarshaller.ConfigureTypes();
            TransactionResultresultUnionTxfeeBumpInnerFailedGrpcMarshaller.ConfigureTypes();
            TransactionResultresultUnionTxSUCCESSGrpcMarshaller.ConfigureTypes();
            TransactionResultresultUnionTxFAILEDGrpcMarshaller.ConfigureTypes();
            TransactionResultresultUnionTxtooEarlyGrpcMarshaller.ConfigureTypes();
            TransactionResultresultUnionTxtooLateGrpcMarshaller.ConfigureTypes();
            TransactionResultresultUnionTxmissingOperationGrpcMarshaller.ConfigureTypes();
            TransactionResultresultUnionTxbadSeqGrpcMarshaller.ConfigureTypes();
            TransactionResultresultUnionTxbadAuthGrpcMarshaller.ConfigureTypes();
            TransactionResultresultUnionTxinsufficientBalanceGrpcMarshaller.ConfigureTypes();
            TransactionResultresultUnionTxnoAccountGrpcMarshaller.ConfigureTypes();
            TransactionResultresultUnionTxinsufficientFeeGrpcMarshaller.ConfigureTypes();
            TransactionResultresultUnionTxbadAuthExtraGrpcMarshaller.ConfigureTypes();
            TransactionResultresultUnionTxinternalErrorGrpcMarshaller.ConfigureTypes();
            TransactionResultresultUnionTxnotSupportedGrpcMarshaller.ConfigureTypes();
            TransactionResultresultUnionTxbadSponsorshipGrpcMarshaller.ConfigureTypes();
            TransactionResultresultUnionTxbadMinSeqAgeOrGapGrpcMarshaller.ConfigureTypes();
            TransactionResultresultUnionTxMALFORMEDGrpcMarshaller.ConfigureTypes();
            TransactionResultresultUnionTxsorobanInvalidGrpcMarshaller.ConfigureTypes();
            TransactionResultextUnioncase_0GrpcMarshaller.ConfigureTypes();
            TransactionSignaturePayloadtaggedTransactionUnionEnvelopeTypeTxGrpcMarshaller.ConfigureTypes();
            TransactionSignaturePayloadtaggedTransactionUnionEnvelopeTypeTxFeeBumpGrpcMarshaller.ConfigureTypes();
            TransactionV0extUnioncase_0GrpcMarshaller.ConfigureTypes();
            TrustLineEntryextUnionv1StructGrpcMarshaller.ConfigureTypes();
            TrustLineEntryextUnioncase_0GrpcMarshaller.ConfigureTypes();
            TrustLineEntryextUnioncase_1GrpcMarshaller.ConfigureTypes();
            TrustLineEntryExtensionV2extUnioncase_0GrpcMarshaller.ConfigureTypes();
            TrustLineEntryextUnionv1StructextUnionGrpcMarshaller.ConfigureTypes();
            TrustLineEntryextUnionv1StructextUnioncase_0GrpcMarshaller.ConfigureTypes();
            TrustLineEntryextUnionv1StructextUnioncase_2GrpcMarshaller.ConfigureTypes();

            // Map IXdrProtoService methods
            endpoints.MapPost("/XdrProtoService/EncodeConfigSettingContractExecutionLanesV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingContractExecutionLanesV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeConfigSettingContractExecutionLanesV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeConfigSettingContractExecutionLanesV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeConfigSettingContractExecutionLanesV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingContractExecutionLanesV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeConfigSettingContractExecutionLanesV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeConfigSettingContractExecutionLanesV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeConfigSettingContractComputeV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingContractComputeV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeConfigSettingContractComputeV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeConfigSettingContractComputeV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeConfigSettingContractComputeV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingContractComputeV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeConfigSettingContractComputeV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeConfigSettingContractComputeV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeConfigSettingContractLedgerCostV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingContractLedgerCostV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeConfigSettingContractLedgerCostV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeConfigSettingContractLedgerCostV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeConfigSettingContractLedgerCostV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingContractLedgerCostV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeConfigSettingContractLedgerCostV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeConfigSettingContractLedgerCostV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeConfigSettingContractHistoricalDataV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingContractHistoricalDataV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeConfigSettingContractHistoricalDataV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeConfigSettingContractHistoricalDataV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeConfigSettingContractHistoricalDataV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingContractHistoricalDataV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeConfigSettingContractHistoricalDataV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeConfigSettingContractHistoricalDataV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeConfigSettingContractEventsV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingContractEventsV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeConfigSettingContractEventsV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeConfigSettingContractEventsV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeConfigSettingContractEventsV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingContractEventsV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeConfigSettingContractEventsV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeConfigSettingContractEventsV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeConfigSettingContractBandwidthV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingContractBandwidthV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeConfigSettingContractBandwidthV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeConfigSettingContractBandwidthV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeConfigSettingContractBandwidthV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingContractBandwidthV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeConfigSettingContractBandwidthV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeConfigSettingContractBandwidthV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeContractCostType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractCostTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeContractCostType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeContractCostType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeContractCostType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractCostTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeContractCostType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeContractCostType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeContractCostParamEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractCostParamEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeContractCostParamEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeContractCostParamEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeContractCostParamEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractCostParamEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeContractCostParamEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeContractCostParamEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeStateArchivalSettings", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StateArchivalSettingsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeStateArchivalSettings(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeStateArchivalSettings");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeStateArchivalSettings", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StateArchivalSettingsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeStateArchivalSettings(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeStateArchivalSettings");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeEvictionIterator", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.EvictionIteratorEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeEvictionIterator(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeEvictionIterator");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeEvictionIterator", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.EvictionIteratorDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeEvictionIterator(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeEvictionIterator");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeContractCostParams", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractCostParamsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeContractCostParams(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeContractCostParams");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeContractCostParams", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractCostParamsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeContractCostParams(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeContractCostParams");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeConfigSettingID", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingIDEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeConfigSettingID(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeConfigSettingID");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeConfigSettingID", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingIDDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeConfigSettingID(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeConfigSettingID");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeConfigSettingEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeConfigSettingEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeConfigSettingEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeConfigSettingEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeConfigSettingEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeConfigSettingEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCEnvMetaKind", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCEnvMetaKindEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCEnvMetaKind(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCEnvMetaKind");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCEnvMetaKind", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCEnvMetaKindDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCEnvMetaKind(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCEnvMetaKind");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCEnvMetaEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCEnvMetaEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCEnvMetaEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCEnvMetaEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCEnvMetaEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCEnvMetaEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCEnvMetaEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCEnvMetaEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCMetaV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCMetaV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCMetaV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCMetaV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCMetaV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCMetaV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCMetaV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCMetaV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCMetaKind", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCMetaKindEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCMetaKind(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCMetaKind");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCMetaKind", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCMetaKindDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCMetaKind(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCMetaKind");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCMetaEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCMetaEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCMetaEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCMetaEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCMetaEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCMetaEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCMetaEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCMetaEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecTypeOption", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeOptionEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecTypeOption(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecTypeOption");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecTypeOption", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeOptionDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecTypeOption(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecTypeOption");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecTypeResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecTypeResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecTypeResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecTypeResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecTypeResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecTypeResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecTypeVec", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeVecEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecTypeVec(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecTypeVec");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecTypeVec", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeVecDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecTypeVec(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecTypeVec");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecTypeMap", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeMapEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecTypeMap(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecTypeMap");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecTypeMap", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeMapDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecTypeMap(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecTypeMap");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecTypeTuple", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeTupleEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecTypeTuple(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecTypeTuple");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecTypeTuple", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeTupleDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecTypeTuple(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecTypeTuple");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecTypeBytesN", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeBytesNEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecTypeBytesN(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecTypeBytesN");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecTypeBytesN", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeBytesNDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecTypeBytesN(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecTypeBytesN");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecTypeUDT", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeUDTEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecTypeUDT(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecTypeUDT");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecTypeUDT", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeUDTDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecTypeUDT(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecTypeUDT");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecTypeDef", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeDefEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecTypeDef(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecTypeDef");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecTypeDef", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeDefDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecTypeDef(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecTypeDef");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecUDTStructFieldV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTStructFieldV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecUDTStructFieldV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecUDTStructFieldV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecUDTStructFieldV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTStructFieldV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecUDTStructFieldV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecUDTStructFieldV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecUDTStructV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTStructV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecUDTStructV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecUDTStructV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecUDTStructV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTStructV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecUDTStructV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecUDTStructV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecUDTUnionCaseVoidV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseVoidV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecUDTUnionCaseVoidV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecUDTUnionCaseVoidV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecUDTUnionCaseVoidV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseVoidV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecUDTUnionCaseVoidV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecUDTUnionCaseVoidV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecUDTUnionCaseTupleV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseTupleV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecUDTUnionCaseTupleV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecUDTUnionCaseTupleV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecUDTUnionCaseTupleV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseTupleV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecUDTUnionCaseTupleV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecUDTUnionCaseTupleV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecUDTUnionCaseV0Kind", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseV0KindEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecUDTUnionCaseV0Kind(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecUDTUnionCaseV0Kind");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecUDTUnionCaseV0Kind", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseV0KindDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecUDTUnionCaseV0Kind(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecUDTUnionCaseV0Kind");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecUDTUnionCaseV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecUDTUnionCaseV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecUDTUnionCaseV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecUDTUnionCaseV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecUDTUnionCaseV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecUDTUnionCaseV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecUDTUnionV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTUnionV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecUDTUnionV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecUDTUnionV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecUDTUnionV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTUnionV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecUDTUnionV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecUDTUnionV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecUDTEnumCaseV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTEnumCaseV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecUDTEnumCaseV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecUDTEnumCaseV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecUDTEnumCaseV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTEnumCaseV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecUDTEnumCaseV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecUDTEnumCaseV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecUDTEnumV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTEnumV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecUDTEnumV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecUDTEnumV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecUDTEnumV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTEnumV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecUDTEnumV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecUDTEnumV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecUDTErrorEnumCaseV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTErrorEnumCaseV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecUDTErrorEnumCaseV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecUDTErrorEnumCaseV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecUDTErrorEnumCaseV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTErrorEnumCaseV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecUDTErrorEnumCaseV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecUDTErrorEnumCaseV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecUDTErrorEnumV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTErrorEnumV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecUDTErrorEnumV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecUDTErrorEnumV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecUDTErrorEnumV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTErrorEnumV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecUDTErrorEnumV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecUDTErrorEnumV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecFunctionInputV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecFunctionInputV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecFunctionInputV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecFunctionInputV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecFunctionInputV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecFunctionInputV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecFunctionInputV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecFunctionInputV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecFunctionV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecFunctionV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecFunctionV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecFunctionV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecFunctionV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecFunctionV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecFunctionV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecFunctionV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecEntryKind", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecEntryKindEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecEntryKind(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecEntryKind");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecEntryKind", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecEntryKindDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecEntryKind(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecEntryKind");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCValType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCValTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCValType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCValType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCValType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCValTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCValType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCValType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCErrorType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCErrorTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCErrorType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCErrorType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCErrorType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCErrorTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCErrorType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCErrorType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCErrorCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCErrorCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCErrorCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCErrorCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCErrorCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCErrorCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCErrorCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCErrorCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCError", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCErrorEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCError(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCError");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCError", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCErrorDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCError(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCError");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeUInt128Parts", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.UInt128PartsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeUInt128Parts(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeUInt128Parts");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeUInt128Parts", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.UInt128PartsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeUInt128Parts(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeUInt128Parts");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeInt128Parts", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Int128PartsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeInt128Parts(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeInt128Parts");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeInt128Parts", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Int128PartsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeInt128Parts(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeInt128Parts");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeUInt256Parts", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.UInt256PartsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeUInt256Parts(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeUInt256Parts");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeUInt256Parts", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.UInt256PartsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeUInt256Parts(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeUInt256Parts");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeInt256Parts", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Int256PartsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeInt256Parts(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeInt256Parts");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeInt256Parts", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Int256PartsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeInt256Parts(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeInt256Parts");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeContractExecutableType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractExecutableTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeContractExecutableType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeContractExecutableType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeContractExecutableType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractExecutableTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeContractExecutableType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeContractExecutableType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeContractExecutable", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractExecutableEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeContractExecutable(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeContractExecutable");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeContractExecutable", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractExecutableDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeContractExecutable(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeContractExecutable");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCAddressType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCAddressTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCAddressType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCAddressType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCAddressType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCAddressTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCAddressType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCAddressType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCAddress", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCAddressEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCAddress(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCAddress");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCAddress", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCAddressDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCAddress(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCAddress");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCVec", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCVecEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCVec(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCVec");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCVec", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCVecDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCVec(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCVec");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCMap", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCMapEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCMap(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCMap");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCMap", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCMapDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCMap(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCMap");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCBytes", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCBytesEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCBytes(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCBytes");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCBytes", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCBytesDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCBytes(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCBytes");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCString", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCStringEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCString(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCString");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCString", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCStringDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCString(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCString");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSymbol", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSymbolEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSymbol(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSymbol");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSymbol", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSymbolDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSymbol(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSymbol");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCNonceKey", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCNonceKeyEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCNonceKey(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCNonceKey");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCNonceKey", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCNonceKeyDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCNonceKey(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCNonceKey");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCContractInstance", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCContractInstanceEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCContractInstance(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCContractInstance");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCContractInstance", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCContractInstanceDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCContractInstance(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCContractInstance");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCVal", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCValEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCVal(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCVal");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCVal", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCValDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCVal(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCVal");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCMapEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCMapEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCMapEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCMapEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCMapEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCMapEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCMapEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCMapEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeStoredTransactionSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StoredTransactionSetEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeStoredTransactionSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeStoredTransactionSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeStoredTransactionSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StoredTransactionSetDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeStoredTransactionSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeStoredTransactionSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeStoredDebugTransactionSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StoredDebugTransactionSetEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeStoredDebugTransactionSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeStoredDebugTransactionSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeStoredDebugTransactionSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StoredDebugTransactionSetDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeStoredDebugTransactionSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeStoredDebugTransactionSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePersistedSCPStateV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PersistedSCPStateV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePersistedSCPStateV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePersistedSCPStateV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePersistedSCPStateV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PersistedSCPStateV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePersistedSCPStateV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePersistedSCPStateV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePersistedSCPStateV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PersistedSCPStateV1EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePersistedSCPStateV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePersistedSCPStateV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePersistedSCPStateV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PersistedSCPStateV1DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePersistedSCPStateV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePersistedSCPStateV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePersistedSCPState", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PersistedSCPStateEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePersistedSCPState(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePersistedSCPState");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePersistedSCPState", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PersistedSCPStateDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePersistedSCPState(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePersistedSCPState");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeThresholds", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ThresholdsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeThresholds(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeThresholds");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeThresholds", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ThresholdsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeThresholds(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeThresholds");
                }
            });
            endpoints.MapPost("/XdrProtoService/Encodestring32", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.string32EncodeRequest>(ms);

                    // Call service method
                    var response = await service.Encodestring32(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Encodestring32");
                }
            });
            endpoints.MapPost("/XdrProtoService/Decodestring32", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.string32DecodeRequest>(ms);

                    // Call service method
                    var response = await service.Decodestring32(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Decodestring32");
                }
            });
            endpoints.MapPost("/XdrProtoService/Encodestring64", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.string64EncodeRequest>(ms);

                    // Call service method
                    var response = await service.Encodestring64(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Encodestring64");
                }
            });
            endpoints.MapPost("/XdrProtoService/Decodestring64", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.string64DecodeRequest>(ms);

                    // Call service method
                    var response = await service.Decodestring64(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Decodestring64");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSequenceNumber", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SequenceNumberEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSequenceNumber(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSequenceNumber");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSequenceNumber", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SequenceNumberDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSequenceNumber(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSequenceNumber");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeDataValue", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DataValueEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeDataValue(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeDataValue");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeDataValue", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DataValueDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeDataValue(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeDataValue");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePoolID", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PoolIDEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePoolID(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePoolID");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePoolID", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PoolIDDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePoolID(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePoolID");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAssetCode4", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AssetCode4EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAssetCode4(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAssetCode4");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAssetCode4", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AssetCode4DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAssetCode4(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAssetCode4");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAssetCode12", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AssetCode12EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAssetCode12(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAssetCode12");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAssetCode12", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AssetCode12DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAssetCode12(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAssetCode12");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAssetType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AssetTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAssetType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAssetType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAssetType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AssetTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAssetType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAssetType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAssetCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AssetCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAssetCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAssetCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAssetCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AssetCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAssetCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAssetCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAlphaNum4", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AlphaNum4EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAlphaNum4(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAlphaNum4");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAlphaNum4", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AlphaNum4DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAlphaNum4(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAlphaNum4");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAlphaNum12", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AlphaNum12EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAlphaNum12(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAlphaNum12");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAlphaNum12", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AlphaNum12DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAlphaNum12(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAlphaNum12");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAsset", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AssetEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAsset(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAsset");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAsset", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AssetDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAsset(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAsset");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePrice", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PriceEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePrice(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePrice");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePrice", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PriceDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePrice(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePrice");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLiabilities", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiabilitiesEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLiabilities(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLiabilities");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLiabilities", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiabilitiesDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLiabilities(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLiabilities");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeThresholdIndexes", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ThresholdIndexesEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeThresholdIndexes(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeThresholdIndexes");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeThresholdIndexes", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ThresholdIndexesDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeThresholdIndexes(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeThresholdIndexes");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerEntryType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerEntryTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerEntryType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerEntryType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerEntryType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerEntryTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerEntryType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerEntryType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSigner", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignerEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSigner(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSigner");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSigner", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignerDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSigner(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSigner");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAccountFlags", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountFlagsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAccountFlags(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAccountFlags");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAccountFlags", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountFlagsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAccountFlags(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAccountFlags");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSponsorshipDescriptor", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SponsorshipDescriptorEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSponsorshipDescriptor(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSponsorshipDescriptor");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSponsorshipDescriptor", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SponsorshipDescriptorDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSponsorshipDescriptor(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSponsorshipDescriptor");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAccountEntryExtensionV3", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountEntryExtensionV3EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAccountEntryExtensionV3(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAccountEntryExtensionV3");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAccountEntryExtensionV3", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountEntryExtensionV3DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAccountEntryExtensionV3(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAccountEntryExtensionV3");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAccountEntryExtensionV2", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountEntryExtensionV2EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAccountEntryExtensionV2(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAccountEntryExtensionV2");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAccountEntryExtensionV2", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountEntryExtensionV2DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAccountEntryExtensionV2(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAccountEntryExtensionV2");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAccountEntryExtensionV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountEntryExtensionV1EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAccountEntryExtensionV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAccountEntryExtensionV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAccountEntryExtensionV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountEntryExtensionV1DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAccountEntryExtensionV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAccountEntryExtensionV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAccountEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAccountEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAccountEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAccountEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAccountEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAccountEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTrustLineFlags", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TrustLineFlagsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTrustLineFlags(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTrustLineFlags");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTrustLineFlags", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TrustLineFlagsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTrustLineFlags(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTrustLineFlags");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLiquidityPoolType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLiquidityPoolType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLiquidityPoolType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLiquidityPoolType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLiquidityPoolType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLiquidityPoolType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTrustLineAsset", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TrustLineAssetEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTrustLineAsset(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTrustLineAsset");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTrustLineAsset", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TrustLineAssetDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTrustLineAsset(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTrustLineAsset");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTrustLineEntryExtensionV2", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TrustLineEntryExtensionV2EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTrustLineEntryExtensionV2(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTrustLineEntryExtensionV2");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTrustLineEntryExtensionV2", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TrustLineEntryExtensionV2DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTrustLineEntryExtensionV2(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTrustLineEntryExtensionV2");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTrustLineEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TrustLineEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTrustLineEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTrustLineEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTrustLineEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TrustLineEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTrustLineEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTrustLineEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeOfferEntryFlags", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OfferEntryFlagsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeOfferEntryFlags(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeOfferEntryFlags");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeOfferEntryFlags", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OfferEntryFlagsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeOfferEntryFlags(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeOfferEntryFlags");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeOfferEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OfferEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeOfferEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeOfferEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeOfferEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OfferEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeOfferEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeOfferEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeDataEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DataEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeDataEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeDataEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeDataEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DataEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeDataEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeDataEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimPredicateType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimPredicateTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimPredicateType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimPredicateType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimPredicateType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimPredicateTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimPredicateType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimPredicateType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimPredicate", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimPredicateEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimPredicate(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimPredicate");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimPredicate", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimPredicateDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimPredicate(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimPredicate");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimantType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimantTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimantType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimantType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimantType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimantTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimantType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimantType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimant", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimantEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimant(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimant");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimant", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimantDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimant(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimant");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimableBalanceIDType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimableBalanceIDTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimableBalanceIDType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimableBalanceIDType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimableBalanceIDType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimableBalanceIDTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimableBalanceIDType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimableBalanceIDType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimableBalanceID", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimableBalanceIDEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimableBalanceID(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimableBalanceID");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimableBalanceID", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimableBalanceIDDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimableBalanceID(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimableBalanceID");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimableBalanceFlags", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimableBalanceFlagsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimableBalanceFlags(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimableBalanceFlags");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimableBalanceFlags", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimableBalanceFlagsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimableBalanceFlags(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimableBalanceFlags");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimableBalanceEntryExtensionV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimableBalanceEntryExtensionV1EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimableBalanceEntryExtensionV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimableBalanceEntryExtensionV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimableBalanceEntryExtensionV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimableBalanceEntryExtensionV1DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimableBalanceEntryExtensionV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimableBalanceEntryExtensionV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimableBalanceEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimableBalanceEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimableBalanceEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimableBalanceEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimableBalanceEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimableBalanceEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimableBalanceEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimableBalanceEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLiquidityPoolConstantProductParameters", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolConstantProductParametersEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLiquidityPoolConstantProductParameters(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLiquidityPoolConstantProductParameters");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLiquidityPoolConstantProductParameters", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolConstantProductParametersDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLiquidityPoolConstantProductParameters(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLiquidityPoolConstantProductParameters");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLiquidityPoolEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLiquidityPoolEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLiquidityPoolEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLiquidityPoolEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLiquidityPoolEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLiquidityPoolEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeContractDataDurability", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractDataDurabilityEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeContractDataDurability(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeContractDataDurability");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeContractDataDurability", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractDataDurabilityDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeContractDataDurability(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeContractDataDurability");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeContractDataEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractDataEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeContractDataEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeContractDataEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeContractDataEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractDataEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeContractDataEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeContractDataEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeContractCodeCostInputs", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractCodeCostInputsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeContractCodeCostInputs(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeContractCodeCostInputs");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeContractCodeCostInputs", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractCodeCostInputsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeContractCodeCostInputs(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeContractCodeCostInputs");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeContractCodeEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractCodeEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeContractCodeEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeContractCodeEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeContractCodeEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractCodeEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeContractCodeEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeContractCodeEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTTLEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TTLEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTTLEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTTLEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTTLEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TTLEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTTLEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTTLEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerEntryExtensionV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerEntryExtensionV1EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerEntryExtensionV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerEntryExtensionV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerEntryExtensionV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerEntryExtensionV1DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerEntryExtensionV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerEntryExtensionV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerKey", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerKeyEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerKey(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerKey");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerKey", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerKeyDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerKey(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerKey");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeEnvelopeType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.EnvelopeTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeEnvelopeType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeEnvelopeType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeEnvelopeType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.EnvelopeTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeEnvelopeType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeEnvelopeType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeBucketListType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BucketListTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeBucketListType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeBucketListType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeBucketListType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BucketListTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeBucketListType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeBucketListType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeBucketEntryType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BucketEntryTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeBucketEntryType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeBucketEntryType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeBucketEntryType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BucketEntryTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeBucketEntryType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeBucketEntryType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeHotArchiveBucketEntryType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HotArchiveBucketEntryTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeHotArchiveBucketEntryType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeHotArchiveBucketEntryType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeHotArchiveBucketEntryType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HotArchiveBucketEntryTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeHotArchiveBucketEntryType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeHotArchiveBucketEntryType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeColdArchiveBucketEntryType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ColdArchiveBucketEntryTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeColdArchiveBucketEntryType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeColdArchiveBucketEntryType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeColdArchiveBucketEntryType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ColdArchiveBucketEntryTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeColdArchiveBucketEntryType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeColdArchiveBucketEntryType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeBucketMetadata", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BucketMetadataEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeBucketMetadata(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeBucketMetadata");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeBucketMetadata", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BucketMetadataDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeBucketMetadata(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeBucketMetadata");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeBucketEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BucketEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeBucketEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeBucketEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeBucketEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BucketEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeBucketEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeBucketEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeHotArchiveBucketEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HotArchiveBucketEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeHotArchiveBucketEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeHotArchiveBucketEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeHotArchiveBucketEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HotArchiveBucketEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeHotArchiveBucketEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeHotArchiveBucketEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeColdArchiveArchivedLeaf", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ColdArchiveArchivedLeafEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeColdArchiveArchivedLeaf(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeColdArchiveArchivedLeaf");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeColdArchiveArchivedLeaf", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ColdArchiveArchivedLeafDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeColdArchiveArchivedLeaf(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeColdArchiveArchivedLeaf");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeColdArchiveDeletedLeaf", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ColdArchiveDeletedLeafEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeColdArchiveDeletedLeaf(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeColdArchiveDeletedLeaf");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeColdArchiveDeletedLeaf", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ColdArchiveDeletedLeafDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeColdArchiveDeletedLeaf(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeColdArchiveDeletedLeaf");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeColdArchiveBoundaryLeaf", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ColdArchiveBoundaryLeafEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeColdArchiveBoundaryLeaf(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeColdArchiveBoundaryLeaf");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeColdArchiveBoundaryLeaf", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ColdArchiveBoundaryLeafDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeColdArchiveBoundaryLeaf(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeColdArchiveBoundaryLeaf");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeColdArchiveHashEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ColdArchiveHashEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeColdArchiveHashEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeColdArchiveHashEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeColdArchiveHashEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ColdArchiveHashEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeColdArchiveHashEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeColdArchiveHashEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeColdArchiveBucketEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ColdArchiveBucketEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeColdArchiveBucketEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeColdArchiveBucketEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeColdArchiveBucketEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ColdArchiveBucketEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeColdArchiveBucketEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeColdArchiveBucketEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeUpgradeType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.UpgradeTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeUpgradeType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeUpgradeType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeUpgradeType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.UpgradeTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeUpgradeType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeUpgradeType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeStellarValueType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StellarValueTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeStellarValueType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeStellarValueType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeStellarValueType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StellarValueTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeStellarValueType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeStellarValueType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerCloseValueSignature", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerCloseValueSignatureEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerCloseValueSignature(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerCloseValueSignature");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerCloseValueSignature", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerCloseValueSignatureDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerCloseValueSignature(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerCloseValueSignature");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeStellarValue", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StellarValueEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeStellarValue(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeStellarValue");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeStellarValue", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StellarValueDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeStellarValue(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeStellarValue");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerHeaderFlags", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerHeaderFlagsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerHeaderFlags(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerHeaderFlags");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerHeaderFlags", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerHeaderFlagsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerHeaderFlags(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerHeaderFlags");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerHeaderExtensionV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerHeaderExtensionV1EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerHeaderExtensionV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerHeaderExtensionV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerHeaderExtensionV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerHeaderExtensionV1DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerHeaderExtensionV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerHeaderExtensionV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerHeader", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerHeaderEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerHeader(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerHeader");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerHeader", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerHeaderDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerHeader(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerHeader");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerUpgradeType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerUpgradeTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerUpgradeType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerUpgradeType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerUpgradeType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerUpgradeTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerUpgradeType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerUpgradeType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeConfigUpgradeSetKey", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigUpgradeSetKeyEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeConfigUpgradeSetKey(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeConfigUpgradeSetKey");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeConfigUpgradeSetKey", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigUpgradeSetKeyDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeConfigUpgradeSetKey(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeConfigUpgradeSetKey");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerUpgrade", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerUpgradeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerUpgrade(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerUpgrade");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerUpgrade", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerUpgradeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerUpgrade(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerUpgrade");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeConfigUpgradeSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigUpgradeSetEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeConfigUpgradeSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeConfigUpgradeSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeConfigUpgradeSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigUpgradeSetDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeConfigUpgradeSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeConfigUpgradeSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTxSetComponentType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TxSetComponentTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTxSetComponentType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTxSetComponentType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTxSetComponentType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TxSetComponentTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTxSetComponentType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTxSetComponentType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTxSetComponent", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TxSetComponentEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTxSetComponent(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTxSetComponent");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTxSetComponent", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TxSetComponentDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTxSetComponent(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTxSetComponent");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionPhase", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionPhaseEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionPhase(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionPhase");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionPhase", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionPhaseDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionPhase(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionPhase");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionSetEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionSetDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionSetV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionSetV1EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionSetV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionSetV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionSetV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionSetV1DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionSetV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionSetV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeGeneralizedTransactionSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.GeneralizedTransactionSetEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeGeneralizedTransactionSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeGeneralizedTransactionSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeGeneralizedTransactionSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.GeneralizedTransactionSetDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeGeneralizedTransactionSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeGeneralizedTransactionSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionResultPair", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionResultPairEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionResultPair(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionResultPair");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionResultPair", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionResultPairDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionResultPair(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionResultPair");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionResultSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionResultSetEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionResultSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionResultSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionResultSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionResultSetDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionResultSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionResultSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionHistoryEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionHistoryEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionHistoryEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionHistoryEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionHistoryEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionHistoryEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionHistoryEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionHistoryEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionHistoryResultEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionHistoryResultEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionHistoryResultEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionHistoryResultEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionHistoryResultEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionHistoryResultEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionHistoryResultEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionHistoryResultEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerHeaderHistoryEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerHeaderHistoryEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerHeaderHistoryEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerHeaderHistoryEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerHeaderHistoryEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerHeaderHistoryEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerHeaderHistoryEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerHeaderHistoryEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerSCPMessages", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerSCPMessagesEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerSCPMessages(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerSCPMessages");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerSCPMessages", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerSCPMessagesDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerSCPMessages(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerSCPMessages");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCPHistoryEntryV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPHistoryEntryV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCPHistoryEntryV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCPHistoryEntryV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCPHistoryEntryV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPHistoryEntryV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCPHistoryEntryV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCPHistoryEntryV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCPHistoryEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPHistoryEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCPHistoryEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCPHistoryEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCPHistoryEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPHistoryEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCPHistoryEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCPHistoryEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerEntryChangeType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerEntryChangeTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerEntryChangeType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerEntryChangeType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerEntryChangeType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerEntryChangeTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerEntryChangeType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerEntryChangeType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerEntryChange", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerEntryChangeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerEntryChange(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerEntryChange");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerEntryChange", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerEntryChangeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerEntryChange(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerEntryChange");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerEntryChanges", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerEntryChangesEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerEntryChanges(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerEntryChanges");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerEntryChanges", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerEntryChangesDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerEntryChanges(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerEntryChanges");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeOperationMeta", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OperationMetaEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeOperationMeta(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeOperationMeta");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeOperationMeta", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OperationMetaDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeOperationMeta(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeOperationMeta");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionMetaV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionMetaV1EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionMetaV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionMetaV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionMetaV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionMetaV1DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionMetaV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionMetaV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionMetaV2", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionMetaV2EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionMetaV2(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionMetaV2");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionMetaV2", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionMetaV2DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionMetaV2(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionMetaV2");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeContractEventType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractEventTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeContractEventType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeContractEventType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeContractEventType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractEventTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeContractEventType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeContractEventType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeContractEvent", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractEventEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeContractEvent(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeContractEvent");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeContractEvent", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractEventDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeContractEvent(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeContractEvent");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeDiagnosticEvent", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DiagnosticEventEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeDiagnosticEvent(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeDiagnosticEvent");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeDiagnosticEvent", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DiagnosticEventDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeDiagnosticEvent(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeDiagnosticEvent");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeDiagnosticEvents", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DiagnosticEventsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeDiagnosticEvents(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeDiagnosticEvents");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeDiagnosticEvents", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DiagnosticEventsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeDiagnosticEvents(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeDiagnosticEvents");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSorobanTransactionMetaExtV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanTransactionMetaExtV1EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSorobanTransactionMetaExtV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSorobanTransactionMetaExtV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSorobanTransactionMetaExtV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanTransactionMetaExtV1DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSorobanTransactionMetaExtV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSorobanTransactionMetaExtV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSorobanTransactionMetaExt", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanTransactionMetaExtEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSorobanTransactionMetaExt(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSorobanTransactionMetaExt");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSorobanTransactionMetaExt", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanTransactionMetaExtDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSorobanTransactionMetaExt(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSorobanTransactionMetaExt");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSorobanTransactionMeta", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanTransactionMetaEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSorobanTransactionMeta(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSorobanTransactionMeta");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSorobanTransactionMeta", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanTransactionMetaDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSorobanTransactionMeta(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSorobanTransactionMeta");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionMetaV3", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionMetaV3EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionMetaV3(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionMetaV3");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionMetaV3", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionMetaV3DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionMetaV3(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionMetaV3");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeInvokeHostFunctionSuccessPreImage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InvokeHostFunctionSuccessPreImageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeInvokeHostFunctionSuccessPreImage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeInvokeHostFunctionSuccessPreImage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeInvokeHostFunctionSuccessPreImage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InvokeHostFunctionSuccessPreImageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeInvokeHostFunctionSuccessPreImage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeInvokeHostFunctionSuccessPreImage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionMeta", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionMetaEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionMeta(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionMeta");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionMeta", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionMetaDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionMeta(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionMeta");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionResultMeta", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionResultMetaEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionResultMeta(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionResultMeta");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionResultMeta", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionResultMetaDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionResultMeta(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionResultMeta");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeUpgradeEntryMeta", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.UpgradeEntryMetaEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeUpgradeEntryMeta(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeUpgradeEntryMeta");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeUpgradeEntryMeta", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.UpgradeEntryMetaDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeUpgradeEntryMeta(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeUpgradeEntryMeta");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerCloseMetaV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerCloseMetaV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerCloseMetaV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerCloseMetaV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerCloseMetaV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerCloseMetaV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerCloseMetaV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerCloseMetaV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerCloseMetaExtV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerCloseMetaExtV1EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerCloseMetaExtV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerCloseMetaExtV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerCloseMetaExtV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerCloseMetaExtV1DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerCloseMetaExtV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerCloseMetaExtV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerCloseMetaExt", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerCloseMetaExtEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerCloseMetaExt(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerCloseMetaExt");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerCloseMetaExt", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerCloseMetaExtDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerCloseMetaExt(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerCloseMetaExt");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerCloseMetaV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerCloseMetaV1EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerCloseMetaV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerCloseMetaV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerCloseMetaV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerCloseMetaV1DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerCloseMetaV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerCloseMetaV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerCloseMeta", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerCloseMetaEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerCloseMeta(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerCloseMeta");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerCloseMeta", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerCloseMetaDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerCloseMeta(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerCloseMeta");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeErrorCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ErrorCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeErrorCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeErrorCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeErrorCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ErrorCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeErrorCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeErrorCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeError", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ErrorEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeError(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeError");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeError", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ErrorDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeError(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeError");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSendMore", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SendMoreEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSendMore(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSendMore");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSendMore", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SendMoreDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSendMore(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSendMore");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSendMoreExtended", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SendMoreExtendedEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSendMoreExtended(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSendMoreExtended");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSendMoreExtended", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SendMoreExtendedDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSendMoreExtended(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSendMoreExtended");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAuthCert", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AuthCertEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAuthCert(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAuthCert");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAuthCert", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AuthCertDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAuthCert(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAuthCert");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeHello", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HelloEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeHello(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeHello");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeHello", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HelloDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeHello(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeHello");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAuth", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AuthEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAuth(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAuth");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAuth", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AuthDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAuth(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAuth");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeIPAddrType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.IPAddrTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeIPAddrType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeIPAddrType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeIPAddrType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.IPAddrTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeIPAddrType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeIPAddrType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePeerAddress", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PeerAddressEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePeerAddress(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePeerAddress");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePeerAddress", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PeerAddressDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePeerAddress(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePeerAddress");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeMessageType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MessageTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeMessageType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeMessageType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeMessageType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MessageTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeMessageType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeMessageType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeDontHave", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DontHaveEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeDontHave(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeDontHave");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeDontHave", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DontHaveDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeDontHave(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeDontHave");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSurveyMessageCommandType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SurveyMessageCommandTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSurveyMessageCommandType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSurveyMessageCommandType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSurveyMessageCommandType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SurveyMessageCommandTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSurveyMessageCommandType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSurveyMessageCommandType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSurveyMessageResponseType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SurveyMessageResponseTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSurveyMessageResponseType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSurveyMessageResponseType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSurveyMessageResponseType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SurveyMessageResponseTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSurveyMessageResponseType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSurveyMessageResponseType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTimeSlicedSurveyStartCollectingMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedSurveyStartCollectingMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTimeSlicedSurveyStartCollectingMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTimeSlicedSurveyStartCollectingMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTimeSlicedSurveyStartCollectingMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedSurveyStartCollectingMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTimeSlicedSurveyStartCollectingMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTimeSlicedSurveyStartCollectingMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSignedTimeSlicedSurveyStartCollectingMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSignedTimeSlicedSurveyStartCollectingMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSignedTimeSlicedSurveyStartCollectingMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSignedTimeSlicedSurveyStartCollectingMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSignedTimeSlicedSurveyStartCollectingMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSignedTimeSlicedSurveyStartCollectingMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTimeSlicedSurveyStopCollectingMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedSurveyStopCollectingMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTimeSlicedSurveyStopCollectingMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTimeSlicedSurveyStopCollectingMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTimeSlicedSurveyStopCollectingMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedSurveyStopCollectingMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTimeSlicedSurveyStopCollectingMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTimeSlicedSurveyStopCollectingMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSignedTimeSlicedSurveyStopCollectingMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSignedTimeSlicedSurveyStopCollectingMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSignedTimeSlicedSurveyStopCollectingMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSignedTimeSlicedSurveyStopCollectingMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSignedTimeSlicedSurveyStopCollectingMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSignedTimeSlicedSurveyStopCollectingMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSurveyRequestMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SurveyRequestMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSurveyRequestMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSurveyRequestMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSurveyRequestMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SurveyRequestMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSurveyRequestMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSurveyRequestMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTimeSlicedSurveyRequestMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedSurveyRequestMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTimeSlicedSurveyRequestMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTimeSlicedSurveyRequestMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTimeSlicedSurveyRequestMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedSurveyRequestMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTimeSlicedSurveyRequestMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTimeSlicedSurveyRequestMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSignedSurveyRequestMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignedSurveyRequestMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSignedSurveyRequestMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSignedSurveyRequestMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSignedSurveyRequestMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignedSurveyRequestMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSignedSurveyRequestMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSignedSurveyRequestMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSignedTimeSlicedSurveyRequestMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyRequestMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSignedTimeSlicedSurveyRequestMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSignedTimeSlicedSurveyRequestMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSignedTimeSlicedSurveyRequestMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyRequestMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSignedTimeSlicedSurveyRequestMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSignedTimeSlicedSurveyRequestMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeEncryptedBody", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.EncryptedBodyEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeEncryptedBody(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeEncryptedBody");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeEncryptedBody", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.EncryptedBodyDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeEncryptedBody(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeEncryptedBody");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSurveyResponseMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SurveyResponseMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSurveyResponseMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSurveyResponseMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSurveyResponseMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SurveyResponseMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSurveyResponseMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSurveyResponseMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTimeSlicedSurveyResponseMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedSurveyResponseMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTimeSlicedSurveyResponseMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTimeSlicedSurveyResponseMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTimeSlicedSurveyResponseMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedSurveyResponseMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTimeSlicedSurveyResponseMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTimeSlicedSurveyResponseMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSignedSurveyResponseMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignedSurveyResponseMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSignedSurveyResponseMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSignedSurveyResponseMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSignedSurveyResponseMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignedSurveyResponseMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSignedSurveyResponseMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSignedSurveyResponseMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSignedTimeSlicedSurveyResponseMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyResponseMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSignedTimeSlicedSurveyResponseMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSignedTimeSlicedSurveyResponseMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSignedTimeSlicedSurveyResponseMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyResponseMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSignedTimeSlicedSurveyResponseMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSignedTimeSlicedSurveyResponseMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePeerStats", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PeerStatsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePeerStats(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePeerStats");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePeerStats", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PeerStatsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePeerStats(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePeerStats");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePeerStatList", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PeerStatListEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePeerStatList(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePeerStatList");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePeerStatList", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PeerStatListDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePeerStatList(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePeerStatList");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTimeSlicedNodeData", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedNodeDataEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTimeSlicedNodeData(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTimeSlicedNodeData");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTimeSlicedNodeData", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedNodeDataDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTimeSlicedNodeData(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTimeSlicedNodeData");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTimeSlicedPeerData", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedPeerDataEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTimeSlicedPeerData(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTimeSlicedPeerData");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTimeSlicedPeerData", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedPeerDataDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTimeSlicedPeerData(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTimeSlicedPeerData");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTimeSlicedPeerDataList", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedPeerDataListEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTimeSlicedPeerDataList(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTimeSlicedPeerDataList");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTimeSlicedPeerDataList", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedPeerDataListDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTimeSlicedPeerDataList(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTimeSlicedPeerDataList");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTopologyResponseBodyV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TopologyResponseBodyV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTopologyResponseBodyV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTopologyResponseBodyV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTopologyResponseBodyV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TopologyResponseBodyV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTopologyResponseBodyV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTopologyResponseBodyV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTopologyResponseBodyV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TopologyResponseBodyV1EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTopologyResponseBodyV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTopologyResponseBodyV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTopologyResponseBodyV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TopologyResponseBodyV1DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTopologyResponseBodyV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTopologyResponseBodyV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTopologyResponseBodyV2", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TopologyResponseBodyV2EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTopologyResponseBodyV2(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTopologyResponseBodyV2");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTopologyResponseBodyV2", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TopologyResponseBodyV2DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTopologyResponseBodyV2(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTopologyResponseBodyV2");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSurveyResponseBody", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SurveyResponseBodyEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSurveyResponseBody(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSurveyResponseBody");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSurveyResponseBody", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SurveyResponseBodyDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSurveyResponseBody(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSurveyResponseBody");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTxAdvertVector", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TxAdvertVectorEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTxAdvertVector(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTxAdvertVector");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTxAdvertVector", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TxAdvertVectorDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTxAdvertVector(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTxAdvertVector");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeFloodAdvert", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.FloodAdvertEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeFloodAdvert(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeFloodAdvert");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeFloodAdvert", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.FloodAdvertDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeFloodAdvert(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeFloodAdvert");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTxDemandVector", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TxDemandVectorEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTxDemandVector(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTxDemandVector");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTxDemandVector", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TxDemandVectorDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTxDemandVector(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTxDemandVector");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeFloodDemand", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.FloodDemandEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeFloodDemand(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeFloodDemand");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeFloodDemand", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.FloodDemandDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeFloodDemand(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeFloodDemand");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeStellarMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StellarMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeStellarMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeStellarMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeStellarMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StellarMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeStellarMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeStellarMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAuthenticatedMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AuthenticatedMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAuthenticatedMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAuthenticatedMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAuthenticatedMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AuthenticatedMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAuthenticatedMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAuthenticatedMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeValue", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ValueEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeValue(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeValue");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeValue", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ValueDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeValue(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeValue");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCPBallot", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPBallotEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCPBallot(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCPBallot");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCPBallot", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPBallotDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCPBallot(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCPBallot");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCPStatementType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPStatementTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCPStatementType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCPStatementType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCPStatementType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPStatementTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCPStatementType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCPStatementType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCPNomination", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPNominationEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCPNomination(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCPNomination");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCPNomination", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPNominationDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCPNomination(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCPNomination");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCPStatement", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPStatementEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCPStatement(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCPStatement");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCPStatement", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPStatementDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCPStatement(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCPStatement");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCPEnvelope", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPEnvelopeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCPEnvelope(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCPEnvelope");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCPEnvelope", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPEnvelopeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCPEnvelope(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCPEnvelope");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCPQuorumSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPQuorumSetEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCPQuorumSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCPQuorumSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCPQuorumSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPQuorumSetDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCPQuorumSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCPQuorumSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLiquidityPoolParameters", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolParametersEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLiquidityPoolParameters(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLiquidityPoolParameters");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLiquidityPoolParameters", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolParametersDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLiquidityPoolParameters(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLiquidityPoolParameters");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeMuxedAccount", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccountEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeMuxedAccount(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeMuxedAccount");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeMuxedAccount", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccountDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeMuxedAccount(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeMuxedAccount");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeDecoratedSignature", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DecoratedSignatureEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeDecoratedSignature(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeDecoratedSignature");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeDecoratedSignature", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DecoratedSignatureDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeDecoratedSignature(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeDecoratedSignature");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeOperationType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OperationTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeOperationType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeOperationType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeOperationType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OperationTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeOperationType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeOperationType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeCreateAccountOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateAccountOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeCreateAccountOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeCreateAccountOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeCreateAccountOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateAccountOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeCreateAccountOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeCreateAccountOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePaymentOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PaymentOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePaymentOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePaymentOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePaymentOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PaymentOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePaymentOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePaymentOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePathPaymentStrictReceiveOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PathPaymentStrictReceiveOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePathPaymentStrictReceiveOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePathPaymentStrictReceiveOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePathPaymentStrictReceiveOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PathPaymentStrictReceiveOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePathPaymentStrictReceiveOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePathPaymentStrictReceiveOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePathPaymentStrictSendOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PathPaymentStrictSendOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePathPaymentStrictSendOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePathPaymentStrictSendOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePathPaymentStrictSendOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PathPaymentStrictSendOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePathPaymentStrictSendOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePathPaymentStrictSendOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeManageSellOfferOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageSellOfferOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeManageSellOfferOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeManageSellOfferOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeManageSellOfferOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageSellOfferOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeManageSellOfferOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeManageSellOfferOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeManageBuyOfferOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageBuyOfferOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeManageBuyOfferOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeManageBuyOfferOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeManageBuyOfferOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageBuyOfferOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeManageBuyOfferOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeManageBuyOfferOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeCreatePassiveSellOfferOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreatePassiveSellOfferOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeCreatePassiveSellOfferOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeCreatePassiveSellOfferOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeCreatePassiveSellOfferOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreatePassiveSellOfferOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeCreatePassiveSellOfferOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeCreatePassiveSellOfferOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSetOptionsOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SetOptionsOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSetOptionsOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSetOptionsOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSetOptionsOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SetOptionsOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSetOptionsOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSetOptionsOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeChangeTrustAsset", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ChangeTrustAssetEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeChangeTrustAsset(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeChangeTrustAsset");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeChangeTrustAsset", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ChangeTrustAssetDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeChangeTrustAsset(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeChangeTrustAsset");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeChangeTrustOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ChangeTrustOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeChangeTrustOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeChangeTrustOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeChangeTrustOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ChangeTrustOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeChangeTrustOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeChangeTrustOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAllowTrustOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AllowTrustOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAllowTrustOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAllowTrustOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAllowTrustOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AllowTrustOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAllowTrustOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAllowTrustOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeManageDataOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageDataOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeManageDataOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeManageDataOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeManageDataOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageDataOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeManageDataOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeManageDataOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeBumpSequenceOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BumpSequenceOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeBumpSequenceOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeBumpSequenceOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeBumpSequenceOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BumpSequenceOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeBumpSequenceOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeBumpSequenceOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeCreateClaimableBalanceOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateClaimableBalanceOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeCreateClaimableBalanceOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeCreateClaimableBalanceOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeCreateClaimableBalanceOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateClaimableBalanceOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeCreateClaimableBalanceOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeCreateClaimableBalanceOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimClaimableBalanceOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimClaimableBalanceOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimClaimableBalanceOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimClaimableBalanceOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimClaimableBalanceOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimClaimableBalanceOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimClaimableBalanceOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimClaimableBalanceOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeBeginSponsoringFutureReservesOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeBeginSponsoringFutureReservesOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeBeginSponsoringFutureReservesOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeBeginSponsoringFutureReservesOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeBeginSponsoringFutureReservesOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeBeginSponsoringFutureReservesOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeRevokeSponsorshipType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RevokeSponsorshipTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeRevokeSponsorshipType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeRevokeSponsorshipType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeRevokeSponsorshipType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RevokeSponsorshipTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeRevokeSponsorshipType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeRevokeSponsorshipType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeRevokeSponsorshipOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RevokeSponsorshipOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeRevokeSponsorshipOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeRevokeSponsorshipOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeRevokeSponsorshipOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RevokeSponsorshipOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeRevokeSponsorshipOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeRevokeSponsorshipOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClawbackOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClawbackOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClawbackOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClawbackOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClawbackOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClawbackOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClawbackOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClawbackOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClawbackClaimableBalanceOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClawbackClaimableBalanceOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClawbackClaimableBalanceOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClawbackClaimableBalanceOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClawbackClaimableBalanceOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClawbackClaimableBalanceOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClawbackClaimableBalanceOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClawbackClaimableBalanceOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSetTrustLineFlagsOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SetTrustLineFlagsOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSetTrustLineFlagsOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSetTrustLineFlagsOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSetTrustLineFlagsOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SetTrustLineFlagsOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSetTrustLineFlagsOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSetTrustLineFlagsOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLiquidityPoolDepositOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolDepositOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLiquidityPoolDepositOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLiquidityPoolDepositOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLiquidityPoolDepositOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolDepositOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLiquidityPoolDepositOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLiquidityPoolDepositOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLiquidityPoolWithdrawOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolWithdrawOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLiquidityPoolWithdrawOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLiquidityPoolWithdrawOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLiquidityPoolWithdrawOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolWithdrawOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLiquidityPoolWithdrawOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLiquidityPoolWithdrawOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeHostFunctionType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HostFunctionTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeHostFunctionType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeHostFunctionType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeHostFunctionType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HostFunctionTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeHostFunctionType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeHostFunctionType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeContractIDPreimageType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractIDPreimageTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeContractIDPreimageType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeContractIDPreimageType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeContractIDPreimageType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractIDPreimageTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeContractIDPreimageType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeContractIDPreimageType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeContractIDPreimage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractIDPreimageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeContractIDPreimage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeContractIDPreimage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeContractIDPreimage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractIDPreimageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeContractIDPreimage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeContractIDPreimage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeCreateContractArgs", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateContractArgsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeCreateContractArgs(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeCreateContractArgs");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeCreateContractArgs", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateContractArgsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeCreateContractArgs(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeCreateContractArgs");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeCreateContractArgsV2", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateContractArgsV2EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeCreateContractArgsV2(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeCreateContractArgsV2");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeCreateContractArgsV2", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateContractArgsV2DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeCreateContractArgsV2(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeCreateContractArgsV2");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeInvokeContractArgs", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InvokeContractArgsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeInvokeContractArgs(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeInvokeContractArgs");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeInvokeContractArgs", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InvokeContractArgsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeInvokeContractArgs(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeInvokeContractArgs");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeHostFunction", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HostFunctionEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeHostFunction(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeHostFunction");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeHostFunction", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HostFunctionDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeHostFunction(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeHostFunction");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSorobanAuthorizedFunctionType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanAuthorizedFunctionTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSorobanAuthorizedFunctionType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSorobanAuthorizedFunctionType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSorobanAuthorizedFunctionType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanAuthorizedFunctionTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSorobanAuthorizedFunctionType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSorobanAuthorizedFunctionType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSorobanAuthorizedFunction", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanAuthorizedFunctionEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSorobanAuthorizedFunction(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSorobanAuthorizedFunction");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSorobanAuthorizedFunction", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanAuthorizedFunctionDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSorobanAuthorizedFunction(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSorobanAuthorizedFunction");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSorobanAuthorizedInvocation", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanAuthorizedInvocationEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSorobanAuthorizedInvocation(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSorobanAuthorizedInvocation");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSorobanAuthorizedInvocation", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanAuthorizedInvocationDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSorobanAuthorizedInvocation(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSorobanAuthorizedInvocation");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSorobanAddressCredentials", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanAddressCredentialsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSorobanAddressCredentials(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSorobanAddressCredentials");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSorobanAddressCredentials", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanAddressCredentialsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSorobanAddressCredentials(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSorobanAddressCredentials");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSorobanCredentialsType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanCredentialsTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSorobanCredentialsType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSorobanCredentialsType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSorobanCredentialsType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanCredentialsTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSorobanCredentialsType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSorobanCredentialsType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSorobanCredentials", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanCredentialsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSorobanCredentials(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSorobanCredentials");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSorobanCredentials", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanCredentialsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSorobanCredentials(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSorobanCredentials");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSorobanAuthorizationEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanAuthorizationEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSorobanAuthorizationEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSorobanAuthorizationEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSorobanAuthorizationEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanAuthorizationEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSorobanAuthorizationEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSorobanAuthorizationEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeInvokeHostFunctionOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InvokeHostFunctionOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeInvokeHostFunctionOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeInvokeHostFunctionOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeInvokeHostFunctionOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InvokeHostFunctionOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeInvokeHostFunctionOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeInvokeHostFunctionOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeExtendFootprintTTLOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ExtendFootprintTTLOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeExtendFootprintTTLOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeExtendFootprintTTLOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeExtendFootprintTTLOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ExtendFootprintTTLOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeExtendFootprintTTLOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeExtendFootprintTTLOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeRestoreFootprintOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RestoreFootprintOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeRestoreFootprintOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeRestoreFootprintOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeRestoreFootprintOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RestoreFootprintOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeRestoreFootprintOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeRestoreFootprintOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeOperation", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OperationEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeOperation(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeOperation");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeOperation", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OperationDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeOperation(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeOperation");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeHashIDPreimage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HashIDPreimageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeHashIDPreimage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeHashIDPreimage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeHashIDPreimage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HashIDPreimageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeHashIDPreimage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeHashIDPreimage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeMemoType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MemoTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeMemoType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeMemoType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeMemoType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MemoTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeMemoType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeMemoType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeMemo", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MemoEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeMemo(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeMemo");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeMemo", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MemoDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeMemo(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeMemo");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTimeBounds", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeBoundsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTimeBounds(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTimeBounds");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTimeBounds", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeBoundsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTimeBounds(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTimeBounds");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerBounds", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerBoundsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerBounds(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerBounds");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerBounds", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerBoundsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerBounds(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerBounds");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePreconditionsV2", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PreconditionsV2EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePreconditionsV2(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePreconditionsV2");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePreconditionsV2", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PreconditionsV2DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePreconditionsV2(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePreconditionsV2");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePreconditionType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PreconditionTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePreconditionType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePreconditionType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePreconditionType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PreconditionTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePreconditionType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePreconditionType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePreconditions", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PreconditionsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePreconditions(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePreconditions");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePreconditions", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PreconditionsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePreconditions(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePreconditions");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerFootprint", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerFootprintEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerFootprint(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerFootprint");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerFootprint", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerFootprintDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerFootprint(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerFootprint");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeArchivalProofType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ArchivalProofTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeArchivalProofType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeArchivalProofType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeArchivalProofType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ArchivalProofTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeArchivalProofType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeArchivalProofType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeArchivalProofNode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ArchivalProofNodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeArchivalProofNode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeArchivalProofNode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeArchivalProofNode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ArchivalProofNodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeArchivalProofNode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeArchivalProofNode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeProofLevel", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ProofLevelEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeProofLevel(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeProofLevel");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeProofLevel", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ProofLevelDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeProofLevel(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeProofLevel");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeNonexistenceProofBody", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.NonexistenceProofBodyEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeNonexistenceProofBody(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeNonexistenceProofBody");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeNonexistenceProofBody", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.NonexistenceProofBodyDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeNonexistenceProofBody(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeNonexistenceProofBody");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeExistenceProofBody", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ExistenceProofBodyEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeExistenceProofBody(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeExistenceProofBody");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeExistenceProofBody", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ExistenceProofBodyDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeExistenceProofBody(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeExistenceProofBody");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeArchivalProof", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ArchivalProofEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeArchivalProof(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeArchivalProof");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeArchivalProof", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ArchivalProofDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeArchivalProof(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeArchivalProof");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSorobanResources", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanResourcesEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSorobanResources(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSorobanResources");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSorobanResources", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanResourcesDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSorobanResources(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSorobanResources");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSorobanTransactionData", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanTransactionDataEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSorobanTransactionData(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSorobanTransactionData");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSorobanTransactionData", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanTransactionDataDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSorobanTransactionData(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSorobanTransactionData");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionV0Envelope", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionV0EnvelopeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionV0Envelope(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionV0Envelope");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionV0Envelope", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionV0EnvelopeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionV0Envelope(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionV0Envelope");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransaction", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransaction(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransaction");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransaction", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransaction(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransaction");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionV1Envelope", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionV1EnvelopeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionV1Envelope(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionV1Envelope");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionV1Envelope", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionV1EnvelopeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionV1Envelope(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionV1Envelope");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeFeeBumpTransaction", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.FeeBumpTransactionEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeFeeBumpTransaction(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeFeeBumpTransaction");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeFeeBumpTransaction", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.FeeBumpTransactionDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeFeeBumpTransaction(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeFeeBumpTransaction");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeFeeBumpTransactionEnvelope", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.FeeBumpTransactionEnvelopeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeFeeBumpTransactionEnvelope(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeFeeBumpTransactionEnvelope");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeFeeBumpTransactionEnvelope", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.FeeBumpTransactionEnvelopeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeFeeBumpTransactionEnvelope(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeFeeBumpTransactionEnvelope");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionEnvelope", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionEnvelopeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionEnvelope(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionEnvelope");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionEnvelope", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionEnvelopeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionEnvelope(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionEnvelope");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionSignaturePayload", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionSignaturePayloadEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionSignaturePayload(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionSignaturePayload");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionSignaturePayload", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionSignaturePayloadDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionSignaturePayload(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionSignaturePayload");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimAtomType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimAtomTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimAtomType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimAtomType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimAtomType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimAtomTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimAtomType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimAtomType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimOfferAtomV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimOfferAtomV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimOfferAtomV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimOfferAtomV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimOfferAtomV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimOfferAtomV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimOfferAtomV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimOfferAtomV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimOfferAtom", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimOfferAtomEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimOfferAtom(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimOfferAtom");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimOfferAtom", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimOfferAtomDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimOfferAtom(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimOfferAtom");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimLiquidityAtom", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimLiquidityAtomEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimLiquidityAtom(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimLiquidityAtom");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimLiquidityAtom", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimLiquidityAtomDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimLiquidityAtom(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimLiquidityAtom");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimAtom", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimAtomEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimAtom(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimAtom");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimAtom", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimAtomDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimAtom(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimAtom");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeCreateAccountResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateAccountResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeCreateAccountResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeCreateAccountResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeCreateAccountResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateAccountResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeCreateAccountResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeCreateAccountResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeCreateAccountResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateAccountResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeCreateAccountResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeCreateAccountResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeCreateAccountResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateAccountResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeCreateAccountResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeCreateAccountResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePaymentResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PaymentResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePaymentResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePaymentResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePaymentResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PaymentResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePaymentResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePaymentResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePaymentResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PaymentResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePaymentResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePaymentResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePaymentResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PaymentResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePaymentResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePaymentResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePathPaymentStrictReceiveResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PathPaymentStrictReceiveResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePathPaymentStrictReceiveResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePathPaymentStrictReceiveResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePathPaymentStrictReceiveResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PathPaymentStrictReceiveResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePathPaymentStrictReceiveResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePathPaymentStrictReceiveResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSimplePaymentResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SimplePaymentResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSimplePaymentResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSimplePaymentResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSimplePaymentResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SimplePaymentResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSimplePaymentResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSimplePaymentResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePathPaymentStrictReceiveResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PathPaymentStrictReceiveResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePathPaymentStrictReceiveResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePathPaymentStrictReceiveResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePathPaymentStrictReceiveResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PathPaymentStrictReceiveResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePathPaymentStrictReceiveResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePathPaymentStrictReceiveResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePathPaymentStrictSendResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PathPaymentStrictSendResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePathPaymentStrictSendResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePathPaymentStrictSendResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePathPaymentStrictSendResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PathPaymentStrictSendResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePathPaymentStrictSendResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePathPaymentStrictSendResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePathPaymentStrictSendResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PathPaymentStrictSendResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePathPaymentStrictSendResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePathPaymentStrictSendResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePathPaymentStrictSendResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PathPaymentStrictSendResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePathPaymentStrictSendResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePathPaymentStrictSendResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeManageSellOfferResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageSellOfferResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeManageSellOfferResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeManageSellOfferResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeManageSellOfferResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageSellOfferResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeManageSellOfferResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeManageSellOfferResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeManageOfferEffect", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageOfferEffectEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeManageOfferEffect(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeManageOfferEffect");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeManageOfferEffect", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageOfferEffectDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeManageOfferEffect(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeManageOfferEffect");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeManageOfferSuccessResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageOfferSuccessResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeManageOfferSuccessResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeManageOfferSuccessResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeManageOfferSuccessResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageOfferSuccessResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeManageOfferSuccessResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeManageOfferSuccessResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeManageSellOfferResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageSellOfferResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeManageSellOfferResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeManageSellOfferResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeManageSellOfferResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageSellOfferResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeManageSellOfferResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeManageSellOfferResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeManageBuyOfferResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageBuyOfferResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeManageBuyOfferResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeManageBuyOfferResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeManageBuyOfferResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageBuyOfferResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeManageBuyOfferResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeManageBuyOfferResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeManageBuyOfferResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageBuyOfferResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeManageBuyOfferResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeManageBuyOfferResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeManageBuyOfferResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageBuyOfferResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeManageBuyOfferResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeManageBuyOfferResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSetOptionsResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SetOptionsResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSetOptionsResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSetOptionsResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSetOptionsResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SetOptionsResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSetOptionsResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSetOptionsResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSetOptionsResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SetOptionsResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSetOptionsResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSetOptionsResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSetOptionsResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SetOptionsResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSetOptionsResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSetOptionsResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeChangeTrustResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ChangeTrustResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeChangeTrustResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeChangeTrustResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeChangeTrustResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ChangeTrustResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeChangeTrustResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeChangeTrustResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeChangeTrustResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ChangeTrustResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeChangeTrustResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeChangeTrustResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeChangeTrustResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ChangeTrustResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeChangeTrustResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeChangeTrustResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAllowTrustResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AllowTrustResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAllowTrustResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAllowTrustResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAllowTrustResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AllowTrustResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAllowTrustResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAllowTrustResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAllowTrustResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AllowTrustResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAllowTrustResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAllowTrustResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAllowTrustResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AllowTrustResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAllowTrustResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAllowTrustResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAccountMergeResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountMergeResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAccountMergeResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAccountMergeResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAccountMergeResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountMergeResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAccountMergeResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAccountMergeResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAccountMergeResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountMergeResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAccountMergeResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAccountMergeResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAccountMergeResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountMergeResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAccountMergeResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAccountMergeResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeInflationResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InflationResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeInflationResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeInflationResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeInflationResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InflationResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeInflationResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeInflationResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeInflationPayout", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InflationPayoutEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeInflationPayout(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeInflationPayout");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeInflationPayout", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InflationPayoutDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeInflationPayout(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeInflationPayout");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeInflationResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InflationResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeInflationResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeInflationResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeInflationResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InflationResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeInflationResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeInflationResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeManageDataResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageDataResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeManageDataResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeManageDataResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeManageDataResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageDataResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeManageDataResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeManageDataResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeManageDataResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageDataResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeManageDataResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeManageDataResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeManageDataResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageDataResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeManageDataResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeManageDataResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeBumpSequenceResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BumpSequenceResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeBumpSequenceResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeBumpSequenceResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeBumpSequenceResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BumpSequenceResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeBumpSequenceResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeBumpSequenceResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeBumpSequenceResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BumpSequenceResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeBumpSequenceResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeBumpSequenceResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeBumpSequenceResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BumpSequenceResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeBumpSequenceResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeBumpSequenceResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeCreateClaimableBalanceResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateClaimableBalanceResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeCreateClaimableBalanceResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeCreateClaimableBalanceResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeCreateClaimableBalanceResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateClaimableBalanceResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeCreateClaimableBalanceResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeCreateClaimableBalanceResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeCreateClaimableBalanceResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateClaimableBalanceResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeCreateClaimableBalanceResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeCreateClaimableBalanceResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeCreateClaimableBalanceResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateClaimableBalanceResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeCreateClaimableBalanceResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeCreateClaimableBalanceResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimClaimableBalanceResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimClaimableBalanceResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimClaimableBalanceResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimClaimableBalanceResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimClaimableBalanceResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimClaimableBalanceResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimClaimableBalanceResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimClaimableBalanceResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimClaimableBalanceResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimClaimableBalanceResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimClaimableBalanceResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimClaimableBalanceResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimClaimableBalanceResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimClaimableBalanceResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimClaimableBalanceResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimClaimableBalanceResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeBeginSponsoringFutureReservesResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeBeginSponsoringFutureReservesResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeBeginSponsoringFutureReservesResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeBeginSponsoringFutureReservesResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeBeginSponsoringFutureReservesResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeBeginSponsoringFutureReservesResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeBeginSponsoringFutureReservesResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeBeginSponsoringFutureReservesResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeBeginSponsoringFutureReservesResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeBeginSponsoringFutureReservesResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeBeginSponsoringFutureReservesResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeBeginSponsoringFutureReservesResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeEndSponsoringFutureReservesResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.EndSponsoringFutureReservesResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeEndSponsoringFutureReservesResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeEndSponsoringFutureReservesResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeEndSponsoringFutureReservesResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.EndSponsoringFutureReservesResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeEndSponsoringFutureReservesResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeEndSponsoringFutureReservesResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeEndSponsoringFutureReservesResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.EndSponsoringFutureReservesResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeEndSponsoringFutureReservesResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeEndSponsoringFutureReservesResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeEndSponsoringFutureReservesResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.EndSponsoringFutureReservesResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeEndSponsoringFutureReservesResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeEndSponsoringFutureReservesResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeRevokeSponsorshipResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RevokeSponsorshipResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeRevokeSponsorshipResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeRevokeSponsorshipResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeRevokeSponsorshipResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RevokeSponsorshipResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeRevokeSponsorshipResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeRevokeSponsorshipResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeRevokeSponsorshipResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RevokeSponsorshipResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeRevokeSponsorshipResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeRevokeSponsorshipResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeRevokeSponsorshipResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RevokeSponsorshipResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeRevokeSponsorshipResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeRevokeSponsorshipResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClawbackResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClawbackResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClawbackResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClawbackResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClawbackResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClawbackResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClawbackResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClawbackResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClawbackResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClawbackResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClawbackResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClawbackResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClawbackResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClawbackResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClawbackResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClawbackResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClawbackClaimableBalanceResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClawbackClaimableBalanceResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClawbackClaimableBalanceResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClawbackClaimableBalanceResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClawbackClaimableBalanceResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClawbackClaimableBalanceResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClawbackClaimableBalanceResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClawbackClaimableBalanceResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClawbackClaimableBalanceResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClawbackClaimableBalanceResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClawbackClaimableBalanceResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClawbackClaimableBalanceResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClawbackClaimableBalanceResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClawbackClaimableBalanceResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClawbackClaimableBalanceResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClawbackClaimableBalanceResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSetTrustLineFlagsResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SetTrustLineFlagsResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSetTrustLineFlagsResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSetTrustLineFlagsResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSetTrustLineFlagsResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SetTrustLineFlagsResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSetTrustLineFlagsResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSetTrustLineFlagsResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSetTrustLineFlagsResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SetTrustLineFlagsResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSetTrustLineFlagsResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSetTrustLineFlagsResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSetTrustLineFlagsResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SetTrustLineFlagsResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSetTrustLineFlagsResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSetTrustLineFlagsResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLiquidityPoolDepositResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolDepositResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLiquidityPoolDepositResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLiquidityPoolDepositResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLiquidityPoolDepositResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolDepositResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLiquidityPoolDepositResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLiquidityPoolDepositResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLiquidityPoolDepositResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolDepositResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLiquidityPoolDepositResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLiquidityPoolDepositResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLiquidityPoolDepositResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolDepositResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLiquidityPoolDepositResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLiquidityPoolDepositResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLiquidityPoolWithdrawResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolWithdrawResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLiquidityPoolWithdrawResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLiquidityPoolWithdrawResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLiquidityPoolWithdrawResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolWithdrawResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLiquidityPoolWithdrawResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLiquidityPoolWithdrawResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLiquidityPoolWithdrawResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolWithdrawResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLiquidityPoolWithdrawResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLiquidityPoolWithdrawResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLiquidityPoolWithdrawResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolWithdrawResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLiquidityPoolWithdrawResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLiquidityPoolWithdrawResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeInvokeHostFunctionResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InvokeHostFunctionResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeInvokeHostFunctionResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeInvokeHostFunctionResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeInvokeHostFunctionResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InvokeHostFunctionResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeInvokeHostFunctionResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeInvokeHostFunctionResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeInvokeHostFunctionResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InvokeHostFunctionResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeInvokeHostFunctionResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeInvokeHostFunctionResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeInvokeHostFunctionResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InvokeHostFunctionResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeInvokeHostFunctionResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeInvokeHostFunctionResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeExtendFootprintTTLResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ExtendFootprintTTLResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeExtendFootprintTTLResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeExtendFootprintTTLResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeExtendFootprintTTLResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ExtendFootprintTTLResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeExtendFootprintTTLResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeExtendFootprintTTLResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeExtendFootprintTTLResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ExtendFootprintTTLResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeExtendFootprintTTLResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeExtendFootprintTTLResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeExtendFootprintTTLResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ExtendFootprintTTLResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeExtendFootprintTTLResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeExtendFootprintTTLResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeRestoreFootprintResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RestoreFootprintResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeRestoreFootprintResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeRestoreFootprintResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeRestoreFootprintResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RestoreFootprintResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeRestoreFootprintResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeRestoreFootprintResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeRestoreFootprintResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RestoreFootprintResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeRestoreFootprintResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeRestoreFootprintResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeRestoreFootprintResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RestoreFootprintResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeRestoreFootprintResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeRestoreFootprintResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeOperationResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OperationResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeOperationResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeOperationResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeOperationResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OperationResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeOperationResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeOperationResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeOperationResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OperationResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeOperationResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeOperationResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeOperationResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OperationResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeOperationResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeOperationResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeInnerTransactionResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InnerTransactionResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeInnerTransactionResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeInnerTransactionResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeInnerTransactionResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InnerTransactionResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeInnerTransactionResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeInnerTransactionResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeInnerTransactionResultPair", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InnerTransactionResultPairEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeInnerTransactionResultPair(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeInnerTransactionResultPair");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeInnerTransactionResultPair", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InnerTransactionResultPairDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeInnerTransactionResultPair(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeInnerTransactionResultPair");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeHash", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HashEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeHash(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeHash");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeHash", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HashDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeHash(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeHash");
                }
            });
            endpoints.MapPost("/XdrProtoService/Encodeuint256", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.uint256EncodeRequest>(ms);

                    // Call service method
                    var response = await service.Encodeuint256(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Encodeuint256");
                }
            });
            endpoints.MapPost("/XdrProtoService/Decodeuint256", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.uint256DecodeRequest>(ms);

                    // Call service method
                    var response = await service.Decodeuint256(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Decodeuint256");
                }
            });
            endpoints.MapPost("/XdrProtoService/Encodeuint32", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.uint32EncodeRequest>(ms);

                    // Call service method
                    var response = await service.Encodeuint32(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Encodeuint32");
                }
            });
            endpoints.MapPost("/XdrProtoService/Decodeuint32", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.uint32DecodeRequest>(ms);

                    // Call service method
                    var response = await service.Decodeuint32(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Decodeuint32");
                }
            });
            endpoints.MapPost("/XdrProtoService/Encodeint32", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.int32EncodeRequest>(ms);

                    // Call service method
                    var response = await service.Encodeint32(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Encodeint32");
                }
            });
            endpoints.MapPost("/XdrProtoService/Decodeint32", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.int32DecodeRequest>(ms);

                    // Call service method
                    var response = await service.Decodeint32(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Decodeint32");
                }
            });
            endpoints.MapPost("/XdrProtoService/Encodeuint64", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.uint64EncodeRequest>(ms);

                    // Call service method
                    var response = await service.Encodeuint64(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Encodeuint64");
                }
            });
            endpoints.MapPost("/XdrProtoService/Decodeuint64", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.uint64DecodeRequest>(ms);

                    // Call service method
                    var response = await service.Decodeuint64(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Decodeuint64");
                }
            });
            endpoints.MapPost("/XdrProtoService/Encodeint64", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.int64EncodeRequest>(ms);

                    // Call service method
                    var response = await service.Encodeint64(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Encodeint64");
                }
            });
            endpoints.MapPost("/XdrProtoService/Decodeint64", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.int64DecodeRequest>(ms);

                    // Call service method
                    var response = await service.Decodeint64(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Decodeint64");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTimePoint", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimePointEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTimePoint(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTimePoint");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTimePoint", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimePointDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTimePoint(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTimePoint");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeDuration", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DurationEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeDuration(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeDuration");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeDuration", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DurationDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeDuration(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeDuration");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeExtensionPoint", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ExtensionPointEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeExtensionPoint(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeExtensionPoint");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeExtensionPoint", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ExtensionPointDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeExtensionPoint(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeExtensionPoint");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeCryptoKeyType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CryptoKeyTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeCryptoKeyType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeCryptoKeyType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeCryptoKeyType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CryptoKeyTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeCryptoKeyType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeCryptoKeyType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePublicKeyType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PublicKeyTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePublicKeyType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePublicKeyType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePublicKeyType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PublicKeyTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePublicKeyType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePublicKeyType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSignerKeyType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignerKeyTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSignerKeyType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSignerKeyType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSignerKeyType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignerKeyTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSignerKeyType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSignerKeyType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePublicKey", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PublicKeyEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePublicKey(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePublicKey");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePublicKey", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PublicKeyDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePublicKey(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePublicKey");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSignerKey", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignerKeyEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSignerKey(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSignerKey");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSignerKey", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignerKeyDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSignerKey(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSignerKey");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSignature", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignatureEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSignature(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSignature");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSignature", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignatureDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSignature(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSignature");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSignatureHint", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignatureHintEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSignatureHint(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSignatureHint");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSignatureHint", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignatureHintDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSignatureHint(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSignatureHint");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeNodeID", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.NodeIDEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeNodeID(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeNodeID");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeNodeID", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.NodeIDDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeNodeID(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeNodeID");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAccountID", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountIDEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAccountID(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAccountID");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAccountID", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountIDDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAccountID(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAccountID");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeCurve25519Secret", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Curve25519SecretEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeCurve25519Secret(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeCurve25519Secret");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeCurve25519Secret", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Curve25519SecretDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeCurve25519Secret(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeCurve25519Secret");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeCurve25519Public", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Curve25519PublicEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeCurve25519Public(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeCurve25519Public");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeCurve25519Public", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Curve25519PublicDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeCurve25519Public(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeCurve25519Public");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeHmacSha256Key", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HmacSha256KeyEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeHmacSha256Key(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeHmacSha256Key");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeHmacSha256Key", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HmacSha256KeyDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeHmacSha256Key(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeHmacSha256Key");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeHmacSha256Mac", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HmacSha256MacEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeHmacSha256Mac(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeHmacSha256Mac");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeHmacSha256Mac", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HmacSha256MacDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeHmacSha256Mac(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeHmacSha256Mac");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeShortHashSeed", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ShortHashSeedEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeShortHashSeed(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeShortHashSeed");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeShortHashSeed", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ShortHashSeedDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeShortHashSeed(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeShortHashSeed");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeBinaryFuseFilterType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BinaryFuseFilterTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeBinaryFuseFilterType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeBinaryFuseFilterType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeBinaryFuseFilterType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BinaryFuseFilterTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeBinaryFuseFilterType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeBinaryFuseFilterType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSerializedBinaryFuseFilter", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SerializedBinaryFuseFilterEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSerializedBinaryFuseFilter(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSerializedBinaryFuseFilter");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSerializedBinaryFuseFilter", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SerializedBinaryFuseFilterDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSerializedBinaryFuseFilter(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSerializedBinaryFuseFilter");
                }
            });

            // Map IMuxedAccount_ProtoWrapper methods
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/CanSign", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccount>(ms);

                    // Call service method
                    var response = await service.CanSign(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/CanSign");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/CreateKeyTypeEd25519", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccount_ProtoWrapper.CreateEd25519Param>(ms);

                    // Call service method
                    var response = await service.CreateKeyTypeEd25519(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/CreateKeyTypeEd25519");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/CreateKeyTypeMuxedEd25519", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccount_ProtoWrapper.CreateMuxedEd25519Param>(ms);

                    // Call service method
                    var response = await service.CreateKeyTypeMuxedEd25519(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/CreateKeyTypeMuxedEd25519");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/GetAccountId", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccount>(ms);

                    // Call service method
                    var response = await service.GetAccountId(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/GetAccountId");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/GetAddress", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccount>(ms);

                    // Call service method
                    var response = await service.GetAddress(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/GetAddress");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/GetPrivateKey", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccount>(ms);

                    // Call service method
                    var response = await service.GetPrivateKey(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/GetPrivateKey");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/GetPublicKey", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccount>(ms);

                    // Call service method
                    var response = await service.GetPublicKey(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/GetPublicKey");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/GetSecretSeed", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccount>(ms);

                    // Call service method
                    var response = await service.GetSecretSeed(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/GetSecretSeed");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/GetSeedBytes", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccount>(ms);

                    // Call service method
                    var response = await service.GetSeedBytes(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/GetSeedBytes");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/Sign", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccount_ProtoWrapper.SignMessage>(ms);

                    // Call service method
                    var response = await service.Sign(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/Sign");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/Verify", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccount_ProtoWrapper.VerifyMessage>(ms);

                    // Call service method
                    var response = await service.Verify(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/Verify");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/FromSecretSeed", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StringWrapper>(ms);

                    // Call service method
                    var response = await service.FromSecretSeed(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/FromSecretSeed");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/FromSecretSeedBytes", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ByteArrayWrapper>(ms);

                    // Call service method
                    var response = await service.FromSecretSeedBytes(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/FromSecretSeedBytes");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/FromAccountId", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StringWrapper>(ms);

                    // Call service method
                    var response = await service.FromAccountId(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/FromAccountId");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/FromPublicKey", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ByteArrayWrapper>(ms);

                    // Call service method
                    var response = await service.FromPublicKey(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/FromPublicKey");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/FromBIP39Seed", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccount_ProtoWrapper.BIP39SeedParam>(ms);

                    // Call service method
                    var response = await service.FromBIP39Seed(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/FromBIP39Seed");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/FromBIP39SeedBytes", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccount_ProtoWrapper.BIP39SeedBytesParam>(ms);

                    // Call service method
                    var response = await service.FromBIP39SeedBytes(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/FromBIP39SeedBytes");
                }
            });

            // Map INetwork_ProtoWrapper methods
            endpoints.MapPost("/Network_ProtoWrapper/Create", async context =>
            {
                var service = context.RequestServices.GetRequiredService<Network_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Network_ProtoWrapper.CreateNetworkParam>(ms);

                    // Call service method
                    var response = await service.Create(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<Network_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in Network_ProtoWrapper/Create");
                }
            });
            endpoints.MapPost("/Network_ProtoWrapper/GetNetworkPassphrase", async context =>
            {
                var service = context.RequestServices.GetRequiredService<Network_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Network>(ms);

                    // Call service method
                    var response = await service.GetNetworkPassphrase(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<Network_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in Network_ProtoWrapper/GetNetworkPassphrase");
                }
            });
            endpoints.MapPost("/Network_ProtoWrapper/IsPublicNetwork", async context =>
            {
                var service = context.RequestServices.GetRequiredService<Network_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Network_ProtoWrapper.IsPublicNetworkParam>(ms);

                    // Call service method
                    var response = await service.IsPublicNetwork(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<Network_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in Network_ProtoWrapper/IsPublicNetwork");
                }
            });

            // Map ITransaction_ProtoWrapper methods
            endpoints.MapPost("/Transaction_ProtoWrapper/Clone", async context =>
            {
                var service = context.RequestServices.GetRequiredService<Transaction_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Transaction_ProtoWrapper.CloneParam>(ms);

                    // Call service method
                    var response = await service.Clone(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<Transaction_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in Transaction_ProtoWrapper/Clone");
                }
            });
            endpoints.MapPost("/Transaction_ProtoWrapper/IsSoroban", async context =>
            {
                var service = context.RequestServices.GetRequiredService<Transaction_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Transaction_ProtoWrapper.IsSorobanParam>(ms);

                    // Call service method
                    var response = await service.IsSoroban(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<Transaction_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in Transaction_ProtoWrapper/IsSoroban");
                }
            });
            endpoints.MapPost("/Transaction_ProtoWrapper/IsSorobanInvocation", async context =>
            {
                var service = context.RequestServices.GetRequiredService<Transaction_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Transaction_ProtoWrapper.IsSorobanParam>(ms);

                    // Call service method
                    var response = await service.IsSorobanInvocation(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<Transaction_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in Transaction_ProtoWrapper/IsSorobanInvocation");
                }
            });
            endpoints.MapPost("/Transaction_ProtoWrapper/Sign", async context =>
            {
                var service = context.RequestServices.GetRequiredService<Transaction_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Transaction_ProtoWrapper.SignParam>(ms);

                    // Call service method
                    var response = await service.Sign(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<Transaction_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in Transaction_ProtoWrapper/Sign");
                }
            });

            // Map ISimulateTransactionResult_ProtoWrapper methods
            endpoints.MapPost("/SimulateTransactionResult_ProtoWrapper/ApplyTo", async context =>
            {
                var service = context.RequestServices.GetRequiredService<SimulateTransactionResult_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RPC.SimulateTransactionResult_ProtoWrapper.ApplyToParam>(ms);

                    // Call service method
                    var response = await service.ApplyTo(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<SimulateTransactionResult_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in SimulateTransactionResult_ProtoWrapper/ApplyTo");
                }
            });

            // Map IStellarRPCClient methods
            endpoints.MapPost("/StellarRPCClient/GetEventsAsync", async context =>
            {
                var service = context.RequestServices.GetRequiredService<StellarRPCClientGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RPC.GetEventsParams>(ms);

                    // Call service method
                    var response = await service.GetEventsAsync(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<StellarRPCClientGrpcService>>();
                    logger?.LogError(ex, "Error in StellarRPCClient/GetEventsAsync");
                }
            });
            endpoints.MapPost("/StellarRPCClient/GetLedgerEntriesAsync", async context =>
            {
                var service = context.RequestServices.GetRequiredService<StellarRPCClientGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RPC.GetLedgerEntriesParams>(ms);

                    // Call service method
                    var response = await service.GetLedgerEntriesAsync(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<StellarRPCClientGrpcService>>();
                    logger?.LogError(ex, "Error in StellarRPCClient/GetLedgerEntriesAsync");
                }
            });
            endpoints.MapPost("/StellarRPCClient/GetTransactionAsync", async context =>
            {
                var service = context.RequestServices.GetRequiredService<StellarRPCClientGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RPC.GetTransactionParams>(ms);

                    // Call service method
                    var response = await service.GetTransactionAsync(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<StellarRPCClientGrpcService>>();
                    logger?.LogError(ex, "Error in StellarRPCClient/GetTransactionAsync");
                }
            });
            endpoints.MapPost("/StellarRPCClient/GetTransactionsAsync", async context =>
            {
                var service = context.RequestServices.GetRequiredService<StellarRPCClientGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RPC.GetTransactionsParams>(ms);

                    // Call service method
                    var response = await service.GetTransactionsAsync(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<StellarRPCClientGrpcService>>();
                    logger?.LogError(ex, "Error in StellarRPCClient/GetTransactionsAsync");
                }
            });
            endpoints.MapPost("/StellarRPCClient/SendTransactionAsync", async context =>
            {
                var service = context.RequestServices.GetRequiredService<StellarRPCClientGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RPC.SendTransactionParams>(ms);

                    // Call service method
                    var response = await service.SendTransactionAsync(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<StellarRPCClientGrpcService>>();
                    logger?.LogError(ex, "Error in StellarRPCClient/SendTransactionAsync");
                }
            });
            endpoints.MapPost("/StellarRPCClient/SimulateTransactionAsync", async context =>
            {
                var service = context.RequestServices.GetRequiredService<StellarRPCClientGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RPC.SimulateTransactionParams>(ms);

                    // Call service method
                    var response = await service.SimulateTransactionAsync(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<StellarRPCClientGrpcService>>();
                    logger?.LogError(ex, "Error in StellarRPCClient/SimulateTransactionAsync");
                }
            });

            // Map XdrProtoService methods
            endpoints.MapPost("/XdrProtoService/EncodeConfigSettingContractExecutionLanesV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingContractExecutionLanesV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeConfigSettingContractExecutionLanesV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeConfigSettingContractExecutionLanesV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeConfigSettingContractExecutionLanesV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingContractExecutionLanesV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeConfigSettingContractExecutionLanesV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeConfigSettingContractExecutionLanesV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeConfigSettingContractComputeV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingContractComputeV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeConfigSettingContractComputeV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeConfigSettingContractComputeV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeConfigSettingContractComputeV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingContractComputeV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeConfigSettingContractComputeV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeConfigSettingContractComputeV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeConfigSettingContractLedgerCostV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingContractLedgerCostV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeConfigSettingContractLedgerCostV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeConfigSettingContractLedgerCostV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeConfigSettingContractLedgerCostV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingContractLedgerCostV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeConfigSettingContractLedgerCostV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeConfigSettingContractLedgerCostV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeConfigSettingContractHistoricalDataV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingContractHistoricalDataV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeConfigSettingContractHistoricalDataV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeConfigSettingContractHistoricalDataV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeConfigSettingContractHistoricalDataV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingContractHistoricalDataV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeConfigSettingContractHistoricalDataV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeConfigSettingContractHistoricalDataV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeConfigSettingContractEventsV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingContractEventsV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeConfigSettingContractEventsV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeConfigSettingContractEventsV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeConfigSettingContractEventsV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingContractEventsV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeConfigSettingContractEventsV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeConfigSettingContractEventsV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeConfigSettingContractBandwidthV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingContractBandwidthV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeConfigSettingContractBandwidthV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeConfigSettingContractBandwidthV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeConfigSettingContractBandwidthV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingContractBandwidthV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeConfigSettingContractBandwidthV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeConfigSettingContractBandwidthV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeContractCostType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractCostTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeContractCostType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeContractCostType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeContractCostType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractCostTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeContractCostType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeContractCostType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeContractCostParamEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractCostParamEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeContractCostParamEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeContractCostParamEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeContractCostParamEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractCostParamEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeContractCostParamEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeContractCostParamEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeStateArchivalSettings", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StateArchivalSettingsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeStateArchivalSettings(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeStateArchivalSettings");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeStateArchivalSettings", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StateArchivalSettingsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeStateArchivalSettings(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeStateArchivalSettings");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeEvictionIterator", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.EvictionIteratorEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeEvictionIterator(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeEvictionIterator");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeEvictionIterator", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.EvictionIteratorDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeEvictionIterator(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeEvictionIterator");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeContractCostParams", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractCostParamsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeContractCostParams(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeContractCostParams");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeContractCostParams", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractCostParamsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeContractCostParams(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeContractCostParams");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeConfigSettingID", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingIDEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeConfigSettingID(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeConfigSettingID");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeConfigSettingID", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingIDDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeConfigSettingID(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeConfigSettingID");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeConfigSettingEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeConfigSettingEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeConfigSettingEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeConfigSettingEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigSettingEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeConfigSettingEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeConfigSettingEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCEnvMetaKind", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCEnvMetaKindEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCEnvMetaKind(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCEnvMetaKind");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCEnvMetaKind", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCEnvMetaKindDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCEnvMetaKind(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCEnvMetaKind");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCEnvMetaEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCEnvMetaEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCEnvMetaEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCEnvMetaEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCEnvMetaEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCEnvMetaEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCEnvMetaEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCEnvMetaEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCMetaV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCMetaV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCMetaV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCMetaV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCMetaV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCMetaV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCMetaV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCMetaV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCMetaKind", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCMetaKindEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCMetaKind(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCMetaKind");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCMetaKind", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCMetaKindDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCMetaKind(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCMetaKind");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCMetaEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCMetaEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCMetaEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCMetaEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCMetaEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCMetaEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCMetaEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCMetaEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecTypeOption", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeOptionEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecTypeOption(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecTypeOption");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecTypeOption", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeOptionDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecTypeOption(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecTypeOption");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecTypeResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecTypeResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecTypeResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecTypeResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecTypeResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecTypeResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecTypeVec", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeVecEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecTypeVec(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecTypeVec");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecTypeVec", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeVecDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecTypeVec(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecTypeVec");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecTypeMap", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeMapEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecTypeMap(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecTypeMap");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecTypeMap", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeMapDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecTypeMap(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecTypeMap");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecTypeTuple", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeTupleEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecTypeTuple(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecTypeTuple");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecTypeTuple", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeTupleDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecTypeTuple(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecTypeTuple");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecTypeBytesN", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeBytesNEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecTypeBytesN(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecTypeBytesN");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecTypeBytesN", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeBytesNDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecTypeBytesN(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecTypeBytesN");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecTypeUDT", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeUDTEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecTypeUDT(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecTypeUDT");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecTypeUDT", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeUDTDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecTypeUDT(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecTypeUDT");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecTypeDef", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeDefEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecTypeDef(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecTypeDef");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecTypeDef", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecTypeDefDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecTypeDef(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecTypeDef");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecUDTStructFieldV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTStructFieldV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecUDTStructFieldV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecUDTStructFieldV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecUDTStructFieldV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTStructFieldV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecUDTStructFieldV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecUDTStructFieldV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecUDTStructV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTStructV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecUDTStructV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecUDTStructV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecUDTStructV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTStructV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecUDTStructV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecUDTStructV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecUDTUnionCaseVoidV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseVoidV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecUDTUnionCaseVoidV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecUDTUnionCaseVoidV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecUDTUnionCaseVoidV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseVoidV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecUDTUnionCaseVoidV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecUDTUnionCaseVoidV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecUDTUnionCaseTupleV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseTupleV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecUDTUnionCaseTupleV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecUDTUnionCaseTupleV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecUDTUnionCaseTupleV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseTupleV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecUDTUnionCaseTupleV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecUDTUnionCaseTupleV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecUDTUnionCaseV0Kind", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseV0KindEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecUDTUnionCaseV0Kind(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecUDTUnionCaseV0Kind");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecUDTUnionCaseV0Kind", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseV0KindDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecUDTUnionCaseV0Kind(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecUDTUnionCaseV0Kind");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecUDTUnionCaseV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecUDTUnionCaseV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecUDTUnionCaseV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecUDTUnionCaseV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecUDTUnionCaseV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecUDTUnionCaseV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecUDTUnionV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTUnionV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecUDTUnionV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecUDTUnionV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecUDTUnionV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTUnionV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecUDTUnionV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecUDTUnionV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecUDTEnumCaseV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTEnumCaseV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecUDTEnumCaseV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecUDTEnumCaseV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecUDTEnumCaseV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTEnumCaseV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecUDTEnumCaseV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecUDTEnumCaseV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecUDTEnumV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTEnumV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecUDTEnumV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecUDTEnumV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecUDTEnumV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTEnumV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecUDTEnumV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecUDTEnumV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecUDTErrorEnumCaseV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTErrorEnumCaseV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecUDTErrorEnumCaseV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecUDTErrorEnumCaseV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecUDTErrorEnumCaseV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTErrorEnumCaseV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecUDTErrorEnumCaseV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecUDTErrorEnumCaseV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecUDTErrorEnumV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTErrorEnumV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecUDTErrorEnumV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecUDTErrorEnumV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecUDTErrorEnumV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecUDTErrorEnumV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecUDTErrorEnumV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecUDTErrorEnumV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecFunctionInputV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecFunctionInputV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecFunctionInputV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecFunctionInputV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecFunctionInputV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecFunctionInputV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecFunctionInputV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecFunctionInputV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecFunctionV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecFunctionV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecFunctionV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecFunctionV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecFunctionV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecFunctionV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecFunctionV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecFunctionV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecEntryKind", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecEntryKindEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecEntryKind(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecEntryKind");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecEntryKind", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecEntryKindDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecEntryKind(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecEntryKind");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSpecEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSpecEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSpecEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSpecEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSpecEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSpecEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSpecEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCValType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCValTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCValType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCValType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCValType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCValTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCValType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCValType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCErrorType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCErrorTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCErrorType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCErrorType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCErrorType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCErrorTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCErrorType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCErrorType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCErrorCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCErrorCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCErrorCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCErrorCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCErrorCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCErrorCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCErrorCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCErrorCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCError", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCErrorEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCError(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCError");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCError", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCErrorDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCError(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCError");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeUInt128Parts", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.UInt128PartsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeUInt128Parts(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeUInt128Parts");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeUInt128Parts", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.UInt128PartsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeUInt128Parts(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeUInt128Parts");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeInt128Parts", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Int128PartsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeInt128Parts(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeInt128Parts");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeInt128Parts", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Int128PartsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeInt128Parts(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeInt128Parts");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeUInt256Parts", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.UInt256PartsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeUInt256Parts(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeUInt256Parts");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeUInt256Parts", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.UInt256PartsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeUInt256Parts(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeUInt256Parts");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeInt256Parts", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Int256PartsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeInt256Parts(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeInt256Parts");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeInt256Parts", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Int256PartsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeInt256Parts(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeInt256Parts");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeContractExecutableType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractExecutableTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeContractExecutableType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeContractExecutableType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeContractExecutableType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractExecutableTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeContractExecutableType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeContractExecutableType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeContractExecutable", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractExecutableEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeContractExecutable(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeContractExecutable");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeContractExecutable", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractExecutableDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeContractExecutable(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeContractExecutable");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCAddressType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCAddressTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCAddressType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCAddressType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCAddressType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCAddressTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCAddressType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCAddressType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCAddress", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCAddressEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCAddress(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCAddress");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCAddress", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCAddressDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCAddress(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCAddress");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCVec", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCVecEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCVec(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCVec");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCVec", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCVecDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCVec(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCVec");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCMap", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCMapEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCMap(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCMap");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCMap", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCMapDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCMap(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCMap");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCBytes", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCBytesEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCBytes(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCBytes");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCBytes", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCBytesDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCBytes(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCBytes");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCString", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCStringEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCString(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCString");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCString", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCStringDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCString(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCString");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCSymbol", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSymbolEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCSymbol(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCSymbol");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCSymbol", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCSymbolDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCSymbol(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCSymbol");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCNonceKey", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCNonceKeyEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCNonceKey(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCNonceKey");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCNonceKey", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCNonceKeyDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCNonceKey(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCNonceKey");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCContractInstance", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCContractInstanceEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCContractInstance(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCContractInstance");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCContractInstance", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCContractInstanceDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCContractInstance(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCContractInstance");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCVal", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCValEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCVal(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCVal");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCVal", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCValDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCVal(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCVal");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCMapEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCMapEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCMapEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCMapEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCMapEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCMapEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCMapEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCMapEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeStoredTransactionSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StoredTransactionSetEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeStoredTransactionSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeStoredTransactionSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeStoredTransactionSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StoredTransactionSetDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeStoredTransactionSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeStoredTransactionSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeStoredDebugTransactionSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StoredDebugTransactionSetEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeStoredDebugTransactionSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeStoredDebugTransactionSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeStoredDebugTransactionSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StoredDebugTransactionSetDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeStoredDebugTransactionSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeStoredDebugTransactionSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePersistedSCPStateV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PersistedSCPStateV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePersistedSCPStateV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePersistedSCPStateV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePersistedSCPStateV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PersistedSCPStateV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePersistedSCPStateV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePersistedSCPStateV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePersistedSCPStateV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PersistedSCPStateV1EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePersistedSCPStateV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePersistedSCPStateV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePersistedSCPStateV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PersistedSCPStateV1DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePersistedSCPStateV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePersistedSCPStateV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePersistedSCPState", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PersistedSCPStateEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePersistedSCPState(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePersistedSCPState");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePersistedSCPState", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PersistedSCPStateDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePersistedSCPState(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePersistedSCPState");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeThresholds", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ThresholdsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeThresholds(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeThresholds");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeThresholds", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ThresholdsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeThresholds(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeThresholds");
                }
            });
            endpoints.MapPost("/XdrProtoService/Encodestring32", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.string32EncodeRequest>(ms);

                    // Call service method
                    var response = await service.Encodestring32(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Encodestring32");
                }
            });
            endpoints.MapPost("/XdrProtoService/Decodestring32", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.string32DecodeRequest>(ms);

                    // Call service method
                    var response = await service.Decodestring32(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Decodestring32");
                }
            });
            endpoints.MapPost("/XdrProtoService/Encodestring64", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.string64EncodeRequest>(ms);

                    // Call service method
                    var response = await service.Encodestring64(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Encodestring64");
                }
            });
            endpoints.MapPost("/XdrProtoService/Decodestring64", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.string64DecodeRequest>(ms);

                    // Call service method
                    var response = await service.Decodestring64(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Decodestring64");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSequenceNumber", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SequenceNumberEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSequenceNumber(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSequenceNumber");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSequenceNumber", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SequenceNumberDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSequenceNumber(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSequenceNumber");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeDataValue", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DataValueEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeDataValue(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeDataValue");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeDataValue", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DataValueDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeDataValue(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeDataValue");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePoolID", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PoolIDEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePoolID(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePoolID");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePoolID", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PoolIDDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePoolID(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePoolID");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAssetCode4", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AssetCode4EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAssetCode4(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAssetCode4");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAssetCode4", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AssetCode4DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAssetCode4(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAssetCode4");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAssetCode12", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AssetCode12EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAssetCode12(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAssetCode12");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAssetCode12", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AssetCode12DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAssetCode12(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAssetCode12");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAssetType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AssetTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAssetType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAssetType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAssetType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AssetTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAssetType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAssetType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAssetCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AssetCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAssetCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAssetCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAssetCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AssetCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAssetCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAssetCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAlphaNum4", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AlphaNum4EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAlphaNum4(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAlphaNum4");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAlphaNum4", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AlphaNum4DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAlphaNum4(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAlphaNum4");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAlphaNum12", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AlphaNum12EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAlphaNum12(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAlphaNum12");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAlphaNum12", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AlphaNum12DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAlphaNum12(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAlphaNum12");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAsset", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AssetEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAsset(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAsset");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAsset", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AssetDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAsset(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAsset");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePrice", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PriceEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePrice(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePrice");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePrice", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PriceDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePrice(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePrice");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLiabilities", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiabilitiesEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLiabilities(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLiabilities");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLiabilities", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiabilitiesDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLiabilities(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLiabilities");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeThresholdIndexes", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ThresholdIndexesEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeThresholdIndexes(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeThresholdIndexes");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeThresholdIndexes", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ThresholdIndexesDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeThresholdIndexes(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeThresholdIndexes");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerEntryType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerEntryTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerEntryType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerEntryType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerEntryType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerEntryTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerEntryType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerEntryType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSigner", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignerEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSigner(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSigner");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSigner", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignerDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSigner(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSigner");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAccountFlags", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountFlagsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAccountFlags(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAccountFlags");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAccountFlags", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountFlagsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAccountFlags(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAccountFlags");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSponsorshipDescriptor", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SponsorshipDescriptorEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSponsorshipDescriptor(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSponsorshipDescriptor");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSponsorshipDescriptor", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SponsorshipDescriptorDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSponsorshipDescriptor(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSponsorshipDescriptor");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAccountEntryExtensionV3", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountEntryExtensionV3EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAccountEntryExtensionV3(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAccountEntryExtensionV3");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAccountEntryExtensionV3", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountEntryExtensionV3DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAccountEntryExtensionV3(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAccountEntryExtensionV3");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAccountEntryExtensionV2", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountEntryExtensionV2EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAccountEntryExtensionV2(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAccountEntryExtensionV2");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAccountEntryExtensionV2", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountEntryExtensionV2DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAccountEntryExtensionV2(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAccountEntryExtensionV2");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAccountEntryExtensionV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountEntryExtensionV1EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAccountEntryExtensionV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAccountEntryExtensionV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAccountEntryExtensionV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountEntryExtensionV1DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAccountEntryExtensionV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAccountEntryExtensionV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAccountEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAccountEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAccountEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAccountEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAccountEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAccountEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTrustLineFlags", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TrustLineFlagsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTrustLineFlags(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTrustLineFlags");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTrustLineFlags", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TrustLineFlagsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTrustLineFlags(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTrustLineFlags");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLiquidityPoolType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLiquidityPoolType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLiquidityPoolType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLiquidityPoolType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLiquidityPoolType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLiquidityPoolType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTrustLineAsset", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TrustLineAssetEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTrustLineAsset(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTrustLineAsset");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTrustLineAsset", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TrustLineAssetDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTrustLineAsset(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTrustLineAsset");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTrustLineEntryExtensionV2", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TrustLineEntryExtensionV2EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTrustLineEntryExtensionV2(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTrustLineEntryExtensionV2");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTrustLineEntryExtensionV2", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TrustLineEntryExtensionV2DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTrustLineEntryExtensionV2(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTrustLineEntryExtensionV2");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTrustLineEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TrustLineEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTrustLineEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTrustLineEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTrustLineEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TrustLineEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTrustLineEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTrustLineEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeOfferEntryFlags", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OfferEntryFlagsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeOfferEntryFlags(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeOfferEntryFlags");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeOfferEntryFlags", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OfferEntryFlagsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeOfferEntryFlags(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeOfferEntryFlags");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeOfferEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OfferEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeOfferEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeOfferEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeOfferEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OfferEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeOfferEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeOfferEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeDataEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DataEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeDataEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeDataEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeDataEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DataEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeDataEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeDataEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimPredicateType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimPredicateTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimPredicateType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimPredicateType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimPredicateType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimPredicateTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimPredicateType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimPredicateType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimPredicate", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimPredicateEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimPredicate(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimPredicate");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimPredicate", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimPredicateDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimPredicate(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimPredicate");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimantType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimantTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimantType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimantType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimantType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimantTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimantType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimantType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimant", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimantEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimant(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimant");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimant", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimantDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimant(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimant");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimableBalanceIDType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimableBalanceIDTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimableBalanceIDType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimableBalanceIDType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimableBalanceIDType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimableBalanceIDTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimableBalanceIDType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimableBalanceIDType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimableBalanceID", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimableBalanceIDEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimableBalanceID(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimableBalanceID");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimableBalanceID", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimableBalanceIDDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimableBalanceID(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimableBalanceID");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimableBalanceFlags", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimableBalanceFlagsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimableBalanceFlags(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimableBalanceFlags");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimableBalanceFlags", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimableBalanceFlagsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimableBalanceFlags(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimableBalanceFlags");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimableBalanceEntryExtensionV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimableBalanceEntryExtensionV1EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimableBalanceEntryExtensionV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimableBalanceEntryExtensionV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimableBalanceEntryExtensionV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimableBalanceEntryExtensionV1DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimableBalanceEntryExtensionV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimableBalanceEntryExtensionV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimableBalanceEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimableBalanceEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimableBalanceEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimableBalanceEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimableBalanceEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimableBalanceEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimableBalanceEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimableBalanceEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLiquidityPoolConstantProductParameters", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolConstantProductParametersEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLiquidityPoolConstantProductParameters(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLiquidityPoolConstantProductParameters");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLiquidityPoolConstantProductParameters", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolConstantProductParametersDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLiquidityPoolConstantProductParameters(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLiquidityPoolConstantProductParameters");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLiquidityPoolEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLiquidityPoolEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLiquidityPoolEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLiquidityPoolEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLiquidityPoolEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLiquidityPoolEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeContractDataDurability", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractDataDurabilityEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeContractDataDurability(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeContractDataDurability");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeContractDataDurability", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractDataDurabilityDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeContractDataDurability(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeContractDataDurability");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeContractDataEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractDataEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeContractDataEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeContractDataEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeContractDataEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractDataEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeContractDataEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeContractDataEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeContractCodeCostInputs", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractCodeCostInputsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeContractCodeCostInputs(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeContractCodeCostInputs");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeContractCodeCostInputs", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractCodeCostInputsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeContractCodeCostInputs(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeContractCodeCostInputs");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeContractCodeEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractCodeEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeContractCodeEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeContractCodeEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeContractCodeEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractCodeEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeContractCodeEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeContractCodeEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTTLEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TTLEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTTLEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTTLEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTTLEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TTLEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTTLEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTTLEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerEntryExtensionV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerEntryExtensionV1EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerEntryExtensionV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerEntryExtensionV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerEntryExtensionV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerEntryExtensionV1DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerEntryExtensionV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerEntryExtensionV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerKey", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerKeyEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerKey(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerKey");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerKey", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerKeyDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerKey(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerKey");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeEnvelopeType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.EnvelopeTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeEnvelopeType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeEnvelopeType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeEnvelopeType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.EnvelopeTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeEnvelopeType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeEnvelopeType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeBucketListType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BucketListTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeBucketListType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeBucketListType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeBucketListType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BucketListTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeBucketListType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeBucketListType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeBucketEntryType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BucketEntryTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeBucketEntryType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeBucketEntryType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeBucketEntryType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BucketEntryTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeBucketEntryType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeBucketEntryType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeHotArchiveBucketEntryType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HotArchiveBucketEntryTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeHotArchiveBucketEntryType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeHotArchiveBucketEntryType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeHotArchiveBucketEntryType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HotArchiveBucketEntryTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeHotArchiveBucketEntryType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeHotArchiveBucketEntryType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeColdArchiveBucketEntryType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ColdArchiveBucketEntryTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeColdArchiveBucketEntryType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeColdArchiveBucketEntryType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeColdArchiveBucketEntryType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ColdArchiveBucketEntryTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeColdArchiveBucketEntryType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeColdArchiveBucketEntryType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeBucketMetadata", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BucketMetadataEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeBucketMetadata(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeBucketMetadata");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeBucketMetadata", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BucketMetadataDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeBucketMetadata(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeBucketMetadata");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeBucketEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BucketEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeBucketEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeBucketEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeBucketEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BucketEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeBucketEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeBucketEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeHotArchiveBucketEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HotArchiveBucketEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeHotArchiveBucketEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeHotArchiveBucketEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeHotArchiveBucketEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HotArchiveBucketEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeHotArchiveBucketEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeHotArchiveBucketEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeColdArchiveArchivedLeaf", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ColdArchiveArchivedLeafEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeColdArchiveArchivedLeaf(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeColdArchiveArchivedLeaf");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeColdArchiveArchivedLeaf", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ColdArchiveArchivedLeafDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeColdArchiveArchivedLeaf(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeColdArchiveArchivedLeaf");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeColdArchiveDeletedLeaf", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ColdArchiveDeletedLeafEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeColdArchiveDeletedLeaf(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeColdArchiveDeletedLeaf");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeColdArchiveDeletedLeaf", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ColdArchiveDeletedLeafDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeColdArchiveDeletedLeaf(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeColdArchiveDeletedLeaf");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeColdArchiveBoundaryLeaf", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ColdArchiveBoundaryLeafEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeColdArchiveBoundaryLeaf(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeColdArchiveBoundaryLeaf");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeColdArchiveBoundaryLeaf", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ColdArchiveBoundaryLeafDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeColdArchiveBoundaryLeaf(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeColdArchiveBoundaryLeaf");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeColdArchiveHashEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ColdArchiveHashEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeColdArchiveHashEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeColdArchiveHashEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeColdArchiveHashEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ColdArchiveHashEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeColdArchiveHashEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeColdArchiveHashEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeColdArchiveBucketEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ColdArchiveBucketEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeColdArchiveBucketEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeColdArchiveBucketEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeColdArchiveBucketEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ColdArchiveBucketEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeColdArchiveBucketEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeColdArchiveBucketEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeUpgradeType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.UpgradeTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeUpgradeType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeUpgradeType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeUpgradeType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.UpgradeTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeUpgradeType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeUpgradeType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeStellarValueType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StellarValueTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeStellarValueType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeStellarValueType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeStellarValueType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StellarValueTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeStellarValueType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeStellarValueType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerCloseValueSignature", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerCloseValueSignatureEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerCloseValueSignature(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerCloseValueSignature");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerCloseValueSignature", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerCloseValueSignatureDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerCloseValueSignature(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerCloseValueSignature");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeStellarValue", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StellarValueEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeStellarValue(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeStellarValue");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeStellarValue", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StellarValueDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeStellarValue(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeStellarValue");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerHeaderFlags", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerHeaderFlagsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerHeaderFlags(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerHeaderFlags");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerHeaderFlags", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerHeaderFlagsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerHeaderFlags(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerHeaderFlags");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerHeaderExtensionV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerHeaderExtensionV1EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerHeaderExtensionV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerHeaderExtensionV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerHeaderExtensionV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerHeaderExtensionV1DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerHeaderExtensionV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerHeaderExtensionV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerHeader", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerHeaderEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerHeader(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerHeader");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerHeader", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerHeaderDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerHeader(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerHeader");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerUpgradeType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerUpgradeTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerUpgradeType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerUpgradeType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerUpgradeType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerUpgradeTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerUpgradeType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerUpgradeType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeConfigUpgradeSetKey", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigUpgradeSetKeyEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeConfigUpgradeSetKey(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeConfigUpgradeSetKey");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeConfigUpgradeSetKey", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigUpgradeSetKeyDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeConfigUpgradeSetKey(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeConfigUpgradeSetKey");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerUpgrade", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerUpgradeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerUpgrade(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerUpgrade");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerUpgrade", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerUpgradeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerUpgrade(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerUpgrade");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeConfigUpgradeSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigUpgradeSetEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeConfigUpgradeSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeConfigUpgradeSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeConfigUpgradeSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ConfigUpgradeSetDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeConfigUpgradeSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeConfigUpgradeSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTxSetComponentType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TxSetComponentTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTxSetComponentType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTxSetComponentType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTxSetComponentType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TxSetComponentTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTxSetComponentType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTxSetComponentType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTxSetComponent", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TxSetComponentEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTxSetComponent(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTxSetComponent");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTxSetComponent", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TxSetComponentDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTxSetComponent(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTxSetComponent");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionPhase", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionPhaseEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionPhase(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionPhase");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionPhase", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionPhaseDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionPhase(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionPhase");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionSetEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionSetDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionSetV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionSetV1EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionSetV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionSetV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionSetV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionSetV1DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionSetV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionSetV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeGeneralizedTransactionSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.GeneralizedTransactionSetEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeGeneralizedTransactionSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeGeneralizedTransactionSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeGeneralizedTransactionSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.GeneralizedTransactionSetDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeGeneralizedTransactionSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeGeneralizedTransactionSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionResultPair", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionResultPairEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionResultPair(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionResultPair");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionResultPair", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionResultPairDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionResultPair(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionResultPair");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionResultSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionResultSetEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionResultSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionResultSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionResultSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionResultSetDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionResultSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionResultSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionHistoryEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionHistoryEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionHistoryEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionHistoryEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionHistoryEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionHistoryEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionHistoryEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionHistoryEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionHistoryResultEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionHistoryResultEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionHistoryResultEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionHistoryResultEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionHistoryResultEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionHistoryResultEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionHistoryResultEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionHistoryResultEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerHeaderHistoryEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerHeaderHistoryEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerHeaderHistoryEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerHeaderHistoryEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerHeaderHistoryEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerHeaderHistoryEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerHeaderHistoryEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerHeaderHistoryEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerSCPMessages", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerSCPMessagesEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerSCPMessages(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerSCPMessages");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerSCPMessages", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerSCPMessagesDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerSCPMessages(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerSCPMessages");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCPHistoryEntryV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPHistoryEntryV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCPHistoryEntryV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCPHistoryEntryV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCPHistoryEntryV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPHistoryEntryV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCPHistoryEntryV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCPHistoryEntryV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCPHistoryEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPHistoryEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCPHistoryEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCPHistoryEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCPHistoryEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPHistoryEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCPHistoryEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCPHistoryEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerEntryChangeType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerEntryChangeTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerEntryChangeType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerEntryChangeType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerEntryChangeType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerEntryChangeTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerEntryChangeType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerEntryChangeType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerEntryChange", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerEntryChangeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerEntryChange(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerEntryChange");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerEntryChange", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerEntryChangeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerEntryChange(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerEntryChange");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerEntryChanges", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerEntryChangesEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerEntryChanges(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerEntryChanges");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerEntryChanges", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerEntryChangesDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerEntryChanges(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerEntryChanges");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeOperationMeta", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OperationMetaEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeOperationMeta(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeOperationMeta");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeOperationMeta", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OperationMetaDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeOperationMeta(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeOperationMeta");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionMetaV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionMetaV1EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionMetaV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionMetaV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionMetaV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionMetaV1DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionMetaV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionMetaV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionMetaV2", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionMetaV2EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionMetaV2(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionMetaV2");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionMetaV2", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionMetaV2DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionMetaV2(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionMetaV2");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeContractEventType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractEventTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeContractEventType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeContractEventType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeContractEventType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractEventTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeContractEventType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeContractEventType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeContractEvent", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractEventEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeContractEvent(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeContractEvent");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeContractEvent", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractEventDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeContractEvent(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeContractEvent");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeDiagnosticEvent", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DiagnosticEventEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeDiagnosticEvent(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeDiagnosticEvent");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeDiagnosticEvent", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DiagnosticEventDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeDiagnosticEvent(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeDiagnosticEvent");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeDiagnosticEvents", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DiagnosticEventsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeDiagnosticEvents(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeDiagnosticEvents");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeDiagnosticEvents", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DiagnosticEventsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeDiagnosticEvents(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeDiagnosticEvents");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSorobanTransactionMetaExtV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanTransactionMetaExtV1EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSorobanTransactionMetaExtV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSorobanTransactionMetaExtV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSorobanTransactionMetaExtV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanTransactionMetaExtV1DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSorobanTransactionMetaExtV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSorobanTransactionMetaExtV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSorobanTransactionMetaExt", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanTransactionMetaExtEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSorobanTransactionMetaExt(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSorobanTransactionMetaExt");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSorobanTransactionMetaExt", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanTransactionMetaExtDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSorobanTransactionMetaExt(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSorobanTransactionMetaExt");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSorobanTransactionMeta", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanTransactionMetaEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSorobanTransactionMeta(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSorobanTransactionMeta");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSorobanTransactionMeta", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanTransactionMetaDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSorobanTransactionMeta(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSorobanTransactionMeta");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionMetaV3", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionMetaV3EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionMetaV3(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionMetaV3");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionMetaV3", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionMetaV3DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionMetaV3(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionMetaV3");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeInvokeHostFunctionSuccessPreImage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InvokeHostFunctionSuccessPreImageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeInvokeHostFunctionSuccessPreImage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeInvokeHostFunctionSuccessPreImage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeInvokeHostFunctionSuccessPreImage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InvokeHostFunctionSuccessPreImageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeInvokeHostFunctionSuccessPreImage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeInvokeHostFunctionSuccessPreImage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionMeta", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionMetaEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionMeta(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionMeta");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionMeta", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionMetaDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionMeta(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionMeta");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionResultMeta", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionResultMetaEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionResultMeta(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionResultMeta");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionResultMeta", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionResultMetaDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionResultMeta(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionResultMeta");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeUpgradeEntryMeta", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.UpgradeEntryMetaEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeUpgradeEntryMeta(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeUpgradeEntryMeta");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeUpgradeEntryMeta", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.UpgradeEntryMetaDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeUpgradeEntryMeta(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeUpgradeEntryMeta");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerCloseMetaV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerCloseMetaV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerCloseMetaV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerCloseMetaV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerCloseMetaV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerCloseMetaV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerCloseMetaV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerCloseMetaV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerCloseMetaExtV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerCloseMetaExtV1EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerCloseMetaExtV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerCloseMetaExtV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerCloseMetaExtV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerCloseMetaExtV1DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerCloseMetaExtV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerCloseMetaExtV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerCloseMetaExt", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerCloseMetaExtEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerCloseMetaExt(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerCloseMetaExt");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerCloseMetaExt", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerCloseMetaExtDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerCloseMetaExt(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerCloseMetaExt");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerCloseMetaV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerCloseMetaV1EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerCloseMetaV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerCloseMetaV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerCloseMetaV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerCloseMetaV1DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerCloseMetaV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerCloseMetaV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerCloseMeta", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerCloseMetaEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerCloseMeta(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerCloseMeta");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerCloseMeta", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerCloseMetaDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerCloseMeta(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerCloseMeta");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeErrorCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ErrorCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeErrorCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeErrorCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeErrorCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ErrorCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeErrorCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeErrorCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeError", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ErrorEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeError(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeError");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeError", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ErrorDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeError(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeError");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSendMore", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SendMoreEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSendMore(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSendMore");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSendMore", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SendMoreDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSendMore(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSendMore");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSendMoreExtended", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SendMoreExtendedEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSendMoreExtended(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSendMoreExtended");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSendMoreExtended", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SendMoreExtendedDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSendMoreExtended(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSendMoreExtended");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAuthCert", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AuthCertEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAuthCert(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAuthCert");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAuthCert", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AuthCertDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAuthCert(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAuthCert");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeHello", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HelloEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeHello(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeHello");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeHello", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HelloDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeHello(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeHello");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAuth", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AuthEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAuth(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAuth");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAuth", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AuthDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAuth(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAuth");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeIPAddrType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.IPAddrTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeIPAddrType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeIPAddrType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeIPAddrType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.IPAddrTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeIPAddrType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeIPAddrType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePeerAddress", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PeerAddressEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePeerAddress(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePeerAddress");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePeerAddress", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PeerAddressDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePeerAddress(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePeerAddress");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeMessageType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MessageTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeMessageType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeMessageType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeMessageType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MessageTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeMessageType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeMessageType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeDontHave", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DontHaveEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeDontHave(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeDontHave");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeDontHave", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DontHaveDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeDontHave(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeDontHave");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSurveyMessageCommandType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SurveyMessageCommandTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSurveyMessageCommandType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSurveyMessageCommandType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSurveyMessageCommandType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SurveyMessageCommandTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSurveyMessageCommandType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSurveyMessageCommandType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSurveyMessageResponseType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SurveyMessageResponseTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSurveyMessageResponseType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSurveyMessageResponseType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSurveyMessageResponseType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SurveyMessageResponseTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSurveyMessageResponseType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSurveyMessageResponseType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTimeSlicedSurveyStartCollectingMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedSurveyStartCollectingMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTimeSlicedSurveyStartCollectingMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTimeSlicedSurveyStartCollectingMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTimeSlicedSurveyStartCollectingMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedSurveyStartCollectingMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTimeSlicedSurveyStartCollectingMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTimeSlicedSurveyStartCollectingMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSignedTimeSlicedSurveyStartCollectingMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSignedTimeSlicedSurveyStartCollectingMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSignedTimeSlicedSurveyStartCollectingMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSignedTimeSlicedSurveyStartCollectingMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSignedTimeSlicedSurveyStartCollectingMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSignedTimeSlicedSurveyStartCollectingMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTimeSlicedSurveyStopCollectingMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedSurveyStopCollectingMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTimeSlicedSurveyStopCollectingMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTimeSlicedSurveyStopCollectingMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTimeSlicedSurveyStopCollectingMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedSurveyStopCollectingMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTimeSlicedSurveyStopCollectingMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTimeSlicedSurveyStopCollectingMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSignedTimeSlicedSurveyStopCollectingMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSignedTimeSlicedSurveyStopCollectingMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSignedTimeSlicedSurveyStopCollectingMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSignedTimeSlicedSurveyStopCollectingMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSignedTimeSlicedSurveyStopCollectingMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSignedTimeSlicedSurveyStopCollectingMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSurveyRequestMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SurveyRequestMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSurveyRequestMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSurveyRequestMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSurveyRequestMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SurveyRequestMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSurveyRequestMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSurveyRequestMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTimeSlicedSurveyRequestMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedSurveyRequestMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTimeSlicedSurveyRequestMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTimeSlicedSurveyRequestMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTimeSlicedSurveyRequestMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedSurveyRequestMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTimeSlicedSurveyRequestMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTimeSlicedSurveyRequestMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSignedSurveyRequestMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignedSurveyRequestMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSignedSurveyRequestMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSignedSurveyRequestMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSignedSurveyRequestMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignedSurveyRequestMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSignedSurveyRequestMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSignedSurveyRequestMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSignedTimeSlicedSurveyRequestMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyRequestMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSignedTimeSlicedSurveyRequestMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSignedTimeSlicedSurveyRequestMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSignedTimeSlicedSurveyRequestMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyRequestMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSignedTimeSlicedSurveyRequestMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSignedTimeSlicedSurveyRequestMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeEncryptedBody", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.EncryptedBodyEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeEncryptedBody(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeEncryptedBody");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeEncryptedBody", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.EncryptedBodyDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeEncryptedBody(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeEncryptedBody");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSurveyResponseMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SurveyResponseMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSurveyResponseMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSurveyResponseMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSurveyResponseMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SurveyResponseMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSurveyResponseMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSurveyResponseMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTimeSlicedSurveyResponseMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedSurveyResponseMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTimeSlicedSurveyResponseMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTimeSlicedSurveyResponseMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTimeSlicedSurveyResponseMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedSurveyResponseMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTimeSlicedSurveyResponseMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTimeSlicedSurveyResponseMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSignedSurveyResponseMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignedSurveyResponseMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSignedSurveyResponseMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSignedSurveyResponseMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSignedSurveyResponseMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignedSurveyResponseMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSignedSurveyResponseMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSignedSurveyResponseMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSignedTimeSlicedSurveyResponseMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyResponseMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSignedTimeSlicedSurveyResponseMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSignedTimeSlicedSurveyResponseMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSignedTimeSlicedSurveyResponseMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyResponseMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSignedTimeSlicedSurveyResponseMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSignedTimeSlicedSurveyResponseMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePeerStats", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PeerStatsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePeerStats(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePeerStats");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePeerStats", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PeerStatsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePeerStats(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePeerStats");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePeerStatList", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PeerStatListEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePeerStatList(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePeerStatList");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePeerStatList", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PeerStatListDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePeerStatList(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePeerStatList");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTimeSlicedNodeData", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedNodeDataEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTimeSlicedNodeData(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTimeSlicedNodeData");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTimeSlicedNodeData", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedNodeDataDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTimeSlicedNodeData(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTimeSlicedNodeData");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTimeSlicedPeerData", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedPeerDataEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTimeSlicedPeerData(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTimeSlicedPeerData");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTimeSlicedPeerData", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedPeerDataDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTimeSlicedPeerData(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTimeSlicedPeerData");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTimeSlicedPeerDataList", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedPeerDataListEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTimeSlicedPeerDataList(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTimeSlicedPeerDataList");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTimeSlicedPeerDataList", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeSlicedPeerDataListDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTimeSlicedPeerDataList(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTimeSlicedPeerDataList");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTopologyResponseBodyV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TopologyResponseBodyV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTopologyResponseBodyV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTopologyResponseBodyV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTopologyResponseBodyV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TopologyResponseBodyV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTopologyResponseBodyV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTopologyResponseBodyV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTopologyResponseBodyV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TopologyResponseBodyV1EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTopologyResponseBodyV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTopologyResponseBodyV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTopologyResponseBodyV1", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TopologyResponseBodyV1DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTopologyResponseBodyV1(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTopologyResponseBodyV1");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTopologyResponseBodyV2", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TopologyResponseBodyV2EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTopologyResponseBodyV2(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTopologyResponseBodyV2");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTopologyResponseBodyV2", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TopologyResponseBodyV2DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTopologyResponseBodyV2(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTopologyResponseBodyV2");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSurveyResponseBody", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SurveyResponseBodyEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSurveyResponseBody(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSurveyResponseBody");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSurveyResponseBody", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SurveyResponseBodyDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSurveyResponseBody(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSurveyResponseBody");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTxAdvertVector", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TxAdvertVectorEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTxAdvertVector(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTxAdvertVector");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTxAdvertVector", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TxAdvertVectorDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTxAdvertVector(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTxAdvertVector");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeFloodAdvert", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.FloodAdvertEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeFloodAdvert(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeFloodAdvert");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeFloodAdvert", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.FloodAdvertDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeFloodAdvert(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeFloodAdvert");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTxDemandVector", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TxDemandVectorEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTxDemandVector(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTxDemandVector");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTxDemandVector", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TxDemandVectorDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTxDemandVector(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTxDemandVector");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeFloodDemand", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.FloodDemandEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeFloodDemand(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeFloodDemand");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeFloodDemand", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.FloodDemandDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeFloodDemand(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeFloodDemand");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeStellarMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StellarMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeStellarMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeStellarMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeStellarMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StellarMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeStellarMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeStellarMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAuthenticatedMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AuthenticatedMessageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAuthenticatedMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAuthenticatedMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAuthenticatedMessage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AuthenticatedMessageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAuthenticatedMessage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAuthenticatedMessage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeValue", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ValueEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeValue(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeValue");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeValue", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ValueDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeValue(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeValue");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCPBallot", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPBallotEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCPBallot(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCPBallot");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCPBallot", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPBallotDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCPBallot(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCPBallot");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCPStatementType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPStatementTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCPStatementType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCPStatementType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCPStatementType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPStatementTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCPStatementType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCPStatementType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCPNomination", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPNominationEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCPNomination(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCPNomination");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCPNomination", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPNominationDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCPNomination(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCPNomination");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCPStatement", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPStatementEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCPStatement(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCPStatement");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCPStatement", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPStatementDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCPStatement(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCPStatement");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCPEnvelope", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPEnvelopeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCPEnvelope(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCPEnvelope");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCPEnvelope", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPEnvelopeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCPEnvelope(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCPEnvelope");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSCPQuorumSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPQuorumSetEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSCPQuorumSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSCPQuorumSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSCPQuorumSet", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SCPQuorumSetDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSCPQuorumSet(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSCPQuorumSet");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLiquidityPoolParameters", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolParametersEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLiquidityPoolParameters(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLiquidityPoolParameters");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLiquidityPoolParameters", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolParametersDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLiquidityPoolParameters(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLiquidityPoolParameters");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeMuxedAccount", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccountEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeMuxedAccount(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeMuxedAccount");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeMuxedAccount", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccountDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeMuxedAccount(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeMuxedAccount");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeDecoratedSignature", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DecoratedSignatureEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeDecoratedSignature(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeDecoratedSignature");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeDecoratedSignature", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DecoratedSignatureDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeDecoratedSignature(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeDecoratedSignature");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeOperationType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OperationTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeOperationType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeOperationType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeOperationType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OperationTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeOperationType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeOperationType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeCreateAccountOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateAccountOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeCreateAccountOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeCreateAccountOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeCreateAccountOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateAccountOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeCreateAccountOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeCreateAccountOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePaymentOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PaymentOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePaymentOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePaymentOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePaymentOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PaymentOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePaymentOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePaymentOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePathPaymentStrictReceiveOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PathPaymentStrictReceiveOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePathPaymentStrictReceiveOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePathPaymentStrictReceiveOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePathPaymentStrictReceiveOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PathPaymentStrictReceiveOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePathPaymentStrictReceiveOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePathPaymentStrictReceiveOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePathPaymentStrictSendOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PathPaymentStrictSendOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePathPaymentStrictSendOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePathPaymentStrictSendOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePathPaymentStrictSendOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PathPaymentStrictSendOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePathPaymentStrictSendOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePathPaymentStrictSendOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeManageSellOfferOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageSellOfferOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeManageSellOfferOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeManageSellOfferOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeManageSellOfferOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageSellOfferOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeManageSellOfferOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeManageSellOfferOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeManageBuyOfferOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageBuyOfferOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeManageBuyOfferOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeManageBuyOfferOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeManageBuyOfferOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageBuyOfferOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeManageBuyOfferOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeManageBuyOfferOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeCreatePassiveSellOfferOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreatePassiveSellOfferOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeCreatePassiveSellOfferOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeCreatePassiveSellOfferOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeCreatePassiveSellOfferOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreatePassiveSellOfferOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeCreatePassiveSellOfferOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeCreatePassiveSellOfferOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSetOptionsOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SetOptionsOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSetOptionsOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSetOptionsOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSetOptionsOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SetOptionsOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSetOptionsOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSetOptionsOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeChangeTrustAsset", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ChangeTrustAssetEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeChangeTrustAsset(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeChangeTrustAsset");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeChangeTrustAsset", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ChangeTrustAssetDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeChangeTrustAsset(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeChangeTrustAsset");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeChangeTrustOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ChangeTrustOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeChangeTrustOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeChangeTrustOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeChangeTrustOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ChangeTrustOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeChangeTrustOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeChangeTrustOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAllowTrustOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AllowTrustOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAllowTrustOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAllowTrustOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAllowTrustOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AllowTrustOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAllowTrustOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAllowTrustOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeManageDataOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageDataOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeManageDataOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeManageDataOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeManageDataOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageDataOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeManageDataOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeManageDataOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeBumpSequenceOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BumpSequenceOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeBumpSequenceOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeBumpSequenceOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeBumpSequenceOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BumpSequenceOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeBumpSequenceOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeBumpSequenceOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeCreateClaimableBalanceOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateClaimableBalanceOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeCreateClaimableBalanceOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeCreateClaimableBalanceOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeCreateClaimableBalanceOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateClaimableBalanceOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeCreateClaimableBalanceOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeCreateClaimableBalanceOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimClaimableBalanceOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimClaimableBalanceOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimClaimableBalanceOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimClaimableBalanceOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimClaimableBalanceOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimClaimableBalanceOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimClaimableBalanceOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimClaimableBalanceOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeBeginSponsoringFutureReservesOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeBeginSponsoringFutureReservesOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeBeginSponsoringFutureReservesOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeBeginSponsoringFutureReservesOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeBeginSponsoringFutureReservesOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeBeginSponsoringFutureReservesOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeRevokeSponsorshipType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RevokeSponsorshipTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeRevokeSponsorshipType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeRevokeSponsorshipType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeRevokeSponsorshipType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RevokeSponsorshipTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeRevokeSponsorshipType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeRevokeSponsorshipType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeRevokeSponsorshipOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RevokeSponsorshipOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeRevokeSponsorshipOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeRevokeSponsorshipOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeRevokeSponsorshipOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RevokeSponsorshipOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeRevokeSponsorshipOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeRevokeSponsorshipOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClawbackOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClawbackOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClawbackOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClawbackOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClawbackOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClawbackOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClawbackOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClawbackOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClawbackClaimableBalanceOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClawbackClaimableBalanceOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClawbackClaimableBalanceOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClawbackClaimableBalanceOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClawbackClaimableBalanceOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClawbackClaimableBalanceOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClawbackClaimableBalanceOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClawbackClaimableBalanceOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSetTrustLineFlagsOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SetTrustLineFlagsOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSetTrustLineFlagsOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSetTrustLineFlagsOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSetTrustLineFlagsOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SetTrustLineFlagsOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSetTrustLineFlagsOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSetTrustLineFlagsOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLiquidityPoolDepositOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolDepositOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLiquidityPoolDepositOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLiquidityPoolDepositOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLiquidityPoolDepositOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolDepositOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLiquidityPoolDepositOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLiquidityPoolDepositOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLiquidityPoolWithdrawOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolWithdrawOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLiquidityPoolWithdrawOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLiquidityPoolWithdrawOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLiquidityPoolWithdrawOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolWithdrawOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLiquidityPoolWithdrawOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLiquidityPoolWithdrawOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeHostFunctionType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HostFunctionTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeHostFunctionType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeHostFunctionType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeHostFunctionType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HostFunctionTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeHostFunctionType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeHostFunctionType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeContractIDPreimageType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractIDPreimageTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeContractIDPreimageType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeContractIDPreimageType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeContractIDPreimageType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractIDPreimageTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeContractIDPreimageType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeContractIDPreimageType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeContractIDPreimage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractIDPreimageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeContractIDPreimage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeContractIDPreimage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeContractIDPreimage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ContractIDPreimageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeContractIDPreimage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeContractIDPreimage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeCreateContractArgs", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateContractArgsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeCreateContractArgs(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeCreateContractArgs");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeCreateContractArgs", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateContractArgsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeCreateContractArgs(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeCreateContractArgs");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeCreateContractArgsV2", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateContractArgsV2EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeCreateContractArgsV2(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeCreateContractArgsV2");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeCreateContractArgsV2", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateContractArgsV2DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeCreateContractArgsV2(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeCreateContractArgsV2");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeInvokeContractArgs", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InvokeContractArgsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeInvokeContractArgs(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeInvokeContractArgs");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeInvokeContractArgs", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InvokeContractArgsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeInvokeContractArgs(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeInvokeContractArgs");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeHostFunction", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HostFunctionEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeHostFunction(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeHostFunction");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeHostFunction", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HostFunctionDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeHostFunction(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeHostFunction");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSorobanAuthorizedFunctionType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanAuthorizedFunctionTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSorobanAuthorizedFunctionType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSorobanAuthorizedFunctionType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSorobanAuthorizedFunctionType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanAuthorizedFunctionTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSorobanAuthorizedFunctionType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSorobanAuthorizedFunctionType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSorobanAuthorizedFunction", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanAuthorizedFunctionEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSorobanAuthorizedFunction(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSorobanAuthorizedFunction");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSorobanAuthorizedFunction", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanAuthorizedFunctionDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSorobanAuthorizedFunction(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSorobanAuthorizedFunction");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSorobanAuthorizedInvocation", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanAuthorizedInvocationEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSorobanAuthorizedInvocation(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSorobanAuthorizedInvocation");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSorobanAuthorizedInvocation", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanAuthorizedInvocationDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSorobanAuthorizedInvocation(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSorobanAuthorizedInvocation");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSorobanAddressCredentials", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanAddressCredentialsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSorobanAddressCredentials(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSorobanAddressCredentials");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSorobanAddressCredentials", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanAddressCredentialsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSorobanAddressCredentials(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSorobanAddressCredentials");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSorobanCredentialsType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanCredentialsTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSorobanCredentialsType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSorobanCredentialsType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSorobanCredentialsType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanCredentialsTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSorobanCredentialsType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSorobanCredentialsType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSorobanCredentials", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanCredentialsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSorobanCredentials(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSorobanCredentials");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSorobanCredentials", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanCredentialsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSorobanCredentials(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSorobanCredentials");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSorobanAuthorizationEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanAuthorizationEntryEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSorobanAuthorizationEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSorobanAuthorizationEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSorobanAuthorizationEntry", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanAuthorizationEntryDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSorobanAuthorizationEntry(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSorobanAuthorizationEntry");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeInvokeHostFunctionOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InvokeHostFunctionOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeInvokeHostFunctionOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeInvokeHostFunctionOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeInvokeHostFunctionOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InvokeHostFunctionOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeInvokeHostFunctionOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeInvokeHostFunctionOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeExtendFootprintTTLOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ExtendFootprintTTLOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeExtendFootprintTTLOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeExtendFootprintTTLOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeExtendFootprintTTLOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ExtendFootprintTTLOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeExtendFootprintTTLOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeExtendFootprintTTLOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeRestoreFootprintOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RestoreFootprintOpEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeRestoreFootprintOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeRestoreFootprintOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeRestoreFootprintOp", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RestoreFootprintOpDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeRestoreFootprintOp(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeRestoreFootprintOp");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeOperation", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OperationEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeOperation(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeOperation");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeOperation", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OperationDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeOperation(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeOperation");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeHashIDPreimage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HashIDPreimageEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeHashIDPreimage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeHashIDPreimage");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeHashIDPreimage", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HashIDPreimageDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeHashIDPreimage(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeHashIDPreimage");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeMemoType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MemoTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeMemoType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeMemoType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeMemoType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MemoTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeMemoType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeMemoType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeMemo", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MemoEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeMemo(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeMemo");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeMemo", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MemoDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeMemo(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeMemo");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTimeBounds", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeBoundsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTimeBounds(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTimeBounds");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTimeBounds", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimeBoundsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTimeBounds(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTimeBounds");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerBounds", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerBoundsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerBounds(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerBounds");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerBounds", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerBoundsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerBounds(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerBounds");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePreconditionsV2", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PreconditionsV2EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePreconditionsV2(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePreconditionsV2");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePreconditionsV2", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PreconditionsV2DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePreconditionsV2(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePreconditionsV2");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePreconditionType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PreconditionTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePreconditionType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePreconditionType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePreconditionType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PreconditionTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePreconditionType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePreconditionType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePreconditions", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PreconditionsEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePreconditions(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePreconditions");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePreconditions", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PreconditionsDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePreconditions(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePreconditions");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLedgerFootprint", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerFootprintEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLedgerFootprint(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLedgerFootprint");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLedgerFootprint", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LedgerFootprintDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLedgerFootprint(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLedgerFootprint");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeArchivalProofType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ArchivalProofTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeArchivalProofType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeArchivalProofType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeArchivalProofType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ArchivalProofTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeArchivalProofType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeArchivalProofType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeArchivalProofNode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ArchivalProofNodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeArchivalProofNode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeArchivalProofNode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeArchivalProofNode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ArchivalProofNodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeArchivalProofNode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeArchivalProofNode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeProofLevel", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ProofLevelEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeProofLevel(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeProofLevel");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeProofLevel", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ProofLevelDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeProofLevel(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeProofLevel");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeNonexistenceProofBody", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.NonexistenceProofBodyEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeNonexistenceProofBody(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeNonexistenceProofBody");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeNonexistenceProofBody", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.NonexistenceProofBodyDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeNonexistenceProofBody(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeNonexistenceProofBody");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeExistenceProofBody", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ExistenceProofBodyEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeExistenceProofBody(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeExistenceProofBody");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeExistenceProofBody", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ExistenceProofBodyDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeExistenceProofBody(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeExistenceProofBody");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeArchivalProof", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ArchivalProofEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeArchivalProof(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeArchivalProof");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeArchivalProof", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ArchivalProofDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeArchivalProof(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeArchivalProof");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSorobanResources", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanResourcesEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSorobanResources(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSorobanResources");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSorobanResources", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanResourcesDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSorobanResources(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSorobanResources");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSorobanTransactionData", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanTransactionDataEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSorobanTransactionData(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSorobanTransactionData");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSorobanTransactionData", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SorobanTransactionDataDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSorobanTransactionData(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSorobanTransactionData");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionV0Envelope", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionV0EnvelopeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionV0Envelope(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionV0Envelope");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionV0Envelope", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionV0EnvelopeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionV0Envelope(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionV0Envelope");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransaction", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransaction(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransaction");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransaction", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransaction(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransaction");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionV1Envelope", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionV1EnvelopeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionV1Envelope(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionV1Envelope");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionV1Envelope", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionV1EnvelopeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionV1Envelope(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionV1Envelope");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeFeeBumpTransaction", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.FeeBumpTransactionEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeFeeBumpTransaction(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeFeeBumpTransaction");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeFeeBumpTransaction", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.FeeBumpTransactionDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeFeeBumpTransaction(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeFeeBumpTransaction");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeFeeBumpTransactionEnvelope", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.FeeBumpTransactionEnvelopeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeFeeBumpTransactionEnvelope(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeFeeBumpTransactionEnvelope");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeFeeBumpTransactionEnvelope", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.FeeBumpTransactionEnvelopeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeFeeBumpTransactionEnvelope(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeFeeBumpTransactionEnvelope");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionEnvelope", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionEnvelopeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionEnvelope(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionEnvelope");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionEnvelope", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionEnvelopeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionEnvelope(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionEnvelope");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionSignaturePayload", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionSignaturePayloadEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionSignaturePayload(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionSignaturePayload");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionSignaturePayload", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionSignaturePayloadDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionSignaturePayload(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionSignaturePayload");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimAtomType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimAtomTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimAtomType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimAtomType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimAtomType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimAtomTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimAtomType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimAtomType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimOfferAtomV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimOfferAtomV0EncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimOfferAtomV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimOfferAtomV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimOfferAtomV0", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimOfferAtomV0DecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimOfferAtomV0(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimOfferAtomV0");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimOfferAtom", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimOfferAtomEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimOfferAtom(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimOfferAtom");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimOfferAtom", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimOfferAtomDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimOfferAtom(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimOfferAtom");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimLiquidityAtom", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimLiquidityAtomEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimLiquidityAtom(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimLiquidityAtom");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimLiquidityAtom", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimLiquidityAtomDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimLiquidityAtom(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimLiquidityAtom");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimAtom", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimAtomEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimAtom(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimAtom");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimAtom", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimAtomDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimAtom(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimAtom");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeCreateAccountResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateAccountResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeCreateAccountResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeCreateAccountResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeCreateAccountResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateAccountResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeCreateAccountResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeCreateAccountResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeCreateAccountResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateAccountResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeCreateAccountResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeCreateAccountResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeCreateAccountResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateAccountResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeCreateAccountResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeCreateAccountResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePaymentResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PaymentResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePaymentResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePaymentResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePaymentResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PaymentResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePaymentResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePaymentResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePaymentResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PaymentResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePaymentResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePaymentResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePaymentResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PaymentResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePaymentResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePaymentResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePathPaymentStrictReceiveResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PathPaymentStrictReceiveResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePathPaymentStrictReceiveResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePathPaymentStrictReceiveResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePathPaymentStrictReceiveResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PathPaymentStrictReceiveResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePathPaymentStrictReceiveResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePathPaymentStrictReceiveResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSimplePaymentResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SimplePaymentResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSimplePaymentResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSimplePaymentResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSimplePaymentResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SimplePaymentResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSimplePaymentResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSimplePaymentResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePathPaymentStrictReceiveResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PathPaymentStrictReceiveResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePathPaymentStrictReceiveResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePathPaymentStrictReceiveResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePathPaymentStrictReceiveResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PathPaymentStrictReceiveResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePathPaymentStrictReceiveResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePathPaymentStrictReceiveResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePathPaymentStrictSendResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PathPaymentStrictSendResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePathPaymentStrictSendResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePathPaymentStrictSendResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePathPaymentStrictSendResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PathPaymentStrictSendResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePathPaymentStrictSendResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePathPaymentStrictSendResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePathPaymentStrictSendResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PathPaymentStrictSendResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePathPaymentStrictSendResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePathPaymentStrictSendResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePathPaymentStrictSendResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PathPaymentStrictSendResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePathPaymentStrictSendResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePathPaymentStrictSendResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeManageSellOfferResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageSellOfferResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeManageSellOfferResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeManageSellOfferResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeManageSellOfferResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageSellOfferResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeManageSellOfferResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeManageSellOfferResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeManageOfferEffect", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageOfferEffectEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeManageOfferEffect(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeManageOfferEffect");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeManageOfferEffect", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageOfferEffectDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeManageOfferEffect(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeManageOfferEffect");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeManageOfferSuccessResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageOfferSuccessResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeManageOfferSuccessResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeManageOfferSuccessResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeManageOfferSuccessResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageOfferSuccessResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeManageOfferSuccessResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeManageOfferSuccessResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeManageSellOfferResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageSellOfferResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeManageSellOfferResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeManageSellOfferResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeManageSellOfferResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageSellOfferResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeManageSellOfferResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeManageSellOfferResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeManageBuyOfferResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageBuyOfferResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeManageBuyOfferResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeManageBuyOfferResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeManageBuyOfferResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageBuyOfferResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeManageBuyOfferResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeManageBuyOfferResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeManageBuyOfferResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageBuyOfferResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeManageBuyOfferResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeManageBuyOfferResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeManageBuyOfferResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageBuyOfferResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeManageBuyOfferResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeManageBuyOfferResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSetOptionsResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SetOptionsResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSetOptionsResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSetOptionsResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSetOptionsResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SetOptionsResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSetOptionsResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSetOptionsResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSetOptionsResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SetOptionsResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSetOptionsResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSetOptionsResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSetOptionsResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SetOptionsResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSetOptionsResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSetOptionsResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeChangeTrustResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ChangeTrustResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeChangeTrustResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeChangeTrustResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeChangeTrustResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ChangeTrustResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeChangeTrustResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeChangeTrustResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeChangeTrustResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ChangeTrustResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeChangeTrustResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeChangeTrustResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeChangeTrustResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ChangeTrustResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeChangeTrustResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeChangeTrustResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAllowTrustResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AllowTrustResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAllowTrustResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAllowTrustResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAllowTrustResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AllowTrustResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAllowTrustResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAllowTrustResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAllowTrustResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AllowTrustResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAllowTrustResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAllowTrustResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAllowTrustResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AllowTrustResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAllowTrustResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAllowTrustResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAccountMergeResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountMergeResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAccountMergeResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAccountMergeResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAccountMergeResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountMergeResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAccountMergeResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAccountMergeResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAccountMergeResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountMergeResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAccountMergeResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAccountMergeResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAccountMergeResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountMergeResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAccountMergeResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAccountMergeResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeInflationResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InflationResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeInflationResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeInflationResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeInflationResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InflationResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeInflationResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeInflationResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeInflationPayout", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InflationPayoutEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeInflationPayout(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeInflationPayout");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeInflationPayout", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InflationPayoutDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeInflationPayout(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeInflationPayout");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeInflationResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InflationResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeInflationResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeInflationResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeInflationResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InflationResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeInflationResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeInflationResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeManageDataResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageDataResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeManageDataResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeManageDataResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeManageDataResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageDataResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeManageDataResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeManageDataResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeManageDataResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageDataResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeManageDataResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeManageDataResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeManageDataResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ManageDataResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeManageDataResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeManageDataResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeBumpSequenceResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BumpSequenceResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeBumpSequenceResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeBumpSequenceResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeBumpSequenceResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BumpSequenceResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeBumpSequenceResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeBumpSequenceResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeBumpSequenceResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BumpSequenceResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeBumpSequenceResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeBumpSequenceResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeBumpSequenceResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BumpSequenceResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeBumpSequenceResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeBumpSequenceResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeCreateClaimableBalanceResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateClaimableBalanceResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeCreateClaimableBalanceResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeCreateClaimableBalanceResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeCreateClaimableBalanceResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateClaimableBalanceResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeCreateClaimableBalanceResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeCreateClaimableBalanceResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeCreateClaimableBalanceResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateClaimableBalanceResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeCreateClaimableBalanceResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeCreateClaimableBalanceResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeCreateClaimableBalanceResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CreateClaimableBalanceResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeCreateClaimableBalanceResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeCreateClaimableBalanceResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimClaimableBalanceResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimClaimableBalanceResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimClaimableBalanceResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimClaimableBalanceResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimClaimableBalanceResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimClaimableBalanceResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimClaimableBalanceResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimClaimableBalanceResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClaimClaimableBalanceResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimClaimableBalanceResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClaimClaimableBalanceResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClaimClaimableBalanceResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClaimClaimableBalanceResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClaimClaimableBalanceResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClaimClaimableBalanceResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClaimClaimableBalanceResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeBeginSponsoringFutureReservesResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeBeginSponsoringFutureReservesResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeBeginSponsoringFutureReservesResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeBeginSponsoringFutureReservesResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeBeginSponsoringFutureReservesResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeBeginSponsoringFutureReservesResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeBeginSponsoringFutureReservesResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeBeginSponsoringFutureReservesResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeBeginSponsoringFutureReservesResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeBeginSponsoringFutureReservesResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeBeginSponsoringFutureReservesResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeBeginSponsoringFutureReservesResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeEndSponsoringFutureReservesResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.EndSponsoringFutureReservesResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeEndSponsoringFutureReservesResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeEndSponsoringFutureReservesResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeEndSponsoringFutureReservesResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.EndSponsoringFutureReservesResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeEndSponsoringFutureReservesResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeEndSponsoringFutureReservesResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeEndSponsoringFutureReservesResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.EndSponsoringFutureReservesResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeEndSponsoringFutureReservesResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeEndSponsoringFutureReservesResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeEndSponsoringFutureReservesResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.EndSponsoringFutureReservesResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeEndSponsoringFutureReservesResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeEndSponsoringFutureReservesResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeRevokeSponsorshipResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RevokeSponsorshipResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeRevokeSponsorshipResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeRevokeSponsorshipResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeRevokeSponsorshipResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RevokeSponsorshipResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeRevokeSponsorshipResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeRevokeSponsorshipResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeRevokeSponsorshipResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RevokeSponsorshipResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeRevokeSponsorshipResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeRevokeSponsorshipResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeRevokeSponsorshipResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RevokeSponsorshipResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeRevokeSponsorshipResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeRevokeSponsorshipResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClawbackResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClawbackResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClawbackResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClawbackResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClawbackResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClawbackResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClawbackResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClawbackResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClawbackResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClawbackResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClawbackResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClawbackResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClawbackResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClawbackResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClawbackResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClawbackResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClawbackClaimableBalanceResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClawbackClaimableBalanceResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClawbackClaimableBalanceResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClawbackClaimableBalanceResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClawbackClaimableBalanceResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClawbackClaimableBalanceResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClawbackClaimableBalanceResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClawbackClaimableBalanceResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeClawbackClaimableBalanceResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClawbackClaimableBalanceResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeClawbackClaimableBalanceResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeClawbackClaimableBalanceResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeClawbackClaimableBalanceResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ClawbackClaimableBalanceResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeClawbackClaimableBalanceResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeClawbackClaimableBalanceResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSetTrustLineFlagsResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SetTrustLineFlagsResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSetTrustLineFlagsResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSetTrustLineFlagsResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSetTrustLineFlagsResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SetTrustLineFlagsResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSetTrustLineFlagsResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSetTrustLineFlagsResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSetTrustLineFlagsResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SetTrustLineFlagsResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSetTrustLineFlagsResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSetTrustLineFlagsResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSetTrustLineFlagsResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SetTrustLineFlagsResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSetTrustLineFlagsResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSetTrustLineFlagsResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLiquidityPoolDepositResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolDepositResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLiquidityPoolDepositResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLiquidityPoolDepositResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLiquidityPoolDepositResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolDepositResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLiquidityPoolDepositResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLiquidityPoolDepositResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLiquidityPoolDepositResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolDepositResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLiquidityPoolDepositResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLiquidityPoolDepositResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLiquidityPoolDepositResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolDepositResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLiquidityPoolDepositResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLiquidityPoolDepositResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLiquidityPoolWithdrawResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolWithdrawResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLiquidityPoolWithdrawResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLiquidityPoolWithdrawResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLiquidityPoolWithdrawResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolWithdrawResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLiquidityPoolWithdrawResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLiquidityPoolWithdrawResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeLiquidityPoolWithdrawResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolWithdrawResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeLiquidityPoolWithdrawResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeLiquidityPoolWithdrawResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeLiquidityPoolWithdrawResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.LiquidityPoolWithdrawResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeLiquidityPoolWithdrawResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeLiquidityPoolWithdrawResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeInvokeHostFunctionResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InvokeHostFunctionResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeInvokeHostFunctionResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeInvokeHostFunctionResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeInvokeHostFunctionResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InvokeHostFunctionResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeInvokeHostFunctionResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeInvokeHostFunctionResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeInvokeHostFunctionResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InvokeHostFunctionResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeInvokeHostFunctionResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeInvokeHostFunctionResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeInvokeHostFunctionResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InvokeHostFunctionResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeInvokeHostFunctionResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeInvokeHostFunctionResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeExtendFootprintTTLResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ExtendFootprintTTLResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeExtendFootprintTTLResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeExtendFootprintTTLResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeExtendFootprintTTLResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ExtendFootprintTTLResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeExtendFootprintTTLResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeExtendFootprintTTLResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeExtendFootprintTTLResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ExtendFootprintTTLResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeExtendFootprintTTLResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeExtendFootprintTTLResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeExtendFootprintTTLResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ExtendFootprintTTLResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeExtendFootprintTTLResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeExtendFootprintTTLResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeRestoreFootprintResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RestoreFootprintResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeRestoreFootprintResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeRestoreFootprintResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeRestoreFootprintResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RestoreFootprintResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeRestoreFootprintResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeRestoreFootprintResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeRestoreFootprintResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RestoreFootprintResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeRestoreFootprintResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeRestoreFootprintResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeRestoreFootprintResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RestoreFootprintResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeRestoreFootprintResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeRestoreFootprintResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeOperationResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OperationResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeOperationResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeOperationResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeOperationResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OperationResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeOperationResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeOperationResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeOperationResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OperationResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeOperationResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeOperationResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeOperationResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.OperationResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeOperationResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeOperationResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionResultCodeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionResultCode", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionResultCodeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionResultCode(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionResultCode");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeInnerTransactionResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InnerTransactionResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeInnerTransactionResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeInnerTransactionResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeInnerTransactionResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InnerTransactionResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeInnerTransactionResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeInnerTransactionResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeInnerTransactionResultPair", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InnerTransactionResultPairEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeInnerTransactionResultPair(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeInnerTransactionResultPair");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeInnerTransactionResultPair", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.InnerTransactionResultPairDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeInnerTransactionResultPair(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeInnerTransactionResultPair");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTransactionResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionResultEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTransactionResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTransactionResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTransactionResult", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TransactionResultDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTransactionResult(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTransactionResult");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeHash", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HashEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeHash(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeHash");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeHash", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HashDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeHash(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeHash");
                }
            });
            endpoints.MapPost("/XdrProtoService/Encodeuint256", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.uint256EncodeRequest>(ms);

                    // Call service method
                    var response = await service.Encodeuint256(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Encodeuint256");
                }
            });
            endpoints.MapPost("/XdrProtoService/Decodeuint256", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.uint256DecodeRequest>(ms);

                    // Call service method
                    var response = await service.Decodeuint256(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Decodeuint256");
                }
            });
            endpoints.MapPost("/XdrProtoService/Encodeuint32", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.uint32EncodeRequest>(ms);

                    // Call service method
                    var response = await service.Encodeuint32(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Encodeuint32");
                }
            });
            endpoints.MapPost("/XdrProtoService/Decodeuint32", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.uint32DecodeRequest>(ms);

                    // Call service method
                    var response = await service.Decodeuint32(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Decodeuint32");
                }
            });
            endpoints.MapPost("/XdrProtoService/Encodeint32", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.int32EncodeRequest>(ms);

                    // Call service method
                    var response = await service.Encodeint32(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Encodeint32");
                }
            });
            endpoints.MapPost("/XdrProtoService/Decodeint32", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.int32DecodeRequest>(ms);

                    // Call service method
                    var response = await service.Decodeint32(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Decodeint32");
                }
            });
            endpoints.MapPost("/XdrProtoService/Encodeuint64", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.uint64EncodeRequest>(ms);

                    // Call service method
                    var response = await service.Encodeuint64(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Encodeuint64");
                }
            });
            endpoints.MapPost("/XdrProtoService/Decodeuint64", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.uint64DecodeRequest>(ms);

                    // Call service method
                    var response = await service.Decodeuint64(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Decodeuint64");
                }
            });
            endpoints.MapPost("/XdrProtoService/Encodeint64", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.int64EncodeRequest>(ms);

                    // Call service method
                    var response = await service.Encodeint64(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Encodeint64");
                }
            });
            endpoints.MapPost("/XdrProtoService/Decodeint64", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.int64DecodeRequest>(ms);

                    // Call service method
                    var response = await service.Decodeint64(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Decodeint64");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeTimePoint", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimePointEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeTimePoint(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeTimePoint");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeTimePoint", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.TimePointDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeTimePoint(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeTimePoint");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeDuration", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DurationEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeDuration(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeDuration");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeDuration", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.DurationDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeDuration(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeDuration");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeExtensionPoint", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ExtensionPointEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeExtensionPoint(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeExtensionPoint");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeExtensionPoint", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ExtensionPointDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeExtensionPoint(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeExtensionPoint");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeCryptoKeyType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CryptoKeyTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeCryptoKeyType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeCryptoKeyType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeCryptoKeyType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.CryptoKeyTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeCryptoKeyType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeCryptoKeyType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePublicKeyType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PublicKeyTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePublicKeyType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePublicKeyType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePublicKeyType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PublicKeyTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePublicKeyType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePublicKeyType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSignerKeyType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignerKeyTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSignerKeyType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSignerKeyType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSignerKeyType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignerKeyTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSignerKeyType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSignerKeyType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodePublicKey", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PublicKeyEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodePublicKey(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodePublicKey");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodePublicKey", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.PublicKeyDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodePublicKey(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodePublicKey");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSignerKey", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignerKeyEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSignerKey(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSignerKey");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSignerKey", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignerKeyDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSignerKey(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSignerKey");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSignature", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignatureEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSignature(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSignature");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSignature", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignatureDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSignature(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSignature");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSignatureHint", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignatureHintEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSignatureHint(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSignatureHint");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSignatureHint", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SignatureHintDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSignatureHint(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSignatureHint");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeNodeID", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.NodeIDEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeNodeID(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeNodeID");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeNodeID", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.NodeIDDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeNodeID(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeNodeID");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeAccountID", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountIDEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeAccountID(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeAccountID");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeAccountID", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.AccountIDDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeAccountID(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeAccountID");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeCurve25519Secret", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Curve25519SecretEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeCurve25519Secret(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeCurve25519Secret");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeCurve25519Secret", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Curve25519SecretDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeCurve25519Secret(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeCurve25519Secret");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeCurve25519Public", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Curve25519PublicEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeCurve25519Public(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeCurve25519Public");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeCurve25519Public", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Curve25519PublicDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeCurve25519Public(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeCurve25519Public");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeHmacSha256Key", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HmacSha256KeyEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeHmacSha256Key(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeHmacSha256Key");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeHmacSha256Key", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HmacSha256KeyDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeHmacSha256Key(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeHmacSha256Key");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeHmacSha256Mac", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HmacSha256MacEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeHmacSha256Mac(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeHmacSha256Mac");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeHmacSha256Mac", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.HmacSha256MacDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeHmacSha256Mac(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeHmacSha256Mac");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeShortHashSeed", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ShortHashSeedEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeShortHashSeed(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeShortHashSeed");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeShortHashSeed", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ShortHashSeedDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeShortHashSeed(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeShortHashSeed");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeBinaryFuseFilterType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BinaryFuseFilterTypeEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeBinaryFuseFilterType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeBinaryFuseFilterType");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeBinaryFuseFilterType", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.BinaryFuseFilterTypeDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeBinaryFuseFilterType(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeBinaryFuseFilterType");
                }
            });
            endpoints.MapPost("/XdrProtoService/EncodeSerializedBinaryFuseFilter", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SerializedBinaryFuseFilterEncodeRequest>(ms);

                    // Call service method
                    var response = await service.EncodeSerializedBinaryFuseFilter(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/EncodeSerializedBinaryFuseFilter");
                }
            });
            endpoints.MapPost("/XdrProtoService/DecodeSerializedBinaryFuseFilter", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.SerializedBinaryFuseFilterDecodeRequest>(ms);

                    // Call service method
                    var response = await service.DecodeSerializedBinaryFuseFilter(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/DecodeSerializedBinaryFuseFilter");
                }
            });
            endpoints.MapPost("/XdrProtoService/Equals", async context =>
            {
                var service = context.RequestServices.GetRequiredService<XdrProtoServiceGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<System.Object>(ms);

                    // Call service method
                    var response = await service.Equals(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<XdrProtoServiceGrpcService>>();
                    logger?.LogError(ex, "Error in XdrProtoService/Equals");
                }
            });

            // Map MuxedAccount_ProtoWrapper methods
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/GetPublicKey", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccount>(ms);

                    // Call service method
                    var response = await service.GetPublicKey(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/GetPublicKey");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/GetPrivateKey", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccount>(ms);

                    // Call service method
                    var response = await service.GetPrivateKey(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/GetPrivateKey");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/GetSeedBytes", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccount>(ms);

                    // Call service method
                    var response = await service.GetSeedBytes(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/GetSeedBytes");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/GetSecretSeed", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccount>(ms);

                    // Call service method
                    var response = await service.GetSecretSeed(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/GetSecretSeed");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/GetAccountId", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccount>(ms);

                    // Call service method
                    var response = await service.GetAccountId(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/GetAccountId");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/GetAddress", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccount>(ms);

                    // Call service method
                    var response = await service.GetAddress(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/GetAddress");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/CanSign", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccount>(ms);

                    // Call service method
                    var response = await service.CanSign(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/CanSign");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/Sign", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccount_ProtoWrapper.SignMessage>(ms);

                    // Call service method
                    var response = await service.Sign(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/Sign");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/Verify", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccount_ProtoWrapper.VerifyMessage>(ms);

                    // Call service method
                    var response = await service.Verify(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/Verify");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/CreateKeyTypeEd25519", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccount_ProtoWrapper.CreateEd25519Param>(ms);

                    // Call service method
                    var response = await service.CreateKeyTypeEd25519(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/CreateKeyTypeEd25519");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/CreateKeyTypeMuxedEd25519", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccount_ProtoWrapper.CreateMuxedEd25519Param>(ms);

                    // Call service method
                    var response = await service.CreateKeyTypeMuxedEd25519(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/CreateKeyTypeMuxedEd25519");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/FromSecretSeed", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StringWrapper>(ms);

                    // Call service method
                    var response = await service.FromSecretSeed(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/FromSecretSeed");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/FromSecretSeedBytes", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ByteArrayWrapper>(ms);

                    // Call service method
                    var response = await service.FromSecretSeedBytes(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/FromSecretSeedBytes");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/FromAccountId", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.StringWrapper>(ms);

                    // Call service method
                    var response = await service.FromAccountId(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/FromAccountId");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/FromPublicKey", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.ByteArrayWrapper>(ms);

                    // Call service method
                    var response = await service.FromPublicKey(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/FromPublicKey");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/FromBIP39Seed", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccount_ProtoWrapper.BIP39SeedParam>(ms);

                    // Call service method
                    var response = await service.FromBIP39Seed(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/FromBIP39Seed");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/FromBIP39SeedBytes", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.MuxedAccount_ProtoWrapper.BIP39SeedBytesParam>(ms);

                    // Call service method
                    var response = await service.FromBIP39SeedBytes(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/FromBIP39SeedBytes");
                }
            });
            endpoints.MapPost("/MuxedAccount_ProtoWrapper/Equals", async context =>
            {
                var service = context.RequestServices.GetRequiredService<MuxedAccount_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<System.Object>(ms);

                    // Call service method
                    var response = await service.Equals(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<MuxedAccount_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in MuxedAccount_ProtoWrapper/Equals");
                }
            });

            // Map Network_ProtoWrapper methods
            endpoints.MapPost("/Network_ProtoWrapper/Create", async context =>
            {
                var service = context.RequestServices.GetRequiredService<Network_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Network_ProtoWrapper.CreateNetworkParam>(ms);

                    // Call service method
                    var response = await service.Create(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<Network_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in Network_ProtoWrapper/Create");
                }
            });
            endpoints.MapPost("/Network_ProtoWrapper/GetNetworkPassphrase", async context =>
            {
                var service = context.RequestServices.GetRequiredService<Network_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Network>(ms);

                    // Call service method
                    var response = await service.GetNetworkPassphrase(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<Network_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in Network_ProtoWrapper/GetNetworkPassphrase");
                }
            });
            endpoints.MapPost("/Network_ProtoWrapper/IsPublicNetwork", async context =>
            {
                var service = context.RequestServices.GetRequiredService<Network_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Network_ProtoWrapper.IsPublicNetworkParam>(ms);

                    // Call service method
                    var response = await service.IsPublicNetwork(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<Network_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in Network_ProtoWrapper/IsPublicNetwork");
                }
            });
            endpoints.MapPost("/Network_ProtoWrapper/Equals", async context =>
            {
                var service = context.RequestServices.GetRequiredService<Network_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<System.Object>(ms);

                    // Call service method
                    var response = await service.Equals(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<Network_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in Network_ProtoWrapper/Equals");
                }
            });

            // Map Transaction_ProtoWrapper methods
            endpoints.MapPost("/Transaction_ProtoWrapper/Sign", async context =>
            {
                var service = context.RequestServices.GetRequiredService<Transaction_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Transaction_ProtoWrapper.SignParam>(ms);

                    // Call service method
                    var response = await service.Sign(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<Transaction_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in Transaction_ProtoWrapper/Sign");
                }
            });
            endpoints.MapPost("/Transaction_ProtoWrapper/Clone", async context =>
            {
                var service = context.RequestServices.GetRequiredService<Transaction_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Transaction_ProtoWrapper.CloneParam>(ms);

                    // Call service method
                    var response = await service.Clone(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<Transaction_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in Transaction_ProtoWrapper/Clone");
                }
            });
            endpoints.MapPost("/Transaction_ProtoWrapper/IsSoroban", async context =>
            {
                var service = context.RequestServices.GetRequiredService<Transaction_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Transaction_ProtoWrapper.IsSorobanParam>(ms);

                    // Call service method
                    var response = await service.IsSoroban(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<Transaction_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in Transaction_ProtoWrapper/IsSoroban");
                }
            });
            endpoints.MapPost("/Transaction_ProtoWrapper/IsSorobanInvocation", async context =>
            {
                var service = context.RequestServices.GetRequiredService<Transaction_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.Transaction_ProtoWrapper.IsSorobanParam>(ms);

                    // Call service method
                    var response = await service.IsSorobanInvocation(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<Transaction_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in Transaction_ProtoWrapper/IsSorobanInvocation");
                }
            });
            endpoints.MapPost("/Transaction_ProtoWrapper/Equals", async context =>
            {
                var service = context.RequestServices.GetRequiredService<Transaction_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<System.Object>(ms);

                    // Call service method
                    var response = await service.Equals(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<Transaction_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in Transaction_ProtoWrapper/Equals");
                }
            });

            // Map StellarRPCClient methods
            endpoints.MapPost("/StellarRPCClient/GetEventsAsync", async context =>
            {
                var service = context.RequestServices.GetRequiredService<StellarRPCClientGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RPC.GetEventsParams>(ms);

                    // Call service method
                    var response = await service.GetEventsAsync(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<StellarRPCClientGrpcService>>();
                    logger?.LogError(ex, "Error in StellarRPCClient/GetEventsAsync");
                }
            });
            endpoints.MapPost("/StellarRPCClient/GetLedgerEntriesAsync", async context =>
            {
                var service = context.RequestServices.GetRequiredService<StellarRPCClientGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RPC.GetLedgerEntriesParams>(ms);

                    // Call service method
                    var response = await service.GetLedgerEntriesAsync(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<StellarRPCClientGrpcService>>();
                    logger?.LogError(ex, "Error in StellarRPCClient/GetLedgerEntriesAsync");
                }
            });
            endpoints.MapPost("/StellarRPCClient/GetTransactionAsync", async context =>
            {
                var service = context.RequestServices.GetRequiredService<StellarRPCClientGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RPC.GetTransactionParams>(ms);

                    // Call service method
                    var response = await service.GetTransactionAsync(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<StellarRPCClientGrpcService>>();
                    logger?.LogError(ex, "Error in StellarRPCClient/GetTransactionAsync");
                }
            });
            endpoints.MapPost("/StellarRPCClient/GetTransactionsAsync", async context =>
            {
                var service = context.RequestServices.GetRequiredService<StellarRPCClientGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RPC.GetTransactionsParams>(ms);

                    // Call service method
                    var response = await service.GetTransactionsAsync(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<StellarRPCClientGrpcService>>();
                    logger?.LogError(ex, "Error in StellarRPCClient/GetTransactionsAsync");
                }
            });
            endpoints.MapPost("/StellarRPCClient/SendTransactionAsync", async context =>
            {
                var service = context.RequestServices.GetRequiredService<StellarRPCClientGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RPC.SendTransactionParams>(ms);

                    // Call service method
                    var response = await service.SendTransactionAsync(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<StellarRPCClientGrpcService>>();
                    logger?.LogError(ex, "Error in StellarRPCClient/SendTransactionAsync");
                }
            });
            endpoints.MapPost("/StellarRPCClient/SimulateTransactionAsync", async context =>
            {
                var service = context.RequestServices.GetRequiredService<StellarRPCClientGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RPC.SimulateTransactionParams>(ms);

                    // Call service method
                    var response = await service.SimulateTransactionAsync(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<StellarRPCClientGrpcService>>();
                    logger?.LogError(ex, "Error in StellarRPCClient/SimulateTransactionAsync");
                }
            });
            endpoints.MapPost("/StellarRPCClient/Equals", async context =>
            {
                var service = context.RequestServices.GetRequiredService<StellarRPCClientGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<System.Object>(ms);

                    // Call service method
                    var response = await service.Equals(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<StellarRPCClientGrpcService>>();
                    logger?.LogError(ex, "Error in StellarRPCClient/Equals");
                }
            });

            // Map SimulateTransactionResult_ProtoWrapper methods
            endpoints.MapPost("/SimulateTransactionResult_ProtoWrapper/ApplyTo", async context =>
            {
                var service = context.RequestServices.GetRequiredService<SimulateTransactionResult_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<Stellar.RPC.SimulateTransactionResult_ProtoWrapper.ApplyToParam>(ms);

                    // Call service method
                    var response = await service.ApplyTo(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<SimulateTransactionResult_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in SimulateTransactionResult_ProtoWrapper/ApplyTo");
                }
            });
            endpoints.MapPost("/SimulateTransactionResult_ProtoWrapper/Equals", async context =>
            {
                var service = context.RequestServices.GetRequiredService<SimulateTransactionResult_ProtoWrapperGrpcService>();
                var serverCallContext = CreateServerCallContext(context);
                try
                {
                    // Read and deserialize request
                    using var ms = new MemoryStream();
                    await context.Request.Body.CopyToAsync(ms);
                    ms.Position = 0;
                    var request = Serializer.Deserialize<System.Object>(ms);

                    // Call service method
                    var response = await service.Equals(request, serverCallContext);

                    // Serialize and send response
                    context.Response.ContentType = "application/grpc";
                    context.Response.Headers.Add("grpc-status", "0");
                    using var responseMs = new MemoryStream();
                    Serializer.Serialize(responseMs, response);
                    responseMs.Position = 0;
                    await responseMs.CopyToAsync(context.Response.Body);
                }
                catch (Exception ex)
                {
                    context.Response.StatusCode = StatusCodes.Status500InternalServerError;
                    context.Response.Headers.Add("grpc-status", "2");
                    context.Response.Headers.Add("grpc-message", ex.Message);
                    var logger = context.RequestServices.GetService<ILogger<SimulateTransactionResult_ProtoWrapperGrpcService>>();
                    logger?.LogError(ex, "Error in SimulateTransactionResult_ProtoWrapper/Equals");
                }
            });

            return endpoints;
        }

        private static ServerCallContext CreateServerCallContext(HttpContext httpContext)
        {
            // Create simple ServerCallContext implementation
            return new GrpcServerCallContext(httpContext);
        }

        #region Custom gRPC Context Implementations

        private class GrpcServerCallContext : ServerCallContext
        {
            private readonly HttpContext _httpContext;

            public GrpcServerCallContext(HttpContext httpContext)
            {
                _httpContext = httpContext;
            }

            protected override string MethodCore => _httpContext.Request.Path;
            protected override string HostCore => _httpContext.Request.Host.Value;
            protected override string PeerCore => _httpContext.Connection.RemoteIpAddress?.ToString() ?? "unknown";
            protected override DateTime DeadlineCore => DateTime.MaxValue;
            protected override Metadata RequestHeadersCore => new Metadata();
            protected override CancellationToken CancellationTokenCore => _httpContext.RequestAborted;
            protected override Metadata ResponseTrailersCore => new Metadata();
            protected override Status StatusCore { get; set; } = Status.DefaultSuccess;
            protected override WriteOptions WriteOptionsCore { get; set; } = new WriteOptions();

            protected override AuthContext AuthContextCore => throw new NotImplementedException();

            protected override ContextPropagationToken CreatePropagationTokenCore(ContextPropagationOptions options)
            {
                throw new NotImplementedException();
            }

            protected override Task WriteResponseHeadersAsyncCore(Metadata responseHeaders)
            {
                return Task.CompletedTask;
            }
        }

        #endregion
    }
}
