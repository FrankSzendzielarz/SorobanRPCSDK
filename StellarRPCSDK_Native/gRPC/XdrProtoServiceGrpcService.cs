// Generated code - do not modify directly
using System;
using System.Threading.Tasks;
using Grpc.Core;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using ProtoBuf;
using ProtoBuf.Meta;
using System.IO;
using System.Buffers;
using Stellar;

namespace Stellar.RPC.AOT
{
    /// <summary>gRPC service descriptor for IXdrProtoService</summary>
    public static class XdrProtoServiceGrpcDescriptor
    {
        public const string ServiceName = "Stellar.XdrProtoService";

        /// <summary>Method descriptor for EncodeConfigSettingContractExecutionLanesV0</summary>
        public static readonly Method<Stellar.ConfigSettingContractExecutionLanesV0EncodeRequest, Stellar.ConfigSettingContractExecutionLanesV0EncodeResponse> EncodeConfigSettingContractExecutionLanesV0 =
            new Method<Stellar.ConfigSettingContractExecutionLanesV0EncodeRequest, Stellar.ConfigSettingContractExecutionLanesV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeConfigSettingContractExecutionLanesV0",
                ConfigSettingContractExecutionLanesV0EncodeRequestGrpcMarshaller.ConfigSettingContractExecutionLanesV0EncodeRequestMarshaller,
                ConfigSettingContractExecutionLanesV0EncodeResponseGrpcMarshaller.ConfigSettingContractExecutionLanesV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeConfigSettingContractExecutionLanesV0</summary>
        public static readonly Method<Stellar.ConfigSettingContractExecutionLanesV0DecodeRequest, Stellar.ConfigSettingContractExecutionLanesV0DecodeResponse> DecodeConfigSettingContractExecutionLanesV0 =
            new Method<Stellar.ConfigSettingContractExecutionLanesV0DecodeRequest, Stellar.ConfigSettingContractExecutionLanesV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeConfigSettingContractExecutionLanesV0",
                ConfigSettingContractExecutionLanesV0DecodeRequestGrpcMarshaller.ConfigSettingContractExecutionLanesV0DecodeRequestMarshaller,
                ConfigSettingContractExecutionLanesV0DecodeResponseGrpcMarshaller.ConfigSettingContractExecutionLanesV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeConfigSettingContractComputeV0</summary>
        public static readonly Method<Stellar.ConfigSettingContractComputeV0EncodeRequest, Stellar.ConfigSettingContractComputeV0EncodeResponse> EncodeConfigSettingContractComputeV0 =
            new Method<Stellar.ConfigSettingContractComputeV0EncodeRequest, Stellar.ConfigSettingContractComputeV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeConfigSettingContractComputeV0",
                ConfigSettingContractComputeV0EncodeRequestGrpcMarshaller.ConfigSettingContractComputeV0EncodeRequestMarshaller,
                ConfigSettingContractComputeV0EncodeResponseGrpcMarshaller.ConfigSettingContractComputeV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeConfigSettingContractComputeV0</summary>
        public static readonly Method<Stellar.ConfigSettingContractComputeV0DecodeRequest, Stellar.ConfigSettingContractComputeV0DecodeResponse> DecodeConfigSettingContractComputeV0 =
            new Method<Stellar.ConfigSettingContractComputeV0DecodeRequest, Stellar.ConfigSettingContractComputeV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeConfigSettingContractComputeV0",
                ConfigSettingContractComputeV0DecodeRequestGrpcMarshaller.ConfigSettingContractComputeV0DecodeRequestMarshaller,
                ConfigSettingContractComputeV0DecodeResponseGrpcMarshaller.ConfigSettingContractComputeV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeConfigSettingContractLedgerCostV0</summary>
        public static readonly Method<Stellar.ConfigSettingContractLedgerCostV0EncodeRequest, Stellar.ConfigSettingContractLedgerCostV0EncodeResponse> EncodeConfigSettingContractLedgerCostV0 =
            new Method<Stellar.ConfigSettingContractLedgerCostV0EncodeRequest, Stellar.ConfigSettingContractLedgerCostV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeConfigSettingContractLedgerCostV0",
                ConfigSettingContractLedgerCostV0EncodeRequestGrpcMarshaller.ConfigSettingContractLedgerCostV0EncodeRequestMarshaller,
                ConfigSettingContractLedgerCostV0EncodeResponseGrpcMarshaller.ConfigSettingContractLedgerCostV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeConfigSettingContractLedgerCostV0</summary>
        public static readonly Method<Stellar.ConfigSettingContractLedgerCostV0DecodeRequest, Stellar.ConfigSettingContractLedgerCostV0DecodeResponse> DecodeConfigSettingContractLedgerCostV0 =
            new Method<Stellar.ConfigSettingContractLedgerCostV0DecodeRequest, Stellar.ConfigSettingContractLedgerCostV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeConfigSettingContractLedgerCostV0",
                ConfigSettingContractLedgerCostV0DecodeRequestGrpcMarshaller.ConfigSettingContractLedgerCostV0DecodeRequestMarshaller,
                ConfigSettingContractLedgerCostV0DecodeResponseGrpcMarshaller.ConfigSettingContractLedgerCostV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeConfigSettingContractHistoricalDataV0</summary>
        public static readonly Method<Stellar.ConfigSettingContractHistoricalDataV0EncodeRequest, Stellar.ConfigSettingContractHistoricalDataV0EncodeResponse> EncodeConfigSettingContractHistoricalDataV0 =
            new Method<Stellar.ConfigSettingContractHistoricalDataV0EncodeRequest, Stellar.ConfigSettingContractHistoricalDataV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeConfigSettingContractHistoricalDataV0",
                ConfigSettingContractHistoricalDataV0EncodeRequestGrpcMarshaller.ConfigSettingContractHistoricalDataV0EncodeRequestMarshaller,
                ConfigSettingContractHistoricalDataV0EncodeResponseGrpcMarshaller.ConfigSettingContractHistoricalDataV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeConfigSettingContractHistoricalDataV0</summary>
        public static readonly Method<Stellar.ConfigSettingContractHistoricalDataV0DecodeRequest, Stellar.ConfigSettingContractHistoricalDataV0DecodeResponse> DecodeConfigSettingContractHistoricalDataV0 =
            new Method<Stellar.ConfigSettingContractHistoricalDataV0DecodeRequest, Stellar.ConfigSettingContractHistoricalDataV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeConfigSettingContractHistoricalDataV0",
                ConfigSettingContractHistoricalDataV0DecodeRequestGrpcMarshaller.ConfigSettingContractHistoricalDataV0DecodeRequestMarshaller,
                ConfigSettingContractHistoricalDataV0DecodeResponseGrpcMarshaller.ConfigSettingContractHistoricalDataV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeConfigSettingContractEventsV0</summary>
        public static readonly Method<Stellar.ConfigSettingContractEventsV0EncodeRequest, Stellar.ConfigSettingContractEventsV0EncodeResponse> EncodeConfigSettingContractEventsV0 =
            new Method<Stellar.ConfigSettingContractEventsV0EncodeRequest, Stellar.ConfigSettingContractEventsV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeConfigSettingContractEventsV0",
                ConfigSettingContractEventsV0EncodeRequestGrpcMarshaller.ConfigSettingContractEventsV0EncodeRequestMarshaller,
                ConfigSettingContractEventsV0EncodeResponseGrpcMarshaller.ConfigSettingContractEventsV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeConfigSettingContractEventsV0</summary>
        public static readonly Method<Stellar.ConfigSettingContractEventsV0DecodeRequest, Stellar.ConfigSettingContractEventsV0DecodeResponse> DecodeConfigSettingContractEventsV0 =
            new Method<Stellar.ConfigSettingContractEventsV0DecodeRequest, Stellar.ConfigSettingContractEventsV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeConfigSettingContractEventsV0",
                ConfigSettingContractEventsV0DecodeRequestGrpcMarshaller.ConfigSettingContractEventsV0DecodeRequestMarshaller,
                ConfigSettingContractEventsV0DecodeResponseGrpcMarshaller.ConfigSettingContractEventsV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeConfigSettingContractBandwidthV0</summary>
        public static readonly Method<Stellar.ConfigSettingContractBandwidthV0EncodeRequest, Stellar.ConfigSettingContractBandwidthV0EncodeResponse> EncodeConfigSettingContractBandwidthV0 =
            new Method<Stellar.ConfigSettingContractBandwidthV0EncodeRequest, Stellar.ConfigSettingContractBandwidthV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeConfigSettingContractBandwidthV0",
                ConfigSettingContractBandwidthV0EncodeRequestGrpcMarshaller.ConfigSettingContractBandwidthV0EncodeRequestMarshaller,
                ConfigSettingContractBandwidthV0EncodeResponseGrpcMarshaller.ConfigSettingContractBandwidthV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeConfigSettingContractBandwidthV0</summary>
        public static readonly Method<Stellar.ConfigSettingContractBandwidthV0DecodeRequest, Stellar.ConfigSettingContractBandwidthV0DecodeResponse> DecodeConfigSettingContractBandwidthV0 =
            new Method<Stellar.ConfigSettingContractBandwidthV0DecodeRequest, Stellar.ConfigSettingContractBandwidthV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeConfigSettingContractBandwidthV0",
                ConfigSettingContractBandwidthV0DecodeRequestGrpcMarshaller.ConfigSettingContractBandwidthV0DecodeRequestMarshaller,
                ConfigSettingContractBandwidthV0DecodeResponseGrpcMarshaller.ConfigSettingContractBandwidthV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeContractCostType</summary>
        public static readonly Method<Stellar.ContractCostTypeEncodeRequest, Stellar.ContractCostTypeEncodeResponse> EncodeContractCostType =
            new Method<Stellar.ContractCostTypeEncodeRequest, Stellar.ContractCostTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeContractCostType",
                ContractCostTypeEncodeRequestGrpcMarshaller.ContractCostTypeEncodeRequestMarshaller,
                ContractCostTypeEncodeResponseGrpcMarshaller.ContractCostTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeContractCostType</summary>
        public static readonly Method<Stellar.ContractCostTypeDecodeRequest, Stellar.ContractCostTypeDecodeResponse> DecodeContractCostType =
            new Method<Stellar.ContractCostTypeDecodeRequest, Stellar.ContractCostTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeContractCostType",
                ContractCostTypeDecodeRequestGrpcMarshaller.ContractCostTypeDecodeRequestMarshaller,
                ContractCostTypeDecodeResponseGrpcMarshaller.ContractCostTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeContractCostParamEntry</summary>
        public static readonly Method<Stellar.ContractCostParamEntryEncodeRequest, Stellar.ContractCostParamEntryEncodeResponse> EncodeContractCostParamEntry =
            new Method<Stellar.ContractCostParamEntryEncodeRequest, Stellar.ContractCostParamEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeContractCostParamEntry",
                ContractCostParamEntryEncodeRequestGrpcMarshaller.ContractCostParamEntryEncodeRequestMarshaller,
                ContractCostParamEntryEncodeResponseGrpcMarshaller.ContractCostParamEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeContractCostParamEntry</summary>
        public static readonly Method<Stellar.ContractCostParamEntryDecodeRequest, Stellar.ContractCostParamEntryDecodeResponse> DecodeContractCostParamEntry =
            new Method<Stellar.ContractCostParamEntryDecodeRequest, Stellar.ContractCostParamEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeContractCostParamEntry",
                ContractCostParamEntryDecodeRequestGrpcMarshaller.ContractCostParamEntryDecodeRequestMarshaller,
                ContractCostParamEntryDecodeResponseGrpcMarshaller.ContractCostParamEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeStateArchivalSettings</summary>
        public static readonly Method<Stellar.StateArchivalSettingsEncodeRequest, Stellar.StateArchivalSettingsEncodeResponse> EncodeStateArchivalSettings =
            new Method<Stellar.StateArchivalSettingsEncodeRequest, Stellar.StateArchivalSettingsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeStateArchivalSettings",
                StateArchivalSettingsEncodeRequestGrpcMarshaller.StateArchivalSettingsEncodeRequestMarshaller,
                StateArchivalSettingsEncodeResponseGrpcMarshaller.StateArchivalSettingsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeStateArchivalSettings</summary>
        public static readonly Method<Stellar.StateArchivalSettingsDecodeRequest, Stellar.StateArchivalSettingsDecodeResponse> DecodeStateArchivalSettings =
            new Method<Stellar.StateArchivalSettingsDecodeRequest, Stellar.StateArchivalSettingsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeStateArchivalSettings",
                StateArchivalSettingsDecodeRequestGrpcMarshaller.StateArchivalSettingsDecodeRequestMarshaller,
                StateArchivalSettingsDecodeResponseGrpcMarshaller.StateArchivalSettingsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeEvictionIterator</summary>
        public static readonly Method<Stellar.EvictionIteratorEncodeRequest, Stellar.EvictionIteratorEncodeResponse> EncodeEvictionIterator =
            new Method<Stellar.EvictionIteratorEncodeRequest, Stellar.EvictionIteratorEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeEvictionIterator",
                EvictionIteratorEncodeRequestGrpcMarshaller.EvictionIteratorEncodeRequestMarshaller,
                EvictionIteratorEncodeResponseGrpcMarshaller.EvictionIteratorEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeEvictionIterator</summary>
        public static readonly Method<Stellar.EvictionIteratorDecodeRequest, Stellar.EvictionIteratorDecodeResponse> DecodeEvictionIterator =
            new Method<Stellar.EvictionIteratorDecodeRequest, Stellar.EvictionIteratorDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeEvictionIterator",
                EvictionIteratorDecodeRequestGrpcMarshaller.EvictionIteratorDecodeRequestMarshaller,
                EvictionIteratorDecodeResponseGrpcMarshaller.EvictionIteratorDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeContractCostParams</summary>
        public static readonly Method<Stellar.ContractCostParamsEncodeRequest, Stellar.ContractCostParamsEncodeResponse> EncodeContractCostParams =
            new Method<Stellar.ContractCostParamsEncodeRequest, Stellar.ContractCostParamsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeContractCostParams",
                ContractCostParamsEncodeRequestGrpcMarshaller.ContractCostParamsEncodeRequestMarshaller,
                ContractCostParamsEncodeResponseGrpcMarshaller.ContractCostParamsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeContractCostParams</summary>
        public static readonly Method<Stellar.ContractCostParamsDecodeRequest, Stellar.ContractCostParamsDecodeResponse> DecodeContractCostParams =
            new Method<Stellar.ContractCostParamsDecodeRequest, Stellar.ContractCostParamsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeContractCostParams",
                ContractCostParamsDecodeRequestGrpcMarshaller.ContractCostParamsDecodeRequestMarshaller,
                ContractCostParamsDecodeResponseGrpcMarshaller.ContractCostParamsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeConfigSettingID</summary>
        public static readonly Method<Stellar.ConfigSettingIDEncodeRequest, Stellar.ConfigSettingIDEncodeResponse> EncodeConfigSettingID =
            new Method<Stellar.ConfigSettingIDEncodeRequest, Stellar.ConfigSettingIDEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeConfigSettingID",
                ConfigSettingIDEncodeRequestGrpcMarshaller.ConfigSettingIDEncodeRequestMarshaller,
                ConfigSettingIDEncodeResponseGrpcMarshaller.ConfigSettingIDEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeConfigSettingID</summary>
        public static readonly Method<Stellar.ConfigSettingIDDecodeRequest, Stellar.ConfigSettingIDDecodeResponse> DecodeConfigSettingID =
            new Method<Stellar.ConfigSettingIDDecodeRequest, Stellar.ConfigSettingIDDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeConfigSettingID",
                ConfigSettingIDDecodeRequestGrpcMarshaller.ConfigSettingIDDecodeRequestMarshaller,
                ConfigSettingIDDecodeResponseGrpcMarshaller.ConfigSettingIDDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeConfigSettingEntry</summary>
        public static readonly Method<Stellar.ConfigSettingEntryEncodeRequest, Stellar.ConfigSettingEntryEncodeResponse> EncodeConfigSettingEntry =
            new Method<Stellar.ConfigSettingEntryEncodeRequest, Stellar.ConfigSettingEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeConfigSettingEntry",
                ConfigSettingEntryEncodeRequestGrpcMarshaller.ConfigSettingEntryEncodeRequestMarshaller,
                ConfigSettingEntryEncodeResponseGrpcMarshaller.ConfigSettingEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeConfigSettingEntry</summary>
        public static readonly Method<Stellar.ConfigSettingEntryDecodeRequest, Stellar.ConfigSettingEntryDecodeResponse> DecodeConfigSettingEntry =
            new Method<Stellar.ConfigSettingEntryDecodeRequest, Stellar.ConfigSettingEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeConfigSettingEntry",
                ConfigSettingEntryDecodeRequestGrpcMarshaller.ConfigSettingEntryDecodeRequestMarshaller,
                ConfigSettingEntryDecodeResponseGrpcMarshaller.ConfigSettingEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCEnvMetaKind</summary>
        public static readonly Method<Stellar.SCEnvMetaKindEncodeRequest, Stellar.SCEnvMetaKindEncodeResponse> EncodeSCEnvMetaKind =
            new Method<Stellar.SCEnvMetaKindEncodeRequest, Stellar.SCEnvMetaKindEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCEnvMetaKind",
                SCEnvMetaKindEncodeRequestGrpcMarshaller.SCEnvMetaKindEncodeRequestMarshaller,
                SCEnvMetaKindEncodeResponseGrpcMarshaller.SCEnvMetaKindEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCEnvMetaKind</summary>
        public static readonly Method<Stellar.SCEnvMetaKindDecodeRequest, Stellar.SCEnvMetaKindDecodeResponse> DecodeSCEnvMetaKind =
            new Method<Stellar.SCEnvMetaKindDecodeRequest, Stellar.SCEnvMetaKindDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCEnvMetaKind",
                SCEnvMetaKindDecodeRequestGrpcMarshaller.SCEnvMetaKindDecodeRequestMarshaller,
                SCEnvMetaKindDecodeResponseGrpcMarshaller.SCEnvMetaKindDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCEnvMetaEntry</summary>
        public static readonly Method<Stellar.SCEnvMetaEntryEncodeRequest, Stellar.SCEnvMetaEntryEncodeResponse> EncodeSCEnvMetaEntry =
            new Method<Stellar.SCEnvMetaEntryEncodeRequest, Stellar.SCEnvMetaEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCEnvMetaEntry",
                SCEnvMetaEntryEncodeRequestGrpcMarshaller.SCEnvMetaEntryEncodeRequestMarshaller,
                SCEnvMetaEntryEncodeResponseGrpcMarshaller.SCEnvMetaEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCEnvMetaEntry</summary>
        public static readonly Method<Stellar.SCEnvMetaEntryDecodeRequest, Stellar.SCEnvMetaEntryDecodeResponse> DecodeSCEnvMetaEntry =
            new Method<Stellar.SCEnvMetaEntryDecodeRequest, Stellar.SCEnvMetaEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCEnvMetaEntry",
                SCEnvMetaEntryDecodeRequestGrpcMarshaller.SCEnvMetaEntryDecodeRequestMarshaller,
                SCEnvMetaEntryDecodeResponseGrpcMarshaller.SCEnvMetaEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCMetaV0</summary>
        public static readonly Method<Stellar.SCMetaV0EncodeRequest, Stellar.SCMetaV0EncodeResponse> EncodeSCMetaV0 =
            new Method<Stellar.SCMetaV0EncodeRequest, Stellar.SCMetaV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCMetaV0",
                SCMetaV0EncodeRequestGrpcMarshaller.SCMetaV0EncodeRequestMarshaller,
                SCMetaV0EncodeResponseGrpcMarshaller.SCMetaV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCMetaV0</summary>
        public static readonly Method<Stellar.SCMetaV0DecodeRequest, Stellar.SCMetaV0DecodeResponse> DecodeSCMetaV0 =
            new Method<Stellar.SCMetaV0DecodeRequest, Stellar.SCMetaV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCMetaV0",
                SCMetaV0DecodeRequestGrpcMarshaller.SCMetaV0DecodeRequestMarshaller,
                SCMetaV0DecodeResponseGrpcMarshaller.SCMetaV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCMetaKind</summary>
        public static readonly Method<Stellar.SCMetaKindEncodeRequest, Stellar.SCMetaKindEncodeResponse> EncodeSCMetaKind =
            new Method<Stellar.SCMetaKindEncodeRequest, Stellar.SCMetaKindEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCMetaKind",
                SCMetaKindEncodeRequestGrpcMarshaller.SCMetaKindEncodeRequestMarshaller,
                SCMetaKindEncodeResponseGrpcMarshaller.SCMetaKindEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCMetaKind</summary>
        public static readonly Method<Stellar.SCMetaKindDecodeRequest, Stellar.SCMetaKindDecodeResponse> DecodeSCMetaKind =
            new Method<Stellar.SCMetaKindDecodeRequest, Stellar.SCMetaKindDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCMetaKind",
                SCMetaKindDecodeRequestGrpcMarshaller.SCMetaKindDecodeRequestMarshaller,
                SCMetaKindDecodeResponseGrpcMarshaller.SCMetaKindDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCMetaEntry</summary>
        public static readonly Method<Stellar.SCMetaEntryEncodeRequest, Stellar.SCMetaEntryEncodeResponse> EncodeSCMetaEntry =
            new Method<Stellar.SCMetaEntryEncodeRequest, Stellar.SCMetaEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCMetaEntry",
                SCMetaEntryEncodeRequestGrpcMarshaller.SCMetaEntryEncodeRequestMarshaller,
                SCMetaEntryEncodeResponseGrpcMarshaller.SCMetaEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCMetaEntry</summary>
        public static readonly Method<Stellar.SCMetaEntryDecodeRequest, Stellar.SCMetaEntryDecodeResponse> DecodeSCMetaEntry =
            new Method<Stellar.SCMetaEntryDecodeRequest, Stellar.SCMetaEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCMetaEntry",
                SCMetaEntryDecodeRequestGrpcMarshaller.SCMetaEntryDecodeRequestMarshaller,
                SCMetaEntryDecodeResponseGrpcMarshaller.SCMetaEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecType</summary>
        public static readonly Method<Stellar.SCSpecTypeEncodeRequest, Stellar.SCSpecTypeEncodeResponse> EncodeSCSpecType =
            new Method<Stellar.SCSpecTypeEncodeRequest, Stellar.SCSpecTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecType",
                SCSpecTypeEncodeRequestGrpcMarshaller.SCSpecTypeEncodeRequestMarshaller,
                SCSpecTypeEncodeResponseGrpcMarshaller.SCSpecTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecType</summary>
        public static readonly Method<Stellar.SCSpecTypeDecodeRequest, Stellar.SCSpecTypeDecodeResponse> DecodeSCSpecType =
            new Method<Stellar.SCSpecTypeDecodeRequest, Stellar.SCSpecTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecType",
                SCSpecTypeDecodeRequestGrpcMarshaller.SCSpecTypeDecodeRequestMarshaller,
                SCSpecTypeDecodeResponseGrpcMarshaller.SCSpecTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecTypeOption</summary>
        public static readonly Method<Stellar.SCSpecTypeOptionEncodeRequest, Stellar.SCSpecTypeOptionEncodeResponse> EncodeSCSpecTypeOption =
            new Method<Stellar.SCSpecTypeOptionEncodeRequest, Stellar.SCSpecTypeOptionEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecTypeOption",
                SCSpecTypeOptionEncodeRequestGrpcMarshaller.SCSpecTypeOptionEncodeRequestMarshaller,
                SCSpecTypeOptionEncodeResponseGrpcMarshaller.SCSpecTypeOptionEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecTypeOption</summary>
        public static readonly Method<Stellar.SCSpecTypeOptionDecodeRequest, Stellar.SCSpecTypeOptionDecodeResponse> DecodeSCSpecTypeOption =
            new Method<Stellar.SCSpecTypeOptionDecodeRequest, Stellar.SCSpecTypeOptionDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecTypeOption",
                SCSpecTypeOptionDecodeRequestGrpcMarshaller.SCSpecTypeOptionDecodeRequestMarshaller,
                SCSpecTypeOptionDecodeResponseGrpcMarshaller.SCSpecTypeOptionDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecTypeResult</summary>
        public static readonly Method<Stellar.SCSpecTypeResultEncodeRequest, Stellar.SCSpecTypeResultEncodeResponse> EncodeSCSpecTypeResult =
            new Method<Stellar.SCSpecTypeResultEncodeRequest, Stellar.SCSpecTypeResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecTypeResult",
                SCSpecTypeResultEncodeRequestGrpcMarshaller.SCSpecTypeResultEncodeRequestMarshaller,
                SCSpecTypeResultEncodeResponseGrpcMarshaller.SCSpecTypeResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecTypeResult</summary>
        public static readonly Method<Stellar.SCSpecTypeResultDecodeRequest, Stellar.SCSpecTypeResultDecodeResponse> DecodeSCSpecTypeResult =
            new Method<Stellar.SCSpecTypeResultDecodeRequest, Stellar.SCSpecTypeResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecTypeResult",
                SCSpecTypeResultDecodeRequestGrpcMarshaller.SCSpecTypeResultDecodeRequestMarshaller,
                SCSpecTypeResultDecodeResponseGrpcMarshaller.SCSpecTypeResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecTypeVec</summary>
        public static readonly Method<Stellar.SCSpecTypeVecEncodeRequest, Stellar.SCSpecTypeVecEncodeResponse> EncodeSCSpecTypeVec =
            new Method<Stellar.SCSpecTypeVecEncodeRequest, Stellar.SCSpecTypeVecEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecTypeVec",
                SCSpecTypeVecEncodeRequestGrpcMarshaller.SCSpecTypeVecEncodeRequestMarshaller,
                SCSpecTypeVecEncodeResponseGrpcMarshaller.SCSpecTypeVecEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecTypeVec</summary>
        public static readonly Method<Stellar.SCSpecTypeVecDecodeRequest, Stellar.SCSpecTypeVecDecodeResponse> DecodeSCSpecTypeVec =
            new Method<Stellar.SCSpecTypeVecDecodeRequest, Stellar.SCSpecTypeVecDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecTypeVec",
                SCSpecTypeVecDecodeRequestGrpcMarshaller.SCSpecTypeVecDecodeRequestMarshaller,
                SCSpecTypeVecDecodeResponseGrpcMarshaller.SCSpecTypeVecDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecTypeMap</summary>
        public static readonly Method<Stellar.SCSpecTypeMapEncodeRequest, Stellar.SCSpecTypeMapEncodeResponse> EncodeSCSpecTypeMap =
            new Method<Stellar.SCSpecTypeMapEncodeRequest, Stellar.SCSpecTypeMapEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecTypeMap",
                SCSpecTypeMapEncodeRequestGrpcMarshaller.SCSpecTypeMapEncodeRequestMarshaller,
                SCSpecTypeMapEncodeResponseGrpcMarshaller.SCSpecTypeMapEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecTypeMap</summary>
        public static readonly Method<Stellar.SCSpecTypeMapDecodeRequest, Stellar.SCSpecTypeMapDecodeResponse> DecodeSCSpecTypeMap =
            new Method<Stellar.SCSpecTypeMapDecodeRequest, Stellar.SCSpecTypeMapDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecTypeMap",
                SCSpecTypeMapDecodeRequestGrpcMarshaller.SCSpecTypeMapDecodeRequestMarshaller,
                SCSpecTypeMapDecodeResponseGrpcMarshaller.SCSpecTypeMapDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecTypeTuple</summary>
        public static readonly Method<Stellar.SCSpecTypeTupleEncodeRequest, Stellar.SCSpecTypeTupleEncodeResponse> EncodeSCSpecTypeTuple =
            new Method<Stellar.SCSpecTypeTupleEncodeRequest, Stellar.SCSpecTypeTupleEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecTypeTuple",
                SCSpecTypeTupleEncodeRequestGrpcMarshaller.SCSpecTypeTupleEncodeRequestMarshaller,
                SCSpecTypeTupleEncodeResponseGrpcMarshaller.SCSpecTypeTupleEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecTypeTuple</summary>
        public static readonly Method<Stellar.SCSpecTypeTupleDecodeRequest, Stellar.SCSpecTypeTupleDecodeResponse> DecodeSCSpecTypeTuple =
            new Method<Stellar.SCSpecTypeTupleDecodeRequest, Stellar.SCSpecTypeTupleDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecTypeTuple",
                SCSpecTypeTupleDecodeRequestGrpcMarshaller.SCSpecTypeTupleDecodeRequestMarshaller,
                SCSpecTypeTupleDecodeResponseGrpcMarshaller.SCSpecTypeTupleDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecTypeBytesN</summary>
        public static readonly Method<Stellar.SCSpecTypeBytesNEncodeRequest, Stellar.SCSpecTypeBytesNEncodeResponse> EncodeSCSpecTypeBytesN =
            new Method<Stellar.SCSpecTypeBytesNEncodeRequest, Stellar.SCSpecTypeBytesNEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecTypeBytesN",
                SCSpecTypeBytesNEncodeRequestGrpcMarshaller.SCSpecTypeBytesNEncodeRequestMarshaller,
                SCSpecTypeBytesNEncodeResponseGrpcMarshaller.SCSpecTypeBytesNEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecTypeBytesN</summary>
        public static readonly Method<Stellar.SCSpecTypeBytesNDecodeRequest, Stellar.SCSpecTypeBytesNDecodeResponse> DecodeSCSpecTypeBytesN =
            new Method<Stellar.SCSpecTypeBytesNDecodeRequest, Stellar.SCSpecTypeBytesNDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecTypeBytesN",
                SCSpecTypeBytesNDecodeRequestGrpcMarshaller.SCSpecTypeBytesNDecodeRequestMarshaller,
                SCSpecTypeBytesNDecodeResponseGrpcMarshaller.SCSpecTypeBytesNDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecTypeUDT</summary>
        public static readonly Method<Stellar.SCSpecTypeUDTEncodeRequest, Stellar.SCSpecTypeUDTEncodeResponse> EncodeSCSpecTypeUDT =
            new Method<Stellar.SCSpecTypeUDTEncodeRequest, Stellar.SCSpecTypeUDTEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecTypeUDT",
                SCSpecTypeUDTEncodeRequestGrpcMarshaller.SCSpecTypeUDTEncodeRequestMarshaller,
                SCSpecTypeUDTEncodeResponseGrpcMarshaller.SCSpecTypeUDTEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecTypeUDT</summary>
        public static readonly Method<Stellar.SCSpecTypeUDTDecodeRequest, Stellar.SCSpecTypeUDTDecodeResponse> DecodeSCSpecTypeUDT =
            new Method<Stellar.SCSpecTypeUDTDecodeRequest, Stellar.SCSpecTypeUDTDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecTypeUDT",
                SCSpecTypeUDTDecodeRequestGrpcMarshaller.SCSpecTypeUDTDecodeRequestMarshaller,
                SCSpecTypeUDTDecodeResponseGrpcMarshaller.SCSpecTypeUDTDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecTypeDef</summary>
        public static readonly Method<Stellar.SCSpecTypeDefEncodeRequest, Stellar.SCSpecTypeDefEncodeResponse> EncodeSCSpecTypeDef =
            new Method<Stellar.SCSpecTypeDefEncodeRequest, Stellar.SCSpecTypeDefEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecTypeDef",
                SCSpecTypeDefEncodeRequestGrpcMarshaller.SCSpecTypeDefEncodeRequestMarshaller,
                SCSpecTypeDefEncodeResponseGrpcMarshaller.SCSpecTypeDefEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecTypeDef</summary>
        public static readonly Method<Stellar.SCSpecTypeDefDecodeRequest, Stellar.SCSpecTypeDefDecodeResponse> DecodeSCSpecTypeDef =
            new Method<Stellar.SCSpecTypeDefDecodeRequest, Stellar.SCSpecTypeDefDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecTypeDef",
                SCSpecTypeDefDecodeRequestGrpcMarshaller.SCSpecTypeDefDecodeRequestMarshaller,
                SCSpecTypeDefDecodeResponseGrpcMarshaller.SCSpecTypeDefDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecUDTStructFieldV0</summary>
        public static readonly Method<Stellar.SCSpecUDTStructFieldV0EncodeRequest, Stellar.SCSpecUDTStructFieldV0EncodeResponse> EncodeSCSpecUDTStructFieldV0 =
            new Method<Stellar.SCSpecUDTStructFieldV0EncodeRequest, Stellar.SCSpecUDTStructFieldV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecUDTStructFieldV0",
                SCSpecUDTStructFieldV0EncodeRequestGrpcMarshaller.SCSpecUDTStructFieldV0EncodeRequestMarshaller,
                SCSpecUDTStructFieldV0EncodeResponseGrpcMarshaller.SCSpecUDTStructFieldV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecUDTStructFieldV0</summary>
        public static readonly Method<Stellar.SCSpecUDTStructFieldV0DecodeRequest, Stellar.SCSpecUDTStructFieldV0DecodeResponse> DecodeSCSpecUDTStructFieldV0 =
            new Method<Stellar.SCSpecUDTStructFieldV0DecodeRequest, Stellar.SCSpecUDTStructFieldV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecUDTStructFieldV0",
                SCSpecUDTStructFieldV0DecodeRequestGrpcMarshaller.SCSpecUDTStructFieldV0DecodeRequestMarshaller,
                SCSpecUDTStructFieldV0DecodeResponseGrpcMarshaller.SCSpecUDTStructFieldV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecUDTStructV0</summary>
        public static readonly Method<Stellar.SCSpecUDTStructV0EncodeRequest, Stellar.SCSpecUDTStructV0EncodeResponse> EncodeSCSpecUDTStructV0 =
            new Method<Stellar.SCSpecUDTStructV0EncodeRequest, Stellar.SCSpecUDTStructV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecUDTStructV0",
                SCSpecUDTStructV0EncodeRequestGrpcMarshaller.SCSpecUDTStructV0EncodeRequestMarshaller,
                SCSpecUDTStructV0EncodeResponseGrpcMarshaller.SCSpecUDTStructV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecUDTStructV0</summary>
        public static readonly Method<Stellar.SCSpecUDTStructV0DecodeRequest, Stellar.SCSpecUDTStructV0DecodeResponse> DecodeSCSpecUDTStructV0 =
            new Method<Stellar.SCSpecUDTStructV0DecodeRequest, Stellar.SCSpecUDTStructV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecUDTStructV0",
                SCSpecUDTStructV0DecodeRequestGrpcMarshaller.SCSpecUDTStructV0DecodeRequestMarshaller,
                SCSpecUDTStructV0DecodeResponseGrpcMarshaller.SCSpecUDTStructV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecUDTUnionCaseVoidV0</summary>
        public static readonly Method<Stellar.SCSpecUDTUnionCaseVoidV0EncodeRequest, Stellar.SCSpecUDTUnionCaseVoidV0EncodeResponse> EncodeSCSpecUDTUnionCaseVoidV0 =
            new Method<Stellar.SCSpecUDTUnionCaseVoidV0EncodeRequest, Stellar.SCSpecUDTUnionCaseVoidV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecUDTUnionCaseVoidV0",
                SCSpecUDTUnionCaseVoidV0EncodeRequestGrpcMarshaller.SCSpecUDTUnionCaseVoidV0EncodeRequestMarshaller,
                SCSpecUDTUnionCaseVoidV0EncodeResponseGrpcMarshaller.SCSpecUDTUnionCaseVoidV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecUDTUnionCaseVoidV0</summary>
        public static readonly Method<Stellar.SCSpecUDTUnionCaseVoidV0DecodeRequest, Stellar.SCSpecUDTUnionCaseVoidV0DecodeResponse> DecodeSCSpecUDTUnionCaseVoidV0 =
            new Method<Stellar.SCSpecUDTUnionCaseVoidV0DecodeRequest, Stellar.SCSpecUDTUnionCaseVoidV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecUDTUnionCaseVoidV0",
                SCSpecUDTUnionCaseVoidV0DecodeRequestGrpcMarshaller.SCSpecUDTUnionCaseVoidV0DecodeRequestMarshaller,
                SCSpecUDTUnionCaseVoidV0DecodeResponseGrpcMarshaller.SCSpecUDTUnionCaseVoidV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecUDTUnionCaseTupleV0</summary>
        public static readonly Method<Stellar.SCSpecUDTUnionCaseTupleV0EncodeRequest, Stellar.SCSpecUDTUnionCaseTupleV0EncodeResponse> EncodeSCSpecUDTUnionCaseTupleV0 =
            new Method<Stellar.SCSpecUDTUnionCaseTupleV0EncodeRequest, Stellar.SCSpecUDTUnionCaseTupleV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecUDTUnionCaseTupleV0",
                SCSpecUDTUnionCaseTupleV0EncodeRequestGrpcMarshaller.SCSpecUDTUnionCaseTupleV0EncodeRequestMarshaller,
                SCSpecUDTUnionCaseTupleV0EncodeResponseGrpcMarshaller.SCSpecUDTUnionCaseTupleV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecUDTUnionCaseTupleV0</summary>
        public static readonly Method<Stellar.SCSpecUDTUnionCaseTupleV0DecodeRequest, Stellar.SCSpecUDTUnionCaseTupleV0DecodeResponse> DecodeSCSpecUDTUnionCaseTupleV0 =
            new Method<Stellar.SCSpecUDTUnionCaseTupleV0DecodeRequest, Stellar.SCSpecUDTUnionCaseTupleV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecUDTUnionCaseTupleV0",
                SCSpecUDTUnionCaseTupleV0DecodeRequestGrpcMarshaller.SCSpecUDTUnionCaseTupleV0DecodeRequestMarshaller,
                SCSpecUDTUnionCaseTupleV0DecodeResponseGrpcMarshaller.SCSpecUDTUnionCaseTupleV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecUDTUnionCaseV0Kind</summary>
        public static readonly Method<Stellar.SCSpecUDTUnionCaseV0KindEncodeRequest, Stellar.SCSpecUDTUnionCaseV0KindEncodeResponse> EncodeSCSpecUDTUnionCaseV0Kind =
            new Method<Stellar.SCSpecUDTUnionCaseV0KindEncodeRequest, Stellar.SCSpecUDTUnionCaseV0KindEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecUDTUnionCaseV0Kind",
                SCSpecUDTUnionCaseV0KindEncodeRequestGrpcMarshaller.SCSpecUDTUnionCaseV0KindEncodeRequestMarshaller,
                SCSpecUDTUnionCaseV0KindEncodeResponseGrpcMarshaller.SCSpecUDTUnionCaseV0KindEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecUDTUnionCaseV0Kind</summary>
        public static readonly Method<Stellar.SCSpecUDTUnionCaseV0KindDecodeRequest, Stellar.SCSpecUDTUnionCaseV0KindDecodeResponse> DecodeSCSpecUDTUnionCaseV0Kind =
            new Method<Stellar.SCSpecUDTUnionCaseV0KindDecodeRequest, Stellar.SCSpecUDTUnionCaseV0KindDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecUDTUnionCaseV0Kind",
                SCSpecUDTUnionCaseV0KindDecodeRequestGrpcMarshaller.SCSpecUDTUnionCaseV0KindDecodeRequestMarshaller,
                SCSpecUDTUnionCaseV0KindDecodeResponseGrpcMarshaller.SCSpecUDTUnionCaseV0KindDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecUDTUnionCaseV0</summary>
        public static readonly Method<Stellar.SCSpecUDTUnionCaseV0EncodeRequest, Stellar.SCSpecUDTUnionCaseV0EncodeResponse> EncodeSCSpecUDTUnionCaseV0 =
            new Method<Stellar.SCSpecUDTUnionCaseV0EncodeRequest, Stellar.SCSpecUDTUnionCaseV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecUDTUnionCaseV0",
                SCSpecUDTUnionCaseV0EncodeRequestGrpcMarshaller.SCSpecUDTUnionCaseV0EncodeRequestMarshaller,
                SCSpecUDTUnionCaseV0EncodeResponseGrpcMarshaller.SCSpecUDTUnionCaseV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecUDTUnionCaseV0</summary>
        public static readonly Method<Stellar.SCSpecUDTUnionCaseV0DecodeRequest, Stellar.SCSpecUDTUnionCaseV0DecodeResponse> DecodeSCSpecUDTUnionCaseV0 =
            new Method<Stellar.SCSpecUDTUnionCaseV0DecodeRequest, Stellar.SCSpecUDTUnionCaseV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecUDTUnionCaseV0",
                SCSpecUDTUnionCaseV0DecodeRequestGrpcMarshaller.SCSpecUDTUnionCaseV0DecodeRequestMarshaller,
                SCSpecUDTUnionCaseV0DecodeResponseGrpcMarshaller.SCSpecUDTUnionCaseV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecUDTUnionV0</summary>
        public static readonly Method<Stellar.SCSpecUDTUnionV0EncodeRequest, Stellar.SCSpecUDTUnionV0EncodeResponse> EncodeSCSpecUDTUnionV0 =
            new Method<Stellar.SCSpecUDTUnionV0EncodeRequest, Stellar.SCSpecUDTUnionV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecUDTUnionV0",
                SCSpecUDTUnionV0EncodeRequestGrpcMarshaller.SCSpecUDTUnionV0EncodeRequestMarshaller,
                SCSpecUDTUnionV0EncodeResponseGrpcMarshaller.SCSpecUDTUnionV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecUDTUnionV0</summary>
        public static readonly Method<Stellar.SCSpecUDTUnionV0DecodeRequest, Stellar.SCSpecUDTUnionV0DecodeResponse> DecodeSCSpecUDTUnionV0 =
            new Method<Stellar.SCSpecUDTUnionV0DecodeRequest, Stellar.SCSpecUDTUnionV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecUDTUnionV0",
                SCSpecUDTUnionV0DecodeRequestGrpcMarshaller.SCSpecUDTUnionV0DecodeRequestMarshaller,
                SCSpecUDTUnionV0DecodeResponseGrpcMarshaller.SCSpecUDTUnionV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecUDTEnumCaseV0</summary>
        public static readonly Method<Stellar.SCSpecUDTEnumCaseV0EncodeRequest, Stellar.SCSpecUDTEnumCaseV0EncodeResponse> EncodeSCSpecUDTEnumCaseV0 =
            new Method<Stellar.SCSpecUDTEnumCaseV0EncodeRequest, Stellar.SCSpecUDTEnumCaseV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecUDTEnumCaseV0",
                SCSpecUDTEnumCaseV0EncodeRequestGrpcMarshaller.SCSpecUDTEnumCaseV0EncodeRequestMarshaller,
                SCSpecUDTEnumCaseV0EncodeResponseGrpcMarshaller.SCSpecUDTEnumCaseV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecUDTEnumCaseV0</summary>
        public static readonly Method<Stellar.SCSpecUDTEnumCaseV0DecodeRequest, Stellar.SCSpecUDTEnumCaseV0DecodeResponse> DecodeSCSpecUDTEnumCaseV0 =
            new Method<Stellar.SCSpecUDTEnumCaseV0DecodeRequest, Stellar.SCSpecUDTEnumCaseV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecUDTEnumCaseV0",
                SCSpecUDTEnumCaseV0DecodeRequestGrpcMarshaller.SCSpecUDTEnumCaseV0DecodeRequestMarshaller,
                SCSpecUDTEnumCaseV0DecodeResponseGrpcMarshaller.SCSpecUDTEnumCaseV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecUDTEnumV0</summary>
        public static readonly Method<Stellar.SCSpecUDTEnumV0EncodeRequest, Stellar.SCSpecUDTEnumV0EncodeResponse> EncodeSCSpecUDTEnumV0 =
            new Method<Stellar.SCSpecUDTEnumV0EncodeRequest, Stellar.SCSpecUDTEnumV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecUDTEnumV0",
                SCSpecUDTEnumV0EncodeRequestGrpcMarshaller.SCSpecUDTEnumV0EncodeRequestMarshaller,
                SCSpecUDTEnumV0EncodeResponseGrpcMarshaller.SCSpecUDTEnumV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecUDTEnumV0</summary>
        public static readonly Method<Stellar.SCSpecUDTEnumV0DecodeRequest, Stellar.SCSpecUDTEnumV0DecodeResponse> DecodeSCSpecUDTEnumV0 =
            new Method<Stellar.SCSpecUDTEnumV0DecodeRequest, Stellar.SCSpecUDTEnumV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecUDTEnumV0",
                SCSpecUDTEnumV0DecodeRequestGrpcMarshaller.SCSpecUDTEnumV0DecodeRequestMarshaller,
                SCSpecUDTEnumV0DecodeResponseGrpcMarshaller.SCSpecUDTEnumV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecUDTErrorEnumCaseV0</summary>
        public static readonly Method<Stellar.SCSpecUDTErrorEnumCaseV0EncodeRequest, Stellar.SCSpecUDTErrorEnumCaseV0EncodeResponse> EncodeSCSpecUDTErrorEnumCaseV0 =
            new Method<Stellar.SCSpecUDTErrorEnumCaseV0EncodeRequest, Stellar.SCSpecUDTErrorEnumCaseV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecUDTErrorEnumCaseV0",
                SCSpecUDTErrorEnumCaseV0EncodeRequestGrpcMarshaller.SCSpecUDTErrorEnumCaseV0EncodeRequestMarshaller,
                SCSpecUDTErrorEnumCaseV0EncodeResponseGrpcMarshaller.SCSpecUDTErrorEnumCaseV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecUDTErrorEnumCaseV0</summary>
        public static readonly Method<Stellar.SCSpecUDTErrorEnumCaseV0DecodeRequest, Stellar.SCSpecUDTErrorEnumCaseV0DecodeResponse> DecodeSCSpecUDTErrorEnumCaseV0 =
            new Method<Stellar.SCSpecUDTErrorEnumCaseV0DecodeRequest, Stellar.SCSpecUDTErrorEnumCaseV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecUDTErrorEnumCaseV0",
                SCSpecUDTErrorEnumCaseV0DecodeRequestGrpcMarshaller.SCSpecUDTErrorEnumCaseV0DecodeRequestMarshaller,
                SCSpecUDTErrorEnumCaseV0DecodeResponseGrpcMarshaller.SCSpecUDTErrorEnumCaseV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecUDTErrorEnumV0</summary>
        public static readonly Method<Stellar.SCSpecUDTErrorEnumV0EncodeRequest, Stellar.SCSpecUDTErrorEnumV0EncodeResponse> EncodeSCSpecUDTErrorEnumV0 =
            new Method<Stellar.SCSpecUDTErrorEnumV0EncodeRequest, Stellar.SCSpecUDTErrorEnumV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecUDTErrorEnumV0",
                SCSpecUDTErrorEnumV0EncodeRequestGrpcMarshaller.SCSpecUDTErrorEnumV0EncodeRequestMarshaller,
                SCSpecUDTErrorEnumV0EncodeResponseGrpcMarshaller.SCSpecUDTErrorEnumV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecUDTErrorEnumV0</summary>
        public static readonly Method<Stellar.SCSpecUDTErrorEnumV0DecodeRequest, Stellar.SCSpecUDTErrorEnumV0DecodeResponse> DecodeSCSpecUDTErrorEnumV0 =
            new Method<Stellar.SCSpecUDTErrorEnumV0DecodeRequest, Stellar.SCSpecUDTErrorEnumV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecUDTErrorEnumV0",
                SCSpecUDTErrorEnumV0DecodeRequestGrpcMarshaller.SCSpecUDTErrorEnumV0DecodeRequestMarshaller,
                SCSpecUDTErrorEnumV0DecodeResponseGrpcMarshaller.SCSpecUDTErrorEnumV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecFunctionInputV0</summary>
        public static readonly Method<Stellar.SCSpecFunctionInputV0EncodeRequest, Stellar.SCSpecFunctionInputV0EncodeResponse> EncodeSCSpecFunctionInputV0 =
            new Method<Stellar.SCSpecFunctionInputV0EncodeRequest, Stellar.SCSpecFunctionInputV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecFunctionInputV0",
                SCSpecFunctionInputV0EncodeRequestGrpcMarshaller.SCSpecFunctionInputV0EncodeRequestMarshaller,
                SCSpecFunctionInputV0EncodeResponseGrpcMarshaller.SCSpecFunctionInputV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecFunctionInputV0</summary>
        public static readonly Method<Stellar.SCSpecFunctionInputV0DecodeRequest, Stellar.SCSpecFunctionInputV0DecodeResponse> DecodeSCSpecFunctionInputV0 =
            new Method<Stellar.SCSpecFunctionInputV0DecodeRequest, Stellar.SCSpecFunctionInputV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecFunctionInputV0",
                SCSpecFunctionInputV0DecodeRequestGrpcMarshaller.SCSpecFunctionInputV0DecodeRequestMarshaller,
                SCSpecFunctionInputV0DecodeResponseGrpcMarshaller.SCSpecFunctionInputV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecFunctionV0</summary>
        public static readonly Method<Stellar.SCSpecFunctionV0EncodeRequest, Stellar.SCSpecFunctionV0EncodeResponse> EncodeSCSpecFunctionV0 =
            new Method<Stellar.SCSpecFunctionV0EncodeRequest, Stellar.SCSpecFunctionV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecFunctionV0",
                SCSpecFunctionV0EncodeRequestGrpcMarshaller.SCSpecFunctionV0EncodeRequestMarshaller,
                SCSpecFunctionV0EncodeResponseGrpcMarshaller.SCSpecFunctionV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecFunctionV0</summary>
        public static readonly Method<Stellar.SCSpecFunctionV0DecodeRequest, Stellar.SCSpecFunctionV0DecodeResponse> DecodeSCSpecFunctionV0 =
            new Method<Stellar.SCSpecFunctionV0DecodeRequest, Stellar.SCSpecFunctionV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecFunctionV0",
                SCSpecFunctionV0DecodeRequestGrpcMarshaller.SCSpecFunctionV0DecodeRequestMarshaller,
                SCSpecFunctionV0DecodeResponseGrpcMarshaller.SCSpecFunctionV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecEntryKind</summary>
        public static readonly Method<Stellar.SCSpecEntryKindEncodeRequest, Stellar.SCSpecEntryKindEncodeResponse> EncodeSCSpecEntryKind =
            new Method<Stellar.SCSpecEntryKindEncodeRequest, Stellar.SCSpecEntryKindEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecEntryKind",
                SCSpecEntryKindEncodeRequestGrpcMarshaller.SCSpecEntryKindEncodeRequestMarshaller,
                SCSpecEntryKindEncodeResponseGrpcMarshaller.SCSpecEntryKindEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecEntryKind</summary>
        public static readonly Method<Stellar.SCSpecEntryKindDecodeRequest, Stellar.SCSpecEntryKindDecodeResponse> DecodeSCSpecEntryKind =
            new Method<Stellar.SCSpecEntryKindDecodeRequest, Stellar.SCSpecEntryKindDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecEntryKind",
                SCSpecEntryKindDecodeRequestGrpcMarshaller.SCSpecEntryKindDecodeRequestMarshaller,
                SCSpecEntryKindDecodeResponseGrpcMarshaller.SCSpecEntryKindDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecEntry</summary>
        public static readonly Method<Stellar.SCSpecEntryEncodeRequest, Stellar.SCSpecEntryEncodeResponse> EncodeSCSpecEntry =
            new Method<Stellar.SCSpecEntryEncodeRequest, Stellar.SCSpecEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecEntry",
                SCSpecEntryEncodeRequestGrpcMarshaller.SCSpecEntryEncodeRequestMarshaller,
                SCSpecEntryEncodeResponseGrpcMarshaller.SCSpecEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecEntry</summary>
        public static readonly Method<Stellar.SCSpecEntryDecodeRequest, Stellar.SCSpecEntryDecodeResponse> DecodeSCSpecEntry =
            new Method<Stellar.SCSpecEntryDecodeRequest, Stellar.SCSpecEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecEntry",
                SCSpecEntryDecodeRequestGrpcMarshaller.SCSpecEntryDecodeRequestMarshaller,
                SCSpecEntryDecodeResponseGrpcMarshaller.SCSpecEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCValType</summary>
        public static readonly Method<Stellar.SCValTypeEncodeRequest, Stellar.SCValTypeEncodeResponse> EncodeSCValType =
            new Method<Stellar.SCValTypeEncodeRequest, Stellar.SCValTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCValType",
                SCValTypeEncodeRequestGrpcMarshaller.SCValTypeEncodeRequestMarshaller,
                SCValTypeEncodeResponseGrpcMarshaller.SCValTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCValType</summary>
        public static readonly Method<Stellar.SCValTypeDecodeRequest, Stellar.SCValTypeDecodeResponse> DecodeSCValType =
            new Method<Stellar.SCValTypeDecodeRequest, Stellar.SCValTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCValType",
                SCValTypeDecodeRequestGrpcMarshaller.SCValTypeDecodeRequestMarshaller,
                SCValTypeDecodeResponseGrpcMarshaller.SCValTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCErrorType</summary>
        public static readonly Method<Stellar.SCErrorTypeEncodeRequest, Stellar.SCErrorTypeEncodeResponse> EncodeSCErrorType =
            new Method<Stellar.SCErrorTypeEncodeRequest, Stellar.SCErrorTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCErrorType",
                SCErrorTypeEncodeRequestGrpcMarshaller.SCErrorTypeEncodeRequestMarshaller,
                SCErrorTypeEncodeResponseGrpcMarshaller.SCErrorTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCErrorType</summary>
        public static readonly Method<Stellar.SCErrorTypeDecodeRequest, Stellar.SCErrorTypeDecodeResponse> DecodeSCErrorType =
            new Method<Stellar.SCErrorTypeDecodeRequest, Stellar.SCErrorTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCErrorType",
                SCErrorTypeDecodeRequestGrpcMarshaller.SCErrorTypeDecodeRequestMarshaller,
                SCErrorTypeDecodeResponseGrpcMarshaller.SCErrorTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCErrorCode</summary>
        public static readonly Method<Stellar.SCErrorCodeEncodeRequest, Stellar.SCErrorCodeEncodeResponse> EncodeSCErrorCode =
            new Method<Stellar.SCErrorCodeEncodeRequest, Stellar.SCErrorCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCErrorCode",
                SCErrorCodeEncodeRequestGrpcMarshaller.SCErrorCodeEncodeRequestMarshaller,
                SCErrorCodeEncodeResponseGrpcMarshaller.SCErrorCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCErrorCode</summary>
        public static readonly Method<Stellar.SCErrorCodeDecodeRequest, Stellar.SCErrorCodeDecodeResponse> DecodeSCErrorCode =
            new Method<Stellar.SCErrorCodeDecodeRequest, Stellar.SCErrorCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCErrorCode",
                SCErrorCodeDecodeRequestGrpcMarshaller.SCErrorCodeDecodeRequestMarshaller,
                SCErrorCodeDecodeResponseGrpcMarshaller.SCErrorCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCError</summary>
        public static readonly Method<Stellar.SCErrorEncodeRequest, Stellar.SCErrorEncodeResponse> EncodeSCError =
            new Method<Stellar.SCErrorEncodeRequest, Stellar.SCErrorEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCError",
                SCErrorEncodeRequestGrpcMarshaller.SCErrorEncodeRequestMarshaller,
                SCErrorEncodeResponseGrpcMarshaller.SCErrorEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCError</summary>
        public static readonly Method<Stellar.SCErrorDecodeRequest, Stellar.SCErrorDecodeResponse> DecodeSCError =
            new Method<Stellar.SCErrorDecodeRequest, Stellar.SCErrorDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCError",
                SCErrorDecodeRequestGrpcMarshaller.SCErrorDecodeRequestMarshaller,
                SCErrorDecodeResponseGrpcMarshaller.SCErrorDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeUInt128Parts</summary>
        public static readonly Method<Stellar.UInt128PartsEncodeRequest, Stellar.UInt128PartsEncodeResponse> EncodeUInt128Parts =
            new Method<Stellar.UInt128PartsEncodeRequest, Stellar.UInt128PartsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeUInt128Parts",
                UInt128PartsEncodeRequestGrpcMarshaller.UInt128PartsEncodeRequestMarshaller,
                UInt128PartsEncodeResponseGrpcMarshaller.UInt128PartsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeUInt128Parts</summary>
        public static readonly Method<Stellar.UInt128PartsDecodeRequest, Stellar.UInt128PartsDecodeResponse> DecodeUInt128Parts =
            new Method<Stellar.UInt128PartsDecodeRequest, Stellar.UInt128PartsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeUInt128Parts",
                UInt128PartsDecodeRequestGrpcMarshaller.UInt128PartsDecodeRequestMarshaller,
                UInt128PartsDecodeResponseGrpcMarshaller.UInt128PartsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeInt128Parts</summary>
        public static readonly Method<Stellar.Int128PartsEncodeRequest, Stellar.Int128PartsEncodeResponse> EncodeInt128Parts =
            new Method<Stellar.Int128PartsEncodeRequest, Stellar.Int128PartsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeInt128Parts",
                Int128PartsEncodeRequestGrpcMarshaller.Int128PartsEncodeRequestMarshaller,
                Int128PartsEncodeResponseGrpcMarshaller.Int128PartsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeInt128Parts</summary>
        public static readonly Method<Stellar.Int128PartsDecodeRequest, Stellar.Int128PartsDecodeResponse> DecodeInt128Parts =
            new Method<Stellar.Int128PartsDecodeRequest, Stellar.Int128PartsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeInt128Parts",
                Int128PartsDecodeRequestGrpcMarshaller.Int128PartsDecodeRequestMarshaller,
                Int128PartsDecodeResponseGrpcMarshaller.Int128PartsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeUInt256Parts</summary>
        public static readonly Method<Stellar.UInt256PartsEncodeRequest, Stellar.UInt256PartsEncodeResponse> EncodeUInt256Parts =
            new Method<Stellar.UInt256PartsEncodeRequest, Stellar.UInt256PartsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeUInt256Parts",
                UInt256PartsEncodeRequestGrpcMarshaller.UInt256PartsEncodeRequestMarshaller,
                UInt256PartsEncodeResponseGrpcMarshaller.UInt256PartsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeUInt256Parts</summary>
        public static readonly Method<Stellar.UInt256PartsDecodeRequest, Stellar.UInt256PartsDecodeResponse> DecodeUInt256Parts =
            new Method<Stellar.UInt256PartsDecodeRequest, Stellar.UInt256PartsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeUInt256Parts",
                UInt256PartsDecodeRequestGrpcMarshaller.UInt256PartsDecodeRequestMarshaller,
                UInt256PartsDecodeResponseGrpcMarshaller.UInt256PartsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeInt256Parts</summary>
        public static readonly Method<Stellar.Int256PartsEncodeRequest, Stellar.Int256PartsEncodeResponse> EncodeInt256Parts =
            new Method<Stellar.Int256PartsEncodeRequest, Stellar.Int256PartsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeInt256Parts",
                Int256PartsEncodeRequestGrpcMarshaller.Int256PartsEncodeRequestMarshaller,
                Int256PartsEncodeResponseGrpcMarshaller.Int256PartsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeInt256Parts</summary>
        public static readonly Method<Stellar.Int256PartsDecodeRequest, Stellar.Int256PartsDecodeResponse> DecodeInt256Parts =
            new Method<Stellar.Int256PartsDecodeRequest, Stellar.Int256PartsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeInt256Parts",
                Int256PartsDecodeRequestGrpcMarshaller.Int256PartsDecodeRequestMarshaller,
                Int256PartsDecodeResponseGrpcMarshaller.Int256PartsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeContractExecutableType</summary>
        public static readonly Method<Stellar.ContractExecutableTypeEncodeRequest, Stellar.ContractExecutableTypeEncodeResponse> EncodeContractExecutableType =
            new Method<Stellar.ContractExecutableTypeEncodeRequest, Stellar.ContractExecutableTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeContractExecutableType",
                ContractExecutableTypeEncodeRequestGrpcMarshaller.ContractExecutableTypeEncodeRequestMarshaller,
                ContractExecutableTypeEncodeResponseGrpcMarshaller.ContractExecutableTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeContractExecutableType</summary>
        public static readonly Method<Stellar.ContractExecutableTypeDecodeRequest, Stellar.ContractExecutableTypeDecodeResponse> DecodeContractExecutableType =
            new Method<Stellar.ContractExecutableTypeDecodeRequest, Stellar.ContractExecutableTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeContractExecutableType",
                ContractExecutableTypeDecodeRequestGrpcMarshaller.ContractExecutableTypeDecodeRequestMarshaller,
                ContractExecutableTypeDecodeResponseGrpcMarshaller.ContractExecutableTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeContractExecutable</summary>
        public static readonly Method<Stellar.ContractExecutableEncodeRequest, Stellar.ContractExecutableEncodeResponse> EncodeContractExecutable =
            new Method<Stellar.ContractExecutableEncodeRequest, Stellar.ContractExecutableEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeContractExecutable",
                ContractExecutableEncodeRequestGrpcMarshaller.ContractExecutableEncodeRequestMarshaller,
                ContractExecutableEncodeResponseGrpcMarshaller.ContractExecutableEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeContractExecutable</summary>
        public static readonly Method<Stellar.ContractExecutableDecodeRequest, Stellar.ContractExecutableDecodeResponse> DecodeContractExecutable =
            new Method<Stellar.ContractExecutableDecodeRequest, Stellar.ContractExecutableDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeContractExecutable",
                ContractExecutableDecodeRequestGrpcMarshaller.ContractExecutableDecodeRequestMarshaller,
                ContractExecutableDecodeResponseGrpcMarshaller.ContractExecutableDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCAddressType</summary>
        public static readonly Method<Stellar.SCAddressTypeEncodeRequest, Stellar.SCAddressTypeEncodeResponse> EncodeSCAddressType =
            new Method<Stellar.SCAddressTypeEncodeRequest, Stellar.SCAddressTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCAddressType",
                SCAddressTypeEncodeRequestGrpcMarshaller.SCAddressTypeEncodeRequestMarshaller,
                SCAddressTypeEncodeResponseGrpcMarshaller.SCAddressTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCAddressType</summary>
        public static readonly Method<Stellar.SCAddressTypeDecodeRequest, Stellar.SCAddressTypeDecodeResponse> DecodeSCAddressType =
            new Method<Stellar.SCAddressTypeDecodeRequest, Stellar.SCAddressTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCAddressType",
                SCAddressTypeDecodeRequestGrpcMarshaller.SCAddressTypeDecodeRequestMarshaller,
                SCAddressTypeDecodeResponseGrpcMarshaller.SCAddressTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCAddress</summary>
        public static readonly Method<Stellar.SCAddressEncodeRequest, Stellar.SCAddressEncodeResponse> EncodeSCAddress =
            new Method<Stellar.SCAddressEncodeRequest, Stellar.SCAddressEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCAddress",
                SCAddressEncodeRequestGrpcMarshaller.SCAddressEncodeRequestMarshaller,
                SCAddressEncodeResponseGrpcMarshaller.SCAddressEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCAddress</summary>
        public static readonly Method<Stellar.SCAddressDecodeRequest, Stellar.SCAddressDecodeResponse> DecodeSCAddress =
            new Method<Stellar.SCAddressDecodeRequest, Stellar.SCAddressDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCAddress",
                SCAddressDecodeRequestGrpcMarshaller.SCAddressDecodeRequestMarshaller,
                SCAddressDecodeResponseGrpcMarshaller.SCAddressDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCVec</summary>
        public static readonly Method<Stellar.SCVecEncodeRequest, Stellar.SCVecEncodeResponse> EncodeSCVec =
            new Method<Stellar.SCVecEncodeRequest, Stellar.SCVecEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCVec",
                SCVecEncodeRequestGrpcMarshaller.SCVecEncodeRequestMarshaller,
                SCVecEncodeResponseGrpcMarshaller.SCVecEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCVec</summary>
        public static readonly Method<Stellar.SCVecDecodeRequest, Stellar.SCVecDecodeResponse> DecodeSCVec =
            new Method<Stellar.SCVecDecodeRequest, Stellar.SCVecDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCVec",
                SCVecDecodeRequestGrpcMarshaller.SCVecDecodeRequestMarshaller,
                SCVecDecodeResponseGrpcMarshaller.SCVecDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCMap</summary>
        public static readonly Method<Stellar.SCMapEncodeRequest, Stellar.SCMapEncodeResponse> EncodeSCMap =
            new Method<Stellar.SCMapEncodeRequest, Stellar.SCMapEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCMap",
                SCMapEncodeRequestGrpcMarshaller.SCMapEncodeRequestMarshaller,
                SCMapEncodeResponseGrpcMarshaller.SCMapEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCMap</summary>
        public static readonly Method<Stellar.SCMapDecodeRequest, Stellar.SCMapDecodeResponse> DecodeSCMap =
            new Method<Stellar.SCMapDecodeRequest, Stellar.SCMapDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCMap",
                SCMapDecodeRequestGrpcMarshaller.SCMapDecodeRequestMarshaller,
                SCMapDecodeResponseGrpcMarshaller.SCMapDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCBytes</summary>
        public static readonly Method<Stellar.SCBytesEncodeRequest, Stellar.SCBytesEncodeResponse> EncodeSCBytes =
            new Method<Stellar.SCBytesEncodeRequest, Stellar.SCBytesEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCBytes",
                SCBytesEncodeRequestGrpcMarshaller.SCBytesEncodeRequestMarshaller,
                SCBytesEncodeResponseGrpcMarshaller.SCBytesEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCBytes</summary>
        public static readonly Method<Stellar.SCBytesDecodeRequest, Stellar.SCBytesDecodeResponse> DecodeSCBytes =
            new Method<Stellar.SCBytesDecodeRequest, Stellar.SCBytesDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCBytes",
                SCBytesDecodeRequestGrpcMarshaller.SCBytesDecodeRequestMarshaller,
                SCBytesDecodeResponseGrpcMarshaller.SCBytesDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCString</summary>
        public static readonly Method<Stellar.SCStringEncodeRequest, Stellar.SCStringEncodeResponse> EncodeSCString =
            new Method<Stellar.SCStringEncodeRequest, Stellar.SCStringEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCString",
                SCStringEncodeRequestGrpcMarshaller.SCStringEncodeRequestMarshaller,
                SCStringEncodeResponseGrpcMarshaller.SCStringEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCString</summary>
        public static readonly Method<Stellar.SCStringDecodeRequest, Stellar.SCStringDecodeResponse> DecodeSCString =
            new Method<Stellar.SCStringDecodeRequest, Stellar.SCStringDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCString",
                SCStringDecodeRequestGrpcMarshaller.SCStringDecodeRequestMarshaller,
                SCStringDecodeResponseGrpcMarshaller.SCStringDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSymbol</summary>
        public static readonly Method<Stellar.SCSymbolEncodeRequest, Stellar.SCSymbolEncodeResponse> EncodeSCSymbol =
            new Method<Stellar.SCSymbolEncodeRequest, Stellar.SCSymbolEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSymbol",
                SCSymbolEncodeRequestGrpcMarshaller.SCSymbolEncodeRequestMarshaller,
                SCSymbolEncodeResponseGrpcMarshaller.SCSymbolEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSymbol</summary>
        public static readonly Method<Stellar.SCSymbolDecodeRequest, Stellar.SCSymbolDecodeResponse> DecodeSCSymbol =
            new Method<Stellar.SCSymbolDecodeRequest, Stellar.SCSymbolDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSymbol",
                SCSymbolDecodeRequestGrpcMarshaller.SCSymbolDecodeRequestMarshaller,
                SCSymbolDecodeResponseGrpcMarshaller.SCSymbolDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCNonceKey</summary>
        public static readonly Method<Stellar.SCNonceKeyEncodeRequest, Stellar.SCNonceKeyEncodeResponse> EncodeSCNonceKey =
            new Method<Stellar.SCNonceKeyEncodeRequest, Stellar.SCNonceKeyEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCNonceKey",
                SCNonceKeyEncodeRequestGrpcMarshaller.SCNonceKeyEncodeRequestMarshaller,
                SCNonceKeyEncodeResponseGrpcMarshaller.SCNonceKeyEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCNonceKey</summary>
        public static readonly Method<Stellar.SCNonceKeyDecodeRequest, Stellar.SCNonceKeyDecodeResponse> DecodeSCNonceKey =
            new Method<Stellar.SCNonceKeyDecodeRequest, Stellar.SCNonceKeyDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCNonceKey",
                SCNonceKeyDecodeRequestGrpcMarshaller.SCNonceKeyDecodeRequestMarshaller,
                SCNonceKeyDecodeResponseGrpcMarshaller.SCNonceKeyDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCContractInstance</summary>
        public static readonly Method<Stellar.SCContractInstanceEncodeRequest, Stellar.SCContractInstanceEncodeResponse> EncodeSCContractInstance =
            new Method<Stellar.SCContractInstanceEncodeRequest, Stellar.SCContractInstanceEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCContractInstance",
                SCContractInstanceEncodeRequestGrpcMarshaller.SCContractInstanceEncodeRequestMarshaller,
                SCContractInstanceEncodeResponseGrpcMarshaller.SCContractInstanceEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCContractInstance</summary>
        public static readonly Method<Stellar.SCContractInstanceDecodeRequest, Stellar.SCContractInstanceDecodeResponse> DecodeSCContractInstance =
            new Method<Stellar.SCContractInstanceDecodeRequest, Stellar.SCContractInstanceDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCContractInstance",
                SCContractInstanceDecodeRequestGrpcMarshaller.SCContractInstanceDecodeRequestMarshaller,
                SCContractInstanceDecodeResponseGrpcMarshaller.SCContractInstanceDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCVal</summary>
        public static readonly Method<Stellar.SCValEncodeRequest, Stellar.SCValEncodeResponse> EncodeSCVal =
            new Method<Stellar.SCValEncodeRequest, Stellar.SCValEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCVal",
                SCValEncodeRequestGrpcMarshaller.SCValEncodeRequestMarshaller,
                SCValEncodeResponseGrpcMarshaller.SCValEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCVal</summary>
        public static readonly Method<Stellar.SCValDecodeRequest, Stellar.SCValDecodeResponse> DecodeSCVal =
            new Method<Stellar.SCValDecodeRequest, Stellar.SCValDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCVal",
                SCValDecodeRequestGrpcMarshaller.SCValDecodeRequestMarshaller,
                SCValDecodeResponseGrpcMarshaller.SCValDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCMapEntry</summary>
        public static readonly Method<Stellar.SCMapEntryEncodeRequest, Stellar.SCMapEntryEncodeResponse> EncodeSCMapEntry =
            new Method<Stellar.SCMapEntryEncodeRequest, Stellar.SCMapEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCMapEntry",
                SCMapEntryEncodeRequestGrpcMarshaller.SCMapEntryEncodeRequestMarshaller,
                SCMapEntryEncodeResponseGrpcMarshaller.SCMapEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCMapEntry</summary>
        public static readonly Method<Stellar.SCMapEntryDecodeRequest, Stellar.SCMapEntryDecodeResponse> DecodeSCMapEntry =
            new Method<Stellar.SCMapEntryDecodeRequest, Stellar.SCMapEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCMapEntry",
                SCMapEntryDecodeRequestGrpcMarshaller.SCMapEntryDecodeRequestMarshaller,
                SCMapEntryDecodeResponseGrpcMarshaller.SCMapEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeStoredTransactionSet</summary>
        public static readonly Method<Stellar.StoredTransactionSetEncodeRequest, Stellar.StoredTransactionSetEncodeResponse> EncodeStoredTransactionSet =
            new Method<Stellar.StoredTransactionSetEncodeRequest, Stellar.StoredTransactionSetEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeStoredTransactionSet",
                StoredTransactionSetEncodeRequestGrpcMarshaller.StoredTransactionSetEncodeRequestMarshaller,
                StoredTransactionSetEncodeResponseGrpcMarshaller.StoredTransactionSetEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeStoredTransactionSet</summary>
        public static readonly Method<Stellar.StoredTransactionSetDecodeRequest, Stellar.StoredTransactionSetDecodeResponse> DecodeStoredTransactionSet =
            new Method<Stellar.StoredTransactionSetDecodeRequest, Stellar.StoredTransactionSetDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeStoredTransactionSet",
                StoredTransactionSetDecodeRequestGrpcMarshaller.StoredTransactionSetDecodeRequestMarshaller,
                StoredTransactionSetDecodeResponseGrpcMarshaller.StoredTransactionSetDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeStoredDebugTransactionSet</summary>
        public static readonly Method<Stellar.StoredDebugTransactionSetEncodeRequest, Stellar.StoredDebugTransactionSetEncodeResponse> EncodeStoredDebugTransactionSet =
            new Method<Stellar.StoredDebugTransactionSetEncodeRequest, Stellar.StoredDebugTransactionSetEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeStoredDebugTransactionSet",
                StoredDebugTransactionSetEncodeRequestGrpcMarshaller.StoredDebugTransactionSetEncodeRequestMarshaller,
                StoredDebugTransactionSetEncodeResponseGrpcMarshaller.StoredDebugTransactionSetEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeStoredDebugTransactionSet</summary>
        public static readonly Method<Stellar.StoredDebugTransactionSetDecodeRequest, Stellar.StoredDebugTransactionSetDecodeResponse> DecodeStoredDebugTransactionSet =
            new Method<Stellar.StoredDebugTransactionSetDecodeRequest, Stellar.StoredDebugTransactionSetDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeStoredDebugTransactionSet",
                StoredDebugTransactionSetDecodeRequestGrpcMarshaller.StoredDebugTransactionSetDecodeRequestMarshaller,
                StoredDebugTransactionSetDecodeResponseGrpcMarshaller.StoredDebugTransactionSetDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePersistedSCPStateV0</summary>
        public static readonly Method<Stellar.PersistedSCPStateV0EncodeRequest, Stellar.PersistedSCPStateV0EncodeResponse> EncodePersistedSCPStateV0 =
            new Method<Stellar.PersistedSCPStateV0EncodeRequest, Stellar.PersistedSCPStateV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePersistedSCPStateV0",
                PersistedSCPStateV0EncodeRequestGrpcMarshaller.PersistedSCPStateV0EncodeRequestMarshaller,
                PersistedSCPStateV0EncodeResponseGrpcMarshaller.PersistedSCPStateV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePersistedSCPStateV0</summary>
        public static readonly Method<Stellar.PersistedSCPStateV0DecodeRequest, Stellar.PersistedSCPStateV0DecodeResponse> DecodePersistedSCPStateV0 =
            new Method<Stellar.PersistedSCPStateV0DecodeRequest, Stellar.PersistedSCPStateV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePersistedSCPStateV0",
                PersistedSCPStateV0DecodeRequestGrpcMarshaller.PersistedSCPStateV0DecodeRequestMarshaller,
                PersistedSCPStateV0DecodeResponseGrpcMarshaller.PersistedSCPStateV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePersistedSCPStateV1</summary>
        public static readonly Method<Stellar.PersistedSCPStateV1EncodeRequest, Stellar.PersistedSCPStateV1EncodeResponse> EncodePersistedSCPStateV1 =
            new Method<Stellar.PersistedSCPStateV1EncodeRequest, Stellar.PersistedSCPStateV1EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePersistedSCPStateV1",
                PersistedSCPStateV1EncodeRequestGrpcMarshaller.PersistedSCPStateV1EncodeRequestMarshaller,
                PersistedSCPStateV1EncodeResponseGrpcMarshaller.PersistedSCPStateV1EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePersistedSCPStateV1</summary>
        public static readonly Method<Stellar.PersistedSCPStateV1DecodeRequest, Stellar.PersistedSCPStateV1DecodeResponse> DecodePersistedSCPStateV1 =
            new Method<Stellar.PersistedSCPStateV1DecodeRequest, Stellar.PersistedSCPStateV1DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePersistedSCPStateV1",
                PersistedSCPStateV1DecodeRequestGrpcMarshaller.PersistedSCPStateV1DecodeRequestMarshaller,
                PersistedSCPStateV1DecodeResponseGrpcMarshaller.PersistedSCPStateV1DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePersistedSCPState</summary>
        public static readonly Method<Stellar.PersistedSCPStateEncodeRequest, Stellar.PersistedSCPStateEncodeResponse> EncodePersistedSCPState =
            new Method<Stellar.PersistedSCPStateEncodeRequest, Stellar.PersistedSCPStateEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePersistedSCPState",
                PersistedSCPStateEncodeRequestGrpcMarshaller.PersistedSCPStateEncodeRequestMarshaller,
                PersistedSCPStateEncodeResponseGrpcMarshaller.PersistedSCPStateEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePersistedSCPState</summary>
        public static readonly Method<Stellar.PersistedSCPStateDecodeRequest, Stellar.PersistedSCPStateDecodeResponse> DecodePersistedSCPState =
            new Method<Stellar.PersistedSCPStateDecodeRequest, Stellar.PersistedSCPStateDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePersistedSCPState",
                PersistedSCPStateDecodeRequestGrpcMarshaller.PersistedSCPStateDecodeRequestMarshaller,
                PersistedSCPStateDecodeResponseGrpcMarshaller.PersistedSCPStateDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeThresholds</summary>
        public static readonly Method<Stellar.ThresholdsEncodeRequest, Stellar.ThresholdsEncodeResponse> EncodeThresholds =
            new Method<Stellar.ThresholdsEncodeRequest, Stellar.ThresholdsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeThresholds",
                ThresholdsEncodeRequestGrpcMarshaller.ThresholdsEncodeRequestMarshaller,
                ThresholdsEncodeResponseGrpcMarshaller.ThresholdsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeThresholds</summary>
        public static readonly Method<Stellar.ThresholdsDecodeRequest, Stellar.ThresholdsDecodeResponse> DecodeThresholds =
            new Method<Stellar.ThresholdsDecodeRequest, Stellar.ThresholdsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeThresholds",
                ThresholdsDecodeRequestGrpcMarshaller.ThresholdsDecodeRequestMarshaller,
                ThresholdsDecodeResponseGrpcMarshaller.ThresholdsDecodeResponseMarshaller);

        /// <summary>Method descriptor for Encodestring32</summary>
        public static readonly Method<Stellar.string32EncodeRequest, Stellar.string32EncodeResponse> Encodestring32 =
            new Method<Stellar.string32EncodeRequest, Stellar.string32EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Encodestring32",
                string32EncodeRequestGrpcMarshaller.string32EncodeRequestMarshaller,
                string32EncodeResponseGrpcMarshaller.string32EncodeResponseMarshaller);

        /// <summary>Method descriptor for Decodestring32</summary>
        public static readonly Method<Stellar.string32DecodeRequest, Stellar.string32DecodeResponse> Decodestring32 =
            new Method<Stellar.string32DecodeRequest, Stellar.string32DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Decodestring32",
                string32DecodeRequestGrpcMarshaller.string32DecodeRequestMarshaller,
                string32DecodeResponseGrpcMarshaller.string32DecodeResponseMarshaller);

        /// <summary>Method descriptor for Encodestring64</summary>
        public static readonly Method<Stellar.string64EncodeRequest, Stellar.string64EncodeResponse> Encodestring64 =
            new Method<Stellar.string64EncodeRequest, Stellar.string64EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Encodestring64",
                string64EncodeRequestGrpcMarshaller.string64EncodeRequestMarshaller,
                string64EncodeResponseGrpcMarshaller.string64EncodeResponseMarshaller);

        /// <summary>Method descriptor for Decodestring64</summary>
        public static readonly Method<Stellar.string64DecodeRequest, Stellar.string64DecodeResponse> Decodestring64 =
            new Method<Stellar.string64DecodeRequest, Stellar.string64DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Decodestring64",
                string64DecodeRequestGrpcMarshaller.string64DecodeRequestMarshaller,
                string64DecodeResponseGrpcMarshaller.string64DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSequenceNumber</summary>
        public static readonly Method<Stellar.SequenceNumberEncodeRequest, Stellar.SequenceNumberEncodeResponse> EncodeSequenceNumber =
            new Method<Stellar.SequenceNumberEncodeRequest, Stellar.SequenceNumberEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSequenceNumber",
                SequenceNumberEncodeRequestGrpcMarshaller.SequenceNumberEncodeRequestMarshaller,
                SequenceNumberEncodeResponseGrpcMarshaller.SequenceNumberEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSequenceNumber</summary>
        public static readonly Method<Stellar.SequenceNumberDecodeRequest, Stellar.SequenceNumberDecodeResponse> DecodeSequenceNumber =
            new Method<Stellar.SequenceNumberDecodeRequest, Stellar.SequenceNumberDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSequenceNumber",
                SequenceNumberDecodeRequestGrpcMarshaller.SequenceNumberDecodeRequestMarshaller,
                SequenceNumberDecodeResponseGrpcMarshaller.SequenceNumberDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeDataValue</summary>
        public static readonly Method<Stellar.DataValueEncodeRequest, Stellar.DataValueEncodeResponse> EncodeDataValue =
            new Method<Stellar.DataValueEncodeRequest, Stellar.DataValueEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeDataValue",
                DataValueEncodeRequestGrpcMarshaller.DataValueEncodeRequestMarshaller,
                DataValueEncodeResponseGrpcMarshaller.DataValueEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeDataValue</summary>
        public static readonly Method<Stellar.DataValueDecodeRequest, Stellar.DataValueDecodeResponse> DecodeDataValue =
            new Method<Stellar.DataValueDecodeRequest, Stellar.DataValueDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeDataValue",
                DataValueDecodeRequestGrpcMarshaller.DataValueDecodeRequestMarshaller,
                DataValueDecodeResponseGrpcMarshaller.DataValueDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePoolID</summary>
        public static readonly Method<Stellar.PoolIDEncodeRequest, Stellar.PoolIDEncodeResponse> EncodePoolID =
            new Method<Stellar.PoolIDEncodeRequest, Stellar.PoolIDEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePoolID",
                PoolIDEncodeRequestGrpcMarshaller.PoolIDEncodeRequestMarshaller,
                PoolIDEncodeResponseGrpcMarshaller.PoolIDEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePoolID</summary>
        public static readonly Method<Stellar.PoolIDDecodeRequest, Stellar.PoolIDDecodeResponse> DecodePoolID =
            new Method<Stellar.PoolIDDecodeRequest, Stellar.PoolIDDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePoolID",
                PoolIDDecodeRequestGrpcMarshaller.PoolIDDecodeRequestMarshaller,
                PoolIDDecodeResponseGrpcMarshaller.PoolIDDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAssetCode4</summary>
        public static readonly Method<Stellar.AssetCode4EncodeRequest, Stellar.AssetCode4EncodeResponse> EncodeAssetCode4 =
            new Method<Stellar.AssetCode4EncodeRequest, Stellar.AssetCode4EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAssetCode4",
                AssetCode4EncodeRequestGrpcMarshaller.AssetCode4EncodeRequestMarshaller,
                AssetCode4EncodeResponseGrpcMarshaller.AssetCode4EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAssetCode4</summary>
        public static readonly Method<Stellar.AssetCode4DecodeRequest, Stellar.AssetCode4DecodeResponse> DecodeAssetCode4 =
            new Method<Stellar.AssetCode4DecodeRequest, Stellar.AssetCode4DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAssetCode4",
                AssetCode4DecodeRequestGrpcMarshaller.AssetCode4DecodeRequestMarshaller,
                AssetCode4DecodeResponseGrpcMarshaller.AssetCode4DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAssetCode12</summary>
        public static readonly Method<Stellar.AssetCode12EncodeRequest, Stellar.AssetCode12EncodeResponse> EncodeAssetCode12 =
            new Method<Stellar.AssetCode12EncodeRequest, Stellar.AssetCode12EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAssetCode12",
                AssetCode12EncodeRequestGrpcMarshaller.AssetCode12EncodeRequestMarshaller,
                AssetCode12EncodeResponseGrpcMarshaller.AssetCode12EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAssetCode12</summary>
        public static readonly Method<Stellar.AssetCode12DecodeRequest, Stellar.AssetCode12DecodeResponse> DecodeAssetCode12 =
            new Method<Stellar.AssetCode12DecodeRequest, Stellar.AssetCode12DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAssetCode12",
                AssetCode12DecodeRequestGrpcMarshaller.AssetCode12DecodeRequestMarshaller,
                AssetCode12DecodeResponseGrpcMarshaller.AssetCode12DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAssetType</summary>
        public static readonly Method<Stellar.AssetTypeEncodeRequest, Stellar.AssetTypeEncodeResponse> EncodeAssetType =
            new Method<Stellar.AssetTypeEncodeRequest, Stellar.AssetTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAssetType",
                AssetTypeEncodeRequestGrpcMarshaller.AssetTypeEncodeRequestMarshaller,
                AssetTypeEncodeResponseGrpcMarshaller.AssetTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAssetType</summary>
        public static readonly Method<Stellar.AssetTypeDecodeRequest, Stellar.AssetTypeDecodeResponse> DecodeAssetType =
            new Method<Stellar.AssetTypeDecodeRequest, Stellar.AssetTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAssetType",
                AssetTypeDecodeRequestGrpcMarshaller.AssetTypeDecodeRequestMarshaller,
                AssetTypeDecodeResponseGrpcMarshaller.AssetTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAssetCode</summary>
        public static readonly Method<Stellar.AssetCodeEncodeRequest, Stellar.AssetCodeEncodeResponse> EncodeAssetCode =
            new Method<Stellar.AssetCodeEncodeRequest, Stellar.AssetCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAssetCode",
                AssetCodeEncodeRequestGrpcMarshaller.AssetCodeEncodeRequestMarshaller,
                AssetCodeEncodeResponseGrpcMarshaller.AssetCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAssetCode</summary>
        public static readonly Method<Stellar.AssetCodeDecodeRequest, Stellar.AssetCodeDecodeResponse> DecodeAssetCode =
            new Method<Stellar.AssetCodeDecodeRequest, Stellar.AssetCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAssetCode",
                AssetCodeDecodeRequestGrpcMarshaller.AssetCodeDecodeRequestMarshaller,
                AssetCodeDecodeResponseGrpcMarshaller.AssetCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAlphaNum4</summary>
        public static readonly Method<Stellar.AlphaNum4EncodeRequest, Stellar.AlphaNum4EncodeResponse> EncodeAlphaNum4 =
            new Method<Stellar.AlphaNum4EncodeRequest, Stellar.AlphaNum4EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAlphaNum4",
                AlphaNum4EncodeRequestGrpcMarshaller.AlphaNum4EncodeRequestMarshaller,
                AlphaNum4EncodeResponseGrpcMarshaller.AlphaNum4EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAlphaNum4</summary>
        public static readonly Method<Stellar.AlphaNum4DecodeRequest, Stellar.AlphaNum4DecodeResponse> DecodeAlphaNum4 =
            new Method<Stellar.AlphaNum4DecodeRequest, Stellar.AlphaNum4DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAlphaNum4",
                AlphaNum4DecodeRequestGrpcMarshaller.AlphaNum4DecodeRequestMarshaller,
                AlphaNum4DecodeResponseGrpcMarshaller.AlphaNum4DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAlphaNum12</summary>
        public static readonly Method<Stellar.AlphaNum12EncodeRequest, Stellar.AlphaNum12EncodeResponse> EncodeAlphaNum12 =
            new Method<Stellar.AlphaNum12EncodeRequest, Stellar.AlphaNum12EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAlphaNum12",
                AlphaNum12EncodeRequestGrpcMarshaller.AlphaNum12EncodeRequestMarshaller,
                AlphaNum12EncodeResponseGrpcMarshaller.AlphaNum12EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAlphaNum12</summary>
        public static readonly Method<Stellar.AlphaNum12DecodeRequest, Stellar.AlphaNum12DecodeResponse> DecodeAlphaNum12 =
            new Method<Stellar.AlphaNum12DecodeRequest, Stellar.AlphaNum12DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAlphaNum12",
                AlphaNum12DecodeRequestGrpcMarshaller.AlphaNum12DecodeRequestMarshaller,
                AlphaNum12DecodeResponseGrpcMarshaller.AlphaNum12DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAsset</summary>
        public static readonly Method<Stellar.AssetEncodeRequest, Stellar.AssetEncodeResponse> EncodeAsset =
            new Method<Stellar.AssetEncodeRequest, Stellar.AssetEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAsset",
                AssetEncodeRequestGrpcMarshaller.AssetEncodeRequestMarshaller,
                AssetEncodeResponseGrpcMarshaller.AssetEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAsset</summary>
        public static readonly Method<Stellar.AssetDecodeRequest, Stellar.AssetDecodeResponse> DecodeAsset =
            new Method<Stellar.AssetDecodeRequest, Stellar.AssetDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAsset",
                AssetDecodeRequestGrpcMarshaller.AssetDecodeRequestMarshaller,
                AssetDecodeResponseGrpcMarshaller.AssetDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePrice</summary>
        public static readonly Method<Stellar.PriceEncodeRequest, Stellar.PriceEncodeResponse> EncodePrice =
            new Method<Stellar.PriceEncodeRequest, Stellar.PriceEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePrice",
                PriceEncodeRequestGrpcMarshaller.PriceEncodeRequestMarshaller,
                PriceEncodeResponseGrpcMarshaller.PriceEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePrice</summary>
        public static readonly Method<Stellar.PriceDecodeRequest, Stellar.PriceDecodeResponse> DecodePrice =
            new Method<Stellar.PriceDecodeRequest, Stellar.PriceDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePrice",
                PriceDecodeRequestGrpcMarshaller.PriceDecodeRequestMarshaller,
                PriceDecodeResponseGrpcMarshaller.PriceDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLiabilities</summary>
        public static readonly Method<Stellar.LiabilitiesEncodeRequest, Stellar.LiabilitiesEncodeResponse> EncodeLiabilities =
            new Method<Stellar.LiabilitiesEncodeRequest, Stellar.LiabilitiesEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLiabilities",
                LiabilitiesEncodeRequestGrpcMarshaller.LiabilitiesEncodeRequestMarshaller,
                LiabilitiesEncodeResponseGrpcMarshaller.LiabilitiesEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLiabilities</summary>
        public static readonly Method<Stellar.LiabilitiesDecodeRequest, Stellar.LiabilitiesDecodeResponse> DecodeLiabilities =
            new Method<Stellar.LiabilitiesDecodeRequest, Stellar.LiabilitiesDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLiabilities",
                LiabilitiesDecodeRequestGrpcMarshaller.LiabilitiesDecodeRequestMarshaller,
                LiabilitiesDecodeResponseGrpcMarshaller.LiabilitiesDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeThresholdIndexes</summary>
        public static readonly Method<Stellar.ThresholdIndexesEncodeRequest, Stellar.ThresholdIndexesEncodeResponse> EncodeThresholdIndexes =
            new Method<Stellar.ThresholdIndexesEncodeRequest, Stellar.ThresholdIndexesEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeThresholdIndexes",
                ThresholdIndexesEncodeRequestGrpcMarshaller.ThresholdIndexesEncodeRequestMarshaller,
                ThresholdIndexesEncodeResponseGrpcMarshaller.ThresholdIndexesEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeThresholdIndexes</summary>
        public static readonly Method<Stellar.ThresholdIndexesDecodeRequest, Stellar.ThresholdIndexesDecodeResponse> DecodeThresholdIndexes =
            new Method<Stellar.ThresholdIndexesDecodeRequest, Stellar.ThresholdIndexesDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeThresholdIndexes",
                ThresholdIndexesDecodeRequestGrpcMarshaller.ThresholdIndexesDecodeRequestMarshaller,
                ThresholdIndexesDecodeResponseGrpcMarshaller.ThresholdIndexesDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerEntryType</summary>
        public static readonly Method<Stellar.LedgerEntryTypeEncodeRequest, Stellar.LedgerEntryTypeEncodeResponse> EncodeLedgerEntryType =
            new Method<Stellar.LedgerEntryTypeEncodeRequest, Stellar.LedgerEntryTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerEntryType",
                LedgerEntryTypeEncodeRequestGrpcMarshaller.LedgerEntryTypeEncodeRequestMarshaller,
                LedgerEntryTypeEncodeResponseGrpcMarshaller.LedgerEntryTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerEntryType</summary>
        public static readonly Method<Stellar.LedgerEntryTypeDecodeRequest, Stellar.LedgerEntryTypeDecodeResponse> DecodeLedgerEntryType =
            new Method<Stellar.LedgerEntryTypeDecodeRequest, Stellar.LedgerEntryTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerEntryType",
                LedgerEntryTypeDecodeRequestGrpcMarshaller.LedgerEntryTypeDecodeRequestMarshaller,
                LedgerEntryTypeDecodeResponseGrpcMarshaller.LedgerEntryTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSigner</summary>
        public static readonly Method<Stellar.SignerEncodeRequest, Stellar.SignerEncodeResponse> EncodeSigner =
            new Method<Stellar.SignerEncodeRequest, Stellar.SignerEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSigner",
                SignerEncodeRequestGrpcMarshaller.SignerEncodeRequestMarshaller,
                SignerEncodeResponseGrpcMarshaller.SignerEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSigner</summary>
        public static readonly Method<Stellar.SignerDecodeRequest, Stellar.SignerDecodeResponse> DecodeSigner =
            new Method<Stellar.SignerDecodeRequest, Stellar.SignerDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSigner",
                SignerDecodeRequestGrpcMarshaller.SignerDecodeRequestMarshaller,
                SignerDecodeResponseGrpcMarshaller.SignerDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAccountFlags</summary>
        public static readonly Method<Stellar.AccountFlagsEncodeRequest, Stellar.AccountFlagsEncodeResponse> EncodeAccountFlags =
            new Method<Stellar.AccountFlagsEncodeRequest, Stellar.AccountFlagsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAccountFlags",
                AccountFlagsEncodeRequestGrpcMarshaller.AccountFlagsEncodeRequestMarshaller,
                AccountFlagsEncodeResponseGrpcMarshaller.AccountFlagsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAccountFlags</summary>
        public static readonly Method<Stellar.AccountFlagsDecodeRequest, Stellar.AccountFlagsDecodeResponse> DecodeAccountFlags =
            new Method<Stellar.AccountFlagsDecodeRequest, Stellar.AccountFlagsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAccountFlags",
                AccountFlagsDecodeRequestGrpcMarshaller.AccountFlagsDecodeRequestMarshaller,
                AccountFlagsDecodeResponseGrpcMarshaller.AccountFlagsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSponsorshipDescriptor</summary>
        public static readonly Method<Stellar.SponsorshipDescriptorEncodeRequest, Stellar.SponsorshipDescriptorEncodeResponse> EncodeSponsorshipDescriptor =
            new Method<Stellar.SponsorshipDescriptorEncodeRequest, Stellar.SponsorshipDescriptorEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSponsorshipDescriptor",
                SponsorshipDescriptorEncodeRequestGrpcMarshaller.SponsorshipDescriptorEncodeRequestMarshaller,
                SponsorshipDescriptorEncodeResponseGrpcMarshaller.SponsorshipDescriptorEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSponsorshipDescriptor</summary>
        public static readonly Method<Stellar.SponsorshipDescriptorDecodeRequest, Stellar.SponsorshipDescriptorDecodeResponse> DecodeSponsorshipDescriptor =
            new Method<Stellar.SponsorshipDescriptorDecodeRequest, Stellar.SponsorshipDescriptorDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSponsorshipDescriptor",
                SponsorshipDescriptorDecodeRequestGrpcMarshaller.SponsorshipDescriptorDecodeRequestMarshaller,
                SponsorshipDescriptorDecodeResponseGrpcMarshaller.SponsorshipDescriptorDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAccountEntryExtensionV3</summary>
        public static readonly Method<Stellar.AccountEntryExtensionV3EncodeRequest, Stellar.AccountEntryExtensionV3EncodeResponse> EncodeAccountEntryExtensionV3 =
            new Method<Stellar.AccountEntryExtensionV3EncodeRequest, Stellar.AccountEntryExtensionV3EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAccountEntryExtensionV3",
                AccountEntryExtensionV3EncodeRequestGrpcMarshaller.AccountEntryExtensionV3EncodeRequestMarshaller,
                AccountEntryExtensionV3EncodeResponseGrpcMarshaller.AccountEntryExtensionV3EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAccountEntryExtensionV3</summary>
        public static readonly Method<Stellar.AccountEntryExtensionV3DecodeRequest, Stellar.AccountEntryExtensionV3DecodeResponse> DecodeAccountEntryExtensionV3 =
            new Method<Stellar.AccountEntryExtensionV3DecodeRequest, Stellar.AccountEntryExtensionV3DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAccountEntryExtensionV3",
                AccountEntryExtensionV3DecodeRequestGrpcMarshaller.AccountEntryExtensionV3DecodeRequestMarshaller,
                AccountEntryExtensionV3DecodeResponseGrpcMarshaller.AccountEntryExtensionV3DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAccountEntryExtensionV2</summary>
        public static readonly Method<Stellar.AccountEntryExtensionV2EncodeRequest, Stellar.AccountEntryExtensionV2EncodeResponse> EncodeAccountEntryExtensionV2 =
            new Method<Stellar.AccountEntryExtensionV2EncodeRequest, Stellar.AccountEntryExtensionV2EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAccountEntryExtensionV2",
                AccountEntryExtensionV2EncodeRequestGrpcMarshaller.AccountEntryExtensionV2EncodeRequestMarshaller,
                AccountEntryExtensionV2EncodeResponseGrpcMarshaller.AccountEntryExtensionV2EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAccountEntryExtensionV2</summary>
        public static readonly Method<Stellar.AccountEntryExtensionV2DecodeRequest, Stellar.AccountEntryExtensionV2DecodeResponse> DecodeAccountEntryExtensionV2 =
            new Method<Stellar.AccountEntryExtensionV2DecodeRequest, Stellar.AccountEntryExtensionV2DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAccountEntryExtensionV2",
                AccountEntryExtensionV2DecodeRequestGrpcMarshaller.AccountEntryExtensionV2DecodeRequestMarshaller,
                AccountEntryExtensionV2DecodeResponseGrpcMarshaller.AccountEntryExtensionV2DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAccountEntryExtensionV1</summary>
        public static readonly Method<Stellar.AccountEntryExtensionV1EncodeRequest, Stellar.AccountEntryExtensionV1EncodeResponse> EncodeAccountEntryExtensionV1 =
            new Method<Stellar.AccountEntryExtensionV1EncodeRequest, Stellar.AccountEntryExtensionV1EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAccountEntryExtensionV1",
                AccountEntryExtensionV1EncodeRequestGrpcMarshaller.AccountEntryExtensionV1EncodeRequestMarshaller,
                AccountEntryExtensionV1EncodeResponseGrpcMarshaller.AccountEntryExtensionV1EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAccountEntryExtensionV1</summary>
        public static readonly Method<Stellar.AccountEntryExtensionV1DecodeRequest, Stellar.AccountEntryExtensionV1DecodeResponse> DecodeAccountEntryExtensionV1 =
            new Method<Stellar.AccountEntryExtensionV1DecodeRequest, Stellar.AccountEntryExtensionV1DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAccountEntryExtensionV1",
                AccountEntryExtensionV1DecodeRequestGrpcMarshaller.AccountEntryExtensionV1DecodeRequestMarshaller,
                AccountEntryExtensionV1DecodeResponseGrpcMarshaller.AccountEntryExtensionV1DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAccountEntry</summary>
        public static readonly Method<Stellar.AccountEntryEncodeRequest, Stellar.AccountEntryEncodeResponse> EncodeAccountEntry =
            new Method<Stellar.AccountEntryEncodeRequest, Stellar.AccountEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAccountEntry",
                AccountEntryEncodeRequestGrpcMarshaller.AccountEntryEncodeRequestMarshaller,
                AccountEntryEncodeResponseGrpcMarshaller.AccountEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAccountEntry</summary>
        public static readonly Method<Stellar.AccountEntryDecodeRequest, Stellar.AccountEntryDecodeResponse> DecodeAccountEntry =
            new Method<Stellar.AccountEntryDecodeRequest, Stellar.AccountEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAccountEntry",
                AccountEntryDecodeRequestGrpcMarshaller.AccountEntryDecodeRequestMarshaller,
                AccountEntryDecodeResponseGrpcMarshaller.AccountEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTrustLineFlags</summary>
        public static readonly Method<Stellar.TrustLineFlagsEncodeRequest, Stellar.TrustLineFlagsEncodeResponse> EncodeTrustLineFlags =
            new Method<Stellar.TrustLineFlagsEncodeRequest, Stellar.TrustLineFlagsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTrustLineFlags",
                TrustLineFlagsEncodeRequestGrpcMarshaller.TrustLineFlagsEncodeRequestMarshaller,
                TrustLineFlagsEncodeResponseGrpcMarshaller.TrustLineFlagsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTrustLineFlags</summary>
        public static readonly Method<Stellar.TrustLineFlagsDecodeRequest, Stellar.TrustLineFlagsDecodeResponse> DecodeTrustLineFlags =
            new Method<Stellar.TrustLineFlagsDecodeRequest, Stellar.TrustLineFlagsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTrustLineFlags",
                TrustLineFlagsDecodeRequestGrpcMarshaller.TrustLineFlagsDecodeRequestMarshaller,
                TrustLineFlagsDecodeResponseGrpcMarshaller.TrustLineFlagsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLiquidityPoolType</summary>
        public static readonly Method<Stellar.LiquidityPoolTypeEncodeRequest, Stellar.LiquidityPoolTypeEncodeResponse> EncodeLiquidityPoolType =
            new Method<Stellar.LiquidityPoolTypeEncodeRequest, Stellar.LiquidityPoolTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLiquidityPoolType",
                LiquidityPoolTypeEncodeRequestGrpcMarshaller.LiquidityPoolTypeEncodeRequestMarshaller,
                LiquidityPoolTypeEncodeResponseGrpcMarshaller.LiquidityPoolTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLiquidityPoolType</summary>
        public static readonly Method<Stellar.LiquidityPoolTypeDecodeRequest, Stellar.LiquidityPoolTypeDecodeResponse> DecodeLiquidityPoolType =
            new Method<Stellar.LiquidityPoolTypeDecodeRequest, Stellar.LiquidityPoolTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLiquidityPoolType",
                LiquidityPoolTypeDecodeRequestGrpcMarshaller.LiquidityPoolTypeDecodeRequestMarshaller,
                LiquidityPoolTypeDecodeResponseGrpcMarshaller.LiquidityPoolTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTrustLineAsset</summary>
        public static readonly Method<Stellar.TrustLineAssetEncodeRequest, Stellar.TrustLineAssetEncodeResponse> EncodeTrustLineAsset =
            new Method<Stellar.TrustLineAssetEncodeRequest, Stellar.TrustLineAssetEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTrustLineAsset",
                TrustLineAssetEncodeRequestGrpcMarshaller.TrustLineAssetEncodeRequestMarshaller,
                TrustLineAssetEncodeResponseGrpcMarshaller.TrustLineAssetEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTrustLineAsset</summary>
        public static readonly Method<Stellar.TrustLineAssetDecodeRequest, Stellar.TrustLineAssetDecodeResponse> DecodeTrustLineAsset =
            new Method<Stellar.TrustLineAssetDecodeRequest, Stellar.TrustLineAssetDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTrustLineAsset",
                TrustLineAssetDecodeRequestGrpcMarshaller.TrustLineAssetDecodeRequestMarshaller,
                TrustLineAssetDecodeResponseGrpcMarshaller.TrustLineAssetDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTrustLineEntryExtensionV2</summary>
        public static readonly Method<Stellar.TrustLineEntryExtensionV2EncodeRequest, Stellar.TrustLineEntryExtensionV2EncodeResponse> EncodeTrustLineEntryExtensionV2 =
            new Method<Stellar.TrustLineEntryExtensionV2EncodeRequest, Stellar.TrustLineEntryExtensionV2EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTrustLineEntryExtensionV2",
                TrustLineEntryExtensionV2EncodeRequestGrpcMarshaller.TrustLineEntryExtensionV2EncodeRequestMarshaller,
                TrustLineEntryExtensionV2EncodeResponseGrpcMarshaller.TrustLineEntryExtensionV2EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTrustLineEntryExtensionV2</summary>
        public static readonly Method<Stellar.TrustLineEntryExtensionV2DecodeRequest, Stellar.TrustLineEntryExtensionV2DecodeResponse> DecodeTrustLineEntryExtensionV2 =
            new Method<Stellar.TrustLineEntryExtensionV2DecodeRequest, Stellar.TrustLineEntryExtensionV2DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTrustLineEntryExtensionV2",
                TrustLineEntryExtensionV2DecodeRequestGrpcMarshaller.TrustLineEntryExtensionV2DecodeRequestMarshaller,
                TrustLineEntryExtensionV2DecodeResponseGrpcMarshaller.TrustLineEntryExtensionV2DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTrustLineEntry</summary>
        public static readonly Method<Stellar.TrustLineEntryEncodeRequest, Stellar.TrustLineEntryEncodeResponse> EncodeTrustLineEntry =
            new Method<Stellar.TrustLineEntryEncodeRequest, Stellar.TrustLineEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTrustLineEntry",
                TrustLineEntryEncodeRequestGrpcMarshaller.TrustLineEntryEncodeRequestMarshaller,
                TrustLineEntryEncodeResponseGrpcMarshaller.TrustLineEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTrustLineEntry</summary>
        public static readonly Method<Stellar.TrustLineEntryDecodeRequest, Stellar.TrustLineEntryDecodeResponse> DecodeTrustLineEntry =
            new Method<Stellar.TrustLineEntryDecodeRequest, Stellar.TrustLineEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTrustLineEntry",
                TrustLineEntryDecodeRequestGrpcMarshaller.TrustLineEntryDecodeRequestMarshaller,
                TrustLineEntryDecodeResponseGrpcMarshaller.TrustLineEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeOfferEntryFlags</summary>
        public static readonly Method<Stellar.OfferEntryFlagsEncodeRequest, Stellar.OfferEntryFlagsEncodeResponse> EncodeOfferEntryFlags =
            new Method<Stellar.OfferEntryFlagsEncodeRequest, Stellar.OfferEntryFlagsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeOfferEntryFlags",
                OfferEntryFlagsEncodeRequestGrpcMarshaller.OfferEntryFlagsEncodeRequestMarshaller,
                OfferEntryFlagsEncodeResponseGrpcMarshaller.OfferEntryFlagsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeOfferEntryFlags</summary>
        public static readonly Method<Stellar.OfferEntryFlagsDecodeRequest, Stellar.OfferEntryFlagsDecodeResponse> DecodeOfferEntryFlags =
            new Method<Stellar.OfferEntryFlagsDecodeRequest, Stellar.OfferEntryFlagsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeOfferEntryFlags",
                OfferEntryFlagsDecodeRequestGrpcMarshaller.OfferEntryFlagsDecodeRequestMarshaller,
                OfferEntryFlagsDecodeResponseGrpcMarshaller.OfferEntryFlagsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeOfferEntry</summary>
        public static readonly Method<Stellar.OfferEntryEncodeRequest, Stellar.OfferEntryEncodeResponse> EncodeOfferEntry =
            new Method<Stellar.OfferEntryEncodeRequest, Stellar.OfferEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeOfferEntry",
                OfferEntryEncodeRequestGrpcMarshaller.OfferEntryEncodeRequestMarshaller,
                OfferEntryEncodeResponseGrpcMarshaller.OfferEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeOfferEntry</summary>
        public static readonly Method<Stellar.OfferEntryDecodeRequest, Stellar.OfferEntryDecodeResponse> DecodeOfferEntry =
            new Method<Stellar.OfferEntryDecodeRequest, Stellar.OfferEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeOfferEntry",
                OfferEntryDecodeRequestGrpcMarshaller.OfferEntryDecodeRequestMarshaller,
                OfferEntryDecodeResponseGrpcMarshaller.OfferEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeDataEntry</summary>
        public static readonly Method<Stellar.DataEntryEncodeRequest, Stellar.DataEntryEncodeResponse> EncodeDataEntry =
            new Method<Stellar.DataEntryEncodeRequest, Stellar.DataEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeDataEntry",
                DataEntryEncodeRequestGrpcMarshaller.DataEntryEncodeRequestMarshaller,
                DataEntryEncodeResponseGrpcMarshaller.DataEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeDataEntry</summary>
        public static readonly Method<Stellar.DataEntryDecodeRequest, Stellar.DataEntryDecodeResponse> DecodeDataEntry =
            new Method<Stellar.DataEntryDecodeRequest, Stellar.DataEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeDataEntry",
                DataEntryDecodeRequestGrpcMarshaller.DataEntryDecodeRequestMarshaller,
                DataEntryDecodeResponseGrpcMarshaller.DataEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimPredicateType</summary>
        public static readonly Method<Stellar.ClaimPredicateTypeEncodeRequest, Stellar.ClaimPredicateTypeEncodeResponse> EncodeClaimPredicateType =
            new Method<Stellar.ClaimPredicateTypeEncodeRequest, Stellar.ClaimPredicateTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimPredicateType",
                ClaimPredicateTypeEncodeRequestGrpcMarshaller.ClaimPredicateTypeEncodeRequestMarshaller,
                ClaimPredicateTypeEncodeResponseGrpcMarshaller.ClaimPredicateTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimPredicateType</summary>
        public static readonly Method<Stellar.ClaimPredicateTypeDecodeRequest, Stellar.ClaimPredicateTypeDecodeResponse> DecodeClaimPredicateType =
            new Method<Stellar.ClaimPredicateTypeDecodeRequest, Stellar.ClaimPredicateTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimPredicateType",
                ClaimPredicateTypeDecodeRequestGrpcMarshaller.ClaimPredicateTypeDecodeRequestMarshaller,
                ClaimPredicateTypeDecodeResponseGrpcMarshaller.ClaimPredicateTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimPredicate</summary>
        public static readonly Method<Stellar.ClaimPredicateEncodeRequest, Stellar.ClaimPredicateEncodeResponse> EncodeClaimPredicate =
            new Method<Stellar.ClaimPredicateEncodeRequest, Stellar.ClaimPredicateEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimPredicate",
                ClaimPredicateEncodeRequestGrpcMarshaller.ClaimPredicateEncodeRequestMarshaller,
                ClaimPredicateEncodeResponseGrpcMarshaller.ClaimPredicateEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimPredicate</summary>
        public static readonly Method<Stellar.ClaimPredicateDecodeRequest, Stellar.ClaimPredicateDecodeResponse> DecodeClaimPredicate =
            new Method<Stellar.ClaimPredicateDecodeRequest, Stellar.ClaimPredicateDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimPredicate",
                ClaimPredicateDecodeRequestGrpcMarshaller.ClaimPredicateDecodeRequestMarshaller,
                ClaimPredicateDecodeResponseGrpcMarshaller.ClaimPredicateDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimantType</summary>
        public static readonly Method<Stellar.ClaimantTypeEncodeRequest, Stellar.ClaimantTypeEncodeResponse> EncodeClaimantType =
            new Method<Stellar.ClaimantTypeEncodeRequest, Stellar.ClaimantTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimantType",
                ClaimantTypeEncodeRequestGrpcMarshaller.ClaimantTypeEncodeRequestMarshaller,
                ClaimantTypeEncodeResponseGrpcMarshaller.ClaimantTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimantType</summary>
        public static readonly Method<Stellar.ClaimantTypeDecodeRequest, Stellar.ClaimantTypeDecodeResponse> DecodeClaimantType =
            new Method<Stellar.ClaimantTypeDecodeRequest, Stellar.ClaimantTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimantType",
                ClaimantTypeDecodeRequestGrpcMarshaller.ClaimantTypeDecodeRequestMarshaller,
                ClaimantTypeDecodeResponseGrpcMarshaller.ClaimantTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimant</summary>
        public static readonly Method<Stellar.ClaimantEncodeRequest, Stellar.ClaimantEncodeResponse> EncodeClaimant =
            new Method<Stellar.ClaimantEncodeRequest, Stellar.ClaimantEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimant",
                ClaimantEncodeRequestGrpcMarshaller.ClaimantEncodeRequestMarshaller,
                ClaimantEncodeResponseGrpcMarshaller.ClaimantEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimant</summary>
        public static readonly Method<Stellar.ClaimantDecodeRequest, Stellar.ClaimantDecodeResponse> DecodeClaimant =
            new Method<Stellar.ClaimantDecodeRequest, Stellar.ClaimantDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimant",
                ClaimantDecodeRequestGrpcMarshaller.ClaimantDecodeRequestMarshaller,
                ClaimantDecodeResponseGrpcMarshaller.ClaimantDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimableBalanceIDType</summary>
        public static readonly Method<Stellar.ClaimableBalanceIDTypeEncodeRequest, Stellar.ClaimableBalanceIDTypeEncodeResponse> EncodeClaimableBalanceIDType =
            new Method<Stellar.ClaimableBalanceIDTypeEncodeRequest, Stellar.ClaimableBalanceIDTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimableBalanceIDType",
                ClaimableBalanceIDTypeEncodeRequestGrpcMarshaller.ClaimableBalanceIDTypeEncodeRequestMarshaller,
                ClaimableBalanceIDTypeEncodeResponseGrpcMarshaller.ClaimableBalanceIDTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimableBalanceIDType</summary>
        public static readonly Method<Stellar.ClaimableBalanceIDTypeDecodeRequest, Stellar.ClaimableBalanceIDTypeDecodeResponse> DecodeClaimableBalanceIDType =
            new Method<Stellar.ClaimableBalanceIDTypeDecodeRequest, Stellar.ClaimableBalanceIDTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimableBalanceIDType",
                ClaimableBalanceIDTypeDecodeRequestGrpcMarshaller.ClaimableBalanceIDTypeDecodeRequestMarshaller,
                ClaimableBalanceIDTypeDecodeResponseGrpcMarshaller.ClaimableBalanceIDTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimableBalanceID</summary>
        public static readonly Method<Stellar.ClaimableBalanceIDEncodeRequest, Stellar.ClaimableBalanceIDEncodeResponse> EncodeClaimableBalanceID =
            new Method<Stellar.ClaimableBalanceIDEncodeRequest, Stellar.ClaimableBalanceIDEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimableBalanceID",
                ClaimableBalanceIDEncodeRequestGrpcMarshaller.ClaimableBalanceIDEncodeRequestMarshaller,
                ClaimableBalanceIDEncodeResponseGrpcMarshaller.ClaimableBalanceIDEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimableBalanceID</summary>
        public static readonly Method<Stellar.ClaimableBalanceIDDecodeRequest, Stellar.ClaimableBalanceIDDecodeResponse> DecodeClaimableBalanceID =
            new Method<Stellar.ClaimableBalanceIDDecodeRequest, Stellar.ClaimableBalanceIDDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimableBalanceID",
                ClaimableBalanceIDDecodeRequestGrpcMarshaller.ClaimableBalanceIDDecodeRequestMarshaller,
                ClaimableBalanceIDDecodeResponseGrpcMarshaller.ClaimableBalanceIDDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimableBalanceFlags</summary>
        public static readonly Method<Stellar.ClaimableBalanceFlagsEncodeRequest, Stellar.ClaimableBalanceFlagsEncodeResponse> EncodeClaimableBalanceFlags =
            new Method<Stellar.ClaimableBalanceFlagsEncodeRequest, Stellar.ClaimableBalanceFlagsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimableBalanceFlags",
                ClaimableBalanceFlagsEncodeRequestGrpcMarshaller.ClaimableBalanceFlagsEncodeRequestMarshaller,
                ClaimableBalanceFlagsEncodeResponseGrpcMarshaller.ClaimableBalanceFlagsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimableBalanceFlags</summary>
        public static readonly Method<Stellar.ClaimableBalanceFlagsDecodeRequest, Stellar.ClaimableBalanceFlagsDecodeResponse> DecodeClaimableBalanceFlags =
            new Method<Stellar.ClaimableBalanceFlagsDecodeRequest, Stellar.ClaimableBalanceFlagsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimableBalanceFlags",
                ClaimableBalanceFlagsDecodeRequestGrpcMarshaller.ClaimableBalanceFlagsDecodeRequestMarshaller,
                ClaimableBalanceFlagsDecodeResponseGrpcMarshaller.ClaimableBalanceFlagsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimableBalanceEntryExtensionV1</summary>
        public static readonly Method<Stellar.ClaimableBalanceEntryExtensionV1EncodeRequest, Stellar.ClaimableBalanceEntryExtensionV1EncodeResponse> EncodeClaimableBalanceEntryExtensionV1 =
            new Method<Stellar.ClaimableBalanceEntryExtensionV1EncodeRequest, Stellar.ClaimableBalanceEntryExtensionV1EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimableBalanceEntryExtensionV1",
                ClaimableBalanceEntryExtensionV1EncodeRequestGrpcMarshaller.ClaimableBalanceEntryExtensionV1EncodeRequestMarshaller,
                ClaimableBalanceEntryExtensionV1EncodeResponseGrpcMarshaller.ClaimableBalanceEntryExtensionV1EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimableBalanceEntryExtensionV1</summary>
        public static readonly Method<Stellar.ClaimableBalanceEntryExtensionV1DecodeRequest, Stellar.ClaimableBalanceEntryExtensionV1DecodeResponse> DecodeClaimableBalanceEntryExtensionV1 =
            new Method<Stellar.ClaimableBalanceEntryExtensionV1DecodeRequest, Stellar.ClaimableBalanceEntryExtensionV1DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimableBalanceEntryExtensionV1",
                ClaimableBalanceEntryExtensionV1DecodeRequestGrpcMarshaller.ClaimableBalanceEntryExtensionV1DecodeRequestMarshaller,
                ClaimableBalanceEntryExtensionV1DecodeResponseGrpcMarshaller.ClaimableBalanceEntryExtensionV1DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimableBalanceEntry</summary>
        public static readonly Method<Stellar.ClaimableBalanceEntryEncodeRequest, Stellar.ClaimableBalanceEntryEncodeResponse> EncodeClaimableBalanceEntry =
            new Method<Stellar.ClaimableBalanceEntryEncodeRequest, Stellar.ClaimableBalanceEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimableBalanceEntry",
                ClaimableBalanceEntryEncodeRequestGrpcMarshaller.ClaimableBalanceEntryEncodeRequestMarshaller,
                ClaimableBalanceEntryEncodeResponseGrpcMarshaller.ClaimableBalanceEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimableBalanceEntry</summary>
        public static readonly Method<Stellar.ClaimableBalanceEntryDecodeRequest, Stellar.ClaimableBalanceEntryDecodeResponse> DecodeClaimableBalanceEntry =
            new Method<Stellar.ClaimableBalanceEntryDecodeRequest, Stellar.ClaimableBalanceEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimableBalanceEntry",
                ClaimableBalanceEntryDecodeRequestGrpcMarshaller.ClaimableBalanceEntryDecodeRequestMarshaller,
                ClaimableBalanceEntryDecodeResponseGrpcMarshaller.ClaimableBalanceEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLiquidityPoolConstantProductParameters</summary>
        public static readonly Method<Stellar.LiquidityPoolConstantProductParametersEncodeRequest, Stellar.LiquidityPoolConstantProductParametersEncodeResponse> EncodeLiquidityPoolConstantProductParameters =
            new Method<Stellar.LiquidityPoolConstantProductParametersEncodeRequest, Stellar.LiquidityPoolConstantProductParametersEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLiquidityPoolConstantProductParameters",
                LiquidityPoolConstantProductParametersEncodeRequestGrpcMarshaller.LiquidityPoolConstantProductParametersEncodeRequestMarshaller,
                LiquidityPoolConstantProductParametersEncodeResponseGrpcMarshaller.LiquidityPoolConstantProductParametersEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLiquidityPoolConstantProductParameters</summary>
        public static readonly Method<Stellar.LiquidityPoolConstantProductParametersDecodeRequest, Stellar.LiquidityPoolConstantProductParametersDecodeResponse> DecodeLiquidityPoolConstantProductParameters =
            new Method<Stellar.LiquidityPoolConstantProductParametersDecodeRequest, Stellar.LiquidityPoolConstantProductParametersDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLiquidityPoolConstantProductParameters",
                LiquidityPoolConstantProductParametersDecodeRequestGrpcMarshaller.LiquidityPoolConstantProductParametersDecodeRequestMarshaller,
                LiquidityPoolConstantProductParametersDecodeResponseGrpcMarshaller.LiquidityPoolConstantProductParametersDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLiquidityPoolEntry</summary>
        public static readonly Method<Stellar.LiquidityPoolEntryEncodeRequest, Stellar.LiquidityPoolEntryEncodeResponse> EncodeLiquidityPoolEntry =
            new Method<Stellar.LiquidityPoolEntryEncodeRequest, Stellar.LiquidityPoolEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLiquidityPoolEntry",
                LiquidityPoolEntryEncodeRequestGrpcMarshaller.LiquidityPoolEntryEncodeRequestMarshaller,
                LiquidityPoolEntryEncodeResponseGrpcMarshaller.LiquidityPoolEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLiquidityPoolEntry</summary>
        public static readonly Method<Stellar.LiquidityPoolEntryDecodeRequest, Stellar.LiquidityPoolEntryDecodeResponse> DecodeLiquidityPoolEntry =
            new Method<Stellar.LiquidityPoolEntryDecodeRequest, Stellar.LiquidityPoolEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLiquidityPoolEntry",
                LiquidityPoolEntryDecodeRequestGrpcMarshaller.LiquidityPoolEntryDecodeRequestMarshaller,
                LiquidityPoolEntryDecodeResponseGrpcMarshaller.LiquidityPoolEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeContractDataDurability</summary>
        public static readonly Method<Stellar.ContractDataDurabilityEncodeRequest, Stellar.ContractDataDurabilityEncodeResponse> EncodeContractDataDurability =
            new Method<Stellar.ContractDataDurabilityEncodeRequest, Stellar.ContractDataDurabilityEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeContractDataDurability",
                ContractDataDurabilityEncodeRequestGrpcMarshaller.ContractDataDurabilityEncodeRequestMarshaller,
                ContractDataDurabilityEncodeResponseGrpcMarshaller.ContractDataDurabilityEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeContractDataDurability</summary>
        public static readonly Method<Stellar.ContractDataDurabilityDecodeRequest, Stellar.ContractDataDurabilityDecodeResponse> DecodeContractDataDurability =
            new Method<Stellar.ContractDataDurabilityDecodeRequest, Stellar.ContractDataDurabilityDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeContractDataDurability",
                ContractDataDurabilityDecodeRequestGrpcMarshaller.ContractDataDurabilityDecodeRequestMarshaller,
                ContractDataDurabilityDecodeResponseGrpcMarshaller.ContractDataDurabilityDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeContractDataEntry</summary>
        public static readonly Method<Stellar.ContractDataEntryEncodeRequest, Stellar.ContractDataEntryEncodeResponse> EncodeContractDataEntry =
            new Method<Stellar.ContractDataEntryEncodeRequest, Stellar.ContractDataEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeContractDataEntry",
                ContractDataEntryEncodeRequestGrpcMarshaller.ContractDataEntryEncodeRequestMarshaller,
                ContractDataEntryEncodeResponseGrpcMarshaller.ContractDataEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeContractDataEntry</summary>
        public static readonly Method<Stellar.ContractDataEntryDecodeRequest, Stellar.ContractDataEntryDecodeResponse> DecodeContractDataEntry =
            new Method<Stellar.ContractDataEntryDecodeRequest, Stellar.ContractDataEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeContractDataEntry",
                ContractDataEntryDecodeRequestGrpcMarshaller.ContractDataEntryDecodeRequestMarshaller,
                ContractDataEntryDecodeResponseGrpcMarshaller.ContractDataEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeContractCodeCostInputs</summary>
        public static readonly Method<Stellar.ContractCodeCostInputsEncodeRequest, Stellar.ContractCodeCostInputsEncodeResponse> EncodeContractCodeCostInputs =
            new Method<Stellar.ContractCodeCostInputsEncodeRequest, Stellar.ContractCodeCostInputsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeContractCodeCostInputs",
                ContractCodeCostInputsEncodeRequestGrpcMarshaller.ContractCodeCostInputsEncodeRequestMarshaller,
                ContractCodeCostInputsEncodeResponseGrpcMarshaller.ContractCodeCostInputsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeContractCodeCostInputs</summary>
        public static readonly Method<Stellar.ContractCodeCostInputsDecodeRequest, Stellar.ContractCodeCostInputsDecodeResponse> DecodeContractCodeCostInputs =
            new Method<Stellar.ContractCodeCostInputsDecodeRequest, Stellar.ContractCodeCostInputsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeContractCodeCostInputs",
                ContractCodeCostInputsDecodeRequestGrpcMarshaller.ContractCodeCostInputsDecodeRequestMarshaller,
                ContractCodeCostInputsDecodeResponseGrpcMarshaller.ContractCodeCostInputsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeContractCodeEntry</summary>
        public static readonly Method<Stellar.ContractCodeEntryEncodeRequest, Stellar.ContractCodeEntryEncodeResponse> EncodeContractCodeEntry =
            new Method<Stellar.ContractCodeEntryEncodeRequest, Stellar.ContractCodeEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeContractCodeEntry",
                ContractCodeEntryEncodeRequestGrpcMarshaller.ContractCodeEntryEncodeRequestMarshaller,
                ContractCodeEntryEncodeResponseGrpcMarshaller.ContractCodeEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeContractCodeEntry</summary>
        public static readonly Method<Stellar.ContractCodeEntryDecodeRequest, Stellar.ContractCodeEntryDecodeResponse> DecodeContractCodeEntry =
            new Method<Stellar.ContractCodeEntryDecodeRequest, Stellar.ContractCodeEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeContractCodeEntry",
                ContractCodeEntryDecodeRequestGrpcMarshaller.ContractCodeEntryDecodeRequestMarshaller,
                ContractCodeEntryDecodeResponseGrpcMarshaller.ContractCodeEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTTLEntry</summary>
        public static readonly Method<Stellar.TTLEntryEncodeRequest, Stellar.TTLEntryEncodeResponse> EncodeTTLEntry =
            new Method<Stellar.TTLEntryEncodeRequest, Stellar.TTLEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTTLEntry",
                TTLEntryEncodeRequestGrpcMarshaller.TTLEntryEncodeRequestMarshaller,
                TTLEntryEncodeResponseGrpcMarshaller.TTLEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTTLEntry</summary>
        public static readonly Method<Stellar.TTLEntryDecodeRequest, Stellar.TTLEntryDecodeResponse> DecodeTTLEntry =
            new Method<Stellar.TTLEntryDecodeRequest, Stellar.TTLEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTTLEntry",
                TTLEntryDecodeRequestGrpcMarshaller.TTLEntryDecodeRequestMarshaller,
                TTLEntryDecodeResponseGrpcMarshaller.TTLEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerEntryExtensionV1</summary>
        public static readonly Method<Stellar.LedgerEntryExtensionV1EncodeRequest, Stellar.LedgerEntryExtensionV1EncodeResponse> EncodeLedgerEntryExtensionV1 =
            new Method<Stellar.LedgerEntryExtensionV1EncodeRequest, Stellar.LedgerEntryExtensionV1EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerEntryExtensionV1",
                LedgerEntryExtensionV1EncodeRequestGrpcMarshaller.LedgerEntryExtensionV1EncodeRequestMarshaller,
                LedgerEntryExtensionV1EncodeResponseGrpcMarshaller.LedgerEntryExtensionV1EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerEntryExtensionV1</summary>
        public static readonly Method<Stellar.LedgerEntryExtensionV1DecodeRequest, Stellar.LedgerEntryExtensionV1DecodeResponse> DecodeLedgerEntryExtensionV1 =
            new Method<Stellar.LedgerEntryExtensionV1DecodeRequest, Stellar.LedgerEntryExtensionV1DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerEntryExtensionV1",
                LedgerEntryExtensionV1DecodeRequestGrpcMarshaller.LedgerEntryExtensionV1DecodeRequestMarshaller,
                LedgerEntryExtensionV1DecodeResponseGrpcMarshaller.LedgerEntryExtensionV1DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerEntry</summary>
        public static readonly Method<Stellar.LedgerEntryEncodeRequest, Stellar.LedgerEntryEncodeResponse> EncodeLedgerEntry =
            new Method<Stellar.LedgerEntryEncodeRequest, Stellar.LedgerEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerEntry",
                LedgerEntryEncodeRequestGrpcMarshaller.LedgerEntryEncodeRequestMarshaller,
                LedgerEntryEncodeResponseGrpcMarshaller.LedgerEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerEntry</summary>
        public static readonly Method<Stellar.LedgerEntryDecodeRequest, Stellar.LedgerEntryDecodeResponse> DecodeLedgerEntry =
            new Method<Stellar.LedgerEntryDecodeRequest, Stellar.LedgerEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerEntry",
                LedgerEntryDecodeRequestGrpcMarshaller.LedgerEntryDecodeRequestMarshaller,
                LedgerEntryDecodeResponseGrpcMarshaller.LedgerEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerKey</summary>
        public static readonly Method<Stellar.LedgerKeyEncodeRequest, Stellar.LedgerKeyEncodeResponse> EncodeLedgerKey =
            new Method<Stellar.LedgerKeyEncodeRequest, Stellar.LedgerKeyEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerKey",
                LedgerKeyEncodeRequestGrpcMarshaller.LedgerKeyEncodeRequestMarshaller,
                LedgerKeyEncodeResponseGrpcMarshaller.LedgerKeyEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerKey</summary>
        public static readonly Method<Stellar.LedgerKeyDecodeRequest, Stellar.LedgerKeyDecodeResponse> DecodeLedgerKey =
            new Method<Stellar.LedgerKeyDecodeRequest, Stellar.LedgerKeyDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerKey",
                LedgerKeyDecodeRequestGrpcMarshaller.LedgerKeyDecodeRequestMarshaller,
                LedgerKeyDecodeResponseGrpcMarshaller.LedgerKeyDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeEnvelopeType</summary>
        public static readonly Method<Stellar.EnvelopeTypeEncodeRequest, Stellar.EnvelopeTypeEncodeResponse> EncodeEnvelopeType =
            new Method<Stellar.EnvelopeTypeEncodeRequest, Stellar.EnvelopeTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeEnvelopeType",
                EnvelopeTypeEncodeRequestGrpcMarshaller.EnvelopeTypeEncodeRequestMarshaller,
                EnvelopeTypeEncodeResponseGrpcMarshaller.EnvelopeTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeEnvelopeType</summary>
        public static readonly Method<Stellar.EnvelopeTypeDecodeRequest, Stellar.EnvelopeTypeDecodeResponse> DecodeEnvelopeType =
            new Method<Stellar.EnvelopeTypeDecodeRequest, Stellar.EnvelopeTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeEnvelopeType",
                EnvelopeTypeDecodeRequestGrpcMarshaller.EnvelopeTypeDecodeRequestMarshaller,
                EnvelopeTypeDecodeResponseGrpcMarshaller.EnvelopeTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeBucketListType</summary>
        public static readonly Method<Stellar.BucketListTypeEncodeRequest, Stellar.BucketListTypeEncodeResponse> EncodeBucketListType =
            new Method<Stellar.BucketListTypeEncodeRequest, Stellar.BucketListTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeBucketListType",
                BucketListTypeEncodeRequestGrpcMarshaller.BucketListTypeEncodeRequestMarshaller,
                BucketListTypeEncodeResponseGrpcMarshaller.BucketListTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeBucketListType</summary>
        public static readonly Method<Stellar.BucketListTypeDecodeRequest, Stellar.BucketListTypeDecodeResponse> DecodeBucketListType =
            new Method<Stellar.BucketListTypeDecodeRequest, Stellar.BucketListTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeBucketListType",
                BucketListTypeDecodeRequestGrpcMarshaller.BucketListTypeDecodeRequestMarshaller,
                BucketListTypeDecodeResponseGrpcMarshaller.BucketListTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeBucketEntryType</summary>
        public static readonly Method<Stellar.BucketEntryTypeEncodeRequest, Stellar.BucketEntryTypeEncodeResponse> EncodeBucketEntryType =
            new Method<Stellar.BucketEntryTypeEncodeRequest, Stellar.BucketEntryTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeBucketEntryType",
                BucketEntryTypeEncodeRequestGrpcMarshaller.BucketEntryTypeEncodeRequestMarshaller,
                BucketEntryTypeEncodeResponseGrpcMarshaller.BucketEntryTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeBucketEntryType</summary>
        public static readonly Method<Stellar.BucketEntryTypeDecodeRequest, Stellar.BucketEntryTypeDecodeResponse> DecodeBucketEntryType =
            new Method<Stellar.BucketEntryTypeDecodeRequest, Stellar.BucketEntryTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeBucketEntryType",
                BucketEntryTypeDecodeRequestGrpcMarshaller.BucketEntryTypeDecodeRequestMarshaller,
                BucketEntryTypeDecodeResponseGrpcMarshaller.BucketEntryTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeHotArchiveBucketEntryType</summary>
        public static readonly Method<Stellar.HotArchiveBucketEntryTypeEncodeRequest, Stellar.HotArchiveBucketEntryTypeEncodeResponse> EncodeHotArchiveBucketEntryType =
            new Method<Stellar.HotArchiveBucketEntryTypeEncodeRequest, Stellar.HotArchiveBucketEntryTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeHotArchiveBucketEntryType",
                HotArchiveBucketEntryTypeEncodeRequestGrpcMarshaller.HotArchiveBucketEntryTypeEncodeRequestMarshaller,
                HotArchiveBucketEntryTypeEncodeResponseGrpcMarshaller.HotArchiveBucketEntryTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeHotArchiveBucketEntryType</summary>
        public static readonly Method<Stellar.HotArchiveBucketEntryTypeDecodeRequest, Stellar.HotArchiveBucketEntryTypeDecodeResponse> DecodeHotArchiveBucketEntryType =
            new Method<Stellar.HotArchiveBucketEntryTypeDecodeRequest, Stellar.HotArchiveBucketEntryTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeHotArchiveBucketEntryType",
                HotArchiveBucketEntryTypeDecodeRequestGrpcMarshaller.HotArchiveBucketEntryTypeDecodeRequestMarshaller,
                HotArchiveBucketEntryTypeDecodeResponseGrpcMarshaller.HotArchiveBucketEntryTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeColdArchiveBucketEntryType</summary>
        public static readonly Method<Stellar.ColdArchiveBucketEntryTypeEncodeRequest, Stellar.ColdArchiveBucketEntryTypeEncodeResponse> EncodeColdArchiveBucketEntryType =
            new Method<Stellar.ColdArchiveBucketEntryTypeEncodeRequest, Stellar.ColdArchiveBucketEntryTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeColdArchiveBucketEntryType",
                ColdArchiveBucketEntryTypeEncodeRequestGrpcMarshaller.ColdArchiveBucketEntryTypeEncodeRequestMarshaller,
                ColdArchiveBucketEntryTypeEncodeResponseGrpcMarshaller.ColdArchiveBucketEntryTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeColdArchiveBucketEntryType</summary>
        public static readonly Method<Stellar.ColdArchiveBucketEntryTypeDecodeRequest, Stellar.ColdArchiveBucketEntryTypeDecodeResponse> DecodeColdArchiveBucketEntryType =
            new Method<Stellar.ColdArchiveBucketEntryTypeDecodeRequest, Stellar.ColdArchiveBucketEntryTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeColdArchiveBucketEntryType",
                ColdArchiveBucketEntryTypeDecodeRequestGrpcMarshaller.ColdArchiveBucketEntryTypeDecodeRequestMarshaller,
                ColdArchiveBucketEntryTypeDecodeResponseGrpcMarshaller.ColdArchiveBucketEntryTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeBucketMetadata</summary>
        public static readonly Method<Stellar.BucketMetadataEncodeRequest, Stellar.BucketMetadataEncodeResponse> EncodeBucketMetadata =
            new Method<Stellar.BucketMetadataEncodeRequest, Stellar.BucketMetadataEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeBucketMetadata",
                BucketMetadataEncodeRequestGrpcMarshaller.BucketMetadataEncodeRequestMarshaller,
                BucketMetadataEncodeResponseGrpcMarshaller.BucketMetadataEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeBucketMetadata</summary>
        public static readonly Method<Stellar.BucketMetadataDecodeRequest, Stellar.BucketMetadataDecodeResponse> DecodeBucketMetadata =
            new Method<Stellar.BucketMetadataDecodeRequest, Stellar.BucketMetadataDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeBucketMetadata",
                BucketMetadataDecodeRequestGrpcMarshaller.BucketMetadataDecodeRequestMarshaller,
                BucketMetadataDecodeResponseGrpcMarshaller.BucketMetadataDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeBucketEntry</summary>
        public static readonly Method<Stellar.BucketEntryEncodeRequest, Stellar.BucketEntryEncodeResponse> EncodeBucketEntry =
            new Method<Stellar.BucketEntryEncodeRequest, Stellar.BucketEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeBucketEntry",
                BucketEntryEncodeRequestGrpcMarshaller.BucketEntryEncodeRequestMarshaller,
                BucketEntryEncodeResponseGrpcMarshaller.BucketEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeBucketEntry</summary>
        public static readonly Method<Stellar.BucketEntryDecodeRequest, Stellar.BucketEntryDecodeResponse> DecodeBucketEntry =
            new Method<Stellar.BucketEntryDecodeRequest, Stellar.BucketEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeBucketEntry",
                BucketEntryDecodeRequestGrpcMarshaller.BucketEntryDecodeRequestMarshaller,
                BucketEntryDecodeResponseGrpcMarshaller.BucketEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeHotArchiveBucketEntry</summary>
        public static readonly Method<Stellar.HotArchiveBucketEntryEncodeRequest, Stellar.HotArchiveBucketEntryEncodeResponse> EncodeHotArchiveBucketEntry =
            new Method<Stellar.HotArchiveBucketEntryEncodeRequest, Stellar.HotArchiveBucketEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeHotArchiveBucketEntry",
                HotArchiveBucketEntryEncodeRequestGrpcMarshaller.HotArchiveBucketEntryEncodeRequestMarshaller,
                HotArchiveBucketEntryEncodeResponseGrpcMarshaller.HotArchiveBucketEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeHotArchiveBucketEntry</summary>
        public static readonly Method<Stellar.HotArchiveBucketEntryDecodeRequest, Stellar.HotArchiveBucketEntryDecodeResponse> DecodeHotArchiveBucketEntry =
            new Method<Stellar.HotArchiveBucketEntryDecodeRequest, Stellar.HotArchiveBucketEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeHotArchiveBucketEntry",
                HotArchiveBucketEntryDecodeRequestGrpcMarshaller.HotArchiveBucketEntryDecodeRequestMarshaller,
                HotArchiveBucketEntryDecodeResponseGrpcMarshaller.HotArchiveBucketEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeColdArchiveArchivedLeaf</summary>
        public static readonly Method<Stellar.ColdArchiveArchivedLeafEncodeRequest, Stellar.ColdArchiveArchivedLeafEncodeResponse> EncodeColdArchiveArchivedLeaf =
            new Method<Stellar.ColdArchiveArchivedLeafEncodeRequest, Stellar.ColdArchiveArchivedLeafEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeColdArchiveArchivedLeaf",
                ColdArchiveArchivedLeafEncodeRequestGrpcMarshaller.ColdArchiveArchivedLeafEncodeRequestMarshaller,
                ColdArchiveArchivedLeafEncodeResponseGrpcMarshaller.ColdArchiveArchivedLeafEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeColdArchiveArchivedLeaf</summary>
        public static readonly Method<Stellar.ColdArchiveArchivedLeafDecodeRequest, Stellar.ColdArchiveArchivedLeafDecodeResponse> DecodeColdArchiveArchivedLeaf =
            new Method<Stellar.ColdArchiveArchivedLeafDecodeRequest, Stellar.ColdArchiveArchivedLeafDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeColdArchiveArchivedLeaf",
                ColdArchiveArchivedLeafDecodeRequestGrpcMarshaller.ColdArchiveArchivedLeafDecodeRequestMarshaller,
                ColdArchiveArchivedLeafDecodeResponseGrpcMarshaller.ColdArchiveArchivedLeafDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeColdArchiveDeletedLeaf</summary>
        public static readonly Method<Stellar.ColdArchiveDeletedLeafEncodeRequest, Stellar.ColdArchiveDeletedLeafEncodeResponse> EncodeColdArchiveDeletedLeaf =
            new Method<Stellar.ColdArchiveDeletedLeafEncodeRequest, Stellar.ColdArchiveDeletedLeafEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeColdArchiveDeletedLeaf",
                ColdArchiveDeletedLeafEncodeRequestGrpcMarshaller.ColdArchiveDeletedLeafEncodeRequestMarshaller,
                ColdArchiveDeletedLeafEncodeResponseGrpcMarshaller.ColdArchiveDeletedLeafEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeColdArchiveDeletedLeaf</summary>
        public static readonly Method<Stellar.ColdArchiveDeletedLeafDecodeRequest, Stellar.ColdArchiveDeletedLeafDecodeResponse> DecodeColdArchiveDeletedLeaf =
            new Method<Stellar.ColdArchiveDeletedLeafDecodeRequest, Stellar.ColdArchiveDeletedLeafDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeColdArchiveDeletedLeaf",
                ColdArchiveDeletedLeafDecodeRequestGrpcMarshaller.ColdArchiveDeletedLeafDecodeRequestMarshaller,
                ColdArchiveDeletedLeafDecodeResponseGrpcMarshaller.ColdArchiveDeletedLeafDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeColdArchiveBoundaryLeaf</summary>
        public static readonly Method<Stellar.ColdArchiveBoundaryLeafEncodeRequest, Stellar.ColdArchiveBoundaryLeafEncodeResponse> EncodeColdArchiveBoundaryLeaf =
            new Method<Stellar.ColdArchiveBoundaryLeafEncodeRequest, Stellar.ColdArchiveBoundaryLeafEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeColdArchiveBoundaryLeaf",
                ColdArchiveBoundaryLeafEncodeRequestGrpcMarshaller.ColdArchiveBoundaryLeafEncodeRequestMarshaller,
                ColdArchiveBoundaryLeafEncodeResponseGrpcMarshaller.ColdArchiveBoundaryLeafEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeColdArchiveBoundaryLeaf</summary>
        public static readonly Method<Stellar.ColdArchiveBoundaryLeafDecodeRequest, Stellar.ColdArchiveBoundaryLeafDecodeResponse> DecodeColdArchiveBoundaryLeaf =
            new Method<Stellar.ColdArchiveBoundaryLeafDecodeRequest, Stellar.ColdArchiveBoundaryLeafDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeColdArchiveBoundaryLeaf",
                ColdArchiveBoundaryLeafDecodeRequestGrpcMarshaller.ColdArchiveBoundaryLeafDecodeRequestMarshaller,
                ColdArchiveBoundaryLeafDecodeResponseGrpcMarshaller.ColdArchiveBoundaryLeafDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeColdArchiveHashEntry</summary>
        public static readonly Method<Stellar.ColdArchiveHashEntryEncodeRequest, Stellar.ColdArchiveHashEntryEncodeResponse> EncodeColdArchiveHashEntry =
            new Method<Stellar.ColdArchiveHashEntryEncodeRequest, Stellar.ColdArchiveHashEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeColdArchiveHashEntry",
                ColdArchiveHashEntryEncodeRequestGrpcMarshaller.ColdArchiveHashEntryEncodeRequestMarshaller,
                ColdArchiveHashEntryEncodeResponseGrpcMarshaller.ColdArchiveHashEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeColdArchiveHashEntry</summary>
        public static readonly Method<Stellar.ColdArchiveHashEntryDecodeRequest, Stellar.ColdArchiveHashEntryDecodeResponse> DecodeColdArchiveHashEntry =
            new Method<Stellar.ColdArchiveHashEntryDecodeRequest, Stellar.ColdArchiveHashEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeColdArchiveHashEntry",
                ColdArchiveHashEntryDecodeRequestGrpcMarshaller.ColdArchiveHashEntryDecodeRequestMarshaller,
                ColdArchiveHashEntryDecodeResponseGrpcMarshaller.ColdArchiveHashEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeColdArchiveBucketEntry</summary>
        public static readonly Method<Stellar.ColdArchiveBucketEntryEncodeRequest, Stellar.ColdArchiveBucketEntryEncodeResponse> EncodeColdArchiveBucketEntry =
            new Method<Stellar.ColdArchiveBucketEntryEncodeRequest, Stellar.ColdArchiveBucketEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeColdArchiveBucketEntry",
                ColdArchiveBucketEntryEncodeRequestGrpcMarshaller.ColdArchiveBucketEntryEncodeRequestMarshaller,
                ColdArchiveBucketEntryEncodeResponseGrpcMarshaller.ColdArchiveBucketEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeColdArchiveBucketEntry</summary>
        public static readonly Method<Stellar.ColdArchiveBucketEntryDecodeRequest, Stellar.ColdArchiveBucketEntryDecodeResponse> DecodeColdArchiveBucketEntry =
            new Method<Stellar.ColdArchiveBucketEntryDecodeRequest, Stellar.ColdArchiveBucketEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeColdArchiveBucketEntry",
                ColdArchiveBucketEntryDecodeRequestGrpcMarshaller.ColdArchiveBucketEntryDecodeRequestMarshaller,
                ColdArchiveBucketEntryDecodeResponseGrpcMarshaller.ColdArchiveBucketEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeUpgradeType</summary>
        public static readonly Method<Stellar.UpgradeTypeEncodeRequest, Stellar.UpgradeTypeEncodeResponse> EncodeUpgradeType =
            new Method<Stellar.UpgradeTypeEncodeRequest, Stellar.UpgradeTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeUpgradeType",
                UpgradeTypeEncodeRequestGrpcMarshaller.UpgradeTypeEncodeRequestMarshaller,
                UpgradeTypeEncodeResponseGrpcMarshaller.UpgradeTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeUpgradeType</summary>
        public static readonly Method<Stellar.UpgradeTypeDecodeRequest, Stellar.UpgradeTypeDecodeResponse> DecodeUpgradeType =
            new Method<Stellar.UpgradeTypeDecodeRequest, Stellar.UpgradeTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeUpgradeType",
                UpgradeTypeDecodeRequestGrpcMarshaller.UpgradeTypeDecodeRequestMarshaller,
                UpgradeTypeDecodeResponseGrpcMarshaller.UpgradeTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeStellarValueType</summary>
        public static readonly Method<Stellar.StellarValueTypeEncodeRequest, Stellar.StellarValueTypeEncodeResponse> EncodeStellarValueType =
            new Method<Stellar.StellarValueTypeEncodeRequest, Stellar.StellarValueTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeStellarValueType",
                StellarValueTypeEncodeRequestGrpcMarshaller.StellarValueTypeEncodeRequestMarshaller,
                StellarValueTypeEncodeResponseGrpcMarshaller.StellarValueTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeStellarValueType</summary>
        public static readonly Method<Stellar.StellarValueTypeDecodeRequest, Stellar.StellarValueTypeDecodeResponse> DecodeStellarValueType =
            new Method<Stellar.StellarValueTypeDecodeRequest, Stellar.StellarValueTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeStellarValueType",
                StellarValueTypeDecodeRequestGrpcMarshaller.StellarValueTypeDecodeRequestMarshaller,
                StellarValueTypeDecodeResponseGrpcMarshaller.StellarValueTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerCloseValueSignature</summary>
        public static readonly Method<Stellar.LedgerCloseValueSignatureEncodeRequest, Stellar.LedgerCloseValueSignatureEncodeResponse> EncodeLedgerCloseValueSignature =
            new Method<Stellar.LedgerCloseValueSignatureEncodeRequest, Stellar.LedgerCloseValueSignatureEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerCloseValueSignature",
                LedgerCloseValueSignatureEncodeRequestGrpcMarshaller.LedgerCloseValueSignatureEncodeRequestMarshaller,
                LedgerCloseValueSignatureEncodeResponseGrpcMarshaller.LedgerCloseValueSignatureEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerCloseValueSignature</summary>
        public static readonly Method<Stellar.LedgerCloseValueSignatureDecodeRequest, Stellar.LedgerCloseValueSignatureDecodeResponse> DecodeLedgerCloseValueSignature =
            new Method<Stellar.LedgerCloseValueSignatureDecodeRequest, Stellar.LedgerCloseValueSignatureDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerCloseValueSignature",
                LedgerCloseValueSignatureDecodeRequestGrpcMarshaller.LedgerCloseValueSignatureDecodeRequestMarshaller,
                LedgerCloseValueSignatureDecodeResponseGrpcMarshaller.LedgerCloseValueSignatureDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeStellarValue</summary>
        public static readonly Method<Stellar.StellarValueEncodeRequest, Stellar.StellarValueEncodeResponse> EncodeStellarValue =
            new Method<Stellar.StellarValueEncodeRequest, Stellar.StellarValueEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeStellarValue",
                StellarValueEncodeRequestGrpcMarshaller.StellarValueEncodeRequestMarshaller,
                StellarValueEncodeResponseGrpcMarshaller.StellarValueEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeStellarValue</summary>
        public static readonly Method<Stellar.StellarValueDecodeRequest, Stellar.StellarValueDecodeResponse> DecodeStellarValue =
            new Method<Stellar.StellarValueDecodeRequest, Stellar.StellarValueDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeStellarValue",
                StellarValueDecodeRequestGrpcMarshaller.StellarValueDecodeRequestMarshaller,
                StellarValueDecodeResponseGrpcMarshaller.StellarValueDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerHeaderFlags</summary>
        public static readonly Method<Stellar.LedgerHeaderFlagsEncodeRequest, Stellar.LedgerHeaderFlagsEncodeResponse> EncodeLedgerHeaderFlags =
            new Method<Stellar.LedgerHeaderFlagsEncodeRequest, Stellar.LedgerHeaderFlagsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerHeaderFlags",
                LedgerHeaderFlagsEncodeRequestGrpcMarshaller.LedgerHeaderFlagsEncodeRequestMarshaller,
                LedgerHeaderFlagsEncodeResponseGrpcMarshaller.LedgerHeaderFlagsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerHeaderFlags</summary>
        public static readonly Method<Stellar.LedgerHeaderFlagsDecodeRequest, Stellar.LedgerHeaderFlagsDecodeResponse> DecodeLedgerHeaderFlags =
            new Method<Stellar.LedgerHeaderFlagsDecodeRequest, Stellar.LedgerHeaderFlagsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerHeaderFlags",
                LedgerHeaderFlagsDecodeRequestGrpcMarshaller.LedgerHeaderFlagsDecodeRequestMarshaller,
                LedgerHeaderFlagsDecodeResponseGrpcMarshaller.LedgerHeaderFlagsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerHeaderExtensionV1</summary>
        public static readonly Method<Stellar.LedgerHeaderExtensionV1EncodeRequest, Stellar.LedgerHeaderExtensionV1EncodeResponse> EncodeLedgerHeaderExtensionV1 =
            new Method<Stellar.LedgerHeaderExtensionV1EncodeRequest, Stellar.LedgerHeaderExtensionV1EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerHeaderExtensionV1",
                LedgerHeaderExtensionV1EncodeRequestGrpcMarshaller.LedgerHeaderExtensionV1EncodeRequestMarshaller,
                LedgerHeaderExtensionV1EncodeResponseGrpcMarshaller.LedgerHeaderExtensionV1EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerHeaderExtensionV1</summary>
        public static readonly Method<Stellar.LedgerHeaderExtensionV1DecodeRequest, Stellar.LedgerHeaderExtensionV1DecodeResponse> DecodeLedgerHeaderExtensionV1 =
            new Method<Stellar.LedgerHeaderExtensionV1DecodeRequest, Stellar.LedgerHeaderExtensionV1DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerHeaderExtensionV1",
                LedgerHeaderExtensionV1DecodeRequestGrpcMarshaller.LedgerHeaderExtensionV1DecodeRequestMarshaller,
                LedgerHeaderExtensionV1DecodeResponseGrpcMarshaller.LedgerHeaderExtensionV1DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerHeader</summary>
        public static readonly Method<Stellar.LedgerHeaderEncodeRequest, Stellar.LedgerHeaderEncodeResponse> EncodeLedgerHeader =
            new Method<Stellar.LedgerHeaderEncodeRequest, Stellar.LedgerHeaderEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerHeader",
                LedgerHeaderEncodeRequestGrpcMarshaller.LedgerHeaderEncodeRequestMarshaller,
                LedgerHeaderEncodeResponseGrpcMarshaller.LedgerHeaderEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerHeader</summary>
        public static readonly Method<Stellar.LedgerHeaderDecodeRequest, Stellar.LedgerHeaderDecodeResponse> DecodeLedgerHeader =
            new Method<Stellar.LedgerHeaderDecodeRequest, Stellar.LedgerHeaderDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerHeader",
                LedgerHeaderDecodeRequestGrpcMarshaller.LedgerHeaderDecodeRequestMarshaller,
                LedgerHeaderDecodeResponseGrpcMarshaller.LedgerHeaderDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerUpgradeType</summary>
        public static readonly Method<Stellar.LedgerUpgradeTypeEncodeRequest, Stellar.LedgerUpgradeTypeEncodeResponse> EncodeLedgerUpgradeType =
            new Method<Stellar.LedgerUpgradeTypeEncodeRequest, Stellar.LedgerUpgradeTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerUpgradeType",
                LedgerUpgradeTypeEncodeRequestGrpcMarshaller.LedgerUpgradeTypeEncodeRequestMarshaller,
                LedgerUpgradeTypeEncodeResponseGrpcMarshaller.LedgerUpgradeTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerUpgradeType</summary>
        public static readonly Method<Stellar.LedgerUpgradeTypeDecodeRequest, Stellar.LedgerUpgradeTypeDecodeResponse> DecodeLedgerUpgradeType =
            new Method<Stellar.LedgerUpgradeTypeDecodeRequest, Stellar.LedgerUpgradeTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerUpgradeType",
                LedgerUpgradeTypeDecodeRequestGrpcMarshaller.LedgerUpgradeTypeDecodeRequestMarshaller,
                LedgerUpgradeTypeDecodeResponseGrpcMarshaller.LedgerUpgradeTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeConfigUpgradeSetKey</summary>
        public static readonly Method<Stellar.ConfigUpgradeSetKeyEncodeRequest, Stellar.ConfigUpgradeSetKeyEncodeResponse> EncodeConfigUpgradeSetKey =
            new Method<Stellar.ConfigUpgradeSetKeyEncodeRequest, Stellar.ConfigUpgradeSetKeyEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeConfigUpgradeSetKey",
                ConfigUpgradeSetKeyEncodeRequestGrpcMarshaller.ConfigUpgradeSetKeyEncodeRequestMarshaller,
                ConfigUpgradeSetKeyEncodeResponseGrpcMarshaller.ConfigUpgradeSetKeyEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeConfigUpgradeSetKey</summary>
        public static readonly Method<Stellar.ConfigUpgradeSetKeyDecodeRequest, Stellar.ConfigUpgradeSetKeyDecodeResponse> DecodeConfigUpgradeSetKey =
            new Method<Stellar.ConfigUpgradeSetKeyDecodeRequest, Stellar.ConfigUpgradeSetKeyDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeConfigUpgradeSetKey",
                ConfigUpgradeSetKeyDecodeRequestGrpcMarshaller.ConfigUpgradeSetKeyDecodeRequestMarshaller,
                ConfigUpgradeSetKeyDecodeResponseGrpcMarshaller.ConfigUpgradeSetKeyDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerUpgrade</summary>
        public static readonly Method<Stellar.LedgerUpgradeEncodeRequest, Stellar.LedgerUpgradeEncodeResponse> EncodeLedgerUpgrade =
            new Method<Stellar.LedgerUpgradeEncodeRequest, Stellar.LedgerUpgradeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerUpgrade",
                LedgerUpgradeEncodeRequestGrpcMarshaller.LedgerUpgradeEncodeRequestMarshaller,
                LedgerUpgradeEncodeResponseGrpcMarshaller.LedgerUpgradeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerUpgrade</summary>
        public static readonly Method<Stellar.LedgerUpgradeDecodeRequest, Stellar.LedgerUpgradeDecodeResponse> DecodeLedgerUpgrade =
            new Method<Stellar.LedgerUpgradeDecodeRequest, Stellar.LedgerUpgradeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerUpgrade",
                LedgerUpgradeDecodeRequestGrpcMarshaller.LedgerUpgradeDecodeRequestMarshaller,
                LedgerUpgradeDecodeResponseGrpcMarshaller.LedgerUpgradeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeConfigUpgradeSet</summary>
        public static readonly Method<Stellar.ConfigUpgradeSetEncodeRequest, Stellar.ConfigUpgradeSetEncodeResponse> EncodeConfigUpgradeSet =
            new Method<Stellar.ConfigUpgradeSetEncodeRequest, Stellar.ConfigUpgradeSetEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeConfigUpgradeSet",
                ConfigUpgradeSetEncodeRequestGrpcMarshaller.ConfigUpgradeSetEncodeRequestMarshaller,
                ConfigUpgradeSetEncodeResponseGrpcMarshaller.ConfigUpgradeSetEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeConfigUpgradeSet</summary>
        public static readonly Method<Stellar.ConfigUpgradeSetDecodeRequest, Stellar.ConfigUpgradeSetDecodeResponse> DecodeConfigUpgradeSet =
            new Method<Stellar.ConfigUpgradeSetDecodeRequest, Stellar.ConfigUpgradeSetDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeConfigUpgradeSet",
                ConfigUpgradeSetDecodeRequestGrpcMarshaller.ConfigUpgradeSetDecodeRequestMarshaller,
                ConfigUpgradeSetDecodeResponseGrpcMarshaller.ConfigUpgradeSetDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTxSetComponentType</summary>
        public static readonly Method<Stellar.TxSetComponentTypeEncodeRequest, Stellar.TxSetComponentTypeEncodeResponse> EncodeTxSetComponentType =
            new Method<Stellar.TxSetComponentTypeEncodeRequest, Stellar.TxSetComponentTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTxSetComponentType",
                TxSetComponentTypeEncodeRequestGrpcMarshaller.TxSetComponentTypeEncodeRequestMarshaller,
                TxSetComponentTypeEncodeResponseGrpcMarshaller.TxSetComponentTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTxSetComponentType</summary>
        public static readonly Method<Stellar.TxSetComponentTypeDecodeRequest, Stellar.TxSetComponentTypeDecodeResponse> DecodeTxSetComponentType =
            new Method<Stellar.TxSetComponentTypeDecodeRequest, Stellar.TxSetComponentTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTxSetComponentType",
                TxSetComponentTypeDecodeRequestGrpcMarshaller.TxSetComponentTypeDecodeRequestMarshaller,
                TxSetComponentTypeDecodeResponseGrpcMarshaller.TxSetComponentTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTxSetComponent</summary>
        public static readonly Method<Stellar.TxSetComponentEncodeRequest, Stellar.TxSetComponentEncodeResponse> EncodeTxSetComponent =
            new Method<Stellar.TxSetComponentEncodeRequest, Stellar.TxSetComponentEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTxSetComponent",
                TxSetComponentEncodeRequestGrpcMarshaller.TxSetComponentEncodeRequestMarshaller,
                TxSetComponentEncodeResponseGrpcMarshaller.TxSetComponentEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTxSetComponent</summary>
        public static readonly Method<Stellar.TxSetComponentDecodeRequest, Stellar.TxSetComponentDecodeResponse> DecodeTxSetComponent =
            new Method<Stellar.TxSetComponentDecodeRequest, Stellar.TxSetComponentDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTxSetComponent",
                TxSetComponentDecodeRequestGrpcMarshaller.TxSetComponentDecodeRequestMarshaller,
                TxSetComponentDecodeResponseGrpcMarshaller.TxSetComponentDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionPhase</summary>
        public static readonly Method<Stellar.TransactionPhaseEncodeRequest, Stellar.TransactionPhaseEncodeResponse> EncodeTransactionPhase =
            new Method<Stellar.TransactionPhaseEncodeRequest, Stellar.TransactionPhaseEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionPhase",
                TransactionPhaseEncodeRequestGrpcMarshaller.TransactionPhaseEncodeRequestMarshaller,
                TransactionPhaseEncodeResponseGrpcMarshaller.TransactionPhaseEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionPhase</summary>
        public static readonly Method<Stellar.TransactionPhaseDecodeRequest, Stellar.TransactionPhaseDecodeResponse> DecodeTransactionPhase =
            new Method<Stellar.TransactionPhaseDecodeRequest, Stellar.TransactionPhaseDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionPhase",
                TransactionPhaseDecodeRequestGrpcMarshaller.TransactionPhaseDecodeRequestMarshaller,
                TransactionPhaseDecodeResponseGrpcMarshaller.TransactionPhaseDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionSet</summary>
        public static readonly Method<Stellar.TransactionSetEncodeRequest, Stellar.TransactionSetEncodeResponse> EncodeTransactionSet =
            new Method<Stellar.TransactionSetEncodeRequest, Stellar.TransactionSetEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionSet",
                TransactionSetEncodeRequestGrpcMarshaller.TransactionSetEncodeRequestMarshaller,
                TransactionSetEncodeResponseGrpcMarshaller.TransactionSetEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionSet</summary>
        public static readonly Method<Stellar.TransactionSetDecodeRequest, Stellar.TransactionSetDecodeResponse> DecodeTransactionSet =
            new Method<Stellar.TransactionSetDecodeRequest, Stellar.TransactionSetDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionSet",
                TransactionSetDecodeRequestGrpcMarshaller.TransactionSetDecodeRequestMarshaller,
                TransactionSetDecodeResponseGrpcMarshaller.TransactionSetDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionSetV1</summary>
        public static readonly Method<Stellar.TransactionSetV1EncodeRequest, Stellar.TransactionSetV1EncodeResponse> EncodeTransactionSetV1 =
            new Method<Stellar.TransactionSetV1EncodeRequest, Stellar.TransactionSetV1EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionSetV1",
                TransactionSetV1EncodeRequestGrpcMarshaller.TransactionSetV1EncodeRequestMarshaller,
                TransactionSetV1EncodeResponseGrpcMarshaller.TransactionSetV1EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionSetV1</summary>
        public static readonly Method<Stellar.TransactionSetV1DecodeRequest, Stellar.TransactionSetV1DecodeResponse> DecodeTransactionSetV1 =
            new Method<Stellar.TransactionSetV1DecodeRequest, Stellar.TransactionSetV1DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionSetV1",
                TransactionSetV1DecodeRequestGrpcMarshaller.TransactionSetV1DecodeRequestMarshaller,
                TransactionSetV1DecodeResponseGrpcMarshaller.TransactionSetV1DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeGeneralizedTransactionSet</summary>
        public static readonly Method<Stellar.GeneralizedTransactionSetEncodeRequest, Stellar.GeneralizedTransactionSetEncodeResponse> EncodeGeneralizedTransactionSet =
            new Method<Stellar.GeneralizedTransactionSetEncodeRequest, Stellar.GeneralizedTransactionSetEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeGeneralizedTransactionSet",
                GeneralizedTransactionSetEncodeRequestGrpcMarshaller.GeneralizedTransactionSetEncodeRequestMarshaller,
                GeneralizedTransactionSetEncodeResponseGrpcMarshaller.GeneralizedTransactionSetEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeGeneralizedTransactionSet</summary>
        public static readonly Method<Stellar.GeneralizedTransactionSetDecodeRequest, Stellar.GeneralizedTransactionSetDecodeResponse> DecodeGeneralizedTransactionSet =
            new Method<Stellar.GeneralizedTransactionSetDecodeRequest, Stellar.GeneralizedTransactionSetDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeGeneralizedTransactionSet",
                GeneralizedTransactionSetDecodeRequestGrpcMarshaller.GeneralizedTransactionSetDecodeRequestMarshaller,
                GeneralizedTransactionSetDecodeResponseGrpcMarshaller.GeneralizedTransactionSetDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionResultPair</summary>
        public static readonly Method<Stellar.TransactionResultPairEncodeRequest, Stellar.TransactionResultPairEncodeResponse> EncodeTransactionResultPair =
            new Method<Stellar.TransactionResultPairEncodeRequest, Stellar.TransactionResultPairEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionResultPair",
                TransactionResultPairEncodeRequestGrpcMarshaller.TransactionResultPairEncodeRequestMarshaller,
                TransactionResultPairEncodeResponseGrpcMarshaller.TransactionResultPairEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionResultPair</summary>
        public static readonly Method<Stellar.TransactionResultPairDecodeRequest, Stellar.TransactionResultPairDecodeResponse> DecodeTransactionResultPair =
            new Method<Stellar.TransactionResultPairDecodeRequest, Stellar.TransactionResultPairDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionResultPair",
                TransactionResultPairDecodeRequestGrpcMarshaller.TransactionResultPairDecodeRequestMarshaller,
                TransactionResultPairDecodeResponseGrpcMarshaller.TransactionResultPairDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionResultSet</summary>
        public static readonly Method<Stellar.TransactionResultSetEncodeRequest, Stellar.TransactionResultSetEncodeResponse> EncodeTransactionResultSet =
            new Method<Stellar.TransactionResultSetEncodeRequest, Stellar.TransactionResultSetEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionResultSet",
                TransactionResultSetEncodeRequestGrpcMarshaller.TransactionResultSetEncodeRequestMarshaller,
                TransactionResultSetEncodeResponseGrpcMarshaller.TransactionResultSetEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionResultSet</summary>
        public static readonly Method<Stellar.TransactionResultSetDecodeRequest, Stellar.TransactionResultSetDecodeResponse> DecodeTransactionResultSet =
            new Method<Stellar.TransactionResultSetDecodeRequest, Stellar.TransactionResultSetDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionResultSet",
                TransactionResultSetDecodeRequestGrpcMarshaller.TransactionResultSetDecodeRequestMarshaller,
                TransactionResultSetDecodeResponseGrpcMarshaller.TransactionResultSetDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionHistoryEntry</summary>
        public static readonly Method<Stellar.TransactionHistoryEntryEncodeRequest, Stellar.TransactionHistoryEntryEncodeResponse> EncodeTransactionHistoryEntry =
            new Method<Stellar.TransactionHistoryEntryEncodeRequest, Stellar.TransactionHistoryEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionHistoryEntry",
                TransactionHistoryEntryEncodeRequestGrpcMarshaller.TransactionHistoryEntryEncodeRequestMarshaller,
                TransactionHistoryEntryEncodeResponseGrpcMarshaller.TransactionHistoryEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionHistoryEntry</summary>
        public static readonly Method<Stellar.TransactionHistoryEntryDecodeRequest, Stellar.TransactionHistoryEntryDecodeResponse> DecodeTransactionHistoryEntry =
            new Method<Stellar.TransactionHistoryEntryDecodeRequest, Stellar.TransactionHistoryEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionHistoryEntry",
                TransactionHistoryEntryDecodeRequestGrpcMarshaller.TransactionHistoryEntryDecodeRequestMarshaller,
                TransactionHistoryEntryDecodeResponseGrpcMarshaller.TransactionHistoryEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionHistoryResultEntry</summary>
        public static readonly Method<Stellar.TransactionHistoryResultEntryEncodeRequest, Stellar.TransactionHistoryResultEntryEncodeResponse> EncodeTransactionHistoryResultEntry =
            new Method<Stellar.TransactionHistoryResultEntryEncodeRequest, Stellar.TransactionHistoryResultEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionHistoryResultEntry",
                TransactionHistoryResultEntryEncodeRequestGrpcMarshaller.TransactionHistoryResultEntryEncodeRequestMarshaller,
                TransactionHistoryResultEntryEncodeResponseGrpcMarshaller.TransactionHistoryResultEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionHistoryResultEntry</summary>
        public static readonly Method<Stellar.TransactionHistoryResultEntryDecodeRequest, Stellar.TransactionHistoryResultEntryDecodeResponse> DecodeTransactionHistoryResultEntry =
            new Method<Stellar.TransactionHistoryResultEntryDecodeRequest, Stellar.TransactionHistoryResultEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionHistoryResultEntry",
                TransactionHistoryResultEntryDecodeRequestGrpcMarshaller.TransactionHistoryResultEntryDecodeRequestMarshaller,
                TransactionHistoryResultEntryDecodeResponseGrpcMarshaller.TransactionHistoryResultEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerHeaderHistoryEntry</summary>
        public static readonly Method<Stellar.LedgerHeaderHistoryEntryEncodeRequest, Stellar.LedgerHeaderHistoryEntryEncodeResponse> EncodeLedgerHeaderHistoryEntry =
            new Method<Stellar.LedgerHeaderHistoryEntryEncodeRequest, Stellar.LedgerHeaderHistoryEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerHeaderHistoryEntry",
                LedgerHeaderHistoryEntryEncodeRequestGrpcMarshaller.LedgerHeaderHistoryEntryEncodeRequestMarshaller,
                LedgerHeaderHistoryEntryEncodeResponseGrpcMarshaller.LedgerHeaderHistoryEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerHeaderHistoryEntry</summary>
        public static readonly Method<Stellar.LedgerHeaderHistoryEntryDecodeRequest, Stellar.LedgerHeaderHistoryEntryDecodeResponse> DecodeLedgerHeaderHistoryEntry =
            new Method<Stellar.LedgerHeaderHistoryEntryDecodeRequest, Stellar.LedgerHeaderHistoryEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerHeaderHistoryEntry",
                LedgerHeaderHistoryEntryDecodeRequestGrpcMarshaller.LedgerHeaderHistoryEntryDecodeRequestMarshaller,
                LedgerHeaderHistoryEntryDecodeResponseGrpcMarshaller.LedgerHeaderHistoryEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerSCPMessages</summary>
        public static readonly Method<Stellar.LedgerSCPMessagesEncodeRequest, Stellar.LedgerSCPMessagesEncodeResponse> EncodeLedgerSCPMessages =
            new Method<Stellar.LedgerSCPMessagesEncodeRequest, Stellar.LedgerSCPMessagesEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerSCPMessages",
                LedgerSCPMessagesEncodeRequestGrpcMarshaller.LedgerSCPMessagesEncodeRequestMarshaller,
                LedgerSCPMessagesEncodeResponseGrpcMarshaller.LedgerSCPMessagesEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerSCPMessages</summary>
        public static readonly Method<Stellar.LedgerSCPMessagesDecodeRequest, Stellar.LedgerSCPMessagesDecodeResponse> DecodeLedgerSCPMessages =
            new Method<Stellar.LedgerSCPMessagesDecodeRequest, Stellar.LedgerSCPMessagesDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerSCPMessages",
                LedgerSCPMessagesDecodeRequestGrpcMarshaller.LedgerSCPMessagesDecodeRequestMarshaller,
                LedgerSCPMessagesDecodeResponseGrpcMarshaller.LedgerSCPMessagesDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCPHistoryEntryV0</summary>
        public static readonly Method<Stellar.SCPHistoryEntryV0EncodeRequest, Stellar.SCPHistoryEntryV0EncodeResponse> EncodeSCPHistoryEntryV0 =
            new Method<Stellar.SCPHistoryEntryV0EncodeRequest, Stellar.SCPHistoryEntryV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCPHistoryEntryV0",
                SCPHistoryEntryV0EncodeRequestGrpcMarshaller.SCPHistoryEntryV0EncodeRequestMarshaller,
                SCPHistoryEntryV0EncodeResponseGrpcMarshaller.SCPHistoryEntryV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCPHistoryEntryV0</summary>
        public static readonly Method<Stellar.SCPHistoryEntryV0DecodeRequest, Stellar.SCPHistoryEntryV0DecodeResponse> DecodeSCPHistoryEntryV0 =
            new Method<Stellar.SCPHistoryEntryV0DecodeRequest, Stellar.SCPHistoryEntryV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCPHistoryEntryV0",
                SCPHistoryEntryV0DecodeRequestGrpcMarshaller.SCPHistoryEntryV0DecodeRequestMarshaller,
                SCPHistoryEntryV0DecodeResponseGrpcMarshaller.SCPHistoryEntryV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCPHistoryEntry</summary>
        public static readonly Method<Stellar.SCPHistoryEntryEncodeRequest, Stellar.SCPHistoryEntryEncodeResponse> EncodeSCPHistoryEntry =
            new Method<Stellar.SCPHistoryEntryEncodeRequest, Stellar.SCPHistoryEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCPHistoryEntry",
                SCPHistoryEntryEncodeRequestGrpcMarshaller.SCPHistoryEntryEncodeRequestMarshaller,
                SCPHistoryEntryEncodeResponseGrpcMarshaller.SCPHistoryEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCPHistoryEntry</summary>
        public static readonly Method<Stellar.SCPHistoryEntryDecodeRequest, Stellar.SCPHistoryEntryDecodeResponse> DecodeSCPHistoryEntry =
            new Method<Stellar.SCPHistoryEntryDecodeRequest, Stellar.SCPHistoryEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCPHistoryEntry",
                SCPHistoryEntryDecodeRequestGrpcMarshaller.SCPHistoryEntryDecodeRequestMarshaller,
                SCPHistoryEntryDecodeResponseGrpcMarshaller.SCPHistoryEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerEntryChangeType</summary>
        public static readonly Method<Stellar.LedgerEntryChangeTypeEncodeRequest, Stellar.LedgerEntryChangeTypeEncodeResponse> EncodeLedgerEntryChangeType =
            new Method<Stellar.LedgerEntryChangeTypeEncodeRequest, Stellar.LedgerEntryChangeTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerEntryChangeType",
                LedgerEntryChangeTypeEncodeRequestGrpcMarshaller.LedgerEntryChangeTypeEncodeRequestMarshaller,
                LedgerEntryChangeTypeEncodeResponseGrpcMarshaller.LedgerEntryChangeTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerEntryChangeType</summary>
        public static readonly Method<Stellar.LedgerEntryChangeTypeDecodeRequest, Stellar.LedgerEntryChangeTypeDecodeResponse> DecodeLedgerEntryChangeType =
            new Method<Stellar.LedgerEntryChangeTypeDecodeRequest, Stellar.LedgerEntryChangeTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerEntryChangeType",
                LedgerEntryChangeTypeDecodeRequestGrpcMarshaller.LedgerEntryChangeTypeDecodeRequestMarshaller,
                LedgerEntryChangeTypeDecodeResponseGrpcMarshaller.LedgerEntryChangeTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerEntryChange</summary>
        public static readonly Method<Stellar.LedgerEntryChangeEncodeRequest, Stellar.LedgerEntryChangeEncodeResponse> EncodeLedgerEntryChange =
            new Method<Stellar.LedgerEntryChangeEncodeRequest, Stellar.LedgerEntryChangeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerEntryChange",
                LedgerEntryChangeEncodeRequestGrpcMarshaller.LedgerEntryChangeEncodeRequestMarshaller,
                LedgerEntryChangeEncodeResponseGrpcMarshaller.LedgerEntryChangeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerEntryChange</summary>
        public static readonly Method<Stellar.LedgerEntryChangeDecodeRequest, Stellar.LedgerEntryChangeDecodeResponse> DecodeLedgerEntryChange =
            new Method<Stellar.LedgerEntryChangeDecodeRequest, Stellar.LedgerEntryChangeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerEntryChange",
                LedgerEntryChangeDecodeRequestGrpcMarshaller.LedgerEntryChangeDecodeRequestMarshaller,
                LedgerEntryChangeDecodeResponseGrpcMarshaller.LedgerEntryChangeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerEntryChanges</summary>
        public static readonly Method<Stellar.LedgerEntryChangesEncodeRequest, Stellar.LedgerEntryChangesEncodeResponse> EncodeLedgerEntryChanges =
            new Method<Stellar.LedgerEntryChangesEncodeRequest, Stellar.LedgerEntryChangesEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerEntryChanges",
                LedgerEntryChangesEncodeRequestGrpcMarshaller.LedgerEntryChangesEncodeRequestMarshaller,
                LedgerEntryChangesEncodeResponseGrpcMarshaller.LedgerEntryChangesEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerEntryChanges</summary>
        public static readonly Method<Stellar.LedgerEntryChangesDecodeRequest, Stellar.LedgerEntryChangesDecodeResponse> DecodeLedgerEntryChanges =
            new Method<Stellar.LedgerEntryChangesDecodeRequest, Stellar.LedgerEntryChangesDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerEntryChanges",
                LedgerEntryChangesDecodeRequestGrpcMarshaller.LedgerEntryChangesDecodeRequestMarshaller,
                LedgerEntryChangesDecodeResponseGrpcMarshaller.LedgerEntryChangesDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeOperationMeta</summary>
        public static readonly Method<Stellar.OperationMetaEncodeRequest, Stellar.OperationMetaEncodeResponse> EncodeOperationMeta =
            new Method<Stellar.OperationMetaEncodeRequest, Stellar.OperationMetaEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeOperationMeta",
                OperationMetaEncodeRequestGrpcMarshaller.OperationMetaEncodeRequestMarshaller,
                OperationMetaEncodeResponseGrpcMarshaller.OperationMetaEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeOperationMeta</summary>
        public static readonly Method<Stellar.OperationMetaDecodeRequest, Stellar.OperationMetaDecodeResponse> DecodeOperationMeta =
            new Method<Stellar.OperationMetaDecodeRequest, Stellar.OperationMetaDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeOperationMeta",
                OperationMetaDecodeRequestGrpcMarshaller.OperationMetaDecodeRequestMarshaller,
                OperationMetaDecodeResponseGrpcMarshaller.OperationMetaDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionMetaV1</summary>
        public static readonly Method<Stellar.TransactionMetaV1EncodeRequest, Stellar.TransactionMetaV1EncodeResponse> EncodeTransactionMetaV1 =
            new Method<Stellar.TransactionMetaV1EncodeRequest, Stellar.TransactionMetaV1EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionMetaV1",
                TransactionMetaV1EncodeRequestGrpcMarshaller.TransactionMetaV1EncodeRequestMarshaller,
                TransactionMetaV1EncodeResponseGrpcMarshaller.TransactionMetaV1EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionMetaV1</summary>
        public static readonly Method<Stellar.TransactionMetaV1DecodeRequest, Stellar.TransactionMetaV1DecodeResponse> DecodeTransactionMetaV1 =
            new Method<Stellar.TransactionMetaV1DecodeRequest, Stellar.TransactionMetaV1DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionMetaV1",
                TransactionMetaV1DecodeRequestGrpcMarshaller.TransactionMetaV1DecodeRequestMarshaller,
                TransactionMetaV1DecodeResponseGrpcMarshaller.TransactionMetaV1DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionMetaV2</summary>
        public static readonly Method<Stellar.TransactionMetaV2EncodeRequest, Stellar.TransactionMetaV2EncodeResponse> EncodeTransactionMetaV2 =
            new Method<Stellar.TransactionMetaV2EncodeRequest, Stellar.TransactionMetaV2EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionMetaV2",
                TransactionMetaV2EncodeRequestGrpcMarshaller.TransactionMetaV2EncodeRequestMarshaller,
                TransactionMetaV2EncodeResponseGrpcMarshaller.TransactionMetaV2EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionMetaV2</summary>
        public static readonly Method<Stellar.TransactionMetaV2DecodeRequest, Stellar.TransactionMetaV2DecodeResponse> DecodeTransactionMetaV2 =
            new Method<Stellar.TransactionMetaV2DecodeRequest, Stellar.TransactionMetaV2DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionMetaV2",
                TransactionMetaV2DecodeRequestGrpcMarshaller.TransactionMetaV2DecodeRequestMarshaller,
                TransactionMetaV2DecodeResponseGrpcMarshaller.TransactionMetaV2DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeContractEventType</summary>
        public static readonly Method<Stellar.ContractEventTypeEncodeRequest, Stellar.ContractEventTypeEncodeResponse> EncodeContractEventType =
            new Method<Stellar.ContractEventTypeEncodeRequest, Stellar.ContractEventTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeContractEventType",
                ContractEventTypeEncodeRequestGrpcMarshaller.ContractEventTypeEncodeRequestMarshaller,
                ContractEventTypeEncodeResponseGrpcMarshaller.ContractEventTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeContractEventType</summary>
        public static readonly Method<Stellar.ContractEventTypeDecodeRequest, Stellar.ContractEventTypeDecodeResponse> DecodeContractEventType =
            new Method<Stellar.ContractEventTypeDecodeRequest, Stellar.ContractEventTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeContractEventType",
                ContractEventTypeDecodeRequestGrpcMarshaller.ContractEventTypeDecodeRequestMarshaller,
                ContractEventTypeDecodeResponseGrpcMarshaller.ContractEventTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeContractEvent</summary>
        public static readonly Method<Stellar.ContractEventEncodeRequest, Stellar.ContractEventEncodeResponse> EncodeContractEvent =
            new Method<Stellar.ContractEventEncodeRequest, Stellar.ContractEventEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeContractEvent",
                ContractEventEncodeRequestGrpcMarshaller.ContractEventEncodeRequestMarshaller,
                ContractEventEncodeResponseGrpcMarshaller.ContractEventEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeContractEvent</summary>
        public static readonly Method<Stellar.ContractEventDecodeRequest, Stellar.ContractEventDecodeResponse> DecodeContractEvent =
            new Method<Stellar.ContractEventDecodeRequest, Stellar.ContractEventDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeContractEvent",
                ContractEventDecodeRequestGrpcMarshaller.ContractEventDecodeRequestMarshaller,
                ContractEventDecodeResponseGrpcMarshaller.ContractEventDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeDiagnosticEvent</summary>
        public static readonly Method<Stellar.DiagnosticEventEncodeRequest, Stellar.DiagnosticEventEncodeResponse> EncodeDiagnosticEvent =
            new Method<Stellar.DiagnosticEventEncodeRequest, Stellar.DiagnosticEventEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeDiagnosticEvent",
                DiagnosticEventEncodeRequestGrpcMarshaller.DiagnosticEventEncodeRequestMarshaller,
                DiagnosticEventEncodeResponseGrpcMarshaller.DiagnosticEventEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeDiagnosticEvent</summary>
        public static readonly Method<Stellar.DiagnosticEventDecodeRequest, Stellar.DiagnosticEventDecodeResponse> DecodeDiagnosticEvent =
            new Method<Stellar.DiagnosticEventDecodeRequest, Stellar.DiagnosticEventDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeDiagnosticEvent",
                DiagnosticEventDecodeRequestGrpcMarshaller.DiagnosticEventDecodeRequestMarshaller,
                DiagnosticEventDecodeResponseGrpcMarshaller.DiagnosticEventDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeDiagnosticEvents</summary>
        public static readonly Method<Stellar.DiagnosticEventsEncodeRequest, Stellar.DiagnosticEventsEncodeResponse> EncodeDiagnosticEvents =
            new Method<Stellar.DiagnosticEventsEncodeRequest, Stellar.DiagnosticEventsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeDiagnosticEvents",
                DiagnosticEventsEncodeRequestGrpcMarshaller.DiagnosticEventsEncodeRequestMarshaller,
                DiagnosticEventsEncodeResponseGrpcMarshaller.DiagnosticEventsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeDiagnosticEvents</summary>
        public static readonly Method<Stellar.DiagnosticEventsDecodeRequest, Stellar.DiagnosticEventsDecodeResponse> DecodeDiagnosticEvents =
            new Method<Stellar.DiagnosticEventsDecodeRequest, Stellar.DiagnosticEventsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeDiagnosticEvents",
                DiagnosticEventsDecodeRequestGrpcMarshaller.DiagnosticEventsDecodeRequestMarshaller,
                DiagnosticEventsDecodeResponseGrpcMarshaller.DiagnosticEventsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSorobanTransactionMetaExtV1</summary>
        public static readonly Method<Stellar.SorobanTransactionMetaExtV1EncodeRequest, Stellar.SorobanTransactionMetaExtV1EncodeResponse> EncodeSorobanTransactionMetaExtV1 =
            new Method<Stellar.SorobanTransactionMetaExtV1EncodeRequest, Stellar.SorobanTransactionMetaExtV1EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSorobanTransactionMetaExtV1",
                SorobanTransactionMetaExtV1EncodeRequestGrpcMarshaller.SorobanTransactionMetaExtV1EncodeRequestMarshaller,
                SorobanTransactionMetaExtV1EncodeResponseGrpcMarshaller.SorobanTransactionMetaExtV1EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSorobanTransactionMetaExtV1</summary>
        public static readonly Method<Stellar.SorobanTransactionMetaExtV1DecodeRequest, Stellar.SorobanTransactionMetaExtV1DecodeResponse> DecodeSorobanTransactionMetaExtV1 =
            new Method<Stellar.SorobanTransactionMetaExtV1DecodeRequest, Stellar.SorobanTransactionMetaExtV1DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSorobanTransactionMetaExtV1",
                SorobanTransactionMetaExtV1DecodeRequestGrpcMarshaller.SorobanTransactionMetaExtV1DecodeRequestMarshaller,
                SorobanTransactionMetaExtV1DecodeResponseGrpcMarshaller.SorobanTransactionMetaExtV1DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSorobanTransactionMetaExt</summary>
        public static readonly Method<Stellar.SorobanTransactionMetaExtEncodeRequest, Stellar.SorobanTransactionMetaExtEncodeResponse> EncodeSorobanTransactionMetaExt =
            new Method<Stellar.SorobanTransactionMetaExtEncodeRequest, Stellar.SorobanTransactionMetaExtEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSorobanTransactionMetaExt",
                SorobanTransactionMetaExtEncodeRequestGrpcMarshaller.SorobanTransactionMetaExtEncodeRequestMarshaller,
                SorobanTransactionMetaExtEncodeResponseGrpcMarshaller.SorobanTransactionMetaExtEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSorobanTransactionMetaExt</summary>
        public static readonly Method<Stellar.SorobanTransactionMetaExtDecodeRequest, Stellar.SorobanTransactionMetaExtDecodeResponse> DecodeSorobanTransactionMetaExt =
            new Method<Stellar.SorobanTransactionMetaExtDecodeRequest, Stellar.SorobanTransactionMetaExtDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSorobanTransactionMetaExt",
                SorobanTransactionMetaExtDecodeRequestGrpcMarshaller.SorobanTransactionMetaExtDecodeRequestMarshaller,
                SorobanTransactionMetaExtDecodeResponseGrpcMarshaller.SorobanTransactionMetaExtDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSorobanTransactionMeta</summary>
        public static readonly Method<Stellar.SorobanTransactionMetaEncodeRequest, Stellar.SorobanTransactionMetaEncodeResponse> EncodeSorobanTransactionMeta =
            new Method<Stellar.SorobanTransactionMetaEncodeRequest, Stellar.SorobanTransactionMetaEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSorobanTransactionMeta",
                SorobanTransactionMetaEncodeRequestGrpcMarshaller.SorobanTransactionMetaEncodeRequestMarshaller,
                SorobanTransactionMetaEncodeResponseGrpcMarshaller.SorobanTransactionMetaEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSorobanTransactionMeta</summary>
        public static readonly Method<Stellar.SorobanTransactionMetaDecodeRequest, Stellar.SorobanTransactionMetaDecodeResponse> DecodeSorobanTransactionMeta =
            new Method<Stellar.SorobanTransactionMetaDecodeRequest, Stellar.SorobanTransactionMetaDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSorobanTransactionMeta",
                SorobanTransactionMetaDecodeRequestGrpcMarshaller.SorobanTransactionMetaDecodeRequestMarshaller,
                SorobanTransactionMetaDecodeResponseGrpcMarshaller.SorobanTransactionMetaDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionMetaV3</summary>
        public static readonly Method<Stellar.TransactionMetaV3EncodeRequest, Stellar.TransactionMetaV3EncodeResponse> EncodeTransactionMetaV3 =
            new Method<Stellar.TransactionMetaV3EncodeRequest, Stellar.TransactionMetaV3EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionMetaV3",
                TransactionMetaV3EncodeRequestGrpcMarshaller.TransactionMetaV3EncodeRequestMarshaller,
                TransactionMetaV3EncodeResponseGrpcMarshaller.TransactionMetaV3EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionMetaV3</summary>
        public static readonly Method<Stellar.TransactionMetaV3DecodeRequest, Stellar.TransactionMetaV3DecodeResponse> DecodeTransactionMetaV3 =
            new Method<Stellar.TransactionMetaV3DecodeRequest, Stellar.TransactionMetaV3DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionMetaV3",
                TransactionMetaV3DecodeRequestGrpcMarshaller.TransactionMetaV3DecodeRequestMarshaller,
                TransactionMetaV3DecodeResponseGrpcMarshaller.TransactionMetaV3DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeInvokeHostFunctionSuccessPreImage</summary>
        public static readonly Method<Stellar.InvokeHostFunctionSuccessPreImageEncodeRequest, Stellar.InvokeHostFunctionSuccessPreImageEncodeResponse> EncodeInvokeHostFunctionSuccessPreImage =
            new Method<Stellar.InvokeHostFunctionSuccessPreImageEncodeRequest, Stellar.InvokeHostFunctionSuccessPreImageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeInvokeHostFunctionSuccessPreImage",
                InvokeHostFunctionSuccessPreImageEncodeRequestGrpcMarshaller.InvokeHostFunctionSuccessPreImageEncodeRequestMarshaller,
                InvokeHostFunctionSuccessPreImageEncodeResponseGrpcMarshaller.InvokeHostFunctionSuccessPreImageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeInvokeHostFunctionSuccessPreImage</summary>
        public static readonly Method<Stellar.InvokeHostFunctionSuccessPreImageDecodeRequest, Stellar.InvokeHostFunctionSuccessPreImageDecodeResponse> DecodeInvokeHostFunctionSuccessPreImage =
            new Method<Stellar.InvokeHostFunctionSuccessPreImageDecodeRequest, Stellar.InvokeHostFunctionSuccessPreImageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeInvokeHostFunctionSuccessPreImage",
                InvokeHostFunctionSuccessPreImageDecodeRequestGrpcMarshaller.InvokeHostFunctionSuccessPreImageDecodeRequestMarshaller,
                InvokeHostFunctionSuccessPreImageDecodeResponseGrpcMarshaller.InvokeHostFunctionSuccessPreImageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionMeta</summary>
        public static readonly Method<Stellar.TransactionMetaEncodeRequest, Stellar.TransactionMetaEncodeResponse> EncodeTransactionMeta =
            new Method<Stellar.TransactionMetaEncodeRequest, Stellar.TransactionMetaEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionMeta",
                TransactionMetaEncodeRequestGrpcMarshaller.TransactionMetaEncodeRequestMarshaller,
                TransactionMetaEncodeResponseGrpcMarshaller.TransactionMetaEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionMeta</summary>
        public static readonly Method<Stellar.TransactionMetaDecodeRequest, Stellar.TransactionMetaDecodeResponse> DecodeTransactionMeta =
            new Method<Stellar.TransactionMetaDecodeRequest, Stellar.TransactionMetaDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionMeta",
                TransactionMetaDecodeRequestGrpcMarshaller.TransactionMetaDecodeRequestMarshaller,
                TransactionMetaDecodeResponseGrpcMarshaller.TransactionMetaDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionResultMeta</summary>
        public static readonly Method<Stellar.TransactionResultMetaEncodeRequest, Stellar.TransactionResultMetaEncodeResponse> EncodeTransactionResultMeta =
            new Method<Stellar.TransactionResultMetaEncodeRequest, Stellar.TransactionResultMetaEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionResultMeta",
                TransactionResultMetaEncodeRequestGrpcMarshaller.TransactionResultMetaEncodeRequestMarshaller,
                TransactionResultMetaEncodeResponseGrpcMarshaller.TransactionResultMetaEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionResultMeta</summary>
        public static readonly Method<Stellar.TransactionResultMetaDecodeRequest, Stellar.TransactionResultMetaDecodeResponse> DecodeTransactionResultMeta =
            new Method<Stellar.TransactionResultMetaDecodeRequest, Stellar.TransactionResultMetaDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionResultMeta",
                TransactionResultMetaDecodeRequestGrpcMarshaller.TransactionResultMetaDecodeRequestMarshaller,
                TransactionResultMetaDecodeResponseGrpcMarshaller.TransactionResultMetaDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeUpgradeEntryMeta</summary>
        public static readonly Method<Stellar.UpgradeEntryMetaEncodeRequest, Stellar.UpgradeEntryMetaEncodeResponse> EncodeUpgradeEntryMeta =
            new Method<Stellar.UpgradeEntryMetaEncodeRequest, Stellar.UpgradeEntryMetaEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeUpgradeEntryMeta",
                UpgradeEntryMetaEncodeRequestGrpcMarshaller.UpgradeEntryMetaEncodeRequestMarshaller,
                UpgradeEntryMetaEncodeResponseGrpcMarshaller.UpgradeEntryMetaEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeUpgradeEntryMeta</summary>
        public static readonly Method<Stellar.UpgradeEntryMetaDecodeRequest, Stellar.UpgradeEntryMetaDecodeResponse> DecodeUpgradeEntryMeta =
            new Method<Stellar.UpgradeEntryMetaDecodeRequest, Stellar.UpgradeEntryMetaDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeUpgradeEntryMeta",
                UpgradeEntryMetaDecodeRequestGrpcMarshaller.UpgradeEntryMetaDecodeRequestMarshaller,
                UpgradeEntryMetaDecodeResponseGrpcMarshaller.UpgradeEntryMetaDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerCloseMetaV0</summary>
        public static readonly Method<Stellar.LedgerCloseMetaV0EncodeRequest, Stellar.LedgerCloseMetaV0EncodeResponse> EncodeLedgerCloseMetaV0 =
            new Method<Stellar.LedgerCloseMetaV0EncodeRequest, Stellar.LedgerCloseMetaV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerCloseMetaV0",
                LedgerCloseMetaV0EncodeRequestGrpcMarshaller.LedgerCloseMetaV0EncodeRequestMarshaller,
                LedgerCloseMetaV0EncodeResponseGrpcMarshaller.LedgerCloseMetaV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerCloseMetaV0</summary>
        public static readonly Method<Stellar.LedgerCloseMetaV0DecodeRequest, Stellar.LedgerCloseMetaV0DecodeResponse> DecodeLedgerCloseMetaV0 =
            new Method<Stellar.LedgerCloseMetaV0DecodeRequest, Stellar.LedgerCloseMetaV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerCloseMetaV0",
                LedgerCloseMetaV0DecodeRequestGrpcMarshaller.LedgerCloseMetaV0DecodeRequestMarshaller,
                LedgerCloseMetaV0DecodeResponseGrpcMarshaller.LedgerCloseMetaV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerCloseMetaExtV1</summary>
        public static readonly Method<Stellar.LedgerCloseMetaExtV1EncodeRequest, Stellar.LedgerCloseMetaExtV1EncodeResponse> EncodeLedgerCloseMetaExtV1 =
            new Method<Stellar.LedgerCloseMetaExtV1EncodeRequest, Stellar.LedgerCloseMetaExtV1EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerCloseMetaExtV1",
                LedgerCloseMetaExtV1EncodeRequestGrpcMarshaller.LedgerCloseMetaExtV1EncodeRequestMarshaller,
                LedgerCloseMetaExtV1EncodeResponseGrpcMarshaller.LedgerCloseMetaExtV1EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerCloseMetaExtV1</summary>
        public static readonly Method<Stellar.LedgerCloseMetaExtV1DecodeRequest, Stellar.LedgerCloseMetaExtV1DecodeResponse> DecodeLedgerCloseMetaExtV1 =
            new Method<Stellar.LedgerCloseMetaExtV1DecodeRequest, Stellar.LedgerCloseMetaExtV1DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerCloseMetaExtV1",
                LedgerCloseMetaExtV1DecodeRequestGrpcMarshaller.LedgerCloseMetaExtV1DecodeRequestMarshaller,
                LedgerCloseMetaExtV1DecodeResponseGrpcMarshaller.LedgerCloseMetaExtV1DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerCloseMetaExt</summary>
        public static readonly Method<Stellar.LedgerCloseMetaExtEncodeRequest, Stellar.LedgerCloseMetaExtEncodeResponse> EncodeLedgerCloseMetaExt =
            new Method<Stellar.LedgerCloseMetaExtEncodeRequest, Stellar.LedgerCloseMetaExtEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerCloseMetaExt",
                LedgerCloseMetaExtEncodeRequestGrpcMarshaller.LedgerCloseMetaExtEncodeRequestMarshaller,
                LedgerCloseMetaExtEncodeResponseGrpcMarshaller.LedgerCloseMetaExtEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerCloseMetaExt</summary>
        public static readonly Method<Stellar.LedgerCloseMetaExtDecodeRequest, Stellar.LedgerCloseMetaExtDecodeResponse> DecodeLedgerCloseMetaExt =
            new Method<Stellar.LedgerCloseMetaExtDecodeRequest, Stellar.LedgerCloseMetaExtDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerCloseMetaExt",
                LedgerCloseMetaExtDecodeRequestGrpcMarshaller.LedgerCloseMetaExtDecodeRequestMarshaller,
                LedgerCloseMetaExtDecodeResponseGrpcMarshaller.LedgerCloseMetaExtDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerCloseMetaV1</summary>
        public static readonly Method<Stellar.LedgerCloseMetaV1EncodeRequest, Stellar.LedgerCloseMetaV1EncodeResponse> EncodeLedgerCloseMetaV1 =
            new Method<Stellar.LedgerCloseMetaV1EncodeRequest, Stellar.LedgerCloseMetaV1EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerCloseMetaV1",
                LedgerCloseMetaV1EncodeRequestGrpcMarshaller.LedgerCloseMetaV1EncodeRequestMarshaller,
                LedgerCloseMetaV1EncodeResponseGrpcMarshaller.LedgerCloseMetaV1EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerCloseMetaV1</summary>
        public static readonly Method<Stellar.LedgerCloseMetaV1DecodeRequest, Stellar.LedgerCloseMetaV1DecodeResponse> DecodeLedgerCloseMetaV1 =
            new Method<Stellar.LedgerCloseMetaV1DecodeRequest, Stellar.LedgerCloseMetaV1DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerCloseMetaV1",
                LedgerCloseMetaV1DecodeRequestGrpcMarshaller.LedgerCloseMetaV1DecodeRequestMarshaller,
                LedgerCloseMetaV1DecodeResponseGrpcMarshaller.LedgerCloseMetaV1DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerCloseMeta</summary>
        public static readonly Method<Stellar.LedgerCloseMetaEncodeRequest, Stellar.LedgerCloseMetaEncodeResponse> EncodeLedgerCloseMeta =
            new Method<Stellar.LedgerCloseMetaEncodeRequest, Stellar.LedgerCloseMetaEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerCloseMeta",
                LedgerCloseMetaEncodeRequestGrpcMarshaller.LedgerCloseMetaEncodeRequestMarshaller,
                LedgerCloseMetaEncodeResponseGrpcMarshaller.LedgerCloseMetaEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerCloseMeta</summary>
        public static readonly Method<Stellar.LedgerCloseMetaDecodeRequest, Stellar.LedgerCloseMetaDecodeResponse> DecodeLedgerCloseMeta =
            new Method<Stellar.LedgerCloseMetaDecodeRequest, Stellar.LedgerCloseMetaDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerCloseMeta",
                LedgerCloseMetaDecodeRequestGrpcMarshaller.LedgerCloseMetaDecodeRequestMarshaller,
                LedgerCloseMetaDecodeResponseGrpcMarshaller.LedgerCloseMetaDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeErrorCode</summary>
        public static readonly Method<Stellar.ErrorCodeEncodeRequest, Stellar.ErrorCodeEncodeResponse> EncodeErrorCode =
            new Method<Stellar.ErrorCodeEncodeRequest, Stellar.ErrorCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeErrorCode",
                ErrorCodeEncodeRequestGrpcMarshaller.ErrorCodeEncodeRequestMarshaller,
                ErrorCodeEncodeResponseGrpcMarshaller.ErrorCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeErrorCode</summary>
        public static readonly Method<Stellar.ErrorCodeDecodeRequest, Stellar.ErrorCodeDecodeResponse> DecodeErrorCode =
            new Method<Stellar.ErrorCodeDecodeRequest, Stellar.ErrorCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeErrorCode",
                ErrorCodeDecodeRequestGrpcMarshaller.ErrorCodeDecodeRequestMarshaller,
                ErrorCodeDecodeResponseGrpcMarshaller.ErrorCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeError</summary>
        public static readonly Method<Stellar.ErrorEncodeRequest, Stellar.ErrorEncodeResponse> EncodeError =
            new Method<Stellar.ErrorEncodeRequest, Stellar.ErrorEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeError",
                ErrorEncodeRequestGrpcMarshaller.ErrorEncodeRequestMarshaller,
                ErrorEncodeResponseGrpcMarshaller.ErrorEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeError</summary>
        public static readonly Method<Stellar.ErrorDecodeRequest, Stellar.ErrorDecodeResponse> DecodeError =
            new Method<Stellar.ErrorDecodeRequest, Stellar.ErrorDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeError",
                ErrorDecodeRequestGrpcMarshaller.ErrorDecodeRequestMarshaller,
                ErrorDecodeResponseGrpcMarshaller.ErrorDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSendMore</summary>
        public static readonly Method<Stellar.SendMoreEncodeRequest, Stellar.SendMoreEncodeResponse> EncodeSendMore =
            new Method<Stellar.SendMoreEncodeRequest, Stellar.SendMoreEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSendMore",
                SendMoreEncodeRequestGrpcMarshaller.SendMoreEncodeRequestMarshaller,
                SendMoreEncodeResponseGrpcMarshaller.SendMoreEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSendMore</summary>
        public static readonly Method<Stellar.SendMoreDecodeRequest, Stellar.SendMoreDecodeResponse> DecodeSendMore =
            new Method<Stellar.SendMoreDecodeRequest, Stellar.SendMoreDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSendMore",
                SendMoreDecodeRequestGrpcMarshaller.SendMoreDecodeRequestMarshaller,
                SendMoreDecodeResponseGrpcMarshaller.SendMoreDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSendMoreExtended</summary>
        public static readonly Method<Stellar.SendMoreExtendedEncodeRequest, Stellar.SendMoreExtendedEncodeResponse> EncodeSendMoreExtended =
            new Method<Stellar.SendMoreExtendedEncodeRequest, Stellar.SendMoreExtendedEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSendMoreExtended",
                SendMoreExtendedEncodeRequestGrpcMarshaller.SendMoreExtendedEncodeRequestMarshaller,
                SendMoreExtendedEncodeResponseGrpcMarshaller.SendMoreExtendedEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSendMoreExtended</summary>
        public static readonly Method<Stellar.SendMoreExtendedDecodeRequest, Stellar.SendMoreExtendedDecodeResponse> DecodeSendMoreExtended =
            new Method<Stellar.SendMoreExtendedDecodeRequest, Stellar.SendMoreExtendedDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSendMoreExtended",
                SendMoreExtendedDecodeRequestGrpcMarshaller.SendMoreExtendedDecodeRequestMarshaller,
                SendMoreExtendedDecodeResponseGrpcMarshaller.SendMoreExtendedDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAuthCert</summary>
        public static readonly Method<Stellar.AuthCertEncodeRequest, Stellar.AuthCertEncodeResponse> EncodeAuthCert =
            new Method<Stellar.AuthCertEncodeRequest, Stellar.AuthCertEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAuthCert",
                AuthCertEncodeRequestGrpcMarshaller.AuthCertEncodeRequestMarshaller,
                AuthCertEncodeResponseGrpcMarshaller.AuthCertEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAuthCert</summary>
        public static readonly Method<Stellar.AuthCertDecodeRequest, Stellar.AuthCertDecodeResponse> DecodeAuthCert =
            new Method<Stellar.AuthCertDecodeRequest, Stellar.AuthCertDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAuthCert",
                AuthCertDecodeRequestGrpcMarshaller.AuthCertDecodeRequestMarshaller,
                AuthCertDecodeResponseGrpcMarshaller.AuthCertDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeHello</summary>
        public static readonly Method<Stellar.HelloEncodeRequest, Stellar.HelloEncodeResponse> EncodeHello =
            new Method<Stellar.HelloEncodeRequest, Stellar.HelloEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeHello",
                HelloEncodeRequestGrpcMarshaller.HelloEncodeRequestMarshaller,
                HelloEncodeResponseGrpcMarshaller.HelloEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeHello</summary>
        public static readonly Method<Stellar.HelloDecodeRequest, Stellar.HelloDecodeResponse> DecodeHello =
            new Method<Stellar.HelloDecodeRequest, Stellar.HelloDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeHello",
                HelloDecodeRequestGrpcMarshaller.HelloDecodeRequestMarshaller,
                HelloDecodeResponseGrpcMarshaller.HelloDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAuth</summary>
        public static readonly Method<Stellar.AuthEncodeRequest, Stellar.AuthEncodeResponse> EncodeAuth =
            new Method<Stellar.AuthEncodeRequest, Stellar.AuthEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAuth",
                AuthEncodeRequestGrpcMarshaller.AuthEncodeRequestMarshaller,
                AuthEncodeResponseGrpcMarshaller.AuthEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAuth</summary>
        public static readonly Method<Stellar.AuthDecodeRequest, Stellar.AuthDecodeResponse> DecodeAuth =
            new Method<Stellar.AuthDecodeRequest, Stellar.AuthDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAuth",
                AuthDecodeRequestGrpcMarshaller.AuthDecodeRequestMarshaller,
                AuthDecodeResponseGrpcMarshaller.AuthDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeIPAddrType</summary>
        public static readonly Method<Stellar.IPAddrTypeEncodeRequest, Stellar.IPAddrTypeEncodeResponse> EncodeIPAddrType =
            new Method<Stellar.IPAddrTypeEncodeRequest, Stellar.IPAddrTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeIPAddrType",
                IPAddrTypeEncodeRequestGrpcMarshaller.IPAddrTypeEncodeRequestMarshaller,
                IPAddrTypeEncodeResponseGrpcMarshaller.IPAddrTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeIPAddrType</summary>
        public static readonly Method<Stellar.IPAddrTypeDecodeRequest, Stellar.IPAddrTypeDecodeResponse> DecodeIPAddrType =
            new Method<Stellar.IPAddrTypeDecodeRequest, Stellar.IPAddrTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeIPAddrType",
                IPAddrTypeDecodeRequestGrpcMarshaller.IPAddrTypeDecodeRequestMarshaller,
                IPAddrTypeDecodeResponseGrpcMarshaller.IPAddrTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePeerAddress</summary>
        public static readonly Method<Stellar.PeerAddressEncodeRequest, Stellar.PeerAddressEncodeResponse> EncodePeerAddress =
            new Method<Stellar.PeerAddressEncodeRequest, Stellar.PeerAddressEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePeerAddress",
                PeerAddressEncodeRequestGrpcMarshaller.PeerAddressEncodeRequestMarshaller,
                PeerAddressEncodeResponseGrpcMarshaller.PeerAddressEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePeerAddress</summary>
        public static readonly Method<Stellar.PeerAddressDecodeRequest, Stellar.PeerAddressDecodeResponse> DecodePeerAddress =
            new Method<Stellar.PeerAddressDecodeRequest, Stellar.PeerAddressDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePeerAddress",
                PeerAddressDecodeRequestGrpcMarshaller.PeerAddressDecodeRequestMarshaller,
                PeerAddressDecodeResponseGrpcMarshaller.PeerAddressDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeMessageType</summary>
        public static readonly Method<Stellar.MessageTypeEncodeRequest, Stellar.MessageTypeEncodeResponse> EncodeMessageType =
            new Method<Stellar.MessageTypeEncodeRequest, Stellar.MessageTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeMessageType",
                MessageTypeEncodeRequestGrpcMarshaller.MessageTypeEncodeRequestMarshaller,
                MessageTypeEncodeResponseGrpcMarshaller.MessageTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeMessageType</summary>
        public static readonly Method<Stellar.MessageTypeDecodeRequest, Stellar.MessageTypeDecodeResponse> DecodeMessageType =
            new Method<Stellar.MessageTypeDecodeRequest, Stellar.MessageTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeMessageType",
                MessageTypeDecodeRequestGrpcMarshaller.MessageTypeDecodeRequestMarshaller,
                MessageTypeDecodeResponseGrpcMarshaller.MessageTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeDontHave</summary>
        public static readonly Method<Stellar.DontHaveEncodeRequest, Stellar.DontHaveEncodeResponse> EncodeDontHave =
            new Method<Stellar.DontHaveEncodeRequest, Stellar.DontHaveEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeDontHave",
                DontHaveEncodeRequestGrpcMarshaller.DontHaveEncodeRequestMarshaller,
                DontHaveEncodeResponseGrpcMarshaller.DontHaveEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeDontHave</summary>
        public static readonly Method<Stellar.DontHaveDecodeRequest, Stellar.DontHaveDecodeResponse> DecodeDontHave =
            new Method<Stellar.DontHaveDecodeRequest, Stellar.DontHaveDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeDontHave",
                DontHaveDecodeRequestGrpcMarshaller.DontHaveDecodeRequestMarshaller,
                DontHaveDecodeResponseGrpcMarshaller.DontHaveDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSurveyMessageCommandType</summary>
        public static readonly Method<Stellar.SurveyMessageCommandTypeEncodeRequest, Stellar.SurveyMessageCommandTypeEncodeResponse> EncodeSurveyMessageCommandType =
            new Method<Stellar.SurveyMessageCommandTypeEncodeRequest, Stellar.SurveyMessageCommandTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSurveyMessageCommandType",
                SurveyMessageCommandTypeEncodeRequestGrpcMarshaller.SurveyMessageCommandTypeEncodeRequestMarshaller,
                SurveyMessageCommandTypeEncodeResponseGrpcMarshaller.SurveyMessageCommandTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSurveyMessageCommandType</summary>
        public static readonly Method<Stellar.SurveyMessageCommandTypeDecodeRequest, Stellar.SurveyMessageCommandTypeDecodeResponse> DecodeSurveyMessageCommandType =
            new Method<Stellar.SurveyMessageCommandTypeDecodeRequest, Stellar.SurveyMessageCommandTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSurveyMessageCommandType",
                SurveyMessageCommandTypeDecodeRequestGrpcMarshaller.SurveyMessageCommandTypeDecodeRequestMarshaller,
                SurveyMessageCommandTypeDecodeResponseGrpcMarshaller.SurveyMessageCommandTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSurveyMessageResponseType</summary>
        public static readonly Method<Stellar.SurveyMessageResponseTypeEncodeRequest, Stellar.SurveyMessageResponseTypeEncodeResponse> EncodeSurveyMessageResponseType =
            new Method<Stellar.SurveyMessageResponseTypeEncodeRequest, Stellar.SurveyMessageResponseTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSurveyMessageResponseType",
                SurveyMessageResponseTypeEncodeRequestGrpcMarshaller.SurveyMessageResponseTypeEncodeRequestMarshaller,
                SurveyMessageResponseTypeEncodeResponseGrpcMarshaller.SurveyMessageResponseTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSurveyMessageResponseType</summary>
        public static readonly Method<Stellar.SurveyMessageResponseTypeDecodeRequest, Stellar.SurveyMessageResponseTypeDecodeResponse> DecodeSurveyMessageResponseType =
            new Method<Stellar.SurveyMessageResponseTypeDecodeRequest, Stellar.SurveyMessageResponseTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSurveyMessageResponseType",
                SurveyMessageResponseTypeDecodeRequestGrpcMarshaller.SurveyMessageResponseTypeDecodeRequestMarshaller,
                SurveyMessageResponseTypeDecodeResponseGrpcMarshaller.SurveyMessageResponseTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTimeSlicedSurveyStartCollectingMessage</summary>
        public static readonly Method<Stellar.TimeSlicedSurveyStartCollectingMessageEncodeRequest, Stellar.TimeSlicedSurveyStartCollectingMessageEncodeResponse> EncodeTimeSlicedSurveyStartCollectingMessage =
            new Method<Stellar.TimeSlicedSurveyStartCollectingMessageEncodeRequest, Stellar.TimeSlicedSurveyStartCollectingMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTimeSlicedSurveyStartCollectingMessage",
                TimeSlicedSurveyStartCollectingMessageEncodeRequestGrpcMarshaller.TimeSlicedSurveyStartCollectingMessageEncodeRequestMarshaller,
                TimeSlicedSurveyStartCollectingMessageEncodeResponseGrpcMarshaller.TimeSlicedSurveyStartCollectingMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTimeSlicedSurveyStartCollectingMessage</summary>
        public static readonly Method<Stellar.TimeSlicedSurveyStartCollectingMessageDecodeRequest, Stellar.TimeSlicedSurveyStartCollectingMessageDecodeResponse> DecodeTimeSlicedSurveyStartCollectingMessage =
            new Method<Stellar.TimeSlicedSurveyStartCollectingMessageDecodeRequest, Stellar.TimeSlicedSurveyStartCollectingMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTimeSlicedSurveyStartCollectingMessage",
                TimeSlicedSurveyStartCollectingMessageDecodeRequestGrpcMarshaller.TimeSlicedSurveyStartCollectingMessageDecodeRequestMarshaller,
                TimeSlicedSurveyStartCollectingMessageDecodeResponseGrpcMarshaller.TimeSlicedSurveyStartCollectingMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSignedTimeSlicedSurveyStartCollectingMessage</summary>
        public static readonly Method<Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeRequest, Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeResponse> EncodeSignedTimeSlicedSurveyStartCollectingMessage =
            new Method<Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeRequest, Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSignedTimeSlicedSurveyStartCollectingMessage",
                SignedTimeSlicedSurveyStartCollectingMessageEncodeRequestGrpcMarshaller.SignedTimeSlicedSurveyStartCollectingMessageEncodeRequestMarshaller,
                SignedTimeSlicedSurveyStartCollectingMessageEncodeResponseGrpcMarshaller.SignedTimeSlicedSurveyStartCollectingMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSignedTimeSlicedSurveyStartCollectingMessage</summary>
        public static readonly Method<Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeRequest, Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeResponse> DecodeSignedTimeSlicedSurveyStartCollectingMessage =
            new Method<Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeRequest, Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSignedTimeSlicedSurveyStartCollectingMessage",
                SignedTimeSlicedSurveyStartCollectingMessageDecodeRequestGrpcMarshaller.SignedTimeSlicedSurveyStartCollectingMessageDecodeRequestMarshaller,
                SignedTimeSlicedSurveyStartCollectingMessageDecodeResponseGrpcMarshaller.SignedTimeSlicedSurveyStartCollectingMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTimeSlicedSurveyStopCollectingMessage</summary>
        public static readonly Method<Stellar.TimeSlicedSurveyStopCollectingMessageEncodeRequest, Stellar.TimeSlicedSurveyStopCollectingMessageEncodeResponse> EncodeTimeSlicedSurveyStopCollectingMessage =
            new Method<Stellar.TimeSlicedSurveyStopCollectingMessageEncodeRequest, Stellar.TimeSlicedSurveyStopCollectingMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTimeSlicedSurveyStopCollectingMessage",
                TimeSlicedSurveyStopCollectingMessageEncodeRequestGrpcMarshaller.TimeSlicedSurveyStopCollectingMessageEncodeRequestMarshaller,
                TimeSlicedSurveyStopCollectingMessageEncodeResponseGrpcMarshaller.TimeSlicedSurveyStopCollectingMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTimeSlicedSurveyStopCollectingMessage</summary>
        public static readonly Method<Stellar.TimeSlicedSurveyStopCollectingMessageDecodeRequest, Stellar.TimeSlicedSurveyStopCollectingMessageDecodeResponse> DecodeTimeSlicedSurveyStopCollectingMessage =
            new Method<Stellar.TimeSlicedSurveyStopCollectingMessageDecodeRequest, Stellar.TimeSlicedSurveyStopCollectingMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTimeSlicedSurveyStopCollectingMessage",
                TimeSlicedSurveyStopCollectingMessageDecodeRequestGrpcMarshaller.TimeSlicedSurveyStopCollectingMessageDecodeRequestMarshaller,
                TimeSlicedSurveyStopCollectingMessageDecodeResponseGrpcMarshaller.TimeSlicedSurveyStopCollectingMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSignedTimeSlicedSurveyStopCollectingMessage</summary>
        public static readonly Method<Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeRequest, Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeResponse> EncodeSignedTimeSlicedSurveyStopCollectingMessage =
            new Method<Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeRequest, Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSignedTimeSlicedSurveyStopCollectingMessage",
                SignedTimeSlicedSurveyStopCollectingMessageEncodeRequestGrpcMarshaller.SignedTimeSlicedSurveyStopCollectingMessageEncodeRequestMarshaller,
                SignedTimeSlicedSurveyStopCollectingMessageEncodeResponseGrpcMarshaller.SignedTimeSlicedSurveyStopCollectingMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSignedTimeSlicedSurveyStopCollectingMessage</summary>
        public static readonly Method<Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeRequest, Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeResponse> DecodeSignedTimeSlicedSurveyStopCollectingMessage =
            new Method<Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeRequest, Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSignedTimeSlicedSurveyStopCollectingMessage",
                SignedTimeSlicedSurveyStopCollectingMessageDecodeRequestGrpcMarshaller.SignedTimeSlicedSurveyStopCollectingMessageDecodeRequestMarshaller,
                SignedTimeSlicedSurveyStopCollectingMessageDecodeResponseGrpcMarshaller.SignedTimeSlicedSurveyStopCollectingMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSurveyRequestMessage</summary>
        public static readonly Method<Stellar.SurveyRequestMessageEncodeRequest, Stellar.SurveyRequestMessageEncodeResponse> EncodeSurveyRequestMessage =
            new Method<Stellar.SurveyRequestMessageEncodeRequest, Stellar.SurveyRequestMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSurveyRequestMessage",
                SurveyRequestMessageEncodeRequestGrpcMarshaller.SurveyRequestMessageEncodeRequestMarshaller,
                SurveyRequestMessageEncodeResponseGrpcMarshaller.SurveyRequestMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSurveyRequestMessage</summary>
        public static readonly Method<Stellar.SurveyRequestMessageDecodeRequest, Stellar.SurveyRequestMessageDecodeResponse> DecodeSurveyRequestMessage =
            new Method<Stellar.SurveyRequestMessageDecodeRequest, Stellar.SurveyRequestMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSurveyRequestMessage",
                SurveyRequestMessageDecodeRequestGrpcMarshaller.SurveyRequestMessageDecodeRequestMarshaller,
                SurveyRequestMessageDecodeResponseGrpcMarshaller.SurveyRequestMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTimeSlicedSurveyRequestMessage</summary>
        public static readonly Method<Stellar.TimeSlicedSurveyRequestMessageEncodeRequest, Stellar.TimeSlicedSurveyRequestMessageEncodeResponse> EncodeTimeSlicedSurveyRequestMessage =
            new Method<Stellar.TimeSlicedSurveyRequestMessageEncodeRequest, Stellar.TimeSlicedSurveyRequestMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTimeSlicedSurveyRequestMessage",
                TimeSlicedSurveyRequestMessageEncodeRequestGrpcMarshaller.TimeSlicedSurveyRequestMessageEncodeRequestMarshaller,
                TimeSlicedSurveyRequestMessageEncodeResponseGrpcMarshaller.TimeSlicedSurveyRequestMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTimeSlicedSurveyRequestMessage</summary>
        public static readonly Method<Stellar.TimeSlicedSurveyRequestMessageDecodeRequest, Stellar.TimeSlicedSurveyRequestMessageDecodeResponse> DecodeTimeSlicedSurveyRequestMessage =
            new Method<Stellar.TimeSlicedSurveyRequestMessageDecodeRequest, Stellar.TimeSlicedSurveyRequestMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTimeSlicedSurveyRequestMessage",
                TimeSlicedSurveyRequestMessageDecodeRequestGrpcMarshaller.TimeSlicedSurveyRequestMessageDecodeRequestMarshaller,
                TimeSlicedSurveyRequestMessageDecodeResponseGrpcMarshaller.TimeSlicedSurveyRequestMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSignedSurveyRequestMessage</summary>
        public static readonly Method<Stellar.SignedSurveyRequestMessageEncodeRequest, Stellar.SignedSurveyRequestMessageEncodeResponse> EncodeSignedSurveyRequestMessage =
            new Method<Stellar.SignedSurveyRequestMessageEncodeRequest, Stellar.SignedSurveyRequestMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSignedSurveyRequestMessage",
                SignedSurveyRequestMessageEncodeRequestGrpcMarshaller.SignedSurveyRequestMessageEncodeRequestMarshaller,
                SignedSurveyRequestMessageEncodeResponseGrpcMarshaller.SignedSurveyRequestMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSignedSurveyRequestMessage</summary>
        public static readonly Method<Stellar.SignedSurveyRequestMessageDecodeRequest, Stellar.SignedSurveyRequestMessageDecodeResponse> DecodeSignedSurveyRequestMessage =
            new Method<Stellar.SignedSurveyRequestMessageDecodeRequest, Stellar.SignedSurveyRequestMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSignedSurveyRequestMessage",
                SignedSurveyRequestMessageDecodeRequestGrpcMarshaller.SignedSurveyRequestMessageDecodeRequestMarshaller,
                SignedSurveyRequestMessageDecodeResponseGrpcMarshaller.SignedSurveyRequestMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSignedTimeSlicedSurveyRequestMessage</summary>
        public static readonly Method<Stellar.SignedTimeSlicedSurveyRequestMessageEncodeRequest, Stellar.SignedTimeSlicedSurveyRequestMessageEncodeResponse> EncodeSignedTimeSlicedSurveyRequestMessage =
            new Method<Stellar.SignedTimeSlicedSurveyRequestMessageEncodeRequest, Stellar.SignedTimeSlicedSurveyRequestMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSignedTimeSlicedSurveyRequestMessage",
                SignedTimeSlicedSurveyRequestMessageEncodeRequestGrpcMarshaller.SignedTimeSlicedSurveyRequestMessageEncodeRequestMarshaller,
                SignedTimeSlicedSurveyRequestMessageEncodeResponseGrpcMarshaller.SignedTimeSlicedSurveyRequestMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSignedTimeSlicedSurveyRequestMessage</summary>
        public static readonly Method<Stellar.SignedTimeSlicedSurveyRequestMessageDecodeRequest, Stellar.SignedTimeSlicedSurveyRequestMessageDecodeResponse> DecodeSignedTimeSlicedSurveyRequestMessage =
            new Method<Stellar.SignedTimeSlicedSurveyRequestMessageDecodeRequest, Stellar.SignedTimeSlicedSurveyRequestMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSignedTimeSlicedSurveyRequestMessage",
                SignedTimeSlicedSurveyRequestMessageDecodeRequestGrpcMarshaller.SignedTimeSlicedSurveyRequestMessageDecodeRequestMarshaller,
                SignedTimeSlicedSurveyRequestMessageDecodeResponseGrpcMarshaller.SignedTimeSlicedSurveyRequestMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeEncryptedBody</summary>
        public static readonly Method<Stellar.EncryptedBodyEncodeRequest, Stellar.EncryptedBodyEncodeResponse> EncodeEncryptedBody =
            new Method<Stellar.EncryptedBodyEncodeRequest, Stellar.EncryptedBodyEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeEncryptedBody",
                EncryptedBodyEncodeRequestGrpcMarshaller.EncryptedBodyEncodeRequestMarshaller,
                EncryptedBodyEncodeResponseGrpcMarshaller.EncryptedBodyEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeEncryptedBody</summary>
        public static readonly Method<Stellar.EncryptedBodyDecodeRequest, Stellar.EncryptedBodyDecodeResponse> DecodeEncryptedBody =
            new Method<Stellar.EncryptedBodyDecodeRequest, Stellar.EncryptedBodyDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeEncryptedBody",
                EncryptedBodyDecodeRequestGrpcMarshaller.EncryptedBodyDecodeRequestMarshaller,
                EncryptedBodyDecodeResponseGrpcMarshaller.EncryptedBodyDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSurveyResponseMessage</summary>
        public static readonly Method<Stellar.SurveyResponseMessageEncodeRequest, Stellar.SurveyResponseMessageEncodeResponse> EncodeSurveyResponseMessage =
            new Method<Stellar.SurveyResponseMessageEncodeRequest, Stellar.SurveyResponseMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSurveyResponseMessage",
                SurveyResponseMessageEncodeRequestGrpcMarshaller.SurveyResponseMessageEncodeRequestMarshaller,
                SurveyResponseMessageEncodeResponseGrpcMarshaller.SurveyResponseMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSurveyResponseMessage</summary>
        public static readonly Method<Stellar.SurveyResponseMessageDecodeRequest, Stellar.SurveyResponseMessageDecodeResponse> DecodeSurveyResponseMessage =
            new Method<Stellar.SurveyResponseMessageDecodeRequest, Stellar.SurveyResponseMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSurveyResponseMessage",
                SurveyResponseMessageDecodeRequestGrpcMarshaller.SurveyResponseMessageDecodeRequestMarshaller,
                SurveyResponseMessageDecodeResponseGrpcMarshaller.SurveyResponseMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTimeSlicedSurveyResponseMessage</summary>
        public static readonly Method<Stellar.TimeSlicedSurveyResponseMessageEncodeRequest, Stellar.TimeSlicedSurveyResponseMessageEncodeResponse> EncodeTimeSlicedSurveyResponseMessage =
            new Method<Stellar.TimeSlicedSurveyResponseMessageEncodeRequest, Stellar.TimeSlicedSurveyResponseMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTimeSlicedSurveyResponseMessage",
                TimeSlicedSurveyResponseMessageEncodeRequestGrpcMarshaller.TimeSlicedSurveyResponseMessageEncodeRequestMarshaller,
                TimeSlicedSurveyResponseMessageEncodeResponseGrpcMarshaller.TimeSlicedSurveyResponseMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTimeSlicedSurveyResponseMessage</summary>
        public static readonly Method<Stellar.TimeSlicedSurveyResponseMessageDecodeRequest, Stellar.TimeSlicedSurveyResponseMessageDecodeResponse> DecodeTimeSlicedSurveyResponseMessage =
            new Method<Stellar.TimeSlicedSurveyResponseMessageDecodeRequest, Stellar.TimeSlicedSurveyResponseMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTimeSlicedSurveyResponseMessage",
                TimeSlicedSurveyResponseMessageDecodeRequestGrpcMarshaller.TimeSlicedSurveyResponseMessageDecodeRequestMarshaller,
                TimeSlicedSurveyResponseMessageDecodeResponseGrpcMarshaller.TimeSlicedSurveyResponseMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSignedSurveyResponseMessage</summary>
        public static readonly Method<Stellar.SignedSurveyResponseMessageEncodeRequest, Stellar.SignedSurveyResponseMessageEncodeResponse> EncodeSignedSurveyResponseMessage =
            new Method<Stellar.SignedSurveyResponseMessageEncodeRequest, Stellar.SignedSurveyResponseMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSignedSurveyResponseMessage",
                SignedSurveyResponseMessageEncodeRequestGrpcMarshaller.SignedSurveyResponseMessageEncodeRequestMarshaller,
                SignedSurveyResponseMessageEncodeResponseGrpcMarshaller.SignedSurveyResponseMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSignedSurveyResponseMessage</summary>
        public static readonly Method<Stellar.SignedSurveyResponseMessageDecodeRequest, Stellar.SignedSurveyResponseMessageDecodeResponse> DecodeSignedSurveyResponseMessage =
            new Method<Stellar.SignedSurveyResponseMessageDecodeRequest, Stellar.SignedSurveyResponseMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSignedSurveyResponseMessage",
                SignedSurveyResponseMessageDecodeRequestGrpcMarshaller.SignedSurveyResponseMessageDecodeRequestMarshaller,
                SignedSurveyResponseMessageDecodeResponseGrpcMarshaller.SignedSurveyResponseMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSignedTimeSlicedSurveyResponseMessage</summary>
        public static readonly Method<Stellar.SignedTimeSlicedSurveyResponseMessageEncodeRequest, Stellar.SignedTimeSlicedSurveyResponseMessageEncodeResponse> EncodeSignedTimeSlicedSurveyResponseMessage =
            new Method<Stellar.SignedTimeSlicedSurveyResponseMessageEncodeRequest, Stellar.SignedTimeSlicedSurveyResponseMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSignedTimeSlicedSurveyResponseMessage",
                SignedTimeSlicedSurveyResponseMessageEncodeRequestGrpcMarshaller.SignedTimeSlicedSurveyResponseMessageEncodeRequestMarshaller,
                SignedTimeSlicedSurveyResponseMessageEncodeResponseGrpcMarshaller.SignedTimeSlicedSurveyResponseMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSignedTimeSlicedSurveyResponseMessage</summary>
        public static readonly Method<Stellar.SignedTimeSlicedSurveyResponseMessageDecodeRequest, Stellar.SignedTimeSlicedSurveyResponseMessageDecodeResponse> DecodeSignedTimeSlicedSurveyResponseMessage =
            new Method<Stellar.SignedTimeSlicedSurveyResponseMessageDecodeRequest, Stellar.SignedTimeSlicedSurveyResponseMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSignedTimeSlicedSurveyResponseMessage",
                SignedTimeSlicedSurveyResponseMessageDecodeRequestGrpcMarshaller.SignedTimeSlicedSurveyResponseMessageDecodeRequestMarshaller,
                SignedTimeSlicedSurveyResponseMessageDecodeResponseGrpcMarshaller.SignedTimeSlicedSurveyResponseMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePeerStats</summary>
        public static readonly Method<Stellar.PeerStatsEncodeRequest, Stellar.PeerStatsEncodeResponse> EncodePeerStats =
            new Method<Stellar.PeerStatsEncodeRequest, Stellar.PeerStatsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePeerStats",
                PeerStatsEncodeRequestGrpcMarshaller.PeerStatsEncodeRequestMarshaller,
                PeerStatsEncodeResponseGrpcMarshaller.PeerStatsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePeerStats</summary>
        public static readonly Method<Stellar.PeerStatsDecodeRequest, Stellar.PeerStatsDecodeResponse> DecodePeerStats =
            new Method<Stellar.PeerStatsDecodeRequest, Stellar.PeerStatsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePeerStats",
                PeerStatsDecodeRequestGrpcMarshaller.PeerStatsDecodeRequestMarshaller,
                PeerStatsDecodeResponseGrpcMarshaller.PeerStatsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePeerStatList</summary>
        public static readonly Method<Stellar.PeerStatListEncodeRequest, Stellar.PeerStatListEncodeResponse> EncodePeerStatList =
            new Method<Stellar.PeerStatListEncodeRequest, Stellar.PeerStatListEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePeerStatList",
                PeerStatListEncodeRequestGrpcMarshaller.PeerStatListEncodeRequestMarshaller,
                PeerStatListEncodeResponseGrpcMarshaller.PeerStatListEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePeerStatList</summary>
        public static readonly Method<Stellar.PeerStatListDecodeRequest, Stellar.PeerStatListDecodeResponse> DecodePeerStatList =
            new Method<Stellar.PeerStatListDecodeRequest, Stellar.PeerStatListDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePeerStatList",
                PeerStatListDecodeRequestGrpcMarshaller.PeerStatListDecodeRequestMarshaller,
                PeerStatListDecodeResponseGrpcMarshaller.PeerStatListDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTimeSlicedNodeData</summary>
        public static readonly Method<Stellar.TimeSlicedNodeDataEncodeRequest, Stellar.TimeSlicedNodeDataEncodeResponse> EncodeTimeSlicedNodeData =
            new Method<Stellar.TimeSlicedNodeDataEncodeRequest, Stellar.TimeSlicedNodeDataEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTimeSlicedNodeData",
                TimeSlicedNodeDataEncodeRequestGrpcMarshaller.TimeSlicedNodeDataEncodeRequestMarshaller,
                TimeSlicedNodeDataEncodeResponseGrpcMarshaller.TimeSlicedNodeDataEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTimeSlicedNodeData</summary>
        public static readonly Method<Stellar.TimeSlicedNodeDataDecodeRequest, Stellar.TimeSlicedNodeDataDecodeResponse> DecodeTimeSlicedNodeData =
            new Method<Stellar.TimeSlicedNodeDataDecodeRequest, Stellar.TimeSlicedNodeDataDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTimeSlicedNodeData",
                TimeSlicedNodeDataDecodeRequestGrpcMarshaller.TimeSlicedNodeDataDecodeRequestMarshaller,
                TimeSlicedNodeDataDecodeResponseGrpcMarshaller.TimeSlicedNodeDataDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTimeSlicedPeerData</summary>
        public static readonly Method<Stellar.TimeSlicedPeerDataEncodeRequest, Stellar.TimeSlicedPeerDataEncodeResponse> EncodeTimeSlicedPeerData =
            new Method<Stellar.TimeSlicedPeerDataEncodeRequest, Stellar.TimeSlicedPeerDataEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTimeSlicedPeerData",
                TimeSlicedPeerDataEncodeRequestGrpcMarshaller.TimeSlicedPeerDataEncodeRequestMarshaller,
                TimeSlicedPeerDataEncodeResponseGrpcMarshaller.TimeSlicedPeerDataEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTimeSlicedPeerData</summary>
        public static readonly Method<Stellar.TimeSlicedPeerDataDecodeRequest, Stellar.TimeSlicedPeerDataDecodeResponse> DecodeTimeSlicedPeerData =
            new Method<Stellar.TimeSlicedPeerDataDecodeRequest, Stellar.TimeSlicedPeerDataDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTimeSlicedPeerData",
                TimeSlicedPeerDataDecodeRequestGrpcMarshaller.TimeSlicedPeerDataDecodeRequestMarshaller,
                TimeSlicedPeerDataDecodeResponseGrpcMarshaller.TimeSlicedPeerDataDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTimeSlicedPeerDataList</summary>
        public static readonly Method<Stellar.TimeSlicedPeerDataListEncodeRequest, Stellar.TimeSlicedPeerDataListEncodeResponse> EncodeTimeSlicedPeerDataList =
            new Method<Stellar.TimeSlicedPeerDataListEncodeRequest, Stellar.TimeSlicedPeerDataListEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTimeSlicedPeerDataList",
                TimeSlicedPeerDataListEncodeRequestGrpcMarshaller.TimeSlicedPeerDataListEncodeRequestMarshaller,
                TimeSlicedPeerDataListEncodeResponseGrpcMarshaller.TimeSlicedPeerDataListEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTimeSlicedPeerDataList</summary>
        public static readonly Method<Stellar.TimeSlicedPeerDataListDecodeRequest, Stellar.TimeSlicedPeerDataListDecodeResponse> DecodeTimeSlicedPeerDataList =
            new Method<Stellar.TimeSlicedPeerDataListDecodeRequest, Stellar.TimeSlicedPeerDataListDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTimeSlicedPeerDataList",
                TimeSlicedPeerDataListDecodeRequestGrpcMarshaller.TimeSlicedPeerDataListDecodeRequestMarshaller,
                TimeSlicedPeerDataListDecodeResponseGrpcMarshaller.TimeSlicedPeerDataListDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTopologyResponseBodyV0</summary>
        public static readonly Method<Stellar.TopologyResponseBodyV0EncodeRequest, Stellar.TopologyResponseBodyV0EncodeResponse> EncodeTopologyResponseBodyV0 =
            new Method<Stellar.TopologyResponseBodyV0EncodeRequest, Stellar.TopologyResponseBodyV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTopologyResponseBodyV0",
                TopologyResponseBodyV0EncodeRequestGrpcMarshaller.TopologyResponseBodyV0EncodeRequestMarshaller,
                TopologyResponseBodyV0EncodeResponseGrpcMarshaller.TopologyResponseBodyV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTopologyResponseBodyV0</summary>
        public static readonly Method<Stellar.TopologyResponseBodyV0DecodeRequest, Stellar.TopologyResponseBodyV0DecodeResponse> DecodeTopologyResponseBodyV0 =
            new Method<Stellar.TopologyResponseBodyV0DecodeRequest, Stellar.TopologyResponseBodyV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTopologyResponseBodyV0",
                TopologyResponseBodyV0DecodeRequestGrpcMarshaller.TopologyResponseBodyV0DecodeRequestMarshaller,
                TopologyResponseBodyV0DecodeResponseGrpcMarshaller.TopologyResponseBodyV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTopologyResponseBodyV1</summary>
        public static readonly Method<Stellar.TopologyResponseBodyV1EncodeRequest, Stellar.TopologyResponseBodyV1EncodeResponse> EncodeTopologyResponseBodyV1 =
            new Method<Stellar.TopologyResponseBodyV1EncodeRequest, Stellar.TopologyResponseBodyV1EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTopologyResponseBodyV1",
                TopologyResponseBodyV1EncodeRequestGrpcMarshaller.TopologyResponseBodyV1EncodeRequestMarshaller,
                TopologyResponseBodyV1EncodeResponseGrpcMarshaller.TopologyResponseBodyV1EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTopologyResponseBodyV1</summary>
        public static readonly Method<Stellar.TopologyResponseBodyV1DecodeRequest, Stellar.TopologyResponseBodyV1DecodeResponse> DecodeTopologyResponseBodyV1 =
            new Method<Stellar.TopologyResponseBodyV1DecodeRequest, Stellar.TopologyResponseBodyV1DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTopologyResponseBodyV1",
                TopologyResponseBodyV1DecodeRequestGrpcMarshaller.TopologyResponseBodyV1DecodeRequestMarshaller,
                TopologyResponseBodyV1DecodeResponseGrpcMarshaller.TopologyResponseBodyV1DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTopologyResponseBodyV2</summary>
        public static readonly Method<Stellar.TopologyResponseBodyV2EncodeRequest, Stellar.TopologyResponseBodyV2EncodeResponse> EncodeTopologyResponseBodyV2 =
            new Method<Stellar.TopologyResponseBodyV2EncodeRequest, Stellar.TopologyResponseBodyV2EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTopologyResponseBodyV2",
                TopologyResponseBodyV2EncodeRequestGrpcMarshaller.TopologyResponseBodyV2EncodeRequestMarshaller,
                TopologyResponseBodyV2EncodeResponseGrpcMarshaller.TopologyResponseBodyV2EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTopologyResponseBodyV2</summary>
        public static readonly Method<Stellar.TopologyResponseBodyV2DecodeRequest, Stellar.TopologyResponseBodyV2DecodeResponse> DecodeTopologyResponseBodyV2 =
            new Method<Stellar.TopologyResponseBodyV2DecodeRequest, Stellar.TopologyResponseBodyV2DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTopologyResponseBodyV2",
                TopologyResponseBodyV2DecodeRequestGrpcMarshaller.TopologyResponseBodyV2DecodeRequestMarshaller,
                TopologyResponseBodyV2DecodeResponseGrpcMarshaller.TopologyResponseBodyV2DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSurveyResponseBody</summary>
        public static readonly Method<Stellar.SurveyResponseBodyEncodeRequest, Stellar.SurveyResponseBodyEncodeResponse> EncodeSurveyResponseBody =
            new Method<Stellar.SurveyResponseBodyEncodeRequest, Stellar.SurveyResponseBodyEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSurveyResponseBody",
                SurveyResponseBodyEncodeRequestGrpcMarshaller.SurveyResponseBodyEncodeRequestMarshaller,
                SurveyResponseBodyEncodeResponseGrpcMarshaller.SurveyResponseBodyEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSurveyResponseBody</summary>
        public static readonly Method<Stellar.SurveyResponseBodyDecodeRequest, Stellar.SurveyResponseBodyDecodeResponse> DecodeSurveyResponseBody =
            new Method<Stellar.SurveyResponseBodyDecodeRequest, Stellar.SurveyResponseBodyDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSurveyResponseBody",
                SurveyResponseBodyDecodeRequestGrpcMarshaller.SurveyResponseBodyDecodeRequestMarshaller,
                SurveyResponseBodyDecodeResponseGrpcMarshaller.SurveyResponseBodyDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTxAdvertVector</summary>
        public static readonly Method<Stellar.TxAdvertVectorEncodeRequest, Stellar.TxAdvertVectorEncodeResponse> EncodeTxAdvertVector =
            new Method<Stellar.TxAdvertVectorEncodeRequest, Stellar.TxAdvertVectorEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTxAdvertVector",
                TxAdvertVectorEncodeRequestGrpcMarshaller.TxAdvertVectorEncodeRequestMarshaller,
                TxAdvertVectorEncodeResponseGrpcMarshaller.TxAdvertVectorEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTxAdvertVector</summary>
        public static readonly Method<Stellar.TxAdvertVectorDecodeRequest, Stellar.TxAdvertVectorDecodeResponse> DecodeTxAdvertVector =
            new Method<Stellar.TxAdvertVectorDecodeRequest, Stellar.TxAdvertVectorDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTxAdvertVector",
                TxAdvertVectorDecodeRequestGrpcMarshaller.TxAdvertVectorDecodeRequestMarshaller,
                TxAdvertVectorDecodeResponseGrpcMarshaller.TxAdvertVectorDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeFloodAdvert</summary>
        public static readonly Method<Stellar.FloodAdvertEncodeRequest, Stellar.FloodAdvertEncodeResponse> EncodeFloodAdvert =
            new Method<Stellar.FloodAdvertEncodeRequest, Stellar.FloodAdvertEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeFloodAdvert",
                FloodAdvertEncodeRequestGrpcMarshaller.FloodAdvertEncodeRequestMarshaller,
                FloodAdvertEncodeResponseGrpcMarshaller.FloodAdvertEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeFloodAdvert</summary>
        public static readonly Method<Stellar.FloodAdvertDecodeRequest, Stellar.FloodAdvertDecodeResponse> DecodeFloodAdvert =
            new Method<Stellar.FloodAdvertDecodeRequest, Stellar.FloodAdvertDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeFloodAdvert",
                FloodAdvertDecodeRequestGrpcMarshaller.FloodAdvertDecodeRequestMarshaller,
                FloodAdvertDecodeResponseGrpcMarshaller.FloodAdvertDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTxDemandVector</summary>
        public static readonly Method<Stellar.TxDemandVectorEncodeRequest, Stellar.TxDemandVectorEncodeResponse> EncodeTxDemandVector =
            new Method<Stellar.TxDemandVectorEncodeRequest, Stellar.TxDemandVectorEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTxDemandVector",
                TxDemandVectorEncodeRequestGrpcMarshaller.TxDemandVectorEncodeRequestMarshaller,
                TxDemandVectorEncodeResponseGrpcMarshaller.TxDemandVectorEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTxDemandVector</summary>
        public static readonly Method<Stellar.TxDemandVectorDecodeRequest, Stellar.TxDemandVectorDecodeResponse> DecodeTxDemandVector =
            new Method<Stellar.TxDemandVectorDecodeRequest, Stellar.TxDemandVectorDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTxDemandVector",
                TxDemandVectorDecodeRequestGrpcMarshaller.TxDemandVectorDecodeRequestMarshaller,
                TxDemandVectorDecodeResponseGrpcMarshaller.TxDemandVectorDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeFloodDemand</summary>
        public static readonly Method<Stellar.FloodDemandEncodeRequest, Stellar.FloodDemandEncodeResponse> EncodeFloodDemand =
            new Method<Stellar.FloodDemandEncodeRequest, Stellar.FloodDemandEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeFloodDemand",
                FloodDemandEncodeRequestGrpcMarshaller.FloodDemandEncodeRequestMarshaller,
                FloodDemandEncodeResponseGrpcMarshaller.FloodDemandEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeFloodDemand</summary>
        public static readonly Method<Stellar.FloodDemandDecodeRequest, Stellar.FloodDemandDecodeResponse> DecodeFloodDemand =
            new Method<Stellar.FloodDemandDecodeRequest, Stellar.FloodDemandDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeFloodDemand",
                FloodDemandDecodeRequestGrpcMarshaller.FloodDemandDecodeRequestMarshaller,
                FloodDemandDecodeResponseGrpcMarshaller.FloodDemandDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeStellarMessage</summary>
        public static readonly Method<Stellar.StellarMessageEncodeRequest, Stellar.StellarMessageEncodeResponse> EncodeStellarMessage =
            new Method<Stellar.StellarMessageEncodeRequest, Stellar.StellarMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeStellarMessage",
                StellarMessageEncodeRequestGrpcMarshaller.StellarMessageEncodeRequestMarshaller,
                StellarMessageEncodeResponseGrpcMarshaller.StellarMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeStellarMessage</summary>
        public static readonly Method<Stellar.StellarMessageDecodeRequest, Stellar.StellarMessageDecodeResponse> DecodeStellarMessage =
            new Method<Stellar.StellarMessageDecodeRequest, Stellar.StellarMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeStellarMessage",
                StellarMessageDecodeRequestGrpcMarshaller.StellarMessageDecodeRequestMarshaller,
                StellarMessageDecodeResponseGrpcMarshaller.StellarMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAuthenticatedMessage</summary>
        public static readonly Method<Stellar.AuthenticatedMessageEncodeRequest, Stellar.AuthenticatedMessageEncodeResponse> EncodeAuthenticatedMessage =
            new Method<Stellar.AuthenticatedMessageEncodeRequest, Stellar.AuthenticatedMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAuthenticatedMessage",
                AuthenticatedMessageEncodeRequestGrpcMarshaller.AuthenticatedMessageEncodeRequestMarshaller,
                AuthenticatedMessageEncodeResponseGrpcMarshaller.AuthenticatedMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAuthenticatedMessage</summary>
        public static readonly Method<Stellar.AuthenticatedMessageDecodeRequest, Stellar.AuthenticatedMessageDecodeResponse> DecodeAuthenticatedMessage =
            new Method<Stellar.AuthenticatedMessageDecodeRequest, Stellar.AuthenticatedMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAuthenticatedMessage",
                AuthenticatedMessageDecodeRequestGrpcMarshaller.AuthenticatedMessageDecodeRequestMarshaller,
                AuthenticatedMessageDecodeResponseGrpcMarshaller.AuthenticatedMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeValue</summary>
        public static readonly Method<Stellar.ValueEncodeRequest, Stellar.ValueEncodeResponse> EncodeValue =
            new Method<Stellar.ValueEncodeRequest, Stellar.ValueEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeValue",
                ValueEncodeRequestGrpcMarshaller.ValueEncodeRequestMarshaller,
                ValueEncodeResponseGrpcMarshaller.ValueEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeValue</summary>
        public static readonly Method<Stellar.ValueDecodeRequest, Stellar.ValueDecodeResponse> DecodeValue =
            new Method<Stellar.ValueDecodeRequest, Stellar.ValueDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeValue",
                ValueDecodeRequestGrpcMarshaller.ValueDecodeRequestMarshaller,
                ValueDecodeResponseGrpcMarshaller.ValueDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCPBallot</summary>
        public static readonly Method<Stellar.SCPBallotEncodeRequest, Stellar.SCPBallotEncodeResponse> EncodeSCPBallot =
            new Method<Stellar.SCPBallotEncodeRequest, Stellar.SCPBallotEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCPBallot",
                SCPBallotEncodeRequestGrpcMarshaller.SCPBallotEncodeRequestMarshaller,
                SCPBallotEncodeResponseGrpcMarshaller.SCPBallotEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCPBallot</summary>
        public static readonly Method<Stellar.SCPBallotDecodeRequest, Stellar.SCPBallotDecodeResponse> DecodeSCPBallot =
            new Method<Stellar.SCPBallotDecodeRequest, Stellar.SCPBallotDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCPBallot",
                SCPBallotDecodeRequestGrpcMarshaller.SCPBallotDecodeRequestMarshaller,
                SCPBallotDecodeResponseGrpcMarshaller.SCPBallotDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCPStatementType</summary>
        public static readonly Method<Stellar.SCPStatementTypeEncodeRequest, Stellar.SCPStatementTypeEncodeResponse> EncodeSCPStatementType =
            new Method<Stellar.SCPStatementTypeEncodeRequest, Stellar.SCPStatementTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCPStatementType",
                SCPStatementTypeEncodeRequestGrpcMarshaller.SCPStatementTypeEncodeRequestMarshaller,
                SCPStatementTypeEncodeResponseGrpcMarshaller.SCPStatementTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCPStatementType</summary>
        public static readonly Method<Stellar.SCPStatementTypeDecodeRequest, Stellar.SCPStatementTypeDecodeResponse> DecodeSCPStatementType =
            new Method<Stellar.SCPStatementTypeDecodeRequest, Stellar.SCPStatementTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCPStatementType",
                SCPStatementTypeDecodeRequestGrpcMarshaller.SCPStatementTypeDecodeRequestMarshaller,
                SCPStatementTypeDecodeResponseGrpcMarshaller.SCPStatementTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCPNomination</summary>
        public static readonly Method<Stellar.SCPNominationEncodeRequest, Stellar.SCPNominationEncodeResponse> EncodeSCPNomination =
            new Method<Stellar.SCPNominationEncodeRequest, Stellar.SCPNominationEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCPNomination",
                SCPNominationEncodeRequestGrpcMarshaller.SCPNominationEncodeRequestMarshaller,
                SCPNominationEncodeResponseGrpcMarshaller.SCPNominationEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCPNomination</summary>
        public static readonly Method<Stellar.SCPNominationDecodeRequest, Stellar.SCPNominationDecodeResponse> DecodeSCPNomination =
            new Method<Stellar.SCPNominationDecodeRequest, Stellar.SCPNominationDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCPNomination",
                SCPNominationDecodeRequestGrpcMarshaller.SCPNominationDecodeRequestMarshaller,
                SCPNominationDecodeResponseGrpcMarshaller.SCPNominationDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCPStatement</summary>
        public static readonly Method<Stellar.SCPStatementEncodeRequest, Stellar.SCPStatementEncodeResponse> EncodeSCPStatement =
            new Method<Stellar.SCPStatementEncodeRequest, Stellar.SCPStatementEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCPStatement",
                SCPStatementEncodeRequestGrpcMarshaller.SCPStatementEncodeRequestMarshaller,
                SCPStatementEncodeResponseGrpcMarshaller.SCPStatementEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCPStatement</summary>
        public static readonly Method<Stellar.SCPStatementDecodeRequest, Stellar.SCPStatementDecodeResponse> DecodeSCPStatement =
            new Method<Stellar.SCPStatementDecodeRequest, Stellar.SCPStatementDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCPStatement",
                SCPStatementDecodeRequestGrpcMarshaller.SCPStatementDecodeRequestMarshaller,
                SCPStatementDecodeResponseGrpcMarshaller.SCPStatementDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCPEnvelope</summary>
        public static readonly Method<Stellar.SCPEnvelopeEncodeRequest, Stellar.SCPEnvelopeEncodeResponse> EncodeSCPEnvelope =
            new Method<Stellar.SCPEnvelopeEncodeRequest, Stellar.SCPEnvelopeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCPEnvelope",
                SCPEnvelopeEncodeRequestGrpcMarshaller.SCPEnvelopeEncodeRequestMarshaller,
                SCPEnvelopeEncodeResponseGrpcMarshaller.SCPEnvelopeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCPEnvelope</summary>
        public static readonly Method<Stellar.SCPEnvelopeDecodeRequest, Stellar.SCPEnvelopeDecodeResponse> DecodeSCPEnvelope =
            new Method<Stellar.SCPEnvelopeDecodeRequest, Stellar.SCPEnvelopeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCPEnvelope",
                SCPEnvelopeDecodeRequestGrpcMarshaller.SCPEnvelopeDecodeRequestMarshaller,
                SCPEnvelopeDecodeResponseGrpcMarshaller.SCPEnvelopeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCPQuorumSet</summary>
        public static readonly Method<Stellar.SCPQuorumSetEncodeRequest, Stellar.SCPQuorumSetEncodeResponse> EncodeSCPQuorumSet =
            new Method<Stellar.SCPQuorumSetEncodeRequest, Stellar.SCPQuorumSetEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCPQuorumSet",
                SCPQuorumSetEncodeRequestGrpcMarshaller.SCPQuorumSetEncodeRequestMarshaller,
                SCPQuorumSetEncodeResponseGrpcMarshaller.SCPQuorumSetEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCPQuorumSet</summary>
        public static readonly Method<Stellar.SCPQuorumSetDecodeRequest, Stellar.SCPQuorumSetDecodeResponse> DecodeSCPQuorumSet =
            new Method<Stellar.SCPQuorumSetDecodeRequest, Stellar.SCPQuorumSetDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCPQuorumSet",
                SCPQuorumSetDecodeRequestGrpcMarshaller.SCPQuorumSetDecodeRequestMarshaller,
                SCPQuorumSetDecodeResponseGrpcMarshaller.SCPQuorumSetDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLiquidityPoolParameters</summary>
        public static readonly Method<Stellar.LiquidityPoolParametersEncodeRequest, Stellar.LiquidityPoolParametersEncodeResponse> EncodeLiquidityPoolParameters =
            new Method<Stellar.LiquidityPoolParametersEncodeRequest, Stellar.LiquidityPoolParametersEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLiquidityPoolParameters",
                LiquidityPoolParametersEncodeRequestGrpcMarshaller.LiquidityPoolParametersEncodeRequestMarshaller,
                LiquidityPoolParametersEncodeResponseGrpcMarshaller.LiquidityPoolParametersEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLiquidityPoolParameters</summary>
        public static readonly Method<Stellar.LiquidityPoolParametersDecodeRequest, Stellar.LiquidityPoolParametersDecodeResponse> DecodeLiquidityPoolParameters =
            new Method<Stellar.LiquidityPoolParametersDecodeRequest, Stellar.LiquidityPoolParametersDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLiquidityPoolParameters",
                LiquidityPoolParametersDecodeRequestGrpcMarshaller.LiquidityPoolParametersDecodeRequestMarshaller,
                LiquidityPoolParametersDecodeResponseGrpcMarshaller.LiquidityPoolParametersDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeMuxedAccount</summary>
        public static readonly Method<Stellar.MuxedAccountEncodeRequest, Stellar.MuxedAccountEncodeResponse> EncodeMuxedAccount =
            new Method<Stellar.MuxedAccountEncodeRequest, Stellar.MuxedAccountEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeMuxedAccount",
                MuxedAccountEncodeRequestGrpcMarshaller.MuxedAccountEncodeRequestMarshaller,
                MuxedAccountEncodeResponseGrpcMarshaller.MuxedAccountEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeMuxedAccount</summary>
        public static readonly Method<Stellar.MuxedAccountDecodeRequest, Stellar.MuxedAccountDecodeResponse> DecodeMuxedAccount =
            new Method<Stellar.MuxedAccountDecodeRequest, Stellar.MuxedAccountDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeMuxedAccount",
                MuxedAccountDecodeRequestGrpcMarshaller.MuxedAccountDecodeRequestMarshaller,
                MuxedAccountDecodeResponseGrpcMarshaller.MuxedAccountDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeDecoratedSignature</summary>
        public static readonly Method<Stellar.DecoratedSignatureEncodeRequest, Stellar.DecoratedSignatureEncodeResponse> EncodeDecoratedSignature =
            new Method<Stellar.DecoratedSignatureEncodeRequest, Stellar.DecoratedSignatureEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeDecoratedSignature",
                DecoratedSignatureEncodeRequestGrpcMarshaller.DecoratedSignatureEncodeRequestMarshaller,
                DecoratedSignatureEncodeResponseGrpcMarshaller.DecoratedSignatureEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeDecoratedSignature</summary>
        public static readonly Method<Stellar.DecoratedSignatureDecodeRequest, Stellar.DecoratedSignatureDecodeResponse> DecodeDecoratedSignature =
            new Method<Stellar.DecoratedSignatureDecodeRequest, Stellar.DecoratedSignatureDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeDecoratedSignature",
                DecoratedSignatureDecodeRequestGrpcMarshaller.DecoratedSignatureDecodeRequestMarshaller,
                DecoratedSignatureDecodeResponseGrpcMarshaller.DecoratedSignatureDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeOperationType</summary>
        public static readonly Method<Stellar.OperationTypeEncodeRequest, Stellar.OperationTypeEncodeResponse> EncodeOperationType =
            new Method<Stellar.OperationTypeEncodeRequest, Stellar.OperationTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeOperationType",
                OperationTypeEncodeRequestGrpcMarshaller.OperationTypeEncodeRequestMarshaller,
                OperationTypeEncodeResponseGrpcMarshaller.OperationTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeOperationType</summary>
        public static readonly Method<Stellar.OperationTypeDecodeRequest, Stellar.OperationTypeDecodeResponse> DecodeOperationType =
            new Method<Stellar.OperationTypeDecodeRequest, Stellar.OperationTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeOperationType",
                OperationTypeDecodeRequestGrpcMarshaller.OperationTypeDecodeRequestMarshaller,
                OperationTypeDecodeResponseGrpcMarshaller.OperationTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeCreateAccountOp</summary>
        public static readonly Method<Stellar.CreateAccountOpEncodeRequest, Stellar.CreateAccountOpEncodeResponse> EncodeCreateAccountOp =
            new Method<Stellar.CreateAccountOpEncodeRequest, Stellar.CreateAccountOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeCreateAccountOp",
                CreateAccountOpEncodeRequestGrpcMarshaller.CreateAccountOpEncodeRequestMarshaller,
                CreateAccountOpEncodeResponseGrpcMarshaller.CreateAccountOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeCreateAccountOp</summary>
        public static readonly Method<Stellar.CreateAccountOpDecodeRequest, Stellar.CreateAccountOpDecodeResponse> DecodeCreateAccountOp =
            new Method<Stellar.CreateAccountOpDecodeRequest, Stellar.CreateAccountOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeCreateAccountOp",
                CreateAccountOpDecodeRequestGrpcMarshaller.CreateAccountOpDecodeRequestMarshaller,
                CreateAccountOpDecodeResponseGrpcMarshaller.CreateAccountOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePaymentOp</summary>
        public static readonly Method<Stellar.PaymentOpEncodeRequest, Stellar.PaymentOpEncodeResponse> EncodePaymentOp =
            new Method<Stellar.PaymentOpEncodeRequest, Stellar.PaymentOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePaymentOp",
                PaymentOpEncodeRequestGrpcMarshaller.PaymentOpEncodeRequestMarshaller,
                PaymentOpEncodeResponseGrpcMarshaller.PaymentOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePaymentOp</summary>
        public static readonly Method<Stellar.PaymentOpDecodeRequest, Stellar.PaymentOpDecodeResponse> DecodePaymentOp =
            new Method<Stellar.PaymentOpDecodeRequest, Stellar.PaymentOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePaymentOp",
                PaymentOpDecodeRequestGrpcMarshaller.PaymentOpDecodeRequestMarshaller,
                PaymentOpDecodeResponseGrpcMarshaller.PaymentOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePathPaymentStrictReceiveOp</summary>
        public static readonly Method<Stellar.PathPaymentStrictReceiveOpEncodeRequest, Stellar.PathPaymentStrictReceiveOpEncodeResponse> EncodePathPaymentStrictReceiveOp =
            new Method<Stellar.PathPaymentStrictReceiveOpEncodeRequest, Stellar.PathPaymentStrictReceiveOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePathPaymentStrictReceiveOp",
                PathPaymentStrictReceiveOpEncodeRequestGrpcMarshaller.PathPaymentStrictReceiveOpEncodeRequestMarshaller,
                PathPaymentStrictReceiveOpEncodeResponseGrpcMarshaller.PathPaymentStrictReceiveOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePathPaymentStrictReceiveOp</summary>
        public static readonly Method<Stellar.PathPaymentStrictReceiveOpDecodeRequest, Stellar.PathPaymentStrictReceiveOpDecodeResponse> DecodePathPaymentStrictReceiveOp =
            new Method<Stellar.PathPaymentStrictReceiveOpDecodeRequest, Stellar.PathPaymentStrictReceiveOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePathPaymentStrictReceiveOp",
                PathPaymentStrictReceiveOpDecodeRequestGrpcMarshaller.PathPaymentStrictReceiveOpDecodeRequestMarshaller,
                PathPaymentStrictReceiveOpDecodeResponseGrpcMarshaller.PathPaymentStrictReceiveOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePathPaymentStrictSendOp</summary>
        public static readonly Method<Stellar.PathPaymentStrictSendOpEncodeRequest, Stellar.PathPaymentStrictSendOpEncodeResponse> EncodePathPaymentStrictSendOp =
            new Method<Stellar.PathPaymentStrictSendOpEncodeRequest, Stellar.PathPaymentStrictSendOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePathPaymentStrictSendOp",
                PathPaymentStrictSendOpEncodeRequestGrpcMarshaller.PathPaymentStrictSendOpEncodeRequestMarshaller,
                PathPaymentStrictSendOpEncodeResponseGrpcMarshaller.PathPaymentStrictSendOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePathPaymentStrictSendOp</summary>
        public static readonly Method<Stellar.PathPaymentStrictSendOpDecodeRequest, Stellar.PathPaymentStrictSendOpDecodeResponse> DecodePathPaymentStrictSendOp =
            new Method<Stellar.PathPaymentStrictSendOpDecodeRequest, Stellar.PathPaymentStrictSendOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePathPaymentStrictSendOp",
                PathPaymentStrictSendOpDecodeRequestGrpcMarshaller.PathPaymentStrictSendOpDecodeRequestMarshaller,
                PathPaymentStrictSendOpDecodeResponseGrpcMarshaller.PathPaymentStrictSendOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeManageSellOfferOp</summary>
        public static readonly Method<Stellar.ManageSellOfferOpEncodeRequest, Stellar.ManageSellOfferOpEncodeResponse> EncodeManageSellOfferOp =
            new Method<Stellar.ManageSellOfferOpEncodeRequest, Stellar.ManageSellOfferOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeManageSellOfferOp",
                ManageSellOfferOpEncodeRequestGrpcMarshaller.ManageSellOfferOpEncodeRequestMarshaller,
                ManageSellOfferOpEncodeResponseGrpcMarshaller.ManageSellOfferOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeManageSellOfferOp</summary>
        public static readonly Method<Stellar.ManageSellOfferOpDecodeRequest, Stellar.ManageSellOfferOpDecodeResponse> DecodeManageSellOfferOp =
            new Method<Stellar.ManageSellOfferOpDecodeRequest, Stellar.ManageSellOfferOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeManageSellOfferOp",
                ManageSellOfferOpDecodeRequestGrpcMarshaller.ManageSellOfferOpDecodeRequestMarshaller,
                ManageSellOfferOpDecodeResponseGrpcMarshaller.ManageSellOfferOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeManageBuyOfferOp</summary>
        public static readonly Method<Stellar.ManageBuyOfferOpEncodeRequest, Stellar.ManageBuyOfferOpEncodeResponse> EncodeManageBuyOfferOp =
            new Method<Stellar.ManageBuyOfferOpEncodeRequest, Stellar.ManageBuyOfferOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeManageBuyOfferOp",
                ManageBuyOfferOpEncodeRequestGrpcMarshaller.ManageBuyOfferOpEncodeRequestMarshaller,
                ManageBuyOfferOpEncodeResponseGrpcMarshaller.ManageBuyOfferOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeManageBuyOfferOp</summary>
        public static readonly Method<Stellar.ManageBuyOfferOpDecodeRequest, Stellar.ManageBuyOfferOpDecodeResponse> DecodeManageBuyOfferOp =
            new Method<Stellar.ManageBuyOfferOpDecodeRequest, Stellar.ManageBuyOfferOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeManageBuyOfferOp",
                ManageBuyOfferOpDecodeRequestGrpcMarshaller.ManageBuyOfferOpDecodeRequestMarshaller,
                ManageBuyOfferOpDecodeResponseGrpcMarshaller.ManageBuyOfferOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeCreatePassiveSellOfferOp</summary>
        public static readonly Method<Stellar.CreatePassiveSellOfferOpEncodeRequest, Stellar.CreatePassiveSellOfferOpEncodeResponse> EncodeCreatePassiveSellOfferOp =
            new Method<Stellar.CreatePassiveSellOfferOpEncodeRequest, Stellar.CreatePassiveSellOfferOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeCreatePassiveSellOfferOp",
                CreatePassiveSellOfferOpEncodeRequestGrpcMarshaller.CreatePassiveSellOfferOpEncodeRequestMarshaller,
                CreatePassiveSellOfferOpEncodeResponseGrpcMarshaller.CreatePassiveSellOfferOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeCreatePassiveSellOfferOp</summary>
        public static readonly Method<Stellar.CreatePassiveSellOfferOpDecodeRequest, Stellar.CreatePassiveSellOfferOpDecodeResponse> DecodeCreatePassiveSellOfferOp =
            new Method<Stellar.CreatePassiveSellOfferOpDecodeRequest, Stellar.CreatePassiveSellOfferOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeCreatePassiveSellOfferOp",
                CreatePassiveSellOfferOpDecodeRequestGrpcMarshaller.CreatePassiveSellOfferOpDecodeRequestMarshaller,
                CreatePassiveSellOfferOpDecodeResponseGrpcMarshaller.CreatePassiveSellOfferOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSetOptionsOp</summary>
        public static readonly Method<Stellar.SetOptionsOpEncodeRequest, Stellar.SetOptionsOpEncodeResponse> EncodeSetOptionsOp =
            new Method<Stellar.SetOptionsOpEncodeRequest, Stellar.SetOptionsOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSetOptionsOp",
                SetOptionsOpEncodeRequestGrpcMarshaller.SetOptionsOpEncodeRequestMarshaller,
                SetOptionsOpEncodeResponseGrpcMarshaller.SetOptionsOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSetOptionsOp</summary>
        public static readonly Method<Stellar.SetOptionsOpDecodeRequest, Stellar.SetOptionsOpDecodeResponse> DecodeSetOptionsOp =
            new Method<Stellar.SetOptionsOpDecodeRequest, Stellar.SetOptionsOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSetOptionsOp",
                SetOptionsOpDecodeRequestGrpcMarshaller.SetOptionsOpDecodeRequestMarshaller,
                SetOptionsOpDecodeResponseGrpcMarshaller.SetOptionsOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeChangeTrustAsset</summary>
        public static readonly Method<Stellar.ChangeTrustAssetEncodeRequest, Stellar.ChangeTrustAssetEncodeResponse> EncodeChangeTrustAsset =
            new Method<Stellar.ChangeTrustAssetEncodeRequest, Stellar.ChangeTrustAssetEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeChangeTrustAsset",
                ChangeTrustAssetEncodeRequestGrpcMarshaller.ChangeTrustAssetEncodeRequestMarshaller,
                ChangeTrustAssetEncodeResponseGrpcMarshaller.ChangeTrustAssetEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeChangeTrustAsset</summary>
        public static readonly Method<Stellar.ChangeTrustAssetDecodeRequest, Stellar.ChangeTrustAssetDecodeResponse> DecodeChangeTrustAsset =
            new Method<Stellar.ChangeTrustAssetDecodeRequest, Stellar.ChangeTrustAssetDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeChangeTrustAsset",
                ChangeTrustAssetDecodeRequestGrpcMarshaller.ChangeTrustAssetDecodeRequestMarshaller,
                ChangeTrustAssetDecodeResponseGrpcMarshaller.ChangeTrustAssetDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeChangeTrustOp</summary>
        public static readonly Method<Stellar.ChangeTrustOpEncodeRequest, Stellar.ChangeTrustOpEncodeResponse> EncodeChangeTrustOp =
            new Method<Stellar.ChangeTrustOpEncodeRequest, Stellar.ChangeTrustOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeChangeTrustOp",
                ChangeTrustOpEncodeRequestGrpcMarshaller.ChangeTrustOpEncodeRequestMarshaller,
                ChangeTrustOpEncodeResponseGrpcMarshaller.ChangeTrustOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeChangeTrustOp</summary>
        public static readonly Method<Stellar.ChangeTrustOpDecodeRequest, Stellar.ChangeTrustOpDecodeResponse> DecodeChangeTrustOp =
            new Method<Stellar.ChangeTrustOpDecodeRequest, Stellar.ChangeTrustOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeChangeTrustOp",
                ChangeTrustOpDecodeRequestGrpcMarshaller.ChangeTrustOpDecodeRequestMarshaller,
                ChangeTrustOpDecodeResponseGrpcMarshaller.ChangeTrustOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAllowTrustOp</summary>
        public static readonly Method<Stellar.AllowTrustOpEncodeRequest, Stellar.AllowTrustOpEncodeResponse> EncodeAllowTrustOp =
            new Method<Stellar.AllowTrustOpEncodeRequest, Stellar.AllowTrustOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAllowTrustOp",
                AllowTrustOpEncodeRequestGrpcMarshaller.AllowTrustOpEncodeRequestMarshaller,
                AllowTrustOpEncodeResponseGrpcMarshaller.AllowTrustOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAllowTrustOp</summary>
        public static readonly Method<Stellar.AllowTrustOpDecodeRequest, Stellar.AllowTrustOpDecodeResponse> DecodeAllowTrustOp =
            new Method<Stellar.AllowTrustOpDecodeRequest, Stellar.AllowTrustOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAllowTrustOp",
                AllowTrustOpDecodeRequestGrpcMarshaller.AllowTrustOpDecodeRequestMarshaller,
                AllowTrustOpDecodeResponseGrpcMarshaller.AllowTrustOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeManageDataOp</summary>
        public static readonly Method<Stellar.ManageDataOpEncodeRequest, Stellar.ManageDataOpEncodeResponse> EncodeManageDataOp =
            new Method<Stellar.ManageDataOpEncodeRequest, Stellar.ManageDataOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeManageDataOp",
                ManageDataOpEncodeRequestGrpcMarshaller.ManageDataOpEncodeRequestMarshaller,
                ManageDataOpEncodeResponseGrpcMarshaller.ManageDataOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeManageDataOp</summary>
        public static readonly Method<Stellar.ManageDataOpDecodeRequest, Stellar.ManageDataOpDecodeResponse> DecodeManageDataOp =
            new Method<Stellar.ManageDataOpDecodeRequest, Stellar.ManageDataOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeManageDataOp",
                ManageDataOpDecodeRequestGrpcMarshaller.ManageDataOpDecodeRequestMarshaller,
                ManageDataOpDecodeResponseGrpcMarshaller.ManageDataOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeBumpSequenceOp</summary>
        public static readonly Method<Stellar.BumpSequenceOpEncodeRequest, Stellar.BumpSequenceOpEncodeResponse> EncodeBumpSequenceOp =
            new Method<Stellar.BumpSequenceOpEncodeRequest, Stellar.BumpSequenceOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeBumpSequenceOp",
                BumpSequenceOpEncodeRequestGrpcMarshaller.BumpSequenceOpEncodeRequestMarshaller,
                BumpSequenceOpEncodeResponseGrpcMarshaller.BumpSequenceOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeBumpSequenceOp</summary>
        public static readonly Method<Stellar.BumpSequenceOpDecodeRequest, Stellar.BumpSequenceOpDecodeResponse> DecodeBumpSequenceOp =
            new Method<Stellar.BumpSequenceOpDecodeRequest, Stellar.BumpSequenceOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeBumpSequenceOp",
                BumpSequenceOpDecodeRequestGrpcMarshaller.BumpSequenceOpDecodeRequestMarshaller,
                BumpSequenceOpDecodeResponseGrpcMarshaller.BumpSequenceOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeCreateClaimableBalanceOp</summary>
        public static readonly Method<Stellar.CreateClaimableBalanceOpEncodeRequest, Stellar.CreateClaimableBalanceOpEncodeResponse> EncodeCreateClaimableBalanceOp =
            new Method<Stellar.CreateClaimableBalanceOpEncodeRequest, Stellar.CreateClaimableBalanceOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeCreateClaimableBalanceOp",
                CreateClaimableBalanceOpEncodeRequestGrpcMarshaller.CreateClaimableBalanceOpEncodeRequestMarshaller,
                CreateClaimableBalanceOpEncodeResponseGrpcMarshaller.CreateClaimableBalanceOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeCreateClaimableBalanceOp</summary>
        public static readonly Method<Stellar.CreateClaimableBalanceOpDecodeRequest, Stellar.CreateClaimableBalanceOpDecodeResponse> DecodeCreateClaimableBalanceOp =
            new Method<Stellar.CreateClaimableBalanceOpDecodeRequest, Stellar.CreateClaimableBalanceOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeCreateClaimableBalanceOp",
                CreateClaimableBalanceOpDecodeRequestGrpcMarshaller.CreateClaimableBalanceOpDecodeRequestMarshaller,
                CreateClaimableBalanceOpDecodeResponseGrpcMarshaller.CreateClaimableBalanceOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimClaimableBalanceOp</summary>
        public static readonly Method<Stellar.ClaimClaimableBalanceOpEncodeRequest, Stellar.ClaimClaimableBalanceOpEncodeResponse> EncodeClaimClaimableBalanceOp =
            new Method<Stellar.ClaimClaimableBalanceOpEncodeRequest, Stellar.ClaimClaimableBalanceOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimClaimableBalanceOp",
                ClaimClaimableBalanceOpEncodeRequestGrpcMarshaller.ClaimClaimableBalanceOpEncodeRequestMarshaller,
                ClaimClaimableBalanceOpEncodeResponseGrpcMarshaller.ClaimClaimableBalanceOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimClaimableBalanceOp</summary>
        public static readonly Method<Stellar.ClaimClaimableBalanceOpDecodeRequest, Stellar.ClaimClaimableBalanceOpDecodeResponse> DecodeClaimClaimableBalanceOp =
            new Method<Stellar.ClaimClaimableBalanceOpDecodeRequest, Stellar.ClaimClaimableBalanceOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimClaimableBalanceOp",
                ClaimClaimableBalanceOpDecodeRequestGrpcMarshaller.ClaimClaimableBalanceOpDecodeRequestMarshaller,
                ClaimClaimableBalanceOpDecodeResponseGrpcMarshaller.ClaimClaimableBalanceOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeBeginSponsoringFutureReservesOp</summary>
        public static readonly Method<Stellar.BeginSponsoringFutureReservesOpEncodeRequest, Stellar.BeginSponsoringFutureReservesOpEncodeResponse> EncodeBeginSponsoringFutureReservesOp =
            new Method<Stellar.BeginSponsoringFutureReservesOpEncodeRequest, Stellar.BeginSponsoringFutureReservesOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeBeginSponsoringFutureReservesOp",
                BeginSponsoringFutureReservesOpEncodeRequestGrpcMarshaller.BeginSponsoringFutureReservesOpEncodeRequestMarshaller,
                BeginSponsoringFutureReservesOpEncodeResponseGrpcMarshaller.BeginSponsoringFutureReservesOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeBeginSponsoringFutureReservesOp</summary>
        public static readonly Method<Stellar.BeginSponsoringFutureReservesOpDecodeRequest, Stellar.BeginSponsoringFutureReservesOpDecodeResponse> DecodeBeginSponsoringFutureReservesOp =
            new Method<Stellar.BeginSponsoringFutureReservesOpDecodeRequest, Stellar.BeginSponsoringFutureReservesOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeBeginSponsoringFutureReservesOp",
                BeginSponsoringFutureReservesOpDecodeRequestGrpcMarshaller.BeginSponsoringFutureReservesOpDecodeRequestMarshaller,
                BeginSponsoringFutureReservesOpDecodeResponseGrpcMarshaller.BeginSponsoringFutureReservesOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeRevokeSponsorshipType</summary>
        public static readonly Method<Stellar.RevokeSponsorshipTypeEncodeRequest, Stellar.RevokeSponsorshipTypeEncodeResponse> EncodeRevokeSponsorshipType =
            new Method<Stellar.RevokeSponsorshipTypeEncodeRequest, Stellar.RevokeSponsorshipTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeRevokeSponsorshipType",
                RevokeSponsorshipTypeEncodeRequestGrpcMarshaller.RevokeSponsorshipTypeEncodeRequestMarshaller,
                RevokeSponsorshipTypeEncodeResponseGrpcMarshaller.RevokeSponsorshipTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeRevokeSponsorshipType</summary>
        public static readonly Method<Stellar.RevokeSponsorshipTypeDecodeRequest, Stellar.RevokeSponsorshipTypeDecodeResponse> DecodeRevokeSponsorshipType =
            new Method<Stellar.RevokeSponsorshipTypeDecodeRequest, Stellar.RevokeSponsorshipTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeRevokeSponsorshipType",
                RevokeSponsorshipTypeDecodeRequestGrpcMarshaller.RevokeSponsorshipTypeDecodeRequestMarshaller,
                RevokeSponsorshipTypeDecodeResponseGrpcMarshaller.RevokeSponsorshipTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeRevokeSponsorshipOp</summary>
        public static readonly Method<Stellar.RevokeSponsorshipOpEncodeRequest, Stellar.RevokeSponsorshipOpEncodeResponse> EncodeRevokeSponsorshipOp =
            new Method<Stellar.RevokeSponsorshipOpEncodeRequest, Stellar.RevokeSponsorshipOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeRevokeSponsorshipOp",
                RevokeSponsorshipOpEncodeRequestGrpcMarshaller.RevokeSponsorshipOpEncodeRequestMarshaller,
                RevokeSponsorshipOpEncodeResponseGrpcMarshaller.RevokeSponsorshipOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeRevokeSponsorshipOp</summary>
        public static readonly Method<Stellar.RevokeSponsorshipOpDecodeRequest, Stellar.RevokeSponsorshipOpDecodeResponse> DecodeRevokeSponsorshipOp =
            new Method<Stellar.RevokeSponsorshipOpDecodeRequest, Stellar.RevokeSponsorshipOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeRevokeSponsorshipOp",
                RevokeSponsorshipOpDecodeRequestGrpcMarshaller.RevokeSponsorshipOpDecodeRequestMarshaller,
                RevokeSponsorshipOpDecodeResponseGrpcMarshaller.RevokeSponsorshipOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClawbackOp</summary>
        public static readonly Method<Stellar.ClawbackOpEncodeRequest, Stellar.ClawbackOpEncodeResponse> EncodeClawbackOp =
            new Method<Stellar.ClawbackOpEncodeRequest, Stellar.ClawbackOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClawbackOp",
                ClawbackOpEncodeRequestGrpcMarshaller.ClawbackOpEncodeRequestMarshaller,
                ClawbackOpEncodeResponseGrpcMarshaller.ClawbackOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClawbackOp</summary>
        public static readonly Method<Stellar.ClawbackOpDecodeRequest, Stellar.ClawbackOpDecodeResponse> DecodeClawbackOp =
            new Method<Stellar.ClawbackOpDecodeRequest, Stellar.ClawbackOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClawbackOp",
                ClawbackOpDecodeRequestGrpcMarshaller.ClawbackOpDecodeRequestMarshaller,
                ClawbackOpDecodeResponseGrpcMarshaller.ClawbackOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClawbackClaimableBalanceOp</summary>
        public static readonly Method<Stellar.ClawbackClaimableBalanceOpEncodeRequest, Stellar.ClawbackClaimableBalanceOpEncodeResponse> EncodeClawbackClaimableBalanceOp =
            new Method<Stellar.ClawbackClaimableBalanceOpEncodeRequest, Stellar.ClawbackClaimableBalanceOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClawbackClaimableBalanceOp",
                ClawbackClaimableBalanceOpEncodeRequestGrpcMarshaller.ClawbackClaimableBalanceOpEncodeRequestMarshaller,
                ClawbackClaimableBalanceOpEncodeResponseGrpcMarshaller.ClawbackClaimableBalanceOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClawbackClaimableBalanceOp</summary>
        public static readonly Method<Stellar.ClawbackClaimableBalanceOpDecodeRequest, Stellar.ClawbackClaimableBalanceOpDecodeResponse> DecodeClawbackClaimableBalanceOp =
            new Method<Stellar.ClawbackClaimableBalanceOpDecodeRequest, Stellar.ClawbackClaimableBalanceOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClawbackClaimableBalanceOp",
                ClawbackClaimableBalanceOpDecodeRequestGrpcMarshaller.ClawbackClaimableBalanceOpDecodeRequestMarshaller,
                ClawbackClaimableBalanceOpDecodeResponseGrpcMarshaller.ClawbackClaimableBalanceOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSetTrustLineFlagsOp</summary>
        public static readonly Method<Stellar.SetTrustLineFlagsOpEncodeRequest, Stellar.SetTrustLineFlagsOpEncodeResponse> EncodeSetTrustLineFlagsOp =
            new Method<Stellar.SetTrustLineFlagsOpEncodeRequest, Stellar.SetTrustLineFlagsOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSetTrustLineFlagsOp",
                SetTrustLineFlagsOpEncodeRequestGrpcMarshaller.SetTrustLineFlagsOpEncodeRequestMarshaller,
                SetTrustLineFlagsOpEncodeResponseGrpcMarshaller.SetTrustLineFlagsOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSetTrustLineFlagsOp</summary>
        public static readonly Method<Stellar.SetTrustLineFlagsOpDecodeRequest, Stellar.SetTrustLineFlagsOpDecodeResponse> DecodeSetTrustLineFlagsOp =
            new Method<Stellar.SetTrustLineFlagsOpDecodeRequest, Stellar.SetTrustLineFlagsOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSetTrustLineFlagsOp",
                SetTrustLineFlagsOpDecodeRequestGrpcMarshaller.SetTrustLineFlagsOpDecodeRequestMarshaller,
                SetTrustLineFlagsOpDecodeResponseGrpcMarshaller.SetTrustLineFlagsOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLiquidityPoolDepositOp</summary>
        public static readonly Method<Stellar.LiquidityPoolDepositOpEncodeRequest, Stellar.LiquidityPoolDepositOpEncodeResponse> EncodeLiquidityPoolDepositOp =
            new Method<Stellar.LiquidityPoolDepositOpEncodeRequest, Stellar.LiquidityPoolDepositOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLiquidityPoolDepositOp",
                LiquidityPoolDepositOpEncodeRequestGrpcMarshaller.LiquidityPoolDepositOpEncodeRequestMarshaller,
                LiquidityPoolDepositOpEncodeResponseGrpcMarshaller.LiquidityPoolDepositOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLiquidityPoolDepositOp</summary>
        public static readonly Method<Stellar.LiquidityPoolDepositOpDecodeRequest, Stellar.LiquidityPoolDepositOpDecodeResponse> DecodeLiquidityPoolDepositOp =
            new Method<Stellar.LiquidityPoolDepositOpDecodeRequest, Stellar.LiquidityPoolDepositOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLiquidityPoolDepositOp",
                LiquidityPoolDepositOpDecodeRequestGrpcMarshaller.LiquidityPoolDepositOpDecodeRequestMarshaller,
                LiquidityPoolDepositOpDecodeResponseGrpcMarshaller.LiquidityPoolDepositOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLiquidityPoolWithdrawOp</summary>
        public static readonly Method<Stellar.LiquidityPoolWithdrawOpEncodeRequest, Stellar.LiquidityPoolWithdrawOpEncodeResponse> EncodeLiquidityPoolWithdrawOp =
            new Method<Stellar.LiquidityPoolWithdrawOpEncodeRequest, Stellar.LiquidityPoolWithdrawOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLiquidityPoolWithdrawOp",
                LiquidityPoolWithdrawOpEncodeRequestGrpcMarshaller.LiquidityPoolWithdrawOpEncodeRequestMarshaller,
                LiquidityPoolWithdrawOpEncodeResponseGrpcMarshaller.LiquidityPoolWithdrawOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLiquidityPoolWithdrawOp</summary>
        public static readonly Method<Stellar.LiquidityPoolWithdrawOpDecodeRequest, Stellar.LiquidityPoolWithdrawOpDecodeResponse> DecodeLiquidityPoolWithdrawOp =
            new Method<Stellar.LiquidityPoolWithdrawOpDecodeRequest, Stellar.LiquidityPoolWithdrawOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLiquidityPoolWithdrawOp",
                LiquidityPoolWithdrawOpDecodeRequestGrpcMarshaller.LiquidityPoolWithdrawOpDecodeRequestMarshaller,
                LiquidityPoolWithdrawOpDecodeResponseGrpcMarshaller.LiquidityPoolWithdrawOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeHostFunctionType</summary>
        public static readonly Method<Stellar.HostFunctionTypeEncodeRequest, Stellar.HostFunctionTypeEncodeResponse> EncodeHostFunctionType =
            new Method<Stellar.HostFunctionTypeEncodeRequest, Stellar.HostFunctionTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeHostFunctionType",
                HostFunctionTypeEncodeRequestGrpcMarshaller.HostFunctionTypeEncodeRequestMarshaller,
                HostFunctionTypeEncodeResponseGrpcMarshaller.HostFunctionTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeHostFunctionType</summary>
        public static readonly Method<Stellar.HostFunctionTypeDecodeRequest, Stellar.HostFunctionTypeDecodeResponse> DecodeHostFunctionType =
            new Method<Stellar.HostFunctionTypeDecodeRequest, Stellar.HostFunctionTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeHostFunctionType",
                HostFunctionTypeDecodeRequestGrpcMarshaller.HostFunctionTypeDecodeRequestMarshaller,
                HostFunctionTypeDecodeResponseGrpcMarshaller.HostFunctionTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeContractIDPreimageType</summary>
        public static readonly Method<Stellar.ContractIDPreimageTypeEncodeRequest, Stellar.ContractIDPreimageTypeEncodeResponse> EncodeContractIDPreimageType =
            new Method<Stellar.ContractIDPreimageTypeEncodeRequest, Stellar.ContractIDPreimageTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeContractIDPreimageType",
                ContractIDPreimageTypeEncodeRequestGrpcMarshaller.ContractIDPreimageTypeEncodeRequestMarshaller,
                ContractIDPreimageTypeEncodeResponseGrpcMarshaller.ContractIDPreimageTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeContractIDPreimageType</summary>
        public static readonly Method<Stellar.ContractIDPreimageTypeDecodeRequest, Stellar.ContractIDPreimageTypeDecodeResponse> DecodeContractIDPreimageType =
            new Method<Stellar.ContractIDPreimageTypeDecodeRequest, Stellar.ContractIDPreimageTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeContractIDPreimageType",
                ContractIDPreimageTypeDecodeRequestGrpcMarshaller.ContractIDPreimageTypeDecodeRequestMarshaller,
                ContractIDPreimageTypeDecodeResponseGrpcMarshaller.ContractIDPreimageTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeContractIDPreimage</summary>
        public static readonly Method<Stellar.ContractIDPreimageEncodeRequest, Stellar.ContractIDPreimageEncodeResponse> EncodeContractIDPreimage =
            new Method<Stellar.ContractIDPreimageEncodeRequest, Stellar.ContractIDPreimageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeContractIDPreimage",
                ContractIDPreimageEncodeRequestGrpcMarshaller.ContractIDPreimageEncodeRequestMarshaller,
                ContractIDPreimageEncodeResponseGrpcMarshaller.ContractIDPreimageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeContractIDPreimage</summary>
        public static readonly Method<Stellar.ContractIDPreimageDecodeRequest, Stellar.ContractIDPreimageDecodeResponse> DecodeContractIDPreimage =
            new Method<Stellar.ContractIDPreimageDecodeRequest, Stellar.ContractIDPreimageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeContractIDPreimage",
                ContractIDPreimageDecodeRequestGrpcMarshaller.ContractIDPreimageDecodeRequestMarshaller,
                ContractIDPreimageDecodeResponseGrpcMarshaller.ContractIDPreimageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeCreateContractArgs</summary>
        public static readonly Method<Stellar.CreateContractArgsEncodeRequest, Stellar.CreateContractArgsEncodeResponse> EncodeCreateContractArgs =
            new Method<Stellar.CreateContractArgsEncodeRequest, Stellar.CreateContractArgsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeCreateContractArgs",
                CreateContractArgsEncodeRequestGrpcMarshaller.CreateContractArgsEncodeRequestMarshaller,
                CreateContractArgsEncodeResponseGrpcMarshaller.CreateContractArgsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeCreateContractArgs</summary>
        public static readonly Method<Stellar.CreateContractArgsDecodeRequest, Stellar.CreateContractArgsDecodeResponse> DecodeCreateContractArgs =
            new Method<Stellar.CreateContractArgsDecodeRequest, Stellar.CreateContractArgsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeCreateContractArgs",
                CreateContractArgsDecodeRequestGrpcMarshaller.CreateContractArgsDecodeRequestMarshaller,
                CreateContractArgsDecodeResponseGrpcMarshaller.CreateContractArgsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeCreateContractArgsV2</summary>
        public static readonly Method<Stellar.CreateContractArgsV2EncodeRequest, Stellar.CreateContractArgsV2EncodeResponse> EncodeCreateContractArgsV2 =
            new Method<Stellar.CreateContractArgsV2EncodeRequest, Stellar.CreateContractArgsV2EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeCreateContractArgsV2",
                CreateContractArgsV2EncodeRequestGrpcMarshaller.CreateContractArgsV2EncodeRequestMarshaller,
                CreateContractArgsV2EncodeResponseGrpcMarshaller.CreateContractArgsV2EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeCreateContractArgsV2</summary>
        public static readonly Method<Stellar.CreateContractArgsV2DecodeRequest, Stellar.CreateContractArgsV2DecodeResponse> DecodeCreateContractArgsV2 =
            new Method<Stellar.CreateContractArgsV2DecodeRequest, Stellar.CreateContractArgsV2DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeCreateContractArgsV2",
                CreateContractArgsV2DecodeRequestGrpcMarshaller.CreateContractArgsV2DecodeRequestMarshaller,
                CreateContractArgsV2DecodeResponseGrpcMarshaller.CreateContractArgsV2DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeInvokeContractArgs</summary>
        public static readonly Method<Stellar.InvokeContractArgsEncodeRequest, Stellar.InvokeContractArgsEncodeResponse> EncodeInvokeContractArgs =
            new Method<Stellar.InvokeContractArgsEncodeRequest, Stellar.InvokeContractArgsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeInvokeContractArgs",
                InvokeContractArgsEncodeRequestGrpcMarshaller.InvokeContractArgsEncodeRequestMarshaller,
                InvokeContractArgsEncodeResponseGrpcMarshaller.InvokeContractArgsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeInvokeContractArgs</summary>
        public static readonly Method<Stellar.InvokeContractArgsDecodeRequest, Stellar.InvokeContractArgsDecodeResponse> DecodeInvokeContractArgs =
            new Method<Stellar.InvokeContractArgsDecodeRequest, Stellar.InvokeContractArgsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeInvokeContractArgs",
                InvokeContractArgsDecodeRequestGrpcMarshaller.InvokeContractArgsDecodeRequestMarshaller,
                InvokeContractArgsDecodeResponseGrpcMarshaller.InvokeContractArgsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeHostFunction</summary>
        public static readonly Method<Stellar.HostFunctionEncodeRequest, Stellar.HostFunctionEncodeResponse> EncodeHostFunction =
            new Method<Stellar.HostFunctionEncodeRequest, Stellar.HostFunctionEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeHostFunction",
                HostFunctionEncodeRequestGrpcMarshaller.HostFunctionEncodeRequestMarshaller,
                HostFunctionEncodeResponseGrpcMarshaller.HostFunctionEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeHostFunction</summary>
        public static readonly Method<Stellar.HostFunctionDecodeRequest, Stellar.HostFunctionDecodeResponse> DecodeHostFunction =
            new Method<Stellar.HostFunctionDecodeRequest, Stellar.HostFunctionDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeHostFunction",
                HostFunctionDecodeRequestGrpcMarshaller.HostFunctionDecodeRequestMarshaller,
                HostFunctionDecodeResponseGrpcMarshaller.HostFunctionDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSorobanAuthorizedFunctionType</summary>
        public static readonly Method<Stellar.SorobanAuthorizedFunctionTypeEncodeRequest, Stellar.SorobanAuthorizedFunctionTypeEncodeResponse> EncodeSorobanAuthorizedFunctionType =
            new Method<Stellar.SorobanAuthorizedFunctionTypeEncodeRequest, Stellar.SorobanAuthorizedFunctionTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSorobanAuthorizedFunctionType",
                SorobanAuthorizedFunctionTypeEncodeRequestGrpcMarshaller.SorobanAuthorizedFunctionTypeEncodeRequestMarshaller,
                SorobanAuthorizedFunctionTypeEncodeResponseGrpcMarshaller.SorobanAuthorizedFunctionTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSorobanAuthorizedFunctionType</summary>
        public static readonly Method<Stellar.SorobanAuthorizedFunctionTypeDecodeRequest, Stellar.SorobanAuthorizedFunctionTypeDecodeResponse> DecodeSorobanAuthorizedFunctionType =
            new Method<Stellar.SorobanAuthorizedFunctionTypeDecodeRequest, Stellar.SorobanAuthorizedFunctionTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSorobanAuthorizedFunctionType",
                SorobanAuthorizedFunctionTypeDecodeRequestGrpcMarshaller.SorobanAuthorizedFunctionTypeDecodeRequestMarshaller,
                SorobanAuthorizedFunctionTypeDecodeResponseGrpcMarshaller.SorobanAuthorizedFunctionTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSorobanAuthorizedFunction</summary>
        public static readonly Method<Stellar.SorobanAuthorizedFunctionEncodeRequest, Stellar.SorobanAuthorizedFunctionEncodeResponse> EncodeSorobanAuthorizedFunction =
            new Method<Stellar.SorobanAuthorizedFunctionEncodeRequest, Stellar.SorobanAuthorizedFunctionEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSorobanAuthorizedFunction",
                SorobanAuthorizedFunctionEncodeRequestGrpcMarshaller.SorobanAuthorizedFunctionEncodeRequestMarshaller,
                SorobanAuthorizedFunctionEncodeResponseGrpcMarshaller.SorobanAuthorizedFunctionEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSorobanAuthorizedFunction</summary>
        public static readonly Method<Stellar.SorobanAuthorizedFunctionDecodeRequest, Stellar.SorobanAuthorizedFunctionDecodeResponse> DecodeSorobanAuthorizedFunction =
            new Method<Stellar.SorobanAuthorizedFunctionDecodeRequest, Stellar.SorobanAuthorizedFunctionDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSorobanAuthorizedFunction",
                SorobanAuthorizedFunctionDecodeRequestGrpcMarshaller.SorobanAuthorizedFunctionDecodeRequestMarshaller,
                SorobanAuthorizedFunctionDecodeResponseGrpcMarshaller.SorobanAuthorizedFunctionDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSorobanAuthorizedInvocation</summary>
        public static readonly Method<Stellar.SorobanAuthorizedInvocationEncodeRequest, Stellar.SorobanAuthorizedInvocationEncodeResponse> EncodeSorobanAuthorizedInvocation =
            new Method<Stellar.SorobanAuthorizedInvocationEncodeRequest, Stellar.SorobanAuthorizedInvocationEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSorobanAuthorizedInvocation",
                SorobanAuthorizedInvocationEncodeRequestGrpcMarshaller.SorobanAuthorizedInvocationEncodeRequestMarshaller,
                SorobanAuthorizedInvocationEncodeResponseGrpcMarshaller.SorobanAuthorizedInvocationEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSorobanAuthorizedInvocation</summary>
        public static readonly Method<Stellar.SorobanAuthorizedInvocationDecodeRequest, Stellar.SorobanAuthorizedInvocationDecodeResponse> DecodeSorobanAuthorizedInvocation =
            new Method<Stellar.SorobanAuthorizedInvocationDecodeRequest, Stellar.SorobanAuthorizedInvocationDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSorobanAuthorizedInvocation",
                SorobanAuthorizedInvocationDecodeRequestGrpcMarshaller.SorobanAuthorizedInvocationDecodeRequestMarshaller,
                SorobanAuthorizedInvocationDecodeResponseGrpcMarshaller.SorobanAuthorizedInvocationDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSorobanAddressCredentials</summary>
        public static readonly Method<Stellar.SorobanAddressCredentialsEncodeRequest, Stellar.SorobanAddressCredentialsEncodeResponse> EncodeSorobanAddressCredentials =
            new Method<Stellar.SorobanAddressCredentialsEncodeRequest, Stellar.SorobanAddressCredentialsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSorobanAddressCredentials",
                SorobanAddressCredentialsEncodeRequestGrpcMarshaller.SorobanAddressCredentialsEncodeRequestMarshaller,
                SorobanAddressCredentialsEncodeResponseGrpcMarshaller.SorobanAddressCredentialsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSorobanAddressCredentials</summary>
        public static readonly Method<Stellar.SorobanAddressCredentialsDecodeRequest, Stellar.SorobanAddressCredentialsDecodeResponse> DecodeSorobanAddressCredentials =
            new Method<Stellar.SorobanAddressCredentialsDecodeRequest, Stellar.SorobanAddressCredentialsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSorobanAddressCredentials",
                SorobanAddressCredentialsDecodeRequestGrpcMarshaller.SorobanAddressCredentialsDecodeRequestMarshaller,
                SorobanAddressCredentialsDecodeResponseGrpcMarshaller.SorobanAddressCredentialsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSorobanCredentialsType</summary>
        public static readonly Method<Stellar.SorobanCredentialsTypeEncodeRequest, Stellar.SorobanCredentialsTypeEncodeResponse> EncodeSorobanCredentialsType =
            new Method<Stellar.SorobanCredentialsTypeEncodeRequest, Stellar.SorobanCredentialsTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSorobanCredentialsType",
                SorobanCredentialsTypeEncodeRequestGrpcMarshaller.SorobanCredentialsTypeEncodeRequestMarshaller,
                SorobanCredentialsTypeEncodeResponseGrpcMarshaller.SorobanCredentialsTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSorobanCredentialsType</summary>
        public static readonly Method<Stellar.SorobanCredentialsTypeDecodeRequest, Stellar.SorobanCredentialsTypeDecodeResponse> DecodeSorobanCredentialsType =
            new Method<Stellar.SorobanCredentialsTypeDecodeRequest, Stellar.SorobanCredentialsTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSorobanCredentialsType",
                SorobanCredentialsTypeDecodeRequestGrpcMarshaller.SorobanCredentialsTypeDecodeRequestMarshaller,
                SorobanCredentialsTypeDecodeResponseGrpcMarshaller.SorobanCredentialsTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSorobanCredentials</summary>
        public static readonly Method<Stellar.SorobanCredentialsEncodeRequest, Stellar.SorobanCredentialsEncodeResponse> EncodeSorobanCredentials =
            new Method<Stellar.SorobanCredentialsEncodeRequest, Stellar.SorobanCredentialsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSorobanCredentials",
                SorobanCredentialsEncodeRequestGrpcMarshaller.SorobanCredentialsEncodeRequestMarshaller,
                SorobanCredentialsEncodeResponseGrpcMarshaller.SorobanCredentialsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSorobanCredentials</summary>
        public static readonly Method<Stellar.SorobanCredentialsDecodeRequest, Stellar.SorobanCredentialsDecodeResponse> DecodeSorobanCredentials =
            new Method<Stellar.SorobanCredentialsDecodeRequest, Stellar.SorobanCredentialsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSorobanCredentials",
                SorobanCredentialsDecodeRequestGrpcMarshaller.SorobanCredentialsDecodeRequestMarshaller,
                SorobanCredentialsDecodeResponseGrpcMarshaller.SorobanCredentialsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSorobanAuthorizationEntry</summary>
        public static readonly Method<Stellar.SorobanAuthorizationEntryEncodeRequest, Stellar.SorobanAuthorizationEntryEncodeResponse> EncodeSorobanAuthorizationEntry =
            new Method<Stellar.SorobanAuthorizationEntryEncodeRequest, Stellar.SorobanAuthorizationEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSorobanAuthorizationEntry",
                SorobanAuthorizationEntryEncodeRequestGrpcMarshaller.SorobanAuthorizationEntryEncodeRequestMarshaller,
                SorobanAuthorizationEntryEncodeResponseGrpcMarshaller.SorobanAuthorizationEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSorobanAuthorizationEntry</summary>
        public static readonly Method<Stellar.SorobanAuthorizationEntryDecodeRequest, Stellar.SorobanAuthorizationEntryDecodeResponse> DecodeSorobanAuthorizationEntry =
            new Method<Stellar.SorobanAuthorizationEntryDecodeRequest, Stellar.SorobanAuthorizationEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSorobanAuthorizationEntry",
                SorobanAuthorizationEntryDecodeRequestGrpcMarshaller.SorobanAuthorizationEntryDecodeRequestMarshaller,
                SorobanAuthorizationEntryDecodeResponseGrpcMarshaller.SorobanAuthorizationEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeInvokeHostFunctionOp</summary>
        public static readonly Method<Stellar.InvokeHostFunctionOpEncodeRequest, Stellar.InvokeHostFunctionOpEncodeResponse> EncodeInvokeHostFunctionOp =
            new Method<Stellar.InvokeHostFunctionOpEncodeRequest, Stellar.InvokeHostFunctionOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeInvokeHostFunctionOp",
                InvokeHostFunctionOpEncodeRequestGrpcMarshaller.InvokeHostFunctionOpEncodeRequestMarshaller,
                InvokeHostFunctionOpEncodeResponseGrpcMarshaller.InvokeHostFunctionOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeInvokeHostFunctionOp</summary>
        public static readonly Method<Stellar.InvokeHostFunctionOpDecodeRequest, Stellar.InvokeHostFunctionOpDecodeResponse> DecodeInvokeHostFunctionOp =
            new Method<Stellar.InvokeHostFunctionOpDecodeRequest, Stellar.InvokeHostFunctionOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeInvokeHostFunctionOp",
                InvokeHostFunctionOpDecodeRequestGrpcMarshaller.InvokeHostFunctionOpDecodeRequestMarshaller,
                InvokeHostFunctionOpDecodeResponseGrpcMarshaller.InvokeHostFunctionOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeExtendFootprintTTLOp</summary>
        public static readonly Method<Stellar.ExtendFootprintTTLOpEncodeRequest, Stellar.ExtendFootprintTTLOpEncodeResponse> EncodeExtendFootprintTTLOp =
            new Method<Stellar.ExtendFootprintTTLOpEncodeRequest, Stellar.ExtendFootprintTTLOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeExtendFootprintTTLOp",
                ExtendFootprintTTLOpEncodeRequestGrpcMarshaller.ExtendFootprintTTLOpEncodeRequestMarshaller,
                ExtendFootprintTTLOpEncodeResponseGrpcMarshaller.ExtendFootprintTTLOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeExtendFootprintTTLOp</summary>
        public static readonly Method<Stellar.ExtendFootprintTTLOpDecodeRequest, Stellar.ExtendFootprintTTLOpDecodeResponse> DecodeExtendFootprintTTLOp =
            new Method<Stellar.ExtendFootprintTTLOpDecodeRequest, Stellar.ExtendFootprintTTLOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeExtendFootprintTTLOp",
                ExtendFootprintTTLOpDecodeRequestGrpcMarshaller.ExtendFootprintTTLOpDecodeRequestMarshaller,
                ExtendFootprintTTLOpDecodeResponseGrpcMarshaller.ExtendFootprintTTLOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeRestoreFootprintOp</summary>
        public static readonly Method<Stellar.RestoreFootprintOpEncodeRequest, Stellar.RestoreFootprintOpEncodeResponse> EncodeRestoreFootprintOp =
            new Method<Stellar.RestoreFootprintOpEncodeRequest, Stellar.RestoreFootprintOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeRestoreFootprintOp",
                RestoreFootprintOpEncodeRequestGrpcMarshaller.RestoreFootprintOpEncodeRequestMarshaller,
                RestoreFootprintOpEncodeResponseGrpcMarshaller.RestoreFootprintOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeRestoreFootprintOp</summary>
        public static readonly Method<Stellar.RestoreFootprintOpDecodeRequest, Stellar.RestoreFootprintOpDecodeResponse> DecodeRestoreFootprintOp =
            new Method<Stellar.RestoreFootprintOpDecodeRequest, Stellar.RestoreFootprintOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeRestoreFootprintOp",
                RestoreFootprintOpDecodeRequestGrpcMarshaller.RestoreFootprintOpDecodeRequestMarshaller,
                RestoreFootprintOpDecodeResponseGrpcMarshaller.RestoreFootprintOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeOperation</summary>
        public static readonly Method<Stellar.OperationEncodeRequest, Stellar.OperationEncodeResponse> EncodeOperation =
            new Method<Stellar.OperationEncodeRequest, Stellar.OperationEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeOperation",
                OperationEncodeRequestGrpcMarshaller.OperationEncodeRequestMarshaller,
                OperationEncodeResponseGrpcMarshaller.OperationEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeOperation</summary>
        public static readonly Method<Stellar.OperationDecodeRequest, Stellar.OperationDecodeResponse> DecodeOperation =
            new Method<Stellar.OperationDecodeRequest, Stellar.OperationDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeOperation",
                OperationDecodeRequestGrpcMarshaller.OperationDecodeRequestMarshaller,
                OperationDecodeResponseGrpcMarshaller.OperationDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeHashIDPreimage</summary>
        public static readonly Method<Stellar.HashIDPreimageEncodeRequest, Stellar.HashIDPreimageEncodeResponse> EncodeHashIDPreimage =
            new Method<Stellar.HashIDPreimageEncodeRequest, Stellar.HashIDPreimageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeHashIDPreimage",
                HashIDPreimageEncodeRequestGrpcMarshaller.HashIDPreimageEncodeRequestMarshaller,
                HashIDPreimageEncodeResponseGrpcMarshaller.HashIDPreimageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeHashIDPreimage</summary>
        public static readonly Method<Stellar.HashIDPreimageDecodeRequest, Stellar.HashIDPreimageDecodeResponse> DecodeHashIDPreimage =
            new Method<Stellar.HashIDPreimageDecodeRequest, Stellar.HashIDPreimageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeHashIDPreimage",
                HashIDPreimageDecodeRequestGrpcMarshaller.HashIDPreimageDecodeRequestMarshaller,
                HashIDPreimageDecodeResponseGrpcMarshaller.HashIDPreimageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeMemoType</summary>
        public static readonly Method<Stellar.MemoTypeEncodeRequest, Stellar.MemoTypeEncodeResponse> EncodeMemoType =
            new Method<Stellar.MemoTypeEncodeRequest, Stellar.MemoTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeMemoType",
                MemoTypeEncodeRequestGrpcMarshaller.MemoTypeEncodeRequestMarshaller,
                MemoTypeEncodeResponseGrpcMarshaller.MemoTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeMemoType</summary>
        public static readonly Method<Stellar.MemoTypeDecodeRequest, Stellar.MemoTypeDecodeResponse> DecodeMemoType =
            new Method<Stellar.MemoTypeDecodeRequest, Stellar.MemoTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeMemoType",
                MemoTypeDecodeRequestGrpcMarshaller.MemoTypeDecodeRequestMarshaller,
                MemoTypeDecodeResponseGrpcMarshaller.MemoTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeMemo</summary>
        public static readonly Method<Stellar.MemoEncodeRequest, Stellar.MemoEncodeResponse> EncodeMemo =
            new Method<Stellar.MemoEncodeRequest, Stellar.MemoEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeMemo",
                MemoEncodeRequestGrpcMarshaller.MemoEncodeRequestMarshaller,
                MemoEncodeResponseGrpcMarshaller.MemoEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeMemo</summary>
        public static readonly Method<Stellar.MemoDecodeRequest, Stellar.MemoDecodeResponse> DecodeMemo =
            new Method<Stellar.MemoDecodeRequest, Stellar.MemoDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeMemo",
                MemoDecodeRequestGrpcMarshaller.MemoDecodeRequestMarshaller,
                MemoDecodeResponseGrpcMarshaller.MemoDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTimeBounds</summary>
        public static readonly Method<Stellar.TimeBoundsEncodeRequest, Stellar.TimeBoundsEncodeResponse> EncodeTimeBounds =
            new Method<Stellar.TimeBoundsEncodeRequest, Stellar.TimeBoundsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTimeBounds",
                TimeBoundsEncodeRequestGrpcMarshaller.TimeBoundsEncodeRequestMarshaller,
                TimeBoundsEncodeResponseGrpcMarshaller.TimeBoundsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTimeBounds</summary>
        public static readonly Method<Stellar.TimeBoundsDecodeRequest, Stellar.TimeBoundsDecodeResponse> DecodeTimeBounds =
            new Method<Stellar.TimeBoundsDecodeRequest, Stellar.TimeBoundsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTimeBounds",
                TimeBoundsDecodeRequestGrpcMarshaller.TimeBoundsDecodeRequestMarshaller,
                TimeBoundsDecodeResponseGrpcMarshaller.TimeBoundsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerBounds</summary>
        public static readonly Method<Stellar.LedgerBoundsEncodeRequest, Stellar.LedgerBoundsEncodeResponse> EncodeLedgerBounds =
            new Method<Stellar.LedgerBoundsEncodeRequest, Stellar.LedgerBoundsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerBounds",
                LedgerBoundsEncodeRequestGrpcMarshaller.LedgerBoundsEncodeRequestMarshaller,
                LedgerBoundsEncodeResponseGrpcMarshaller.LedgerBoundsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerBounds</summary>
        public static readonly Method<Stellar.LedgerBoundsDecodeRequest, Stellar.LedgerBoundsDecodeResponse> DecodeLedgerBounds =
            new Method<Stellar.LedgerBoundsDecodeRequest, Stellar.LedgerBoundsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerBounds",
                LedgerBoundsDecodeRequestGrpcMarshaller.LedgerBoundsDecodeRequestMarshaller,
                LedgerBoundsDecodeResponseGrpcMarshaller.LedgerBoundsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePreconditionsV2</summary>
        public static readonly Method<Stellar.PreconditionsV2EncodeRequest, Stellar.PreconditionsV2EncodeResponse> EncodePreconditionsV2 =
            new Method<Stellar.PreconditionsV2EncodeRequest, Stellar.PreconditionsV2EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePreconditionsV2",
                PreconditionsV2EncodeRequestGrpcMarshaller.PreconditionsV2EncodeRequestMarshaller,
                PreconditionsV2EncodeResponseGrpcMarshaller.PreconditionsV2EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePreconditionsV2</summary>
        public static readonly Method<Stellar.PreconditionsV2DecodeRequest, Stellar.PreconditionsV2DecodeResponse> DecodePreconditionsV2 =
            new Method<Stellar.PreconditionsV2DecodeRequest, Stellar.PreconditionsV2DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePreconditionsV2",
                PreconditionsV2DecodeRequestGrpcMarshaller.PreconditionsV2DecodeRequestMarshaller,
                PreconditionsV2DecodeResponseGrpcMarshaller.PreconditionsV2DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePreconditionType</summary>
        public static readonly Method<Stellar.PreconditionTypeEncodeRequest, Stellar.PreconditionTypeEncodeResponse> EncodePreconditionType =
            new Method<Stellar.PreconditionTypeEncodeRequest, Stellar.PreconditionTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePreconditionType",
                PreconditionTypeEncodeRequestGrpcMarshaller.PreconditionTypeEncodeRequestMarshaller,
                PreconditionTypeEncodeResponseGrpcMarshaller.PreconditionTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePreconditionType</summary>
        public static readonly Method<Stellar.PreconditionTypeDecodeRequest, Stellar.PreconditionTypeDecodeResponse> DecodePreconditionType =
            new Method<Stellar.PreconditionTypeDecodeRequest, Stellar.PreconditionTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePreconditionType",
                PreconditionTypeDecodeRequestGrpcMarshaller.PreconditionTypeDecodeRequestMarshaller,
                PreconditionTypeDecodeResponseGrpcMarshaller.PreconditionTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePreconditions</summary>
        public static readonly Method<Stellar.PreconditionsEncodeRequest, Stellar.PreconditionsEncodeResponse> EncodePreconditions =
            new Method<Stellar.PreconditionsEncodeRequest, Stellar.PreconditionsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePreconditions",
                PreconditionsEncodeRequestGrpcMarshaller.PreconditionsEncodeRequestMarshaller,
                PreconditionsEncodeResponseGrpcMarshaller.PreconditionsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePreconditions</summary>
        public static readonly Method<Stellar.PreconditionsDecodeRequest, Stellar.PreconditionsDecodeResponse> DecodePreconditions =
            new Method<Stellar.PreconditionsDecodeRequest, Stellar.PreconditionsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePreconditions",
                PreconditionsDecodeRequestGrpcMarshaller.PreconditionsDecodeRequestMarshaller,
                PreconditionsDecodeResponseGrpcMarshaller.PreconditionsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerFootprint</summary>
        public static readonly Method<Stellar.LedgerFootprintEncodeRequest, Stellar.LedgerFootprintEncodeResponse> EncodeLedgerFootprint =
            new Method<Stellar.LedgerFootprintEncodeRequest, Stellar.LedgerFootprintEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerFootprint",
                LedgerFootprintEncodeRequestGrpcMarshaller.LedgerFootprintEncodeRequestMarshaller,
                LedgerFootprintEncodeResponseGrpcMarshaller.LedgerFootprintEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerFootprint</summary>
        public static readonly Method<Stellar.LedgerFootprintDecodeRequest, Stellar.LedgerFootprintDecodeResponse> DecodeLedgerFootprint =
            new Method<Stellar.LedgerFootprintDecodeRequest, Stellar.LedgerFootprintDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerFootprint",
                LedgerFootprintDecodeRequestGrpcMarshaller.LedgerFootprintDecodeRequestMarshaller,
                LedgerFootprintDecodeResponseGrpcMarshaller.LedgerFootprintDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeArchivalProofType</summary>
        public static readonly Method<Stellar.ArchivalProofTypeEncodeRequest, Stellar.ArchivalProofTypeEncodeResponse> EncodeArchivalProofType =
            new Method<Stellar.ArchivalProofTypeEncodeRequest, Stellar.ArchivalProofTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeArchivalProofType",
                ArchivalProofTypeEncodeRequestGrpcMarshaller.ArchivalProofTypeEncodeRequestMarshaller,
                ArchivalProofTypeEncodeResponseGrpcMarshaller.ArchivalProofTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeArchivalProofType</summary>
        public static readonly Method<Stellar.ArchivalProofTypeDecodeRequest, Stellar.ArchivalProofTypeDecodeResponse> DecodeArchivalProofType =
            new Method<Stellar.ArchivalProofTypeDecodeRequest, Stellar.ArchivalProofTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeArchivalProofType",
                ArchivalProofTypeDecodeRequestGrpcMarshaller.ArchivalProofTypeDecodeRequestMarshaller,
                ArchivalProofTypeDecodeResponseGrpcMarshaller.ArchivalProofTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeArchivalProofNode</summary>
        public static readonly Method<Stellar.ArchivalProofNodeEncodeRequest, Stellar.ArchivalProofNodeEncodeResponse> EncodeArchivalProofNode =
            new Method<Stellar.ArchivalProofNodeEncodeRequest, Stellar.ArchivalProofNodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeArchivalProofNode",
                ArchivalProofNodeEncodeRequestGrpcMarshaller.ArchivalProofNodeEncodeRequestMarshaller,
                ArchivalProofNodeEncodeResponseGrpcMarshaller.ArchivalProofNodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeArchivalProofNode</summary>
        public static readonly Method<Stellar.ArchivalProofNodeDecodeRequest, Stellar.ArchivalProofNodeDecodeResponse> DecodeArchivalProofNode =
            new Method<Stellar.ArchivalProofNodeDecodeRequest, Stellar.ArchivalProofNodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeArchivalProofNode",
                ArchivalProofNodeDecodeRequestGrpcMarshaller.ArchivalProofNodeDecodeRequestMarshaller,
                ArchivalProofNodeDecodeResponseGrpcMarshaller.ArchivalProofNodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeProofLevel</summary>
        public static readonly Method<Stellar.ProofLevelEncodeRequest, Stellar.ProofLevelEncodeResponse> EncodeProofLevel =
            new Method<Stellar.ProofLevelEncodeRequest, Stellar.ProofLevelEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeProofLevel",
                ProofLevelEncodeRequestGrpcMarshaller.ProofLevelEncodeRequestMarshaller,
                ProofLevelEncodeResponseGrpcMarshaller.ProofLevelEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeProofLevel</summary>
        public static readonly Method<Stellar.ProofLevelDecodeRequest, Stellar.ProofLevelDecodeResponse> DecodeProofLevel =
            new Method<Stellar.ProofLevelDecodeRequest, Stellar.ProofLevelDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeProofLevel",
                ProofLevelDecodeRequestGrpcMarshaller.ProofLevelDecodeRequestMarshaller,
                ProofLevelDecodeResponseGrpcMarshaller.ProofLevelDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeNonexistenceProofBody</summary>
        public static readonly Method<Stellar.NonexistenceProofBodyEncodeRequest, Stellar.NonexistenceProofBodyEncodeResponse> EncodeNonexistenceProofBody =
            new Method<Stellar.NonexistenceProofBodyEncodeRequest, Stellar.NonexistenceProofBodyEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeNonexistenceProofBody",
                NonexistenceProofBodyEncodeRequestGrpcMarshaller.NonexistenceProofBodyEncodeRequestMarshaller,
                NonexistenceProofBodyEncodeResponseGrpcMarshaller.NonexistenceProofBodyEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeNonexistenceProofBody</summary>
        public static readonly Method<Stellar.NonexistenceProofBodyDecodeRequest, Stellar.NonexistenceProofBodyDecodeResponse> DecodeNonexistenceProofBody =
            new Method<Stellar.NonexistenceProofBodyDecodeRequest, Stellar.NonexistenceProofBodyDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeNonexistenceProofBody",
                NonexistenceProofBodyDecodeRequestGrpcMarshaller.NonexistenceProofBodyDecodeRequestMarshaller,
                NonexistenceProofBodyDecodeResponseGrpcMarshaller.NonexistenceProofBodyDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeExistenceProofBody</summary>
        public static readonly Method<Stellar.ExistenceProofBodyEncodeRequest, Stellar.ExistenceProofBodyEncodeResponse> EncodeExistenceProofBody =
            new Method<Stellar.ExistenceProofBodyEncodeRequest, Stellar.ExistenceProofBodyEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeExistenceProofBody",
                ExistenceProofBodyEncodeRequestGrpcMarshaller.ExistenceProofBodyEncodeRequestMarshaller,
                ExistenceProofBodyEncodeResponseGrpcMarshaller.ExistenceProofBodyEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeExistenceProofBody</summary>
        public static readonly Method<Stellar.ExistenceProofBodyDecodeRequest, Stellar.ExistenceProofBodyDecodeResponse> DecodeExistenceProofBody =
            new Method<Stellar.ExistenceProofBodyDecodeRequest, Stellar.ExistenceProofBodyDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeExistenceProofBody",
                ExistenceProofBodyDecodeRequestGrpcMarshaller.ExistenceProofBodyDecodeRequestMarshaller,
                ExistenceProofBodyDecodeResponseGrpcMarshaller.ExistenceProofBodyDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeArchivalProof</summary>
        public static readonly Method<Stellar.ArchivalProofEncodeRequest, Stellar.ArchivalProofEncodeResponse> EncodeArchivalProof =
            new Method<Stellar.ArchivalProofEncodeRequest, Stellar.ArchivalProofEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeArchivalProof",
                ArchivalProofEncodeRequestGrpcMarshaller.ArchivalProofEncodeRequestMarshaller,
                ArchivalProofEncodeResponseGrpcMarshaller.ArchivalProofEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeArchivalProof</summary>
        public static readonly Method<Stellar.ArchivalProofDecodeRequest, Stellar.ArchivalProofDecodeResponse> DecodeArchivalProof =
            new Method<Stellar.ArchivalProofDecodeRequest, Stellar.ArchivalProofDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeArchivalProof",
                ArchivalProofDecodeRequestGrpcMarshaller.ArchivalProofDecodeRequestMarshaller,
                ArchivalProofDecodeResponseGrpcMarshaller.ArchivalProofDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSorobanResources</summary>
        public static readonly Method<Stellar.SorobanResourcesEncodeRequest, Stellar.SorobanResourcesEncodeResponse> EncodeSorobanResources =
            new Method<Stellar.SorobanResourcesEncodeRequest, Stellar.SorobanResourcesEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSorobanResources",
                SorobanResourcesEncodeRequestGrpcMarshaller.SorobanResourcesEncodeRequestMarshaller,
                SorobanResourcesEncodeResponseGrpcMarshaller.SorobanResourcesEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSorobanResources</summary>
        public static readonly Method<Stellar.SorobanResourcesDecodeRequest, Stellar.SorobanResourcesDecodeResponse> DecodeSorobanResources =
            new Method<Stellar.SorobanResourcesDecodeRequest, Stellar.SorobanResourcesDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSorobanResources",
                SorobanResourcesDecodeRequestGrpcMarshaller.SorobanResourcesDecodeRequestMarshaller,
                SorobanResourcesDecodeResponseGrpcMarshaller.SorobanResourcesDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSorobanTransactionData</summary>
        public static readonly Method<Stellar.SorobanTransactionDataEncodeRequest, Stellar.SorobanTransactionDataEncodeResponse> EncodeSorobanTransactionData =
            new Method<Stellar.SorobanTransactionDataEncodeRequest, Stellar.SorobanTransactionDataEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSorobanTransactionData",
                SorobanTransactionDataEncodeRequestGrpcMarshaller.SorobanTransactionDataEncodeRequestMarshaller,
                SorobanTransactionDataEncodeResponseGrpcMarshaller.SorobanTransactionDataEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSorobanTransactionData</summary>
        public static readonly Method<Stellar.SorobanTransactionDataDecodeRequest, Stellar.SorobanTransactionDataDecodeResponse> DecodeSorobanTransactionData =
            new Method<Stellar.SorobanTransactionDataDecodeRequest, Stellar.SorobanTransactionDataDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSorobanTransactionData",
                SorobanTransactionDataDecodeRequestGrpcMarshaller.SorobanTransactionDataDecodeRequestMarshaller,
                SorobanTransactionDataDecodeResponseGrpcMarshaller.SorobanTransactionDataDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionV0</summary>
        public static readonly Method<Stellar.TransactionV0EncodeRequest, Stellar.TransactionV0EncodeResponse> EncodeTransactionV0 =
            new Method<Stellar.TransactionV0EncodeRequest, Stellar.TransactionV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionV0",
                TransactionV0EncodeRequestGrpcMarshaller.TransactionV0EncodeRequestMarshaller,
                TransactionV0EncodeResponseGrpcMarshaller.TransactionV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionV0</summary>
        public static readonly Method<Stellar.TransactionV0DecodeRequest, Stellar.TransactionV0DecodeResponse> DecodeTransactionV0 =
            new Method<Stellar.TransactionV0DecodeRequest, Stellar.TransactionV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionV0",
                TransactionV0DecodeRequestGrpcMarshaller.TransactionV0DecodeRequestMarshaller,
                TransactionV0DecodeResponseGrpcMarshaller.TransactionV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionV0Envelope</summary>
        public static readonly Method<Stellar.TransactionV0EnvelopeEncodeRequest, Stellar.TransactionV0EnvelopeEncodeResponse> EncodeTransactionV0Envelope =
            new Method<Stellar.TransactionV0EnvelopeEncodeRequest, Stellar.TransactionV0EnvelopeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionV0Envelope",
                TransactionV0EnvelopeEncodeRequestGrpcMarshaller.TransactionV0EnvelopeEncodeRequestMarshaller,
                TransactionV0EnvelopeEncodeResponseGrpcMarshaller.TransactionV0EnvelopeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionV0Envelope</summary>
        public static readonly Method<Stellar.TransactionV0EnvelopeDecodeRequest, Stellar.TransactionV0EnvelopeDecodeResponse> DecodeTransactionV0Envelope =
            new Method<Stellar.TransactionV0EnvelopeDecodeRequest, Stellar.TransactionV0EnvelopeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionV0Envelope",
                TransactionV0EnvelopeDecodeRequestGrpcMarshaller.TransactionV0EnvelopeDecodeRequestMarshaller,
                TransactionV0EnvelopeDecodeResponseGrpcMarshaller.TransactionV0EnvelopeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransaction</summary>
        public static readonly Method<Stellar.TransactionEncodeRequest, Stellar.TransactionEncodeResponse> EncodeTransaction =
            new Method<Stellar.TransactionEncodeRequest, Stellar.TransactionEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransaction",
                TransactionEncodeRequestGrpcMarshaller.TransactionEncodeRequestMarshaller,
                TransactionEncodeResponseGrpcMarshaller.TransactionEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransaction</summary>
        public static readonly Method<Stellar.TransactionDecodeRequest, Stellar.TransactionDecodeResponse> DecodeTransaction =
            new Method<Stellar.TransactionDecodeRequest, Stellar.TransactionDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransaction",
                TransactionDecodeRequestGrpcMarshaller.TransactionDecodeRequestMarshaller,
                TransactionDecodeResponseGrpcMarshaller.TransactionDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionV1Envelope</summary>
        public static readonly Method<Stellar.TransactionV1EnvelopeEncodeRequest, Stellar.TransactionV1EnvelopeEncodeResponse> EncodeTransactionV1Envelope =
            new Method<Stellar.TransactionV1EnvelopeEncodeRequest, Stellar.TransactionV1EnvelopeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionV1Envelope",
                TransactionV1EnvelopeEncodeRequestGrpcMarshaller.TransactionV1EnvelopeEncodeRequestMarshaller,
                TransactionV1EnvelopeEncodeResponseGrpcMarshaller.TransactionV1EnvelopeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionV1Envelope</summary>
        public static readonly Method<Stellar.TransactionV1EnvelopeDecodeRequest, Stellar.TransactionV1EnvelopeDecodeResponse> DecodeTransactionV1Envelope =
            new Method<Stellar.TransactionV1EnvelopeDecodeRequest, Stellar.TransactionV1EnvelopeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionV1Envelope",
                TransactionV1EnvelopeDecodeRequestGrpcMarshaller.TransactionV1EnvelopeDecodeRequestMarshaller,
                TransactionV1EnvelopeDecodeResponseGrpcMarshaller.TransactionV1EnvelopeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeFeeBumpTransaction</summary>
        public static readonly Method<Stellar.FeeBumpTransactionEncodeRequest, Stellar.FeeBumpTransactionEncodeResponse> EncodeFeeBumpTransaction =
            new Method<Stellar.FeeBumpTransactionEncodeRequest, Stellar.FeeBumpTransactionEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeFeeBumpTransaction",
                FeeBumpTransactionEncodeRequestGrpcMarshaller.FeeBumpTransactionEncodeRequestMarshaller,
                FeeBumpTransactionEncodeResponseGrpcMarshaller.FeeBumpTransactionEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeFeeBumpTransaction</summary>
        public static readonly Method<Stellar.FeeBumpTransactionDecodeRequest, Stellar.FeeBumpTransactionDecodeResponse> DecodeFeeBumpTransaction =
            new Method<Stellar.FeeBumpTransactionDecodeRequest, Stellar.FeeBumpTransactionDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeFeeBumpTransaction",
                FeeBumpTransactionDecodeRequestGrpcMarshaller.FeeBumpTransactionDecodeRequestMarshaller,
                FeeBumpTransactionDecodeResponseGrpcMarshaller.FeeBumpTransactionDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeFeeBumpTransactionEnvelope</summary>
        public static readonly Method<Stellar.FeeBumpTransactionEnvelopeEncodeRequest, Stellar.FeeBumpTransactionEnvelopeEncodeResponse> EncodeFeeBumpTransactionEnvelope =
            new Method<Stellar.FeeBumpTransactionEnvelopeEncodeRequest, Stellar.FeeBumpTransactionEnvelopeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeFeeBumpTransactionEnvelope",
                FeeBumpTransactionEnvelopeEncodeRequestGrpcMarshaller.FeeBumpTransactionEnvelopeEncodeRequestMarshaller,
                FeeBumpTransactionEnvelopeEncodeResponseGrpcMarshaller.FeeBumpTransactionEnvelopeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeFeeBumpTransactionEnvelope</summary>
        public static readonly Method<Stellar.FeeBumpTransactionEnvelopeDecodeRequest, Stellar.FeeBumpTransactionEnvelopeDecodeResponse> DecodeFeeBumpTransactionEnvelope =
            new Method<Stellar.FeeBumpTransactionEnvelopeDecodeRequest, Stellar.FeeBumpTransactionEnvelopeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeFeeBumpTransactionEnvelope",
                FeeBumpTransactionEnvelopeDecodeRequestGrpcMarshaller.FeeBumpTransactionEnvelopeDecodeRequestMarshaller,
                FeeBumpTransactionEnvelopeDecodeResponseGrpcMarshaller.FeeBumpTransactionEnvelopeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionEnvelope</summary>
        public static readonly Method<Stellar.TransactionEnvelopeEncodeRequest, Stellar.TransactionEnvelopeEncodeResponse> EncodeTransactionEnvelope =
            new Method<Stellar.TransactionEnvelopeEncodeRequest, Stellar.TransactionEnvelopeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionEnvelope",
                TransactionEnvelopeEncodeRequestGrpcMarshaller.TransactionEnvelopeEncodeRequestMarshaller,
                TransactionEnvelopeEncodeResponseGrpcMarshaller.TransactionEnvelopeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionEnvelope</summary>
        public static readonly Method<Stellar.TransactionEnvelopeDecodeRequest, Stellar.TransactionEnvelopeDecodeResponse> DecodeTransactionEnvelope =
            new Method<Stellar.TransactionEnvelopeDecodeRequest, Stellar.TransactionEnvelopeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionEnvelope",
                TransactionEnvelopeDecodeRequestGrpcMarshaller.TransactionEnvelopeDecodeRequestMarshaller,
                TransactionEnvelopeDecodeResponseGrpcMarshaller.TransactionEnvelopeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionSignaturePayload</summary>
        public static readonly Method<Stellar.TransactionSignaturePayloadEncodeRequest, Stellar.TransactionSignaturePayloadEncodeResponse> EncodeTransactionSignaturePayload =
            new Method<Stellar.TransactionSignaturePayloadEncodeRequest, Stellar.TransactionSignaturePayloadEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionSignaturePayload",
                TransactionSignaturePayloadEncodeRequestGrpcMarshaller.TransactionSignaturePayloadEncodeRequestMarshaller,
                TransactionSignaturePayloadEncodeResponseGrpcMarshaller.TransactionSignaturePayloadEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionSignaturePayload</summary>
        public static readonly Method<Stellar.TransactionSignaturePayloadDecodeRequest, Stellar.TransactionSignaturePayloadDecodeResponse> DecodeTransactionSignaturePayload =
            new Method<Stellar.TransactionSignaturePayloadDecodeRequest, Stellar.TransactionSignaturePayloadDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionSignaturePayload",
                TransactionSignaturePayloadDecodeRequestGrpcMarshaller.TransactionSignaturePayloadDecodeRequestMarshaller,
                TransactionSignaturePayloadDecodeResponseGrpcMarshaller.TransactionSignaturePayloadDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimAtomType</summary>
        public static readonly Method<Stellar.ClaimAtomTypeEncodeRequest, Stellar.ClaimAtomTypeEncodeResponse> EncodeClaimAtomType =
            new Method<Stellar.ClaimAtomTypeEncodeRequest, Stellar.ClaimAtomTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimAtomType",
                ClaimAtomTypeEncodeRequestGrpcMarshaller.ClaimAtomTypeEncodeRequestMarshaller,
                ClaimAtomTypeEncodeResponseGrpcMarshaller.ClaimAtomTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimAtomType</summary>
        public static readonly Method<Stellar.ClaimAtomTypeDecodeRequest, Stellar.ClaimAtomTypeDecodeResponse> DecodeClaimAtomType =
            new Method<Stellar.ClaimAtomTypeDecodeRequest, Stellar.ClaimAtomTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimAtomType",
                ClaimAtomTypeDecodeRequestGrpcMarshaller.ClaimAtomTypeDecodeRequestMarshaller,
                ClaimAtomTypeDecodeResponseGrpcMarshaller.ClaimAtomTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimOfferAtomV0</summary>
        public static readonly Method<Stellar.ClaimOfferAtomV0EncodeRequest, Stellar.ClaimOfferAtomV0EncodeResponse> EncodeClaimOfferAtomV0 =
            new Method<Stellar.ClaimOfferAtomV0EncodeRequest, Stellar.ClaimOfferAtomV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimOfferAtomV0",
                ClaimOfferAtomV0EncodeRequestGrpcMarshaller.ClaimOfferAtomV0EncodeRequestMarshaller,
                ClaimOfferAtomV0EncodeResponseGrpcMarshaller.ClaimOfferAtomV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimOfferAtomV0</summary>
        public static readonly Method<Stellar.ClaimOfferAtomV0DecodeRequest, Stellar.ClaimOfferAtomV0DecodeResponse> DecodeClaimOfferAtomV0 =
            new Method<Stellar.ClaimOfferAtomV0DecodeRequest, Stellar.ClaimOfferAtomV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimOfferAtomV0",
                ClaimOfferAtomV0DecodeRequestGrpcMarshaller.ClaimOfferAtomV0DecodeRequestMarshaller,
                ClaimOfferAtomV0DecodeResponseGrpcMarshaller.ClaimOfferAtomV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimOfferAtom</summary>
        public static readonly Method<Stellar.ClaimOfferAtomEncodeRequest, Stellar.ClaimOfferAtomEncodeResponse> EncodeClaimOfferAtom =
            new Method<Stellar.ClaimOfferAtomEncodeRequest, Stellar.ClaimOfferAtomEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimOfferAtom",
                ClaimOfferAtomEncodeRequestGrpcMarshaller.ClaimOfferAtomEncodeRequestMarshaller,
                ClaimOfferAtomEncodeResponseGrpcMarshaller.ClaimOfferAtomEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimOfferAtom</summary>
        public static readonly Method<Stellar.ClaimOfferAtomDecodeRequest, Stellar.ClaimOfferAtomDecodeResponse> DecodeClaimOfferAtom =
            new Method<Stellar.ClaimOfferAtomDecodeRequest, Stellar.ClaimOfferAtomDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimOfferAtom",
                ClaimOfferAtomDecodeRequestGrpcMarshaller.ClaimOfferAtomDecodeRequestMarshaller,
                ClaimOfferAtomDecodeResponseGrpcMarshaller.ClaimOfferAtomDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimLiquidityAtom</summary>
        public static readonly Method<Stellar.ClaimLiquidityAtomEncodeRequest, Stellar.ClaimLiquidityAtomEncodeResponse> EncodeClaimLiquidityAtom =
            new Method<Stellar.ClaimLiquidityAtomEncodeRequest, Stellar.ClaimLiquidityAtomEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimLiquidityAtom",
                ClaimLiquidityAtomEncodeRequestGrpcMarshaller.ClaimLiquidityAtomEncodeRequestMarshaller,
                ClaimLiquidityAtomEncodeResponseGrpcMarshaller.ClaimLiquidityAtomEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimLiquidityAtom</summary>
        public static readonly Method<Stellar.ClaimLiquidityAtomDecodeRequest, Stellar.ClaimLiquidityAtomDecodeResponse> DecodeClaimLiquidityAtom =
            new Method<Stellar.ClaimLiquidityAtomDecodeRequest, Stellar.ClaimLiquidityAtomDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimLiquidityAtom",
                ClaimLiquidityAtomDecodeRequestGrpcMarshaller.ClaimLiquidityAtomDecodeRequestMarshaller,
                ClaimLiquidityAtomDecodeResponseGrpcMarshaller.ClaimLiquidityAtomDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimAtom</summary>
        public static readonly Method<Stellar.ClaimAtomEncodeRequest, Stellar.ClaimAtomEncodeResponse> EncodeClaimAtom =
            new Method<Stellar.ClaimAtomEncodeRequest, Stellar.ClaimAtomEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimAtom",
                ClaimAtomEncodeRequestGrpcMarshaller.ClaimAtomEncodeRequestMarshaller,
                ClaimAtomEncodeResponseGrpcMarshaller.ClaimAtomEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimAtom</summary>
        public static readonly Method<Stellar.ClaimAtomDecodeRequest, Stellar.ClaimAtomDecodeResponse> DecodeClaimAtom =
            new Method<Stellar.ClaimAtomDecodeRequest, Stellar.ClaimAtomDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimAtom",
                ClaimAtomDecodeRequestGrpcMarshaller.ClaimAtomDecodeRequestMarshaller,
                ClaimAtomDecodeResponseGrpcMarshaller.ClaimAtomDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeCreateAccountResultCode</summary>
        public static readonly Method<Stellar.CreateAccountResultCodeEncodeRequest, Stellar.CreateAccountResultCodeEncodeResponse> EncodeCreateAccountResultCode =
            new Method<Stellar.CreateAccountResultCodeEncodeRequest, Stellar.CreateAccountResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeCreateAccountResultCode",
                CreateAccountResultCodeEncodeRequestGrpcMarshaller.CreateAccountResultCodeEncodeRequestMarshaller,
                CreateAccountResultCodeEncodeResponseGrpcMarshaller.CreateAccountResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeCreateAccountResultCode</summary>
        public static readonly Method<Stellar.CreateAccountResultCodeDecodeRequest, Stellar.CreateAccountResultCodeDecodeResponse> DecodeCreateAccountResultCode =
            new Method<Stellar.CreateAccountResultCodeDecodeRequest, Stellar.CreateAccountResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeCreateAccountResultCode",
                CreateAccountResultCodeDecodeRequestGrpcMarshaller.CreateAccountResultCodeDecodeRequestMarshaller,
                CreateAccountResultCodeDecodeResponseGrpcMarshaller.CreateAccountResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeCreateAccountResult</summary>
        public static readonly Method<Stellar.CreateAccountResultEncodeRequest, Stellar.CreateAccountResultEncodeResponse> EncodeCreateAccountResult =
            new Method<Stellar.CreateAccountResultEncodeRequest, Stellar.CreateAccountResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeCreateAccountResult",
                CreateAccountResultEncodeRequestGrpcMarshaller.CreateAccountResultEncodeRequestMarshaller,
                CreateAccountResultEncodeResponseGrpcMarshaller.CreateAccountResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeCreateAccountResult</summary>
        public static readonly Method<Stellar.CreateAccountResultDecodeRequest, Stellar.CreateAccountResultDecodeResponse> DecodeCreateAccountResult =
            new Method<Stellar.CreateAccountResultDecodeRequest, Stellar.CreateAccountResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeCreateAccountResult",
                CreateAccountResultDecodeRequestGrpcMarshaller.CreateAccountResultDecodeRequestMarshaller,
                CreateAccountResultDecodeResponseGrpcMarshaller.CreateAccountResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePaymentResultCode</summary>
        public static readonly Method<Stellar.PaymentResultCodeEncodeRequest, Stellar.PaymentResultCodeEncodeResponse> EncodePaymentResultCode =
            new Method<Stellar.PaymentResultCodeEncodeRequest, Stellar.PaymentResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePaymentResultCode",
                PaymentResultCodeEncodeRequestGrpcMarshaller.PaymentResultCodeEncodeRequestMarshaller,
                PaymentResultCodeEncodeResponseGrpcMarshaller.PaymentResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePaymentResultCode</summary>
        public static readonly Method<Stellar.PaymentResultCodeDecodeRequest, Stellar.PaymentResultCodeDecodeResponse> DecodePaymentResultCode =
            new Method<Stellar.PaymentResultCodeDecodeRequest, Stellar.PaymentResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePaymentResultCode",
                PaymentResultCodeDecodeRequestGrpcMarshaller.PaymentResultCodeDecodeRequestMarshaller,
                PaymentResultCodeDecodeResponseGrpcMarshaller.PaymentResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePaymentResult</summary>
        public static readonly Method<Stellar.PaymentResultEncodeRequest, Stellar.PaymentResultEncodeResponse> EncodePaymentResult =
            new Method<Stellar.PaymentResultEncodeRequest, Stellar.PaymentResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePaymentResult",
                PaymentResultEncodeRequestGrpcMarshaller.PaymentResultEncodeRequestMarshaller,
                PaymentResultEncodeResponseGrpcMarshaller.PaymentResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePaymentResult</summary>
        public static readonly Method<Stellar.PaymentResultDecodeRequest, Stellar.PaymentResultDecodeResponse> DecodePaymentResult =
            new Method<Stellar.PaymentResultDecodeRequest, Stellar.PaymentResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePaymentResult",
                PaymentResultDecodeRequestGrpcMarshaller.PaymentResultDecodeRequestMarshaller,
                PaymentResultDecodeResponseGrpcMarshaller.PaymentResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePathPaymentStrictReceiveResultCode</summary>
        public static readonly Method<Stellar.PathPaymentStrictReceiveResultCodeEncodeRequest, Stellar.PathPaymentStrictReceiveResultCodeEncodeResponse> EncodePathPaymentStrictReceiveResultCode =
            new Method<Stellar.PathPaymentStrictReceiveResultCodeEncodeRequest, Stellar.PathPaymentStrictReceiveResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePathPaymentStrictReceiveResultCode",
                PathPaymentStrictReceiveResultCodeEncodeRequestGrpcMarshaller.PathPaymentStrictReceiveResultCodeEncodeRequestMarshaller,
                PathPaymentStrictReceiveResultCodeEncodeResponseGrpcMarshaller.PathPaymentStrictReceiveResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePathPaymentStrictReceiveResultCode</summary>
        public static readonly Method<Stellar.PathPaymentStrictReceiveResultCodeDecodeRequest, Stellar.PathPaymentStrictReceiveResultCodeDecodeResponse> DecodePathPaymentStrictReceiveResultCode =
            new Method<Stellar.PathPaymentStrictReceiveResultCodeDecodeRequest, Stellar.PathPaymentStrictReceiveResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePathPaymentStrictReceiveResultCode",
                PathPaymentStrictReceiveResultCodeDecodeRequestGrpcMarshaller.PathPaymentStrictReceiveResultCodeDecodeRequestMarshaller,
                PathPaymentStrictReceiveResultCodeDecodeResponseGrpcMarshaller.PathPaymentStrictReceiveResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSimplePaymentResult</summary>
        public static readonly Method<Stellar.SimplePaymentResultEncodeRequest, Stellar.SimplePaymentResultEncodeResponse> EncodeSimplePaymentResult =
            new Method<Stellar.SimplePaymentResultEncodeRequest, Stellar.SimplePaymentResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSimplePaymentResult",
                SimplePaymentResultEncodeRequestGrpcMarshaller.SimplePaymentResultEncodeRequestMarshaller,
                SimplePaymentResultEncodeResponseGrpcMarshaller.SimplePaymentResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSimplePaymentResult</summary>
        public static readonly Method<Stellar.SimplePaymentResultDecodeRequest, Stellar.SimplePaymentResultDecodeResponse> DecodeSimplePaymentResult =
            new Method<Stellar.SimplePaymentResultDecodeRequest, Stellar.SimplePaymentResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSimplePaymentResult",
                SimplePaymentResultDecodeRequestGrpcMarshaller.SimplePaymentResultDecodeRequestMarshaller,
                SimplePaymentResultDecodeResponseGrpcMarshaller.SimplePaymentResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePathPaymentStrictReceiveResult</summary>
        public static readonly Method<Stellar.PathPaymentStrictReceiveResultEncodeRequest, Stellar.PathPaymentStrictReceiveResultEncodeResponse> EncodePathPaymentStrictReceiveResult =
            new Method<Stellar.PathPaymentStrictReceiveResultEncodeRequest, Stellar.PathPaymentStrictReceiveResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePathPaymentStrictReceiveResult",
                PathPaymentStrictReceiveResultEncodeRequestGrpcMarshaller.PathPaymentStrictReceiveResultEncodeRequestMarshaller,
                PathPaymentStrictReceiveResultEncodeResponseGrpcMarshaller.PathPaymentStrictReceiveResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePathPaymentStrictReceiveResult</summary>
        public static readonly Method<Stellar.PathPaymentStrictReceiveResultDecodeRequest, Stellar.PathPaymentStrictReceiveResultDecodeResponse> DecodePathPaymentStrictReceiveResult =
            new Method<Stellar.PathPaymentStrictReceiveResultDecodeRequest, Stellar.PathPaymentStrictReceiveResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePathPaymentStrictReceiveResult",
                PathPaymentStrictReceiveResultDecodeRequestGrpcMarshaller.PathPaymentStrictReceiveResultDecodeRequestMarshaller,
                PathPaymentStrictReceiveResultDecodeResponseGrpcMarshaller.PathPaymentStrictReceiveResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePathPaymentStrictSendResultCode</summary>
        public static readonly Method<Stellar.PathPaymentStrictSendResultCodeEncodeRequest, Stellar.PathPaymentStrictSendResultCodeEncodeResponse> EncodePathPaymentStrictSendResultCode =
            new Method<Stellar.PathPaymentStrictSendResultCodeEncodeRequest, Stellar.PathPaymentStrictSendResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePathPaymentStrictSendResultCode",
                PathPaymentStrictSendResultCodeEncodeRequestGrpcMarshaller.PathPaymentStrictSendResultCodeEncodeRequestMarshaller,
                PathPaymentStrictSendResultCodeEncodeResponseGrpcMarshaller.PathPaymentStrictSendResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePathPaymentStrictSendResultCode</summary>
        public static readonly Method<Stellar.PathPaymentStrictSendResultCodeDecodeRequest, Stellar.PathPaymentStrictSendResultCodeDecodeResponse> DecodePathPaymentStrictSendResultCode =
            new Method<Stellar.PathPaymentStrictSendResultCodeDecodeRequest, Stellar.PathPaymentStrictSendResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePathPaymentStrictSendResultCode",
                PathPaymentStrictSendResultCodeDecodeRequestGrpcMarshaller.PathPaymentStrictSendResultCodeDecodeRequestMarshaller,
                PathPaymentStrictSendResultCodeDecodeResponseGrpcMarshaller.PathPaymentStrictSendResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePathPaymentStrictSendResult</summary>
        public static readonly Method<Stellar.PathPaymentStrictSendResultEncodeRequest, Stellar.PathPaymentStrictSendResultEncodeResponse> EncodePathPaymentStrictSendResult =
            new Method<Stellar.PathPaymentStrictSendResultEncodeRequest, Stellar.PathPaymentStrictSendResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePathPaymentStrictSendResult",
                PathPaymentStrictSendResultEncodeRequestGrpcMarshaller.PathPaymentStrictSendResultEncodeRequestMarshaller,
                PathPaymentStrictSendResultEncodeResponseGrpcMarshaller.PathPaymentStrictSendResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePathPaymentStrictSendResult</summary>
        public static readonly Method<Stellar.PathPaymentStrictSendResultDecodeRequest, Stellar.PathPaymentStrictSendResultDecodeResponse> DecodePathPaymentStrictSendResult =
            new Method<Stellar.PathPaymentStrictSendResultDecodeRequest, Stellar.PathPaymentStrictSendResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePathPaymentStrictSendResult",
                PathPaymentStrictSendResultDecodeRequestGrpcMarshaller.PathPaymentStrictSendResultDecodeRequestMarshaller,
                PathPaymentStrictSendResultDecodeResponseGrpcMarshaller.PathPaymentStrictSendResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeManageSellOfferResultCode</summary>
        public static readonly Method<Stellar.ManageSellOfferResultCodeEncodeRequest, Stellar.ManageSellOfferResultCodeEncodeResponse> EncodeManageSellOfferResultCode =
            new Method<Stellar.ManageSellOfferResultCodeEncodeRequest, Stellar.ManageSellOfferResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeManageSellOfferResultCode",
                ManageSellOfferResultCodeEncodeRequestGrpcMarshaller.ManageSellOfferResultCodeEncodeRequestMarshaller,
                ManageSellOfferResultCodeEncodeResponseGrpcMarshaller.ManageSellOfferResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeManageSellOfferResultCode</summary>
        public static readonly Method<Stellar.ManageSellOfferResultCodeDecodeRequest, Stellar.ManageSellOfferResultCodeDecodeResponse> DecodeManageSellOfferResultCode =
            new Method<Stellar.ManageSellOfferResultCodeDecodeRequest, Stellar.ManageSellOfferResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeManageSellOfferResultCode",
                ManageSellOfferResultCodeDecodeRequestGrpcMarshaller.ManageSellOfferResultCodeDecodeRequestMarshaller,
                ManageSellOfferResultCodeDecodeResponseGrpcMarshaller.ManageSellOfferResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeManageOfferEffect</summary>
        public static readonly Method<Stellar.ManageOfferEffectEncodeRequest, Stellar.ManageOfferEffectEncodeResponse> EncodeManageOfferEffect =
            new Method<Stellar.ManageOfferEffectEncodeRequest, Stellar.ManageOfferEffectEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeManageOfferEffect",
                ManageOfferEffectEncodeRequestGrpcMarshaller.ManageOfferEffectEncodeRequestMarshaller,
                ManageOfferEffectEncodeResponseGrpcMarshaller.ManageOfferEffectEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeManageOfferEffect</summary>
        public static readonly Method<Stellar.ManageOfferEffectDecodeRequest, Stellar.ManageOfferEffectDecodeResponse> DecodeManageOfferEffect =
            new Method<Stellar.ManageOfferEffectDecodeRequest, Stellar.ManageOfferEffectDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeManageOfferEffect",
                ManageOfferEffectDecodeRequestGrpcMarshaller.ManageOfferEffectDecodeRequestMarshaller,
                ManageOfferEffectDecodeResponseGrpcMarshaller.ManageOfferEffectDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeManageOfferSuccessResult</summary>
        public static readonly Method<Stellar.ManageOfferSuccessResultEncodeRequest, Stellar.ManageOfferSuccessResultEncodeResponse> EncodeManageOfferSuccessResult =
            new Method<Stellar.ManageOfferSuccessResultEncodeRequest, Stellar.ManageOfferSuccessResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeManageOfferSuccessResult",
                ManageOfferSuccessResultEncodeRequestGrpcMarshaller.ManageOfferSuccessResultEncodeRequestMarshaller,
                ManageOfferSuccessResultEncodeResponseGrpcMarshaller.ManageOfferSuccessResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeManageOfferSuccessResult</summary>
        public static readonly Method<Stellar.ManageOfferSuccessResultDecodeRequest, Stellar.ManageOfferSuccessResultDecodeResponse> DecodeManageOfferSuccessResult =
            new Method<Stellar.ManageOfferSuccessResultDecodeRequest, Stellar.ManageOfferSuccessResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeManageOfferSuccessResult",
                ManageOfferSuccessResultDecodeRequestGrpcMarshaller.ManageOfferSuccessResultDecodeRequestMarshaller,
                ManageOfferSuccessResultDecodeResponseGrpcMarshaller.ManageOfferSuccessResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeManageSellOfferResult</summary>
        public static readonly Method<Stellar.ManageSellOfferResultEncodeRequest, Stellar.ManageSellOfferResultEncodeResponse> EncodeManageSellOfferResult =
            new Method<Stellar.ManageSellOfferResultEncodeRequest, Stellar.ManageSellOfferResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeManageSellOfferResult",
                ManageSellOfferResultEncodeRequestGrpcMarshaller.ManageSellOfferResultEncodeRequestMarshaller,
                ManageSellOfferResultEncodeResponseGrpcMarshaller.ManageSellOfferResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeManageSellOfferResult</summary>
        public static readonly Method<Stellar.ManageSellOfferResultDecodeRequest, Stellar.ManageSellOfferResultDecodeResponse> DecodeManageSellOfferResult =
            new Method<Stellar.ManageSellOfferResultDecodeRequest, Stellar.ManageSellOfferResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeManageSellOfferResult",
                ManageSellOfferResultDecodeRequestGrpcMarshaller.ManageSellOfferResultDecodeRequestMarshaller,
                ManageSellOfferResultDecodeResponseGrpcMarshaller.ManageSellOfferResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeManageBuyOfferResultCode</summary>
        public static readonly Method<Stellar.ManageBuyOfferResultCodeEncodeRequest, Stellar.ManageBuyOfferResultCodeEncodeResponse> EncodeManageBuyOfferResultCode =
            new Method<Stellar.ManageBuyOfferResultCodeEncodeRequest, Stellar.ManageBuyOfferResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeManageBuyOfferResultCode",
                ManageBuyOfferResultCodeEncodeRequestGrpcMarshaller.ManageBuyOfferResultCodeEncodeRequestMarshaller,
                ManageBuyOfferResultCodeEncodeResponseGrpcMarshaller.ManageBuyOfferResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeManageBuyOfferResultCode</summary>
        public static readonly Method<Stellar.ManageBuyOfferResultCodeDecodeRequest, Stellar.ManageBuyOfferResultCodeDecodeResponse> DecodeManageBuyOfferResultCode =
            new Method<Stellar.ManageBuyOfferResultCodeDecodeRequest, Stellar.ManageBuyOfferResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeManageBuyOfferResultCode",
                ManageBuyOfferResultCodeDecodeRequestGrpcMarshaller.ManageBuyOfferResultCodeDecodeRequestMarshaller,
                ManageBuyOfferResultCodeDecodeResponseGrpcMarshaller.ManageBuyOfferResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeManageBuyOfferResult</summary>
        public static readonly Method<Stellar.ManageBuyOfferResultEncodeRequest, Stellar.ManageBuyOfferResultEncodeResponse> EncodeManageBuyOfferResult =
            new Method<Stellar.ManageBuyOfferResultEncodeRequest, Stellar.ManageBuyOfferResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeManageBuyOfferResult",
                ManageBuyOfferResultEncodeRequestGrpcMarshaller.ManageBuyOfferResultEncodeRequestMarshaller,
                ManageBuyOfferResultEncodeResponseGrpcMarshaller.ManageBuyOfferResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeManageBuyOfferResult</summary>
        public static readonly Method<Stellar.ManageBuyOfferResultDecodeRequest, Stellar.ManageBuyOfferResultDecodeResponse> DecodeManageBuyOfferResult =
            new Method<Stellar.ManageBuyOfferResultDecodeRequest, Stellar.ManageBuyOfferResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeManageBuyOfferResult",
                ManageBuyOfferResultDecodeRequestGrpcMarshaller.ManageBuyOfferResultDecodeRequestMarshaller,
                ManageBuyOfferResultDecodeResponseGrpcMarshaller.ManageBuyOfferResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSetOptionsResultCode</summary>
        public static readonly Method<Stellar.SetOptionsResultCodeEncodeRequest, Stellar.SetOptionsResultCodeEncodeResponse> EncodeSetOptionsResultCode =
            new Method<Stellar.SetOptionsResultCodeEncodeRequest, Stellar.SetOptionsResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSetOptionsResultCode",
                SetOptionsResultCodeEncodeRequestGrpcMarshaller.SetOptionsResultCodeEncodeRequestMarshaller,
                SetOptionsResultCodeEncodeResponseGrpcMarshaller.SetOptionsResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSetOptionsResultCode</summary>
        public static readonly Method<Stellar.SetOptionsResultCodeDecodeRequest, Stellar.SetOptionsResultCodeDecodeResponse> DecodeSetOptionsResultCode =
            new Method<Stellar.SetOptionsResultCodeDecodeRequest, Stellar.SetOptionsResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSetOptionsResultCode",
                SetOptionsResultCodeDecodeRequestGrpcMarshaller.SetOptionsResultCodeDecodeRequestMarshaller,
                SetOptionsResultCodeDecodeResponseGrpcMarshaller.SetOptionsResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSetOptionsResult</summary>
        public static readonly Method<Stellar.SetOptionsResultEncodeRequest, Stellar.SetOptionsResultEncodeResponse> EncodeSetOptionsResult =
            new Method<Stellar.SetOptionsResultEncodeRequest, Stellar.SetOptionsResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSetOptionsResult",
                SetOptionsResultEncodeRequestGrpcMarshaller.SetOptionsResultEncodeRequestMarshaller,
                SetOptionsResultEncodeResponseGrpcMarshaller.SetOptionsResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSetOptionsResult</summary>
        public static readonly Method<Stellar.SetOptionsResultDecodeRequest, Stellar.SetOptionsResultDecodeResponse> DecodeSetOptionsResult =
            new Method<Stellar.SetOptionsResultDecodeRequest, Stellar.SetOptionsResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSetOptionsResult",
                SetOptionsResultDecodeRequestGrpcMarshaller.SetOptionsResultDecodeRequestMarshaller,
                SetOptionsResultDecodeResponseGrpcMarshaller.SetOptionsResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeChangeTrustResultCode</summary>
        public static readonly Method<Stellar.ChangeTrustResultCodeEncodeRequest, Stellar.ChangeTrustResultCodeEncodeResponse> EncodeChangeTrustResultCode =
            new Method<Stellar.ChangeTrustResultCodeEncodeRequest, Stellar.ChangeTrustResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeChangeTrustResultCode",
                ChangeTrustResultCodeEncodeRequestGrpcMarshaller.ChangeTrustResultCodeEncodeRequestMarshaller,
                ChangeTrustResultCodeEncodeResponseGrpcMarshaller.ChangeTrustResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeChangeTrustResultCode</summary>
        public static readonly Method<Stellar.ChangeTrustResultCodeDecodeRequest, Stellar.ChangeTrustResultCodeDecodeResponse> DecodeChangeTrustResultCode =
            new Method<Stellar.ChangeTrustResultCodeDecodeRequest, Stellar.ChangeTrustResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeChangeTrustResultCode",
                ChangeTrustResultCodeDecodeRequestGrpcMarshaller.ChangeTrustResultCodeDecodeRequestMarshaller,
                ChangeTrustResultCodeDecodeResponseGrpcMarshaller.ChangeTrustResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeChangeTrustResult</summary>
        public static readonly Method<Stellar.ChangeTrustResultEncodeRequest, Stellar.ChangeTrustResultEncodeResponse> EncodeChangeTrustResult =
            new Method<Stellar.ChangeTrustResultEncodeRequest, Stellar.ChangeTrustResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeChangeTrustResult",
                ChangeTrustResultEncodeRequestGrpcMarshaller.ChangeTrustResultEncodeRequestMarshaller,
                ChangeTrustResultEncodeResponseGrpcMarshaller.ChangeTrustResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeChangeTrustResult</summary>
        public static readonly Method<Stellar.ChangeTrustResultDecodeRequest, Stellar.ChangeTrustResultDecodeResponse> DecodeChangeTrustResult =
            new Method<Stellar.ChangeTrustResultDecodeRequest, Stellar.ChangeTrustResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeChangeTrustResult",
                ChangeTrustResultDecodeRequestGrpcMarshaller.ChangeTrustResultDecodeRequestMarshaller,
                ChangeTrustResultDecodeResponseGrpcMarshaller.ChangeTrustResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAllowTrustResultCode</summary>
        public static readonly Method<Stellar.AllowTrustResultCodeEncodeRequest, Stellar.AllowTrustResultCodeEncodeResponse> EncodeAllowTrustResultCode =
            new Method<Stellar.AllowTrustResultCodeEncodeRequest, Stellar.AllowTrustResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAllowTrustResultCode",
                AllowTrustResultCodeEncodeRequestGrpcMarshaller.AllowTrustResultCodeEncodeRequestMarshaller,
                AllowTrustResultCodeEncodeResponseGrpcMarshaller.AllowTrustResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAllowTrustResultCode</summary>
        public static readonly Method<Stellar.AllowTrustResultCodeDecodeRequest, Stellar.AllowTrustResultCodeDecodeResponse> DecodeAllowTrustResultCode =
            new Method<Stellar.AllowTrustResultCodeDecodeRequest, Stellar.AllowTrustResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAllowTrustResultCode",
                AllowTrustResultCodeDecodeRequestGrpcMarshaller.AllowTrustResultCodeDecodeRequestMarshaller,
                AllowTrustResultCodeDecodeResponseGrpcMarshaller.AllowTrustResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAllowTrustResult</summary>
        public static readonly Method<Stellar.AllowTrustResultEncodeRequest, Stellar.AllowTrustResultEncodeResponse> EncodeAllowTrustResult =
            new Method<Stellar.AllowTrustResultEncodeRequest, Stellar.AllowTrustResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAllowTrustResult",
                AllowTrustResultEncodeRequestGrpcMarshaller.AllowTrustResultEncodeRequestMarshaller,
                AllowTrustResultEncodeResponseGrpcMarshaller.AllowTrustResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAllowTrustResult</summary>
        public static readonly Method<Stellar.AllowTrustResultDecodeRequest, Stellar.AllowTrustResultDecodeResponse> DecodeAllowTrustResult =
            new Method<Stellar.AllowTrustResultDecodeRequest, Stellar.AllowTrustResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAllowTrustResult",
                AllowTrustResultDecodeRequestGrpcMarshaller.AllowTrustResultDecodeRequestMarshaller,
                AllowTrustResultDecodeResponseGrpcMarshaller.AllowTrustResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAccountMergeResultCode</summary>
        public static readonly Method<Stellar.AccountMergeResultCodeEncodeRequest, Stellar.AccountMergeResultCodeEncodeResponse> EncodeAccountMergeResultCode =
            new Method<Stellar.AccountMergeResultCodeEncodeRequest, Stellar.AccountMergeResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAccountMergeResultCode",
                AccountMergeResultCodeEncodeRequestGrpcMarshaller.AccountMergeResultCodeEncodeRequestMarshaller,
                AccountMergeResultCodeEncodeResponseGrpcMarshaller.AccountMergeResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAccountMergeResultCode</summary>
        public static readonly Method<Stellar.AccountMergeResultCodeDecodeRequest, Stellar.AccountMergeResultCodeDecodeResponse> DecodeAccountMergeResultCode =
            new Method<Stellar.AccountMergeResultCodeDecodeRequest, Stellar.AccountMergeResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAccountMergeResultCode",
                AccountMergeResultCodeDecodeRequestGrpcMarshaller.AccountMergeResultCodeDecodeRequestMarshaller,
                AccountMergeResultCodeDecodeResponseGrpcMarshaller.AccountMergeResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAccountMergeResult</summary>
        public static readonly Method<Stellar.AccountMergeResultEncodeRequest, Stellar.AccountMergeResultEncodeResponse> EncodeAccountMergeResult =
            new Method<Stellar.AccountMergeResultEncodeRequest, Stellar.AccountMergeResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAccountMergeResult",
                AccountMergeResultEncodeRequestGrpcMarshaller.AccountMergeResultEncodeRequestMarshaller,
                AccountMergeResultEncodeResponseGrpcMarshaller.AccountMergeResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAccountMergeResult</summary>
        public static readonly Method<Stellar.AccountMergeResultDecodeRequest, Stellar.AccountMergeResultDecodeResponse> DecodeAccountMergeResult =
            new Method<Stellar.AccountMergeResultDecodeRequest, Stellar.AccountMergeResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAccountMergeResult",
                AccountMergeResultDecodeRequestGrpcMarshaller.AccountMergeResultDecodeRequestMarshaller,
                AccountMergeResultDecodeResponseGrpcMarshaller.AccountMergeResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeInflationResultCode</summary>
        public static readonly Method<Stellar.InflationResultCodeEncodeRequest, Stellar.InflationResultCodeEncodeResponse> EncodeInflationResultCode =
            new Method<Stellar.InflationResultCodeEncodeRequest, Stellar.InflationResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeInflationResultCode",
                InflationResultCodeEncodeRequestGrpcMarshaller.InflationResultCodeEncodeRequestMarshaller,
                InflationResultCodeEncodeResponseGrpcMarshaller.InflationResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeInflationResultCode</summary>
        public static readonly Method<Stellar.InflationResultCodeDecodeRequest, Stellar.InflationResultCodeDecodeResponse> DecodeInflationResultCode =
            new Method<Stellar.InflationResultCodeDecodeRequest, Stellar.InflationResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeInflationResultCode",
                InflationResultCodeDecodeRequestGrpcMarshaller.InflationResultCodeDecodeRequestMarshaller,
                InflationResultCodeDecodeResponseGrpcMarshaller.InflationResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeInflationPayout</summary>
        public static readonly Method<Stellar.InflationPayoutEncodeRequest, Stellar.InflationPayoutEncodeResponse> EncodeInflationPayout =
            new Method<Stellar.InflationPayoutEncodeRequest, Stellar.InflationPayoutEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeInflationPayout",
                InflationPayoutEncodeRequestGrpcMarshaller.InflationPayoutEncodeRequestMarshaller,
                InflationPayoutEncodeResponseGrpcMarshaller.InflationPayoutEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeInflationPayout</summary>
        public static readonly Method<Stellar.InflationPayoutDecodeRequest, Stellar.InflationPayoutDecodeResponse> DecodeInflationPayout =
            new Method<Stellar.InflationPayoutDecodeRequest, Stellar.InflationPayoutDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeInflationPayout",
                InflationPayoutDecodeRequestGrpcMarshaller.InflationPayoutDecodeRequestMarshaller,
                InflationPayoutDecodeResponseGrpcMarshaller.InflationPayoutDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeInflationResult</summary>
        public static readonly Method<Stellar.InflationResultEncodeRequest, Stellar.InflationResultEncodeResponse> EncodeInflationResult =
            new Method<Stellar.InflationResultEncodeRequest, Stellar.InflationResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeInflationResult",
                InflationResultEncodeRequestGrpcMarshaller.InflationResultEncodeRequestMarshaller,
                InflationResultEncodeResponseGrpcMarshaller.InflationResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeInflationResult</summary>
        public static readonly Method<Stellar.InflationResultDecodeRequest, Stellar.InflationResultDecodeResponse> DecodeInflationResult =
            new Method<Stellar.InflationResultDecodeRequest, Stellar.InflationResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeInflationResult",
                InflationResultDecodeRequestGrpcMarshaller.InflationResultDecodeRequestMarshaller,
                InflationResultDecodeResponseGrpcMarshaller.InflationResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeManageDataResultCode</summary>
        public static readonly Method<Stellar.ManageDataResultCodeEncodeRequest, Stellar.ManageDataResultCodeEncodeResponse> EncodeManageDataResultCode =
            new Method<Stellar.ManageDataResultCodeEncodeRequest, Stellar.ManageDataResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeManageDataResultCode",
                ManageDataResultCodeEncodeRequestGrpcMarshaller.ManageDataResultCodeEncodeRequestMarshaller,
                ManageDataResultCodeEncodeResponseGrpcMarshaller.ManageDataResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeManageDataResultCode</summary>
        public static readonly Method<Stellar.ManageDataResultCodeDecodeRequest, Stellar.ManageDataResultCodeDecodeResponse> DecodeManageDataResultCode =
            new Method<Stellar.ManageDataResultCodeDecodeRequest, Stellar.ManageDataResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeManageDataResultCode",
                ManageDataResultCodeDecodeRequestGrpcMarshaller.ManageDataResultCodeDecodeRequestMarshaller,
                ManageDataResultCodeDecodeResponseGrpcMarshaller.ManageDataResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeManageDataResult</summary>
        public static readonly Method<Stellar.ManageDataResultEncodeRequest, Stellar.ManageDataResultEncodeResponse> EncodeManageDataResult =
            new Method<Stellar.ManageDataResultEncodeRequest, Stellar.ManageDataResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeManageDataResult",
                ManageDataResultEncodeRequestGrpcMarshaller.ManageDataResultEncodeRequestMarshaller,
                ManageDataResultEncodeResponseGrpcMarshaller.ManageDataResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeManageDataResult</summary>
        public static readonly Method<Stellar.ManageDataResultDecodeRequest, Stellar.ManageDataResultDecodeResponse> DecodeManageDataResult =
            new Method<Stellar.ManageDataResultDecodeRequest, Stellar.ManageDataResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeManageDataResult",
                ManageDataResultDecodeRequestGrpcMarshaller.ManageDataResultDecodeRequestMarshaller,
                ManageDataResultDecodeResponseGrpcMarshaller.ManageDataResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeBumpSequenceResultCode</summary>
        public static readonly Method<Stellar.BumpSequenceResultCodeEncodeRequest, Stellar.BumpSequenceResultCodeEncodeResponse> EncodeBumpSequenceResultCode =
            new Method<Stellar.BumpSequenceResultCodeEncodeRequest, Stellar.BumpSequenceResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeBumpSequenceResultCode",
                BumpSequenceResultCodeEncodeRequestGrpcMarshaller.BumpSequenceResultCodeEncodeRequestMarshaller,
                BumpSequenceResultCodeEncodeResponseGrpcMarshaller.BumpSequenceResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeBumpSequenceResultCode</summary>
        public static readonly Method<Stellar.BumpSequenceResultCodeDecodeRequest, Stellar.BumpSequenceResultCodeDecodeResponse> DecodeBumpSequenceResultCode =
            new Method<Stellar.BumpSequenceResultCodeDecodeRequest, Stellar.BumpSequenceResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeBumpSequenceResultCode",
                BumpSequenceResultCodeDecodeRequestGrpcMarshaller.BumpSequenceResultCodeDecodeRequestMarshaller,
                BumpSequenceResultCodeDecodeResponseGrpcMarshaller.BumpSequenceResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeBumpSequenceResult</summary>
        public static readonly Method<Stellar.BumpSequenceResultEncodeRequest, Stellar.BumpSequenceResultEncodeResponse> EncodeBumpSequenceResult =
            new Method<Stellar.BumpSequenceResultEncodeRequest, Stellar.BumpSequenceResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeBumpSequenceResult",
                BumpSequenceResultEncodeRequestGrpcMarshaller.BumpSequenceResultEncodeRequestMarshaller,
                BumpSequenceResultEncodeResponseGrpcMarshaller.BumpSequenceResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeBumpSequenceResult</summary>
        public static readonly Method<Stellar.BumpSequenceResultDecodeRequest, Stellar.BumpSequenceResultDecodeResponse> DecodeBumpSequenceResult =
            new Method<Stellar.BumpSequenceResultDecodeRequest, Stellar.BumpSequenceResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeBumpSequenceResult",
                BumpSequenceResultDecodeRequestGrpcMarshaller.BumpSequenceResultDecodeRequestMarshaller,
                BumpSequenceResultDecodeResponseGrpcMarshaller.BumpSequenceResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeCreateClaimableBalanceResultCode</summary>
        public static readonly Method<Stellar.CreateClaimableBalanceResultCodeEncodeRequest, Stellar.CreateClaimableBalanceResultCodeEncodeResponse> EncodeCreateClaimableBalanceResultCode =
            new Method<Stellar.CreateClaimableBalanceResultCodeEncodeRequest, Stellar.CreateClaimableBalanceResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeCreateClaimableBalanceResultCode",
                CreateClaimableBalanceResultCodeEncodeRequestGrpcMarshaller.CreateClaimableBalanceResultCodeEncodeRequestMarshaller,
                CreateClaimableBalanceResultCodeEncodeResponseGrpcMarshaller.CreateClaimableBalanceResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeCreateClaimableBalanceResultCode</summary>
        public static readonly Method<Stellar.CreateClaimableBalanceResultCodeDecodeRequest, Stellar.CreateClaimableBalanceResultCodeDecodeResponse> DecodeCreateClaimableBalanceResultCode =
            new Method<Stellar.CreateClaimableBalanceResultCodeDecodeRequest, Stellar.CreateClaimableBalanceResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeCreateClaimableBalanceResultCode",
                CreateClaimableBalanceResultCodeDecodeRequestGrpcMarshaller.CreateClaimableBalanceResultCodeDecodeRequestMarshaller,
                CreateClaimableBalanceResultCodeDecodeResponseGrpcMarshaller.CreateClaimableBalanceResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeCreateClaimableBalanceResult</summary>
        public static readonly Method<Stellar.CreateClaimableBalanceResultEncodeRequest, Stellar.CreateClaimableBalanceResultEncodeResponse> EncodeCreateClaimableBalanceResult =
            new Method<Stellar.CreateClaimableBalanceResultEncodeRequest, Stellar.CreateClaimableBalanceResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeCreateClaimableBalanceResult",
                CreateClaimableBalanceResultEncodeRequestGrpcMarshaller.CreateClaimableBalanceResultEncodeRequestMarshaller,
                CreateClaimableBalanceResultEncodeResponseGrpcMarshaller.CreateClaimableBalanceResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeCreateClaimableBalanceResult</summary>
        public static readonly Method<Stellar.CreateClaimableBalanceResultDecodeRequest, Stellar.CreateClaimableBalanceResultDecodeResponse> DecodeCreateClaimableBalanceResult =
            new Method<Stellar.CreateClaimableBalanceResultDecodeRequest, Stellar.CreateClaimableBalanceResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeCreateClaimableBalanceResult",
                CreateClaimableBalanceResultDecodeRequestGrpcMarshaller.CreateClaimableBalanceResultDecodeRequestMarshaller,
                CreateClaimableBalanceResultDecodeResponseGrpcMarshaller.CreateClaimableBalanceResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimClaimableBalanceResultCode</summary>
        public static readonly Method<Stellar.ClaimClaimableBalanceResultCodeEncodeRequest, Stellar.ClaimClaimableBalanceResultCodeEncodeResponse> EncodeClaimClaimableBalanceResultCode =
            new Method<Stellar.ClaimClaimableBalanceResultCodeEncodeRequest, Stellar.ClaimClaimableBalanceResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimClaimableBalanceResultCode",
                ClaimClaimableBalanceResultCodeEncodeRequestGrpcMarshaller.ClaimClaimableBalanceResultCodeEncodeRequestMarshaller,
                ClaimClaimableBalanceResultCodeEncodeResponseGrpcMarshaller.ClaimClaimableBalanceResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimClaimableBalanceResultCode</summary>
        public static readonly Method<Stellar.ClaimClaimableBalanceResultCodeDecodeRequest, Stellar.ClaimClaimableBalanceResultCodeDecodeResponse> DecodeClaimClaimableBalanceResultCode =
            new Method<Stellar.ClaimClaimableBalanceResultCodeDecodeRequest, Stellar.ClaimClaimableBalanceResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimClaimableBalanceResultCode",
                ClaimClaimableBalanceResultCodeDecodeRequestGrpcMarshaller.ClaimClaimableBalanceResultCodeDecodeRequestMarshaller,
                ClaimClaimableBalanceResultCodeDecodeResponseGrpcMarshaller.ClaimClaimableBalanceResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimClaimableBalanceResult</summary>
        public static readonly Method<Stellar.ClaimClaimableBalanceResultEncodeRequest, Stellar.ClaimClaimableBalanceResultEncodeResponse> EncodeClaimClaimableBalanceResult =
            new Method<Stellar.ClaimClaimableBalanceResultEncodeRequest, Stellar.ClaimClaimableBalanceResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimClaimableBalanceResult",
                ClaimClaimableBalanceResultEncodeRequestGrpcMarshaller.ClaimClaimableBalanceResultEncodeRequestMarshaller,
                ClaimClaimableBalanceResultEncodeResponseGrpcMarshaller.ClaimClaimableBalanceResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimClaimableBalanceResult</summary>
        public static readonly Method<Stellar.ClaimClaimableBalanceResultDecodeRequest, Stellar.ClaimClaimableBalanceResultDecodeResponse> DecodeClaimClaimableBalanceResult =
            new Method<Stellar.ClaimClaimableBalanceResultDecodeRequest, Stellar.ClaimClaimableBalanceResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimClaimableBalanceResult",
                ClaimClaimableBalanceResultDecodeRequestGrpcMarshaller.ClaimClaimableBalanceResultDecodeRequestMarshaller,
                ClaimClaimableBalanceResultDecodeResponseGrpcMarshaller.ClaimClaimableBalanceResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeBeginSponsoringFutureReservesResultCode</summary>
        public static readonly Method<Stellar.BeginSponsoringFutureReservesResultCodeEncodeRequest, Stellar.BeginSponsoringFutureReservesResultCodeEncodeResponse> EncodeBeginSponsoringFutureReservesResultCode =
            new Method<Stellar.BeginSponsoringFutureReservesResultCodeEncodeRequest, Stellar.BeginSponsoringFutureReservesResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeBeginSponsoringFutureReservesResultCode",
                BeginSponsoringFutureReservesResultCodeEncodeRequestGrpcMarshaller.BeginSponsoringFutureReservesResultCodeEncodeRequestMarshaller,
                BeginSponsoringFutureReservesResultCodeEncodeResponseGrpcMarshaller.BeginSponsoringFutureReservesResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeBeginSponsoringFutureReservesResultCode</summary>
        public static readonly Method<Stellar.BeginSponsoringFutureReservesResultCodeDecodeRequest, Stellar.BeginSponsoringFutureReservesResultCodeDecodeResponse> DecodeBeginSponsoringFutureReservesResultCode =
            new Method<Stellar.BeginSponsoringFutureReservesResultCodeDecodeRequest, Stellar.BeginSponsoringFutureReservesResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeBeginSponsoringFutureReservesResultCode",
                BeginSponsoringFutureReservesResultCodeDecodeRequestGrpcMarshaller.BeginSponsoringFutureReservesResultCodeDecodeRequestMarshaller,
                BeginSponsoringFutureReservesResultCodeDecodeResponseGrpcMarshaller.BeginSponsoringFutureReservesResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeBeginSponsoringFutureReservesResult</summary>
        public static readonly Method<Stellar.BeginSponsoringFutureReservesResultEncodeRequest, Stellar.BeginSponsoringFutureReservesResultEncodeResponse> EncodeBeginSponsoringFutureReservesResult =
            new Method<Stellar.BeginSponsoringFutureReservesResultEncodeRequest, Stellar.BeginSponsoringFutureReservesResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeBeginSponsoringFutureReservesResult",
                BeginSponsoringFutureReservesResultEncodeRequestGrpcMarshaller.BeginSponsoringFutureReservesResultEncodeRequestMarshaller,
                BeginSponsoringFutureReservesResultEncodeResponseGrpcMarshaller.BeginSponsoringFutureReservesResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeBeginSponsoringFutureReservesResult</summary>
        public static readonly Method<Stellar.BeginSponsoringFutureReservesResultDecodeRequest, Stellar.BeginSponsoringFutureReservesResultDecodeResponse> DecodeBeginSponsoringFutureReservesResult =
            new Method<Stellar.BeginSponsoringFutureReservesResultDecodeRequest, Stellar.BeginSponsoringFutureReservesResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeBeginSponsoringFutureReservesResult",
                BeginSponsoringFutureReservesResultDecodeRequestGrpcMarshaller.BeginSponsoringFutureReservesResultDecodeRequestMarshaller,
                BeginSponsoringFutureReservesResultDecodeResponseGrpcMarshaller.BeginSponsoringFutureReservesResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeEndSponsoringFutureReservesResultCode</summary>
        public static readonly Method<Stellar.EndSponsoringFutureReservesResultCodeEncodeRequest, Stellar.EndSponsoringFutureReservesResultCodeEncodeResponse> EncodeEndSponsoringFutureReservesResultCode =
            new Method<Stellar.EndSponsoringFutureReservesResultCodeEncodeRequest, Stellar.EndSponsoringFutureReservesResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeEndSponsoringFutureReservesResultCode",
                EndSponsoringFutureReservesResultCodeEncodeRequestGrpcMarshaller.EndSponsoringFutureReservesResultCodeEncodeRequestMarshaller,
                EndSponsoringFutureReservesResultCodeEncodeResponseGrpcMarshaller.EndSponsoringFutureReservesResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeEndSponsoringFutureReservesResultCode</summary>
        public static readonly Method<Stellar.EndSponsoringFutureReservesResultCodeDecodeRequest, Stellar.EndSponsoringFutureReservesResultCodeDecodeResponse> DecodeEndSponsoringFutureReservesResultCode =
            new Method<Stellar.EndSponsoringFutureReservesResultCodeDecodeRequest, Stellar.EndSponsoringFutureReservesResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeEndSponsoringFutureReservesResultCode",
                EndSponsoringFutureReservesResultCodeDecodeRequestGrpcMarshaller.EndSponsoringFutureReservesResultCodeDecodeRequestMarshaller,
                EndSponsoringFutureReservesResultCodeDecodeResponseGrpcMarshaller.EndSponsoringFutureReservesResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeEndSponsoringFutureReservesResult</summary>
        public static readonly Method<Stellar.EndSponsoringFutureReservesResultEncodeRequest, Stellar.EndSponsoringFutureReservesResultEncodeResponse> EncodeEndSponsoringFutureReservesResult =
            new Method<Stellar.EndSponsoringFutureReservesResultEncodeRequest, Stellar.EndSponsoringFutureReservesResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeEndSponsoringFutureReservesResult",
                EndSponsoringFutureReservesResultEncodeRequestGrpcMarshaller.EndSponsoringFutureReservesResultEncodeRequestMarshaller,
                EndSponsoringFutureReservesResultEncodeResponseGrpcMarshaller.EndSponsoringFutureReservesResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeEndSponsoringFutureReservesResult</summary>
        public static readonly Method<Stellar.EndSponsoringFutureReservesResultDecodeRequest, Stellar.EndSponsoringFutureReservesResultDecodeResponse> DecodeEndSponsoringFutureReservesResult =
            new Method<Stellar.EndSponsoringFutureReservesResultDecodeRequest, Stellar.EndSponsoringFutureReservesResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeEndSponsoringFutureReservesResult",
                EndSponsoringFutureReservesResultDecodeRequestGrpcMarshaller.EndSponsoringFutureReservesResultDecodeRequestMarshaller,
                EndSponsoringFutureReservesResultDecodeResponseGrpcMarshaller.EndSponsoringFutureReservesResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeRevokeSponsorshipResultCode</summary>
        public static readonly Method<Stellar.RevokeSponsorshipResultCodeEncodeRequest, Stellar.RevokeSponsorshipResultCodeEncodeResponse> EncodeRevokeSponsorshipResultCode =
            new Method<Stellar.RevokeSponsorshipResultCodeEncodeRequest, Stellar.RevokeSponsorshipResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeRevokeSponsorshipResultCode",
                RevokeSponsorshipResultCodeEncodeRequestGrpcMarshaller.RevokeSponsorshipResultCodeEncodeRequestMarshaller,
                RevokeSponsorshipResultCodeEncodeResponseGrpcMarshaller.RevokeSponsorshipResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeRevokeSponsorshipResultCode</summary>
        public static readonly Method<Stellar.RevokeSponsorshipResultCodeDecodeRequest, Stellar.RevokeSponsorshipResultCodeDecodeResponse> DecodeRevokeSponsorshipResultCode =
            new Method<Stellar.RevokeSponsorshipResultCodeDecodeRequest, Stellar.RevokeSponsorshipResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeRevokeSponsorshipResultCode",
                RevokeSponsorshipResultCodeDecodeRequestGrpcMarshaller.RevokeSponsorshipResultCodeDecodeRequestMarshaller,
                RevokeSponsorshipResultCodeDecodeResponseGrpcMarshaller.RevokeSponsorshipResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeRevokeSponsorshipResult</summary>
        public static readonly Method<Stellar.RevokeSponsorshipResultEncodeRequest, Stellar.RevokeSponsorshipResultEncodeResponse> EncodeRevokeSponsorshipResult =
            new Method<Stellar.RevokeSponsorshipResultEncodeRequest, Stellar.RevokeSponsorshipResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeRevokeSponsorshipResult",
                RevokeSponsorshipResultEncodeRequestGrpcMarshaller.RevokeSponsorshipResultEncodeRequestMarshaller,
                RevokeSponsorshipResultEncodeResponseGrpcMarshaller.RevokeSponsorshipResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeRevokeSponsorshipResult</summary>
        public static readonly Method<Stellar.RevokeSponsorshipResultDecodeRequest, Stellar.RevokeSponsorshipResultDecodeResponse> DecodeRevokeSponsorshipResult =
            new Method<Stellar.RevokeSponsorshipResultDecodeRequest, Stellar.RevokeSponsorshipResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeRevokeSponsorshipResult",
                RevokeSponsorshipResultDecodeRequestGrpcMarshaller.RevokeSponsorshipResultDecodeRequestMarshaller,
                RevokeSponsorshipResultDecodeResponseGrpcMarshaller.RevokeSponsorshipResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClawbackResultCode</summary>
        public static readonly Method<Stellar.ClawbackResultCodeEncodeRequest, Stellar.ClawbackResultCodeEncodeResponse> EncodeClawbackResultCode =
            new Method<Stellar.ClawbackResultCodeEncodeRequest, Stellar.ClawbackResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClawbackResultCode",
                ClawbackResultCodeEncodeRequestGrpcMarshaller.ClawbackResultCodeEncodeRequestMarshaller,
                ClawbackResultCodeEncodeResponseGrpcMarshaller.ClawbackResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClawbackResultCode</summary>
        public static readonly Method<Stellar.ClawbackResultCodeDecodeRequest, Stellar.ClawbackResultCodeDecodeResponse> DecodeClawbackResultCode =
            new Method<Stellar.ClawbackResultCodeDecodeRequest, Stellar.ClawbackResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClawbackResultCode",
                ClawbackResultCodeDecodeRequestGrpcMarshaller.ClawbackResultCodeDecodeRequestMarshaller,
                ClawbackResultCodeDecodeResponseGrpcMarshaller.ClawbackResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClawbackResult</summary>
        public static readonly Method<Stellar.ClawbackResultEncodeRequest, Stellar.ClawbackResultEncodeResponse> EncodeClawbackResult =
            new Method<Stellar.ClawbackResultEncodeRequest, Stellar.ClawbackResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClawbackResult",
                ClawbackResultEncodeRequestGrpcMarshaller.ClawbackResultEncodeRequestMarshaller,
                ClawbackResultEncodeResponseGrpcMarshaller.ClawbackResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClawbackResult</summary>
        public static readonly Method<Stellar.ClawbackResultDecodeRequest, Stellar.ClawbackResultDecodeResponse> DecodeClawbackResult =
            new Method<Stellar.ClawbackResultDecodeRequest, Stellar.ClawbackResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClawbackResult",
                ClawbackResultDecodeRequestGrpcMarshaller.ClawbackResultDecodeRequestMarshaller,
                ClawbackResultDecodeResponseGrpcMarshaller.ClawbackResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClawbackClaimableBalanceResultCode</summary>
        public static readonly Method<Stellar.ClawbackClaimableBalanceResultCodeEncodeRequest, Stellar.ClawbackClaimableBalanceResultCodeEncodeResponse> EncodeClawbackClaimableBalanceResultCode =
            new Method<Stellar.ClawbackClaimableBalanceResultCodeEncodeRequest, Stellar.ClawbackClaimableBalanceResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClawbackClaimableBalanceResultCode",
                ClawbackClaimableBalanceResultCodeEncodeRequestGrpcMarshaller.ClawbackClaimableBalanceResultCodeEncodeRequestMarshaller,
                ClawbackClaimableBalanceResultCodeEncodeResponseGrpcMarshaller.ClawbackClaimableBalanceResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClawbackClaimableBalanceResultCode</summary>
        public static readonly Method<Stellar.ClawbackClaimableBalanceResultCodeDecodeRequest, Stellar.ClawbackClaimableBalanceResultCodeDecodeResponse> DecodeClawbackClaimableBalanceResultCode =
            new Method<Stellar.ClawbackClaimableBalanceResultCodeDecodeRequest, Stellar.ClawbackClaimableBalanceResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClawbackClaimableBalanceResultCode",
                ClawbackClaimableBalanceResultCodeDecodeRequestGrpcMarshaller.ClawbackClaimableBalanceResultCodeDecodeRequestMarshaller,
                ClawbackClaimableBalanceResultCodeDecodeResponseGrpcMarshaller.ClawbackClaimableBalanceResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClawbackClaimableBalanceResult</summary>
        public static readonly Method<Stellar.ClawbackClaimableBalanceResultEncodeRequest, Stellar.ClawbackClaimableBalanceResultEncodeResponse> EncodeClawbackClaimableBalanceResult =
            new Method<Stellar.ClawbackClaimableBalanceResultEncodeRequest, Stellar.ClawbackClaimableBalanceResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClawbackClaimableBalanceResult",
                ClawbackClaimableBalanceResultEncodeRequestGrpcMarshaller.ClawbackClaimableBalanceResultEncodeRequestMarshaller,
                ClawbackClaimableBalanceResultEncodeResponseGrpcMarshaller.ClawbackClaimableBalanceResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClawbackClaimableBalanceResult</summary>
        public static readonly Method<Stellar.ClawbackClaimableBalanceResultDecodeRequest, Stellar.ClawbackClaimableBalanceResultDecodeResponse> DecodeClawbackClaimableBalanceResult =
            new Method<Stellar.ClawbackClaimableBalanceResultDecodeRequest, Stellar.ClawbackClaimableBalanceResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClawbackClaimableBalanceResult",
                ClawbackClaimableBalanceResultDecodeRequestGrpcMarshaller.ClawbackClaimableBalanceResultDecodeRequestMarshaller,
                ClawbackClaimableBalanceResultDecodeResponseGrpcMarshaller.ClawbackClaimableBalanceResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSetTrustLineFlagsResultCode</summary>
        public static readonly Method<Stellar.SetTrustLineFlagsResultCodeEncodeRequest, Stellar.SetTrustLineFlagsResultCodeEncodeResponse> EncodeSetTrustLineFlagsResultCode =
            new Method<Stellar.SetTrustLineFlagsResultCodeEncodeRequest, Stellar.SetTrustLineFlagsResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSetTrustLineFlagsResultCode",
                SetTrustLineFlagsResultCodeEncodeRequestGrpcMarshaller.SetTrustLineFlagsResultCodeEncodeRequestMarshaller,
                SetTrustLineFlagsResultCodeEncodeResponseGrpcMarshaller.SetTrustLineFlagsResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSetTrustLineFlagsResultCode</summary>
        public static readonly Method<Stellar.SetTrustLineFlagsResultCodeDecodeRequest, Stellar.SetTrustLineFlagsResultCodeDecodeResponse> DecodeSetTrustLineFlagsResultCode =
            new Method<Stellar.SetTrustLineFlagsResultCodeDecodeRequest, Stellar.SetTrustLineFlagsResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSetTrustLineFlagsResultCode",
                SetTrustLineFlagsResultCodeDecodeRequestGrpcMarshaller.SetTrustLineFlagsResultCodeDecodeRequestMarshaller,
                SetTrustLineFlagsResultCodeDecodeResponseGrpcMarshaller.SetTrustLineFlagsResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSetTrustLineFlagsResult</summary>
        public static readonly Method<Stellar.SetTrustLineFlagsResultEncodeRequest, Stellar.SetTrustLineFlagsResultEncodeResponse> EncodeSetTrustLineFlagsResult =
            new Method<Stellar.SetTrustLineFlagsResultEncodeRequest, Stellar.SetTrustLineFlagsResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSetTrustLineFlagsResult",
                SetTrustLineFlagsResultEncodeRequestGrpcMarshaller.SetTrustLineFlagsResultEncodeRequestMarshaller,
                SetTrustLineFlagsResultEncodeResponseGrpcMarshaller.SetTrustLineFlagsResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSetTrustLineFlagsResult</summary>
        public static readonly Method<Stellar.SetTrustLineFlagsResultDecodeRequest, Stellar.SetTrustLineFlagsResultDecodeResponse> DecodeSetTrustLineFlagsResult =
            new Method<Stellar.SetTrustLineFlagsResultDecodeRequest, Stellar.SetTrustLineFlagsResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSetTrustLineFlagsResult",
                SetTrustLineFlagsResultDecodeRequestGrpcMarshaller.SetTrustLineFlagsResultDecodeRequestMarshaller,
                SetTrustLineFlagsResultDecodeResponseGrpcMarshaller.SetTrustLineFlagsResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLiquidityPoolDepositResultCode</summary>
        public static readonly Method<Stellar.LiquidityPoolDepositResultCodeEncodeRequest, Stellar.LiquidityPoolDepositResultCodeEncodeResponse> EncodeLiquidityPoolDepositResultCode =
            new Method<Stellar.LiquidityPoolDepositResultCodeEncodeRequest, Stellar.LiquidityPoolDepositResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLiquidityPoolDepositResultCode",
                LiquidityPoolDepositResultCodeEncodeRequestGrpcMarshaller.LiquidityPoolDepositResultCodeEncodeRequestMarshaller,
                LiquidityPoolDepositResultCodeEncodeResponseGrpcMarshaller.LiquidityPoolDepositResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLiquidityPoolDepositResultCode</summary>
        public static readonly Method<Stellar.LiquidityPoolDepositResultCodeDecodeRequest, Stellar.LiquidityPoolDepositResultCodeDecodeResponse> DecodeLiquidityPoolDepositResultCode =
            new Method<Stellar.LiquidityPoolDepositResultCodeDecodeRequest, Stellar.LiquidityPoolDepositResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLiquidityPoolDepositResultCode",
                LiquidityPoolDepositResultCodeDecodeRequestGrpcMarshaller.LiquidityPoolDepositResultCodeDecodeRequestMarshaller,
                LiquidityPoolDepositResultCodeDecodeResponseGrpcMarshaller.LiquidityPoolDepositResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLiquidityPoolDepositResult</summary>
        public static readonly Method<Stellar.LiquidityPoolDepositResultEncodeRequest, Stellar.LiquidityPoolDepositResultEncodeResponse> EncodeLiquidityPoolDepositResult =
            new Method<Stellar.LiquidityPoolDepositResultEncodeRequest, Stellar.LiquidityPoolDepositResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLiquidityPoolDepositResult",
                LiquidityPoolDepositResultEncodeRequestGrpcMarshaller.LiquidityPoolDepositResultEncodeRequestMarshaller,
                LiquidityPoolDepositResultEncodeResponseGrpcMarshaller.LiquidityPoolDepositResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLiquidityPoolDepositResult</summary>
        public static readonly Method<Stellar.LiquidityPoolDepositResultDecodeRequest, Stellar.LiquidityPoolDepositResultDecodeResponse> DecodeLiquidityPoolDepositResult =
            new Method<Stellar.LiquidityPoolDepositResultDecodeRequest, Stellar.LiquidityPoolDepositResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLiquidityPoolDepositResult",
                LiquidityPoolDepositResultDecodeRequestGrpcMarshaller.LiquidityPoolDepositResultDecodeRequestMarshaller,
                LiquidityPoolDepositResultDecodeResponseGrpcMarshaller.LiquidityPoolDepositResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLiquidityPoolWithdrawResultCode</summary>
        public static readonly Method<Stellar.LiquidityPoolWithdrawResultCodeEncodeRequest, Stellar.LiquidityPoolWithdrawResultCodeEncodeResponse> EncodeLiquidityPoolWithdrawResultCode =
            new Method<Stellar.LiquidityPoolWithdrawResultCodeEncodeRequest, Stellar.LiquidityPoolWithdrawResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLiquidityPoolWithdrawResultCode",
                LiquidityPoolWithdrawResultCodeEncodeRequestGrpcMarshaller.LiquidityPoolWithdrawResultCodeEncodeRequestMarshaller,
                LiquidityPoolWithdrawResultCodeEncodeResponseGrpcMarshaller.LiquidityPoolWithdrawResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLiquidityPoolWithdrawResultCode</summary>
        public static readonly Method<Stellar.LiquidityPoolWithdrawResultCodeDecodeRequest, Stellar.LiquidityPoolWithdrawResultCodeDecodeResponse> DecodeLiquidityPoolWithdrawResultCode =
            new Method<Stellar.LiquidityPoolWithdrawResultCodeDecodeRequest, Stellar.LiquidityPoolWithdrawResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLiquidityPoolWithdrawResultCode",
                LiquidityPoolWithdrawResultCodeDecodeRequestGrpcMarshaller.LiquidityPoolWithdrawResultCodeDecodeRequestMarshaller,
                LiquidityPoolWithdrawResultCodeDecodeResponseGrpcMarshaller.LiquidityPoolWithdrawResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLiquidityPoolWithdrawResult</summary>
        public static readonly Method<Stellar.LiquidityPoolWithdrawResultEncodeRequest, Stellar.LiquidityPoolWithdrawResultEncodeResponse> EncodeLiquidityPoolWithdrawResult =
            new Method<Stellar.LiquidityPoolWithdrawResultEncodeRequest, Stellar.LiquidityPoolWithdrawResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLiquidityPoolWithdrawResult",
                LiquidityPoolWithdrawResultEncodeRequestGrpcMarshaller.LiquidityPoolWithdrawResultEncodeRequestMarshaller,
                LiquidityPoolWithdrawResultEncodeResponseGrpcMarshaller.LiquidityPoolWithdrawResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLiquidityPoolWithdrawResult</summary>
        public static readonly Method<Stellar.LiquidityPoolWithdrawResultDecodeRequest, Stellar.LiquidityPoolWithdrawResultDecodeResponse> DecodeLiquidityPoolWithdrawResult =
            new Method<Stellar.LiquidityPoolWithdrawResultDecodeRequest, Stellar.LiquidityPoolWithdrawResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLiquidityPoolWithdrawResult",
                LiquidityPoolWithdrawResultDecodeRequestGrpcMarshaller.LiquidityPoolWithdrawResultDecodeRequestMarshaller,
                LiquidityPoolWithdrawResultDecodeResponseGrpcMarshaller.LiquidityPoolWithdrawResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeInvokeHostFunctionResultCode</summary>
        public static readonly Method<Stellar.InvokeHostFunctionResultCodeEncodeRequest, Stellar.InvokeHostFunctionResultCodeEncodeResponse> EncodeInvokeHostFunctionResultCode =
            new Method<Stellar.InvokeHostFunctionResultCodeEncodeRequest, Stellar.InvokeHostFunctionResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeInvokeHostFunctionResultCode",
                InvokeHostFunctionResultCodeEncodeRequestGrpcMarshaller.InvokeHostFunctionResultCodeEncodeRequestMarshaller,
                InvokeHostFunctionResultCodeEncodeResponseGrpcMarshaller.InvokeHostFunctionResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeInvokeHostFunctionResultCode</summary>
        public static readonly Method<Stellar.InvokeHostFunctionResultCodeDecodeRequest, Stellar.InvokeHostFunctionResultCodeDecodeResponse> DecodeInvokeHostFunctionResultCode =
            new Method<Stellar.InvokeHostFunctionResultCodeDecodeRequest, Stellar.InvokeHostFunctionResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeInvokeHostFunctionResultCode",
                InvokeHostFunctionResultCodeDecodeRequestGrpcMarshaller.InvokeHostFunctionResultCodeDecodeRequestMarshaller,
                InvokeHostFunctionResultCodeDecodeResponseGrpcMarshaller.InvokeHostFunctionResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeInvokeHostFunctionResult</summary>
        public static readonly Method<Stellar.InvokeHostFunctionResultEncodeRequest, Stellar.InvokeHostFunctionResultEncodeResponse> EncodeInvokeHostFunctionResult =
            new Method<Stellar.InvokeHostFunctionResultEncodeRequest, Stellar.InvokeHostFunctionResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeInvokeHostFunctionResult",
                InvokeHostFunctionResultEncodeRequestGrpcMarshaller.InvokeHostFunctionResultEncodeRequestMarshaller,
                InvokeHostFunctionResultEncodeResponseGrpcMarshaller.InvokeHostFunctionResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeInvokeHostFunctionResult</summary>
        public static readonly Method<Stellar.InvokeHostFunctionResultDecodeRequest, Stellar.InvokeHostFunctionResultDecodeResponse> DecodeInvokeHostFunctionResult =
            new Method<Stellar.InvokeHostFunctionResultDecodeRequest, Stellar.InvokeHostFunctionResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeInvokeHostFunctionResult",
                InvokeHostFunctionResultDecodeRequestGrpcMarshaller.InvokeHostFunctionResultDecodeRequestMarshaller,
                InvokeHostFunctionResultDecodeResponseGrpcMarshaller.InvokeHostFunctionResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeExtendFootprintTTLResultCode</summary>
        public static readonly Method<Stellar.ExtendFootprintTTLResultCodeEncodeRequest, Stellar.ExtendFootprintTTLResultCodeEncodeResponse> EncodeExtendFootprintTTLResultCode =
            new Method<Stellar.ExtendFootprintTTLResultCodeEncodeRequest, Stellar.ExtendFootprintTTLResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeExtendFootprintTTLResultCode",
                ExtendFootprintTTLResultCodeEncodeRequestGrpcMarshaller.ExtendFootprintTTLResultCodeEncodeRequestMarshaller,
                ExtendFootprintTTLResultCodeEncodeResponseGrpcMarshaller.ExtendFootprintTTLResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeExtendFootprintTTLResultCode</summary>
        public static readonly Method<Stellar.ExtendFootprintTTLResultCodeDecodeRequest, Stellar.ExtendFootprintTTLResultCodeDecodeResponse> DecodeExtendFootprintTTLResultCode =
            new Method<Stellar.ExtendFootprintTTLResultCodeDecodeRequest, Stellar.ExtendFootprintTTLResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeExtendFootprintTTLResultCode",
                ExtendFootprintTTLResultCodeDecodeRequestGrpcMarshaller.ExtendFootprintTTLResultCodeDecodeRequestMarshaller,
                ExtendFootprintTTLResultCodeDecodeResponseGrpcMarshaller.ExtendFootprintTTLResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeExtendFootprintTTLResult</summary>
        public static readonly Method<Stellar.ExtendFootprintTTLResultEncodeRequest, Stellar.ExtendFootprintTTLResultEncodeResponse> EncodeExtendFootprintTTLResult =
            new Method<Stellar.ExtendFootprintTTLResultEncodeRequest, Stellar.ExtendFootprintTTLResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeExtendFootprintTTLResult",
                ExtendFootprintTTLResultEncodeRequestGrpcMarshaller.ExtendFootprintTTLResultEncodeRequestMarshaller,
                ExtendFootprintTTLResultEncodeResponseGrpcMarshaller.ExtendFootprintTTLResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeExtendFootprintTTLResult</summary>
        public static readonly Method<Stellar.ExtendFootprintTTLResultDecodeRequest, Stellar.ExtendFootprintTTLResultDecodeResponse> DecodeExtendFootprintTTLResult =
            new Method<Stellar.ExtendFootprintTTLResultDecodeRequest, Stellar.ExtendFootprintTTLResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeExtendFootprintTTLResult",
                ExtendFootprintTTLResultDecodeRequestGrpcMarshaller.ExtendFootprintTTLResultDecodeRequestMarshaller,
                ExtendFootprintTTLResultDecodeResponseGrpcMarshaller.ExtendFootprintTTLResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeRestoreFootprintResultCode</summary>
        public static readonly Method<Stellar.RestoreFootprintResultCodeEncodeRequest, Stellar.RestoreFootprintResultCodeEncodeResponse> EncodeRestoreFootprintResultCode =
            new Method<Stellar.RestoreFootprintResultCodeEncodeRequest, Stellar.RestoreFootprintResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeRestoreFootprintResultCode",
                RestoreFootprintResultCodeEncodeRequestGrpcMarshaller.RestoreFootprintResultCodeEncodeRequestMarshaller,
                RestoreFootprintResultCodeEncodeResponseGrpcMarshaller.RestoreFootprintResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeRestoreFootprintResultCode</summary>
        public static readonly Method<Stellar.RestoreFootprintResultCodeDecodeRequest, Stellar.RestoreFootprintResultCodeDecodeResponse> DecodeRestoreFootprintResultCode =
            new Method<Stellar.RestoreFootprintResultCodeDecodeRequest, Stellar.RestoreFootprintResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeRestoreFootprintResultCode",
                RestoreFootprintResultCodeDecodeRequestGrpcMarshaller.RestoreFootprintResultCodeDecodeRequestMarshaller,
                RestoreFootprintResultCodeDecodeResponseGrpcMarshaller.RestoreFootprintResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeRestoreFootprintResult</summary>
        public static readonly Method<Stellar.RestoreFootprintResultEncodeRequest, Stellar.RestoreFootprintResultEncodeResponse> EncodeRestoreFootprintResult =
            new Method<Stellar.RestoreFootprintResultEncodeRequest, Stellar.RestoreFootprintResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeRestoreFootprintResult",
                RestoreFootprintResultEncodeRequestGrpcMarshaller.RestoreFootprintResultEncodeRequestMarshaller,
                RestoreFootprintResultEncodeResponseGrpcMarshaller.RestoreFootprintResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeRestoreFootprintResult</summary>
        public static readonly Method<Stellar.RestoreFootprintResultDecodeRequest, Stellar.RestoreFootprintResultDecodeResponse> DecodeRestoreFootprintResult =
            new Method<Stellar.RestoreFootprintResultDecodeRequest, Stellar.RestoreFootprintResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeRestoreFootprintResult",
                RestoreFootprintResultDecodeRequestGrpcMarshaller.RestoreFootprintResultDecodeRequestMarshaller,
                RestoreFootprintResultDecodeResponseGrpcMarshaller.RestoreFootprintResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeOperationResultCode</summary>
        public static readonly Method<Stellar.OperationResultCodeEncodeRequest, Stellar.OperationResultCodeEncodeResponse> EncodeOperationResultCode =
            new Method<Stellar.OperationResultCodeEncodeRequest, Stellar.OperationResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeOperationResultCode",
                OperationResultCodeEncodeRequestGrpcMarshaller.OperationResultCodeEncodeRequestMarshaller,
                OperationResultCodeEncodeResponseGrpcMarshaller.OperationResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeOperationResultCode</summary>
        public static readonly Method<Stellar.OperationResultCodeDecodeRequest, Stellar.OperationResultCodeDecodeResponse> DecodeOperationResultCode =
            new Method<Stellar.OperationResultCodeDecodeRequest, Stellar.OperationResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeOperationResultCode",
                OperationResultCodeDecodeRequestGrpcMarshaller.OperationResultCodeDecodeRequestMarshaller,
                OperationResultCodeDecodeResponseGrpcMarshaller.OperationResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeOperationResult</summary>
        public static readonly Method<Stellar.OperationResultEncodeRequest, Stellar.OperationResultEncodeResponse> EncodeOperationResult =
            new Method<Stellar.OperationResultEncodeRequest, Stellar.OperationResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeOperationResult",
                OperationResultEncodeRequestGrpcMarshaller.OperationResultEncodeRequestMarshaller,
                OperationResultEncodeResponseGrpcMarshaller.OperationResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeOperationResult</summary>
        public static readonly Method<Stellar.OperationResultDecodeRequest, Stellar.OperationResultDecodeResponse> DecodeOperationResult =
            new Method<Stellar.OperationResultDecodeRequest, Stellar.OperationResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeOperationResult",
                OperationResultDecodeRequestGrpcMarshaller.OperationResultDecodeRequestMarshaller,
                OperationResultDecodeResponseGrpcMarshaller.OperationResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionResultCode</summary>
        public static readonly Method<Stellar.TransactionResultCodeEncodeRequest, Stellar.TransactionResultCodeEncodeResponse> EncodeTransactionResultCode =
            new Method<Stellar.TransactionResultCodeEncodeRequest, Stellar.TransactionResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionResultCode",
                TransactionResultCodeEncodeRequestGrpcMarshaller.TransactionResultCodeEncodeRequestMarshaller,
                TransactionResultCodeEncodeResponseGrpcMarshaller.TransactionResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionResultCode</summary>
        public static readonly Method<Stellar.TransactionResultCodeDecodeRequest, Stellar.TransactionResultCodeDecodeResponse> DecodeTransactionResultCode =
            new Method<Stellar.TransactionResultCodeDecodeRequest, Stellar.TransactionResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionResultCode",
                TransactionResultCodeDecodeRequestGrpcMarshaller.TransactionResultCodeDecodeRequestMarshaller,
                TransactionResultCodeDecodeResponseGrpcMarshaller.TransactionResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeInnerTransactionResult</summary>
        public static readonly Method<Stellar.InnerTransactionResultEncodeRequest, Stellar.InnerTransactionResultEncodeResponse> EncodeInnerTransactionResult =
            new Method<Stellar.InnerTransactionResultEncodeRequest, Stellar.InnerTransactionResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeInnerTransactionResult",
                InnerTransactionResultEncodeRequestGrpcMarshaller.InnerTransactionResultEncodeRequestMarshaller,
                InnerTransactionResultEncodeResponseGrpcMarshaller.InnerTransactionResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeInnerTransactionResult</summary>
        public static readonly Method<Stellar.InnerTransactionResultDecodeRequest, Stellar.InnerTransactionResultDecodeResponse> DecodeInnerTransactionResult =
            new Method<Stellar.InnerTransactionResultDecodeRequest, Stellar.InnerTransactionResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeInnerTransactionResult",
                InnerTransactionResultDecodeRequestGrpcMarshaller.InnerTransactionResultDecodeRequestMarshaller,
                InnerTransactionResultDecodeResponseGrpcMarshaller.InnerTransactionResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeInnerTransactionResultPair</summary>
        public static readonly Method<Stellar.InnerTransactionResultPairEncodeRequest, Stellar.InnerTransactionResultPairEncodeResponse> EncodeInnerTransactionResultPair =
            new Method<Stellar.InnerTransactionResultPairEncodeRequest, Stellar.InnerTransactionResultPairEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeInnerTransactionResultPair",
                InnerTransactionResultPairEncodeRequestGrpcMarshaller.InnerTransactionResultPairEncodeRequestMarshaller,
                InnerTransactionResultPairEncodeResponseGrpcMarshaller.InnerTransactionResultPairEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeInnerTransactionResultPair</summary>
        public static readonly Method<Stellar.InnerTransactionResultPairDecodeRequest, Stellar.InnerTransactionResultPairDecodeResponse> DecodeInnerTransactionResultPair =
            new Method<Stellar.InnerTransactionResultPairDecodeRequest, Stellar.InnerTransactionResultPairDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeInnerTransactionResultPair",
                InnerTransactionResultPairDecodeRequestGrpcMarshaller.InnerTransactionResultPairDecodeRequestMarshaller,
                InnerTransactionResultPairDecodeResponseGrpcMarshaller.InnerTransactionResultPairDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionResult</summary>
        public static readonly Method<Stellar.TransactionResultEncodeRequest, Stellar.TransactionResultEncodeResponse> EncodeTransactionResult =
            new Method<Stellar.TransactionResultEncodeRequest, Stellar.TransactionResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionResult",
                TransactionResultEncodeRequestGrpcMarshaller.TransactionResultEncodeRequestMarshaller,
                TransactionResultEncodeResponseGrpcMarshaller.TransactionResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionResult</summary>
        public static readonly Method<Stellar.TransactionResultDecodeRequest, Stellar.TransactionResultDecodeResponse> DecodeTransactionResult =
            new Method<Stellar.TransactionResultDecodeRequest, Stellar.TransactionResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionResult",
                TransactionResultDecodeRequestGrpcMarshaller.TransactionResultDecodeRequestMarshaller,
                TransactionResultDecodeResponseGrpcMarshaller.TransactionResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeHash</summary>
        public static readonly Method<Stellar.HashEncodeRequest, Stellar.HashEncodeResponse> EncodeHash =
            new Method<Stellar.HashEncodeRequest, Stellar.HashEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeHash",
                HashEncodeRequestGrpcMarshaller.HashEncodeRequestMarshaller,
                HashEncodeResponseGrpcMarshaller.HashEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeHash</summary>
        public static readonly Method<Stellar.HashDecodeRequest, Stellar.HashDecodeResponse> DecodeHash =
            new Method<Stellar.HashDecodeRequest, Stellar.HashDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeHash",
                HashDecodeRequestGrpcMarshaller.HashDecodeRequestMarshaller,
                HashDecodeResponseGrpcMarshaller.HashDecodeResponseMarshaller);

        /// <summary>Method descriptor for Encodeuint256</summary>
        public static readonly Method<Stellar.uint256EncodeRequest, Stellar.uint256EncodeResponse> Encodeuint256 =
            new Method<Stellar.uint256EncodeRequest, Stellar.uint256EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Encodeuint256",
                uint256EncodeRequestGrpcMarshaller.uint256EncodeRequestMarshaller,
                uint256EncodeResponseGrpcMarshaller.uint256EncodeResponseMarshaller);

        /// <summary>Method descriptor for Decodeuint256</summary>
        public static readonly Method<Stellar.uint256DecodeRequest, Stellar.uint256DecodeResponse> Decodeuint256 =
            new Method<Stellar.uint256DecodeRequest, Stellar.uint256DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Decodeuint256",
                uint256DecodeRequestGrpcMarshaller.uint256DecodeRequestMarshaller,
                uint256DecodeResponseGrpcMarshaller.uint256DecodeResponseMarshaller);

        /// <summary>Method descriptor for Encodeuint32</summary>
        public static readonly Method<Stellar.uint32EncodeRequest, Stellar.uint32EncodeResponse> Encodeuint32 =
            new Method<Stellar.uint32EncodeRequest, Stellar.uint32EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Encodeuint32",
                uint32EncodeRequestGrpcMarshaller.uint32EncodeRequestMarshaller,
                uint32EncodeResponseGrpcMarshaller.uint32EncodeResponseMarshaller);

        /// <summary>Method descriptor for Decodeuint32</summary>
        public static readonly Method<Stellar.uint32DecodeRequest, Stellar.uint32DecodeResponse> Decodeuint32 =
            new Method<Stellar.uint32DecodeRequest, Stellar.uint32DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Decodeuint32",
                uint32DecodeRequestGrpcMarshaller.uint32DecodeRequestMarshaller,
                uint32DecodeResponseGrpcMarshaller.uint32DecodeResponseMarshaller);

        /// <summary>Method descriptor for Encodeint32</summary>
        public static readonly Method<Stellar.int32EncodeRequest, Stellar.int32EncodeResponse> Encodeint32 =
            new Method<Stellar.int32EncodeRequest, Stellar.int32EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Encodeint32",
                int32EncodeRequestGrpcMarshaller.int32EncodeRequestMarshaller,
                int32EncodeResponseGrpcMarshaller.int32EncodeResponseMarshaller);

        /// <summary>Method descriptor for Decodeint32</summary>
        public static readonly Method<Stellar.int32DecodeRequest, Stellar.int32DecodeResponse> Decodeint32 =
            new Method<Stellar.int32DecodeRequest, Stellar.int32DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Decodeint32",
                int32DecodeRequestGrpcMarshaller.int32DecodeRequestMarshaller,
                int32DecodeResponseGrpcMarshaller.int32DecodeResponseMarshaller);

        /// <summary>Method descriptor for Encodeuint64</summary>
        public static readonly Method<Stellar.uint64EncodeRequest, Stellar.uint64EncodeResponse> Encodeuint64 =
            new Method<Stellar.uint64EncodeRequest, Stellar.uint64EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Encodeuint64",
                uint64EncodeRequestGrpcMarshaller.uint64EncodeRequestMarshaller,
                uint64EncodeResponseGrpcMarshaller.uint64EncodeResponseMarshaller);

        /// <summary>Method descriptor for Decodeuint64</summary>
        public static readonly Method<Stellar.uint64DecodeRequest, Stellar.uint64DecodeResponse> Decodeuint64 =
            new Method<Stellar.uint64DecodeRequest, Stellar.uint64DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Decodeuint64",
                uint64DecodeRequestGrpcMarshaller.uint64DecodeRequestMarshaller,
                uint64DecodeResponseGrpcMarshaller.uint64DecodeResponseMarshaller);

        /// <summary>Method descriptor for Encodeint64</summary>
        public static readonly Method<Stellar.int64EncodeRequest, Stellar.int64EncodeResponse> Encodeint64 =
            new Method<Stellar.int64EncodeRequest, Stellar.int64EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Encodeint64",
                int64EncodeRequestGrpcMarshaller.int64EncodeRequestMarshaller,
                int64EncodeResponseGrpcMarshaller.int64EncodeResponseMarshaller);

        /// <summary>Method descriptor for Decodeint64</summary>
        public static readonly Method<Stellar.int64DecodeRequest, Stellar.int64DecodeResponse> Decodeint64 =
            new Method<Stellar.int64DecodeRequest, Stellar.int64DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Decodeint64",
                int64DecodeRequestGrpcMarshaller.int64DecodeRequestMarshaller,
                int64DecodeResponseGrpcMarshaller.int64DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTimePoint</summary>
        public static readonly Method<Stellar.TimePointEncodeRequest, Stellar.TimePointEncodeResponse> EncodeTimePoint =
            new Method<Stellar.TimePointEncodeRequest, Stellar.TimePointEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTimePoint",
                TimePointEncodeRequestGrpcMarshaller.TimePointEncodeRequestMarshaller,
                TimePointEncodeResponseGrpcMarshaller.TimePointEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTimePoint</summary>
        public static readonly Method<Stellar.TimePointDecodeRequest, Stellar.TimePointDecodeResponse> DecodeTimePoint =
            new Method<Stellar.TimePointDecodeRequest, Stellar.TimePointDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTimePoint",
                TimePointDecodeRequestGrpcMarshaller.TimePointDecodeRequestMarshaller,
                TimePointDecodeResponseGrpcMarshaller.TimePointDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeDuration</summary>
        public static readonly Method<Stellar.DurationEncodeRequest, Stellar.DurationEncodeResponse> EncodeDuration =
            new Method<Stellar.DurationEncodeRequest, Stellar.DurationEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeDuration",
                DurationEncodeRequestGrpcMarshaller.DurationEncodeRequestMarshaller,
                DurationEncodeResponseGrpcMarshaller.DurationEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeDuration</summary>
        public static readonly Method<Stellar.DurationDecodeRequest, Stellar.DurationDecodeResponse> DecodeDuration =
            new Method<Stellar.DurationDecodeRequest, Stellar.DurationDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeDuration",
                DurationDecodeRequestGrpcMarshaller.DurationDecodeRequestMarshaller,
                DurationDecodeResponseGrpcMarshaller.DurationDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeExtensionPoint</summary>
        public static readonly Method<Stellar.ExtensionPointEncodeRequest, Stellar.ExtensionPointEncodeResponse> EncodeExtensionPoint =
            new Method<Stellar.ExtensionPointEncodeRequest, Stellar.ExtensionPointEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeExtensionPoint",
                ExtensionPointEncodeRequestGrpcMarshaller.ExtensionPointEncodeRequestMarshaller,
                ExtensionPointEncodeResponseGrpcMarshaller.ExtensionPointEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeExtensionPoint</summary>
        public static readonly Method<Stellar.ExtensionPointDecodeRequest, Stellar.ExtensionPointDecodeResponse> DecodeExtensionPoint =
            new Method<Stellar.ExtensionPointDecodeRequest, Stellar.ExtensionPointDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeExtensionPoint",
                ExtensionPointDecodeRequestGrpcMarshaller.ExtensionPointDecodeRequestMarshaller,
                ExtensionPointDecodeResponseGrpcMarshaller.ExtensionPointDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeCryptoKeyType</summary>
        public static readonly Method<Stellar.CryptoKeyTypeEncodeRequest, Stellar.CryptoKeyTypeEncodeResponse> EncodeCryptoKeyType =
            new Method<Stellar.CryptoKeyTypeEncodeRequest, Stellar.CryptoKeyTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeCryptoKeyType",
                CryptoKeyTypeEncodeRequestGrpcMarshaller.CryptoKeyTypeEncodeRequestMarshaller,
                CryptoKeyTypeEncodeResponseGrpcMarshaller.CryptoKeyTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeCryptoKeyType</summary>
        public static readonly Method<Stellar.CryptoKeyTypeDecodeRequest, Stellar.CryptoKeyTypeDecodeResponse> DecodeCryptoKeyType =
            new Method<Stellar.CryptoKeyTypeDecodeRequest, Stellar.CryptoKeyTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeCryptoKeyType",
                CryptoKeyTypeDecodeRequestGrpcMarshaller.CryptoKeyTypeDecodeRequestMarshaller,
                CryptoKeyTypeDecodeResponseGrpcMarshaller.CryptoKeyTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePublicKeyType</summary>
        public static readonly Method<Stellar.PublicKeyTypeEncodeRequest, Stellar.PublicKeyTypeEncodeResponse> EncodePublicKeyType =
            new Method<Stellar.PublicKeyTypeEncodeRequest, Stellar.PublicKeyTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePublicKeyType",
                PublicKeyTypeEncodeRequestGrpcMarshaller.PublicKeyTypeEncodeRequestMarshaller,
                PublicKeyTypeEncodeResponseGrpcMarshaller.PublicKeyTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePublicKeyType</summary>
        public static readonly Method<Stellar.PublicKeyTypeDecodeRequest, Stellar.PublicKeyTypeDecodeResponse> DecodePublicKeyType =
            new Method<Stellar.PublicKeyTypeDecodeRequest, Stellar.PublicKeyTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePublicKeyType",
                PublicKeyTypeDecodeRequestGrpcMarshaller.PublicKeyTypeDecodeRequestMarshaller,
                PublicKeyTypeDecodeResponseGrpcMarshaller.PublicKeyTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSignerKeyType</summary>
        public static readonly Method<Stellar.SignerKeyTypeEncodeRequest, Stellar.SignerKeyTypeEncodeResponse> EncodeSignerKeyType =
            new Method<Stellar.SignerKeyTypeEncodeRequest, Stellar.SignerKeyTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSignerKeyType",
                SignerKeyTypeEncodeRequestGrpcMarshaller.SignerKeyTypeEncodeRequestMarshaller,
                SignerKeyTypeEncodeResponseGrpcMarshaller.SignerKeyTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSignerKeyType</summary>
        public static readonly Method<Stellar.SignerKeyTypeDecodeRequest, Stellar.SignerKeyTypeDecodeResponse> DecodeSignerKeyType =
            new Method<Stellar.SignerKeyTypeDecodeRequest, Stellar.SignerKeyTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSignerKeyType",
                SignerKeyTypeDecodeRequestGrpcMarshaller.SignerKeyTypeDecodeRequestMarshaller,
                SignerKeyTypeDecodeResponseGrpcMarshaller.SignerKeyTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePublicKey</summary>
        public static readonly Method<Stellar.PublicKeyEncodeRequest, Stellar.PublicKeyEncodeResponse> EncodePublicKey =
            new Method<Stellar.PublicKeyEncodeRequest, Stellar.PublicKeyEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePublicKey",
                PublicKeyEncodeRequestGrpcMarshaller.PublicKeyEncodeRequestMarshaller,
                PublicKeyEncodeResponseGrpcMarshaller.PublicKeyEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePublicKey</summary>
        public static readonly Method<Stellar.PublicKeyDecodeRequest, Stellar.PublicKeyDecodeResponse> DecodePublicKey =
            new Method<Stellar.PublicKeyDecodeRequest, Stellar.PublicKeyDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePublicKey",
                PublicKeyDecodeRequestGrpcMarshaller.PublicKeyDecodeRequestMarshaller,
                PublicKeyDecodeResponseGrpcMarshaller.PublicKeyDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSignerKey</summary>
        public static readonly Method<Stellar.SignerKeyEncodeRequest, Stellar.SignerKeyEncodeResponse> EncodeSignerKey =
            new Method<Stellar.SignerKeyEncodeRequest, Stellar.SignerKeyEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSignerKey",
                SignerKeyEncodeRequestGrpcMarshaller.SignerKeyEncodeRequestMarshaller,
                SignerKeyEncodeResponseGrpcMarshaller.SignerKeyEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSignerKey</summary>
        public static readonly Method<Stellar.SignerKeyDecodeRequest, Stellar.SignerKeyDecodeResponse> DecodeSignerKey =
            new Method<Stellar.SignerKeyDecodeRequest, Stellar.SignerKeyDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSignerKey",
                SignerKeyDecodeRequestGrpcMarshaller.SignerKeyDecodeRequestMarshaller,
                SignerKeyDecodeResponseGrpcMarshaller.SignerKeyDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSignature</summary>
        public static readonly Method<Stellar.SignatureEncodeRequest, Stellar.SignatureEncodeResponse> EncodeSignature =
            new Method<Stellar.SignatureEncodeRequest, Stellar.SignatureEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSignature",
                SignatureEncodeRequestGrpcMarshaller.SignatureEncodeRequestMarshaller,
                SignatureEncodeResponseGrpcMarshaller.SignatureEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSignature</summary>
        public static readonly Method<Stellar.SignatureDecodeRequest, Stellar.SignatureDecodeResponse> DecodeSignature =
            new Method<Stellar.SignatureDecodeRequest, Stellar.SignatureDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSignature",
                SignatureDecodeRequestGrpcMarshaller.SignatureDecodeRequestMarshaller,
                SignatureDecodeResponseGrpcMarshaller.SignatureDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSignatureHint</summary>
        public static readonly Method<Stellar.SignatureHintEncodeRequest, Stellar.SignatureHintEncodeResponse> EncodeSignatureHint =
            new Method<Stellar.SignatureHintEncodeRequest, Stellar.SignatureHintEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSignatureHint",
                SignatureHintEncodeRequestGrpcMarshaller.SignatureHintEncodeRequestMarshaller,
                SignatureHintEncodeResponseGrpcMarshaller.SignatureHintEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSignatureHint</summary>
        public static readonly Method<Stellar.SignatureHintDecodeRequest, Stellar.SignatureHintDecodeResponse> DecodeSignatureHint =
            new Method<Stellar.SignatureHintDecodeRequest, Stellar.SignatureHintDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSignatureHint",
                SignatureHintDecodeRequestGrpcMarshaller.SignatureHintDecodeRequestMarshaller,
                SignatureHintDecodeResponseGrpcMarshaller.SignatureHintDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeNodeID</summary>
        public static readonly Method<Stellar.NodeIDEncodeRequest, Stellar.NodeIDEncodeResponse> EncodeNodeID =
            new Method<Stellar.NodeIDEncodeRequest, Stellar.NodeIDEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeNodeID",
                NodeIDEncodeRequestGrpcMarshaller.NodeIDEncodeRequestMarshaller,
                NodeIDEncodeResponseGrpcMarshaller.NodeIDEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeNodeID</summary>
        public static readonly Method<Stellar.NodeIDDecodeRequest, Stellar.NodeIDDecodeResponse> DecodeNodeID =
            new Method<Stellar.NodeIDDecodeRequest, Stellar.NodeIDDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeNodeID",
                NodeIDDecodeRequestGrpcMarshaller.NodeIDDecodeRequestMarshaller,
                NodeIDDecodeResponseGrpcMarshaller.NodeIDDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAccountID</summary>
        public static readonly Method<Stellar.AccountIDEncodeRequest, Stellar.AccountIDEncodeResponse> EncodeAccountID =
            new Method<Stellar.AccountIDEncodeRequest, Stellar.AccountIDEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAccountID",
                AccountIDEncodeRequestGrpcMarshaller.AccountIDEncodeRequestMarshaller,
                AccountIDEncodeResponseGrpcMarshaller.AccountIDEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAccountID</summary>
        public static readonly Method<Stellar.AccountIDDecodeRequest, Stellar.AccountIDDecodeResponse> DecodeAccountID =
            new Method<Stellar.AccountIDDecodeRequest, Stellar.AccountIDDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAccountID",
                AccountIDDecodeRequestGrpcMarshaller.AccountIDDecodeRequestMarshaller,
                AccountIDDecodeResponseGrpcMarshaller.AccountIDDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeCurve25519Secret</summary>
        public static readonly Method<Stellar.Curve25519SecretEncodeRequest, Stellar.Curve25519SecretEncodeResponse> EncodeCurve25519Secret =
            new Method<Stellar.Curve25519SecretEncodeRequest, Stellar.Curve25519SecretEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeCurve25519Secret",
                Curve25519SecretEncodeRequestGrpcMarshaller.Curve25519SecretEncodeRequestMarshaller,
                Curve25519SecretEncodeResponseGrpcMarshaller.Curve25519SecretEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeCurve25519Secret</summary>
        public static readonly Method<Stellar.Curve25519SecretDecodeRequest, Stellar.Curve25519SecretDecodeResponse> DecodeCurve25519Secret =
            new Method<Stellar.Curve25519SecretDecodeRequest, Stellar.Curve25519SecretDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeCurve25519Secret",
                Curve25519SecretDecodeRequestGrpcMarshaller.Curve25519SecretDecodeRequestMarshaller,
                Curve25519SecretDecodeResponseGrpcMarshaller.Curve25519SecretDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeCurve25519Public</summary>
        public static readonly Method<Stellar.Curve25519PublicEncodeRequest, Stellar.Curve25519PublicEncodeResponse> EncodeCurve25519Public =
            new Method<Stellar.Curve25519PublicEncodeRequest, Stellar.Curve25519PublicEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeCurve25519Public",
                Curve25519PublicEncodeRequestGrpcMarshaller.Curve25519PublicEncodeRequestMarshaller,
                Curve25519PublicEncodeResponseGrpcMarshaller.Curve25519PublicEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeCurve25519Public</summary>
        public static readonly Method<Stellar.Curve25519PublicDecodeRequest, Stellar.Curve25519PublicDecodeResponse> DecodeCurve25519Public =
            new Method<Stellar.Curve25519PublicDecodeRequest, Stellar.Curve25519PublicDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeCurve25519Public",
                Curve25519PublicDecodeRequestGrpcMarshaller.Curve25519PublicDecodeRequestMarshaller,
                Curve25519PublicDecodeResponseGrpcMarshaller.Curve25519PublicDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeHmacSha256Key</summary>
        public static readonly Method<Stellar.HmacSha256KeyEncodeRequest, Stellar.HmacSha256KeyEncodeResponse> EncodeHmacSha256Key =
            new Method<Stellar.HmacSha256KeyEncodeRequest, Stellar.HmacSha256KeyEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeHmacSha256Key",
                HmacSha256KeyEncodeRequestGrpcMarshaller.HmacSha256KeyEncodeRequestMarshaller,
                HmacSha256KeyEncodeResponseGrpcMarshaller.HmacSha256KeyEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeHmacSha256Key</summary>
        public static readonly Method<Stellar.HmacSha256KeyDecodeRequest, Stellar.HmacSha256KeyDecodeResponse> DecodeHmacSha256Key =
            new Method<Stellar.HmacSha256KeyDecodeRequest, Stellar.HmacSha256KeyDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeHmacSha256Key",
                HmacSha256KeyDecodeRequestGrpcMarshaller.HmacSha256KeyDecodeRequestMarshaller,
                HmacSha256KeyDecodeResponseGrpcMarshaller.HmacSha256KeyDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeHmacSha256Mac</summary>
        public static readonly Method<Stellar.HmacSha256MacEncodeRequest, Stellar.HmacSha256MacEncodeResponse> EncodeHmacSha256Mac =
            new Method<Stellar.HmacSha256MacEncodeRequest, Stellar.HmacSha256MacEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeHmacSha256Mac",
                HmacSha256MacEncodeRequestGrpcMarshaller.HmacSha256MacEncodeRequestMarshaller,
                HmacSha256MacEncodeResponseGrpcMarshaller.HmacSha256MacEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeHmacSha256Mac</summary>
        public static readonly Method<Stellar.HmacSha256MacDecodeRequest, Stellar.HmacSha256MacDecodeResponse> DecodeHmacSha256Mac =
            new Method<Stellar.HmacSha256MacDecodeRequest, Stellar.HmacSha256MacDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeHmacSha256Mac",
                HmacSha256MacDecodeRequestGrpcMarshaller.HmacSha256MacDecodeRequestMarshaller,
                HmacSha256MacDecodeResponseGrpcMarshaller.HmacSha256MacDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeShortHashSeed</summary>
        public static readonly Method<Stellar.ShortHashSeedEncodeRequest, Stellar.ShortHashSeedEncodeResponse> EncodeShortHashSeed =
            new Method<Stellar.ShortHashSeedEncodeRequest, Stellar.ShortHashSeedEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeShortHashSeed",
                ShortHashSeedEncodeRequestGrpcMarshaller.ShortHashSeedEncodeRequestMarshaller,
                ShortHashSeedEncodeResponseGrpcMarshaller.ShortHashSeedEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeShortHashSeed</summary>
        public static readonly Method<Stellar.ShortHashSeedDecodeRequest, Stellar.ShortHashSeedDecodeResponse> DecodeShortHashSeed =
            new Method<Stellar.ShortHashSeedDecodeRequest, Stellar.ShortHashSeedDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeShortHashSeed",
                ShortHashSeedDecodeRequestGrpcMarshaller.ShortHashSeedDecodeRequestMarshaller,
                ShortHashSeedDecodeResponseGrpcMarshaller.ShortHashSeedDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeBinaryFuseFilterType</summary>
        public static readonly Method<Stellar.BinaryFuseFilterTypeEncodeRequest, Stellar.BinaryFuseFilterTypeEncodeResponse> EncodeBinaryFuseFilterType =
            new Method<Stellar.BinaryFuseFilterTypeEncodeRequest, Stellar.BinaryFuseFilterTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeBinaryFuseFilterType",
                BinaryFuseFilterTypeEncodeRequestGrpcMarshaller.BinaryFuseFilterTypeEncodeRequestMarshaller,
                BinaryFuseFilterTypeEncodeResponseGrpcMarshaller.BinaryFuseFilterTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeBinaryFuseFilterType</summary>
        public static readonly Method<Stellar.BinaryFuseFilterTypeDecodeRequest, Stellar.BinaryFuseFilterTypeDecodeResponse> DecodeBinaryFuseFilterType =
            new Method<Stellar.BinaryFuseFilterTypeDecodeRequest, Stellar.BinaryFuseFilterTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeBinaryFuseFilterType",
                BinaryFuseFilterTypeDecodeRequestGrpcMarshaller.BinaryFuseFilterTypeDecodeRequestMarshaller,
                BinaryFuseFilterTypeDecodeResponseGrpcMarshaller.BinaryFuseFilterTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSerializedBinaryFuseFilter</summary>
        public static readonly Method<Stellar.SerializedBinaryFuseFilterEncodeRequest, Stellar.SerializedBinaryFuseFilterEncodeResponse> EncodeSerializedBinaryFuseFilter =
            new Method<Stellar.SerializedBinaryFuseFilterEncodeRequest, Stellar.SerializedBinaryFuseFilterEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSerializedBinaryFuseFilter",
                SerializedBinaryFuseFilterEncodeRequestGrpcMarshaller.SerializedBinaryFuseFilterEncodeRequestMarshaller,
                SerializedBinaryFuseFilterEncodeResponseGrpcMarshaller.SerializedBinaryFuseFilterEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSerializedBinaryFuseFilter</summary>
        public static readonly Method<Stellar.SerializedBinaryFuseFilterDecodeRequest, Stellar.SerializedBinaryFuseFilterDecodeResponse> DecodeSerializedBinaryFuseFilter =
            new Method<Stellar.SerializedBinaryFuseFilterDecodeRequest, Stellar.SerializedBinaryFuseFilterDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSerializedBinaryFuseFilter",
                SerializedBinaryFuseFilterDecodeRequestGrpcMarshaller.SerializedBinaryFuseFilterDecodeRequestMarshaller,
                SerializedBinaryFuseFilterDecodeResponseGrpcMarshaller.SerializedBinaryFuseFilterDecodeResponseMarshaller);

    }

    /// <summary>Custom marshallers for IXdrProtoService types</summary>
    public static class XdrProtoServiceGrpcMarshaller
    {
        // Static constructor to configure types
        static XdrProtoServiceGrpcMarshaller()
        {
            ConfigureTypes();
        }

        /// <summary>Configure type serialization</summary>
        public static void ConfigureTypes()
        {
            // Get runtime type model
            var model = RuntimeTypeModel.Default;

            // Ensure types are configured for AOT compatibility
            if (!model.IsDefined(typeof(Stellar.ConfigSettingContractExecutionLanesV0EncodeRequest)))
            {
                model.Add(typeof(Stellar.ConfigSettingContractExecutionLanesV0EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingContractExecutionLanesV0EncodeResponse)))
            {
                model.Add(typeof(Stellar.ConfigSettingContractExecutionLanesV0EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingContractExecutionLanesV0DecodeRequest)))
            {
                model.Add(typeof(Stellar.ConfigSettingContractExecutionLanesV0DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingContractExecutionLanesV0DecodeResponse)))
            {
                model.Add(typeof(Stellar.ConfigSettingContractExecutionLanesV0DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingContractComputeV0EncodeRequest)))
            {
                model.Add(typeof(Stellar.ConfigSettingContractComputeV0EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingContractComputeV0EncodeResponse)))
            {
                model.Add(typeof(Stellar.ConfigSettingContractComputeV0EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingContractComputeV0DecodeRequest)))
            {
                model.Add(typeof(Stellar.ConfigSettingContractComputeV0DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingContractComputeV0DecodeResponse)))
            {
                model.Add(typeof(Stellar.ConfigSettingContractComputeV0DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingContractLedgerCostV0EncodeRequest)))
            {
                model.Add(typeof(Stellar.ConfigSettingContractLedgerCostV0EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingContractLedgerCostV0EncodeResponse)))
            {
                model.Add(typeof(Stellar.ConfigSettingContractLedgerCostV0EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingContractLedgerCostV0DecodeRequest)))
            {
                model.Add(typeof(Stellar.ConfigSettingContractLedgerCostV0DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingContractLedgerCostV0DecodeResponse)))
            {
                model.Add(typeof(Stellar.ConfigSettingContractLedgerCostV0DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingContractHistoricalDataV0EncodeRequest)))
            {
                model.Add(typeof(Stellar.ConfigSettingContractHistoricalDataV0EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingContractHistoricalDataV0EncodeResponse)))
            {
                model.Add(typeof(Stellar.ConfigSettingContractHistoricalDataV0EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingContractHistoricalDataV0DecodeRequest)))
            {
                model.Add(typeof(Stellar.ConfigSettingContractHistoricalDataV0DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingContractHistoricalDataV0DecodeResponse)))
            {
                model.Add(typeof(Stellar.ConfigSettingContractHistoricalDataV0DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingContractEventsV0EncodeRequest)))
            {
                model.Add(typeof(Stellar.ConfigSettingContractEventsV0EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingContractEventsV0EncodeResponse)))
            {
                model.Add(typeof(Stellar.ConfigSettingContractEventsV0EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingContractEventsV0DecodeRequest)))
            {
                model.Add(typeof(Stellar.ConfigSettingContractEventsV0DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingContractEventsV0DecodeResponse)))
            {
                model.Add(typeof(Stellar.ConfigSettingContractEventsV0DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingContractBandwidthV0EncodeRequest)))
            {
                model.Add(typeof(Stellar.ConfigSettingContractBandwidthV0EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingContractBandwidthV0EncodeResponse)))
            {
                model.Add(typeof(Stellar.ConfigSettingContractBandwidthV0EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingContractBandwidthV0DecodeRequest)))
            {
                model.Add(typeof(Stellar.ConfigSettingContractBandwidthV0DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingContractBandwidthV0DecodeResponse)))
            {
                model.Add(typeof(Stellar.ConfigSettingContractBandwidthV0DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractCostTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.ContractCostTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractCostTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.ContractCostTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractCostTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.ContractCostTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractCostTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.ContractCostTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractCostParamEntryEncodeRequest)))
            {
                model.Add(typeof(Stellar.ContractCostParamEntryEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractCostParamEntryEncodeResponse)))
            {
                model.Add(typeof(Stellar.ContractCostParamEntryEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractCostParamEntryDecodeRequest)))
            {
                model.Add(typeof(Stellar.ContractCostParamEntryDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractCostParamEntryDecodeResponse)))
            {
                model.Add(typeof(Stellar.ContractCostParamEntryDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.StateArchivalSettingsEncodeRequest)))
            {
                model.Add(typeof(Stellar.StateArchivalSettingsEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.StateArchivalSettingsEncodeResponse)))
            {
                model.Add(typeof(Stellar.StateArchivalSettingsEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.StateArchivalSettingsDecodeRequest)))
            {
                model.Add(typeof(Stellar.StateArchivalSettingsDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.StateArchivalSettingsDecodeResponse)))
            {
                model.Add(typeof(Stellar.StateArchivalSettingsDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.EvictionIteratorEncodeRequest)))
            {
                model.Add(typeof(Stellar.EvictionIteratorEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.EvictionIteratorEncodeResponse)))
            {
                model.Add(typeof(Stellar.EvictionIteratorEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.EvictionIteratorDecodeRequest)))
            {
                model.Add(typeof(Stellar.EvictionIteratorDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.EvictionIteratorDecodeResponse)))
            {
                model.Add(typeof(Stellar.EvictionIteratorDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractCostParamsEncodeRequest)))
            {
                model.Add(typeof(Stellar.ContractCostParamsEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractCostParamsEncodeResponse)))
            {
                model.Add(typeof(Stellar.ContractCostParamsEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractCostParamsDecodeRequest)))
            {
                model.Add(typeof(Stellar.ContractCostParamsDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractCostParamsDecodeResponse)))
            {
                model.Add(typeof(Stellar.ContractCostParamsDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingIDEncodeRequest)))
            {
                model.Add(typeof(Stellar.ConfigSettingIDEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingIDEncodeResponse)))
            {
                model.Add(typeof(Stellar.ConfigSettingIDEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingIDDecodeRequest)))
            {
                model.Add(typeof(Stellar.ConfigSettingIDDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingIDDecodeResponse)))
            {
                model.Add(typeof(Stellar.ConfigSettingIDDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingEntryEncodeRequest)))
            {
                model.Add(typeof(Stellar.ConfigSettingEntryEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingEntryEncodeResponse)))
            {
                model.Add(typeof(Stellar.ConfigSettingEntryEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingEntryDecodeRequest)))
            {
                model.Add(typeof(Stellar.ConfigSettingEntryDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigSettingEntryDecodeResponse)))
            {
                model.Add(typeof(Stellar.ConfigSettingEntryDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCEnvMetaKindEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCEnvMetaKindEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCEnvMetaKindEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCEnvMetaKindEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCEnvMetaKindDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCEnvMetaKindDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCEnvMetaKindDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCEnvMetaKindDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCEnvMetaEntryEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCEnvMetaEntryEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCEnvMetaEntryEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCEnvMetaEntryEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCEnvMetaEntryDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCEnvMetaEntryDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCEnvMetaEntryDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCEnvMetaEntryDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCMetaV0EncodeRequest)))
            {
                model.Add(typeof(Stellar.SCMetaV0EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCMetaV0EncodeResponse)))
            {
                model.Add(typeof(Stellar.SCMetaV0EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCMetaV0DecodeRequest)))
            {
                model.Add(typeof(Stellar.SCMetaV0DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCMetaV0DecodeResponse)))
            {
                model.Add(typeof(Stellar.SCMetaV0DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCMetaKindEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCMetaKindEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCMetaKindEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCMetaKindEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCMetaKindDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCMetaKindDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCMetaKindDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCMetaKindDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCMetaEntryEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCMetaEntryEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCMetaEntryEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCMetaEntryEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCMetaEntryDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCMetaEntryDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCMetaEntryDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCMetaEntryDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeOptionEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecTypeOptionEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeOptionEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecTypeOptionEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeOptionDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecTypeOptionDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeOptionDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecTypeOptionDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecTypeResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecTypeResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecTypeResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecTypeResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeVecEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecTypeVecEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeVecEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecTypeVecEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeVecDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecTypeVecDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeVecDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecTypeVecDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeMapEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecTypeMapEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeMapEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecTypeMapEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeMapDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecTypeMapDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeMapDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecTypeMapDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeTupleEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecTypeTupleEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeTupleEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecTypeTupleEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeTupleDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecTypeTupleDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeTupleDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecTypeTupleDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeBytesNEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecTypeBytesNEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeBytesNEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecTypeBytesNEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeBytesNDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecTypeBytesNDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeBytesNDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecTypeBytesNDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeUDTEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecTypeUDTEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeUDTEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecTypeUDTEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeUDTDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecTypeUDTDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeUDTDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecTypeUDTDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeDefEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecTypeDefEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeDefEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecTypeDefEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeDefDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecTypeDefDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecTypeDefDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecTypeDefDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTStructFieldV0EncodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecUDTStructFieldV0EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTStructFieldV0EncodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecUDTStructFieldV0EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTStructFieldV0DecodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecUDTStructFieldV0DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTStructFieldV0DecodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecUDTStructFieldV0DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTStructV0EncodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecUDTStructV0EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTStructV0EncodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecUDTStructV0EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTStructV0DecodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecUDTStructV0DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTStructV0DecodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecUDTStructV0DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTUnionCaseVoidV0EncodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecUDTUnionCaseVoidV0EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTUnionCaseVoidV0EncodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecUDTUnionCaseVoidV0EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTUnionCaseVoidV0DecodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecUDTUnionCaseVoidV0DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTUnionCaseVoidV0DecodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecUDTUnionCaseVoidV0DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTUnionCaseTupleV0EncodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecUDTUnionCaseTupleV0EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTUnionCaseTupleV0EncodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecUDTUnionCaseTupleV0EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTUnionCaseTupleV0DecodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecUDTUnionCaseTupleV0DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTUnionCaseTupleV0DecodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecUDTUnionCaseTupleV0DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTUnionCaseV0KindEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecUDTUnionCaseV0KindEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTUnionCaseV0KindEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecUDTUnionCaseV0KindEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTUnionCaseV0KindDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecUDTUnionCaseV0KindDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTUnionCaseV0KindDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecUDTUnionCaseV0KindDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTUnionCaseV0EncodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecUDTUnionCaseV0EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTUnionCaseV0EncodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecUDTUnionCaseV0EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTUnionCaseV0DecodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecUDTUnionCaseV0DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTUnionCaseV0DecodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecUDTUnionCaseV0DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTUnionV0EncodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecUDTUnionV0EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTUnionV0EncodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecUDTUnionV0EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTUnionV0DecodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecUDTUnionV0DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTUnionV0DecodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecUDTUnionV0DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTEnumCaseV0EncodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecUDTEnumCaseV0EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTEnumCaseV0EncodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecUDTEnumCaseV0EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTEnumCaseV0DecodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecUDTEnumCaseV0DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTEnumCaseV0DecodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecUDTEnumCaseV0DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTEnumV0EncodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecUDTEnumV0EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTEnumV0EncodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecUDTEnumV0EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTEnumV0DecodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecUDTEnumV0DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTEnumV0DecodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecUDTEnumV0DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTErrorEnumCaseV0EncodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecUDTErrorEnumCaseV0EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTErrorEnumCaseV0EncodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecUDTErrorEnumCaseV0EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTErrorEnumCaseV0DecodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecUDTErrorEnumCaseV0DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTErrorEnumCaseV0DecodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecUDTErrorEnumCaseV0DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTErrorEnumV0EncodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecUDTErrorEnumV0EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTErrorEnumV0EncodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecUDTErrorEnumV0EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTErrorEnumV0DecodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecUDTErrorEnumV0DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecUDTErrorEnumV0DecodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecUDTErrorEnumV0DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecFunctionInputV0EncodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecFunctionInputV0EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecFunctionInputV0EncodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecFunctionInputV0EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecFunctionInputV0DecodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecFunctionInputV0DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecFunctionInputV0DecodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecFunctionInputV0DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecFunctionV0EncodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecFunctionV0EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecFunctionV0EncodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecFunctionV0EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecFunctionV0DecodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecFunctionV0DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecFunctionV0DecodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecFunctionV0DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecEntryKindEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecEntryKindEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecEntryKindEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecEntryKindEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecEntryKindDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecEntryKindDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecEntryKindDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecEntryKindDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecEntryEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecEntryEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecEntryEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecEntryEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecEntryDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCSpecEntryDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSpecEntryDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCSpecEntryDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCValTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCValTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCValTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCValTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCValTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCValTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCValTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCValTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCErrorTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCErrorTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCErrorTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCErrorTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCErrorTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCErrorTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCErrorTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCErrorTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCErrorCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCErrorCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCErrorCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCErrorCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCErrorCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCErrorCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCErrorCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCErrorCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCErrorEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCErrorEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCErrorEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCErrorEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCErrorDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCErrorDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCErrorDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCErrorDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.UInt128PartsEncodeRequest)))
            {
                model.Add(typeof(Stellar.UInt128PartsEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.UInt128PartsEncodeResponse)))
            {
                model.Add(typeof(Stellar.UInt128PartsEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.UInt128PartsDecodeRequest)))
            {
                model.Add(typeof(Stellar.UInt128PartsDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.UInt128PartsDecodeResponse)))
            {
                model.Add(typeof(Stellar.UInt128PartsDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.Int128PartsEncodeRequest)))
            {
                model.Add(typeof(Stellar.Int128PartsEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.Int128PartsEncodeResponse)))
            {
                model.Add(typeof(Stellar.Int128PartsEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.Int128PartsDecodeRequest)))
            {
                model.Add(typeof(Stellar.Int128PartsDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.Int128PartsDecodeResponse)))
            {
                model.Add(typeof(Stellar.Int128PartsDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.UInt256PartsEncodeRequest)))
            {
                model.Add(typeof(Stellar.UInt256PartsEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.UInt256PartsEncodeResponse)))
            {
                model.Add(typeof(Stellar.UInt256PartsEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.UInt256PartsDecodeRequest)))
            {
                model.Add(typeof(Stellar.UInt256PartsDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.UInt256PartsDecodeResponse)))
            {
                model.Add(typeof(Stellar.UInt256PartsDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.Int256PartsEncodeRequest)))
            {
                model.Add(typeof(Stellar.Int256PartsEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.Int256PartsEncodeResponse)))
            {
                model.Add(typeof(Stellar.Int256PartsEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.Int256PartsDecodeRequest)))
            {
                model.Add(typeof(Stellar.Int256PartsDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.Int256PartsDecodeResponse)))
            {
                model.Add(typeof(Stellar.Int256PartsDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractExecutableTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.ContractExecutableTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractExecutableTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.ContractExecutableTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractExecutableTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.ContractExecutableTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractExecutableTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.ContractExecutableTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractExecutableEncodeRequest)))
            {
                model.Add(typeof(Stellar.ContractExecutableEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractExecutableEncodeResponse)))
            {
                model.Add(typeof(Stellar.ContractExecutableEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractExecutableDecodeRequest)))
            {
                model.Add(typeof(Stellar.ContractExecutableDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractExecutableDecodeResponse)))
            {
                model.Add(typeof(Stellar.ContractExecutableDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCAddressTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCAddressTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCAddressTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCAddressTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCAddressTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCAddressTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCAddressTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCAddressTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCAddressEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCAddressEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCAddressEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCAddressEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCAddressDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCAddressDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCAddressDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCAddressDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCVecEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCVecEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCVecEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCVecEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCVecDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCVecDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCVecDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCVecDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCMapEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCMapEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCMapEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCMapEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCMapDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCMapDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCMapDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCMapDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCBytesEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCBytesEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCBytesEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCBytesEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCBytesDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCBytesDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCBytesDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCBytesDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCStringEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCStringEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCStringEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCStringEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCStringDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCStringDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCStringDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCStringDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSymbolEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCSymbolEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSymbolEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCSymbolEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSymbolDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCSymbolDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCSymbolDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCSymbolDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCNonceKeyEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCNonceKeyEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCNonceKeyEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCNonceKeyEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCNonceKeyDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCNonceKeyDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCNonceKeyDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCNonceKeyDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCContractInstanceEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCContractInstanceEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCContractInstanceEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCContractInstanceEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCContractInstanceDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCContractInstanceDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCContractInstanceDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCContractInstanceDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCValEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCValEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCValEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCValEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCValDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCValDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCValDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCValDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCMapEntryEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCMapEntryEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCMapEntryEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCMapEntryEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCMapEntryDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCMapEntryDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCMapEntryDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCMapEntryDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.StoredTransactionSetEncodeRequest)))
            {
                model.Add(typeof(Stellar.StoredTransactionSetEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.StoredTransactionSetEncodeResponse)))
            {
                model.Add(typeof(Stellar.StoredTransactionSetEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.StoredTransactionSetDecodeRequest)))
            {
                model.Add(typeof(Stellar.StoredTransactionSetDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.StoredTransactionSetDecodeResponse)))
            {
                model.Add(typeof(Stellar.StoredTransactionSetDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.StoredDebugTransactionSetEncodeRequest)))
            {
                model.Add(typeof(Stellar.StoredDebugTransactionSetEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.StoredDebugTransactionSetEncodeResponse)))
            {
                model.Add(typeof(Stellar.StoredDebugTransactionSetEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.StoredDebugTransactionSetDecodeRequest)))
            {
                model.Add(typeof(Stellar.StoredDebugTransactionSetDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.StoredDebugTransactionSetDecodeResponse)))
            {
                model.Add(typeof(Stellar.StoredDebugTransactionSetDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PersistedSCPStateV0EncodeRequest)))
            {
                model.Add(typeof(Stellar.PersistedSCPStateV0EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PersistedSCPStateV0EncodeResponse)))
            {
                model.Add(typeof(Stellar.PersistedSCPStateV0EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PersistedSCPStateV0DecodeRequest)))
            {
                model.Add(typeof(Stellar.PersistedSCPStateV0DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PersistedSCPStateV0DecodeResponse)))
            {
                model.Add(typeof(Stellar.PersistedSCPStateV0DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PersistedSCPStateV1EncodeRequest)))
            {
                model.Add(typeof(Stellar.PersistedSCPStateV1EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PersistedSCPStateV1EncodeResponse)))
            {
                model.Add(typeof(Stellar.PersistedSCPStateV1EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PersistedSCPStateV1DecodeRequest)))
            {
                model.Add(typeof(Stellar.PersistedSCPStateV1DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PersistedSCPStateV1DecodeResponse)))
            {
                model.Add(typeof(Stellar.PersistedSCPStateV1DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PersistedSCPStateEncodeRequest)))
            {
                model.Add(typeof(Stellar.PersistedSCPStateEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PersistedSCPStateEncodeResponse)))
            {
                model.Add(typeof(Stellar.PersistedSCPStateEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PersistedSCPStateDecodeRequest)))
            {
                model.Add(typeof(Stellar.PersistedSCPStateDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PersistedSCPStateDecodeResponse)))
            {
                model.Add(typeof(Stellar.PersistedSCPStateDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ThresholdsEncodeRequest)))
            {
                model.Add(typeof(Stellar.ThresholdsEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ThresholdsEncodeResponse)))
            {
                model.Add(typeof(Stellar.ThresholdsEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ThresholdsDecodeRequest)))
            {
                model.Add(typeof(Stellar.ThresholdsDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ThresholdsDecodeResponse)))
            {
                model.Add(typeof(Stellar.ThresholdsDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.string32EncodeRequest)))
            {
                model.Add(typeof(Stellar.string32EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.string32EncodeResponse)))
            {
                model.Add(typeof(Stellar.string32EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.string32DecodeRequest)))
            {
                model.Add(typeof(Stellar.string32DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.string32DecodeResponse)))
            {
                model.Add(typeof(Stellar.string32DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.string64EncodeRequest)))
            {
                model.Add(typeof(Stellar.string64EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.string64EncodeResponse)))
            {
                model.Add(typeof(Stellar.string64EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.string64DecodeRequest)))
            {
                model.Add(typeof(Stellar.string64DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.string64DecodeResponse)))
            {
                model.Add(typeof(Stellar.string64DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SequenceNumberEncodeRequest)))
            {
                model.Add(typeof(Stellar.SequenceNumberEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SequenceNumberEncodeResponse)))
            {
                model.Add(typeof(Stellar.SequenceNumberEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SequenceNumberDecodeRequest)))
            {
                model.Add(typeof(Stellar.SequenceNumberDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SequenceNumberDecodeResponse)))
            {
                model.Add(typeof(Stellar.SequenceNumberDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.DataValueEncodeRequest)))
            {
                model.Add(typeof(Stellar.DataValueEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.DataValueEncodeResponse)))
            {
                model.Add(typeof(Stellar.DataValueEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.DataValueDecodeRequest)))
            {
                model.Add(typeof(Stellar.DataValueDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.DataValueDecodeResponse)))
            {
                model.Add(typeof(Stellar.DataValueDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PoolIDEncodeRequest)))
            {
                model.Add(typeof(Stellar.PoolIDEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PoolIDEncodeResponse)))
            {
                model.Add(typeof(Stellar.PoolIDEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PoolIDDecodeRequest)))
            {
                model.Add(typeof(Stellar.PoolIDDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PoolIDDecodeResponse)))
            {
                model.Add(typeof(Stellar.PoolIDDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AssetCode4EncodeRequest)))
            {
                model.Add(typeof(Stellar.AssetCode4EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AssetCode4EncodeResponse)))
            {
                model.Add(typeof(Stellar.AssetCode4EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AssetCode4DecodeRequest)))
            {
                model.Add(typeof(Stellar.AssetCode4DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AssetCode4DecodeResponse)))
            {
                model.Add(typeof(Stellar.AssetCode4DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AssetCode12EncodeRequest)))
            {
                model.Add(typeof(Stellar.AssetCode12EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AssetCode12EncodeResponse)))
            {
                model.Add(typeof(Stellar.AssetCode12EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AssetCode12DecodeRequest)))
            {
                model.Add(typeof(Stellar.AssetCode12DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AssetCode12DecodeResponse)))
            {
                model.Add(typeof(Stellar.AssetCode12DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AssetTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.AssetTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AssetTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.AssetTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AssetTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.AssetTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AssetTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.AssetTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AssetCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.AssetCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AssetCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.AssetCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AssetCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.AssetCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AssetCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.AssetCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AlphaNum4EncodeRequest)))
            {
                model.Add(typeof(Stellar.AlphaNum4EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AlphaNum4EncodeResponse)))
            {
                model.Add(typeof(Stellar.AlphaNum4EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AlphaNum4DecodeRequest)))
            {
                model.Add(typeof(Stellar.AlphaNum4DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AlphaNum4DecodeResponse)))
            {
                model.Add(typeof(Stellar.AlphaNum4DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AlphaNum12EncodeRequest)))
            {
                model.Add(typeof(Stellar.AlphaNum12EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AlphaNum12EncodeResponse)))
            {
                model.Add(typeof(Stellar.AlphaNum12EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AlphaNum12DecodeRequest)))
            {
                model.Add(typeof(Stellar.AlphaNum12DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AlphaNum12DecodeResponse)))
            {
                model.Add(typeof(Stellar.AlphaNum12DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AssetEncodeRequest)))
            {
                model.Add(typeof(Stellar.AssetEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AssetEncodeResponse)))
            {
                model.Add(typeof(Stellar.AssetEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AssetDecodeRequest)))
            {
                model.Add(typeof(Stellar.AssetDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AssetDecodeResponse)))
            {
                model.Add(typeof(Stellar.AssetDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PriceEncodeRequest)))
            {
                model.Add(typeof(Stellar.PriceEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PriceEncodeResponse)))
            {
                model.Add(typeof(Stellar.PriceEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PriceDecodeRequest)))
            {
                model.Add(typeof(Stellar.PriceDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PriceDecodeResponse)))
            {
                model.Add(typeof(Stellar.PriceDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiabilitiesEncodeRequest)))
            {
                model.Add(typeof(Stellar.LiabilitiesEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiabilitiesEncodeResponse)))
            {
                model.Add(typeof(Stellar.LiabilitiesEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiabilitiesDecodeRequest)))
            {
                model.Add(typeof(Stellar.LiabilitiesDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiabilitiesDecodeResponse)))
            {
                model.Add(typeof(Stellar.LiabilitiesDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ThresholdIndexesEncodeRequest)))
            {
                model.Add(typeof(Stellar.ThresholdIndexesEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ThresholdIndexesEncodeResponse)))
            {
                model.Add(typeof(Stellar.ThresholdIndexesEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ThresholdIndexesDecodeRequest)))
            {
                model.Add(typeof(Stellar.ThresholdIndexesDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ThresholdIndexesDecodeResponse)))
            {
                model.Add(typeof(Stellar.ThresholdIndexesDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerEntryTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerEntryTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerEntryTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerEntryTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerEntryTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerEntryTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerEntryTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerEntryTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignerEncodeRequest)))
            {
                model.Add(typeof(Stellar.SignerEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignerEncodeResponse)))
            {
                model.Add(typeof(Stellar.SignerEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignerDecodeRequest)))
            {
                model.Add(typeof(Stellar.SignerDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignerDecodeResponse)))
            {
                model.Add(typeof(Stellar.SignerDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountFlagsEncodeRequest)))
            {
                model.Add(typeof(Stellar.AccountFlagsEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountFlagsEncodeResponse)))
            {
                model.Add(typeof(Stellar.AccountFlagsEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountFlagsDecodeRequest)))
            {
                model.Add(typeof(Stellar.AccountFlagsDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountFlagsDecodeResponse)))
            {
                model.Add(typeof(Stellar.AccountFlagsDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SponsorshipDescriptorEncodeRequest)))
            {
                model.Add(typeof(Stellar.SponsorshipDescriptorEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SponsorshipDescriptorEncodeResponse)))
            {
                model.Add(typeof(Stellar.SponsorshipDescriptorEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SponsorshipDescriptorDecodeRequest)))
            {
                model.Add(typeof(Stellar.SponsorshipDescriptorDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SponsorshipDescriptorDecodeResponse)))
            {
                model.Add(typeof(Stellar.SponsorshipDescriptorDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountEntryExtensionV3EncodeRequest)))
            {
                model.Add(typeof(Stellar.AccountEntryExtensionV3EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountEntryExtensionV3EncodeResponse)))
            {
                model.Add(typeof(Stellar.AccountEntryExtensionV3EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountEntryExtensionV3DecodeRequest)))
            {
                model.Add(typeof(Stellar.AccountEntryExtensionV3DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountEntryExtensionV3DecodeResponse)))
            {
                model.Add(typeof(Stellar.AccountEntryExtensionV3DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountEntryExtensionV2EncodeRequest)))
            {
                model.Add(typeof(Stellar.AccountEntryExtensionV2EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountEntryExtensionV2EncodeResponse)))
            {
                model.Add(typeof(Stellar.AccountEntryExtensionV2EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountEntryExtensionV2DecodeRequest)))
            {
                model.Add(typeof(Stellar.AccountEntryExtensionV2DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountEntryExtensionV2DecodeResponse)))
            {
                model.Add(typeof(Stellar.AccountEntryExtensionV2DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountEntryExtensionV1EncodeRequest)))
            {
                model.Add(typeof(Stellar.AccountEntryExtensionV1EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountEntryExtensionV1EncodeResponse)))
            {
                model.Add(typeof(Stellar.AccountEntryExtensionV1EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountEntryExtensionV1DecodeRequest)))
            {
                model.Add(typeof(Stellar.AccountEntryExtensionV1DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountEntryExtensionV1DecodeResponse)))
            {
                model.Add(typeof(Stellar.AccountEntryExtensionV1DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountEntryEncodeRequest)))
            {
                model.Add(typeof(Stellar.AccountEntryEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountEntryEncodeResponse)))
            {
                model.Add(typeof(Stellar.AccountEntryEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountEntryDecodeRequest)))
            {
                model.Add(typeof(Stellar.AccountEntryDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountEntryDecodeResponse)))
            {
                model.Add(typeof(Stellar.AccountEntryDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TrustLineFlagsEncodeRequest)))
            {
                model.Add(typeof(Stellar.TrustLineFlagsEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TrustLineFlagsEncodeResponse)))
            {
                model.Add(typeof(Stellar.TrustLineFlagsEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TrustLineFlagsDecodeRequest)))
            {
                model.Add(typeof(Stellar.TrustLineFlagsDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TrustLineFlagsDecodeResponse)))
            {
                model.Add(typeof(Stellar.TrustLineFlagsDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.LiquidityPoolTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.LiquidityPoolTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.LiquidityPoolTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.LiquidityPoolTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TrustLineAssetEncodeRequest)))
            {
                model.Add(typeof(Stellar.TrustLineAssetEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TrustLineAssetEncodeResponse)))
            {
                model.Add(typeof(Stellar.TrustLineAssetEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TrustLineAssetDecodeRequest)))
            {
                model.Add(typeof(Stellar.TrustLineAssetDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TrustLineAssetDecodeResponse)))
            {
                model.Add(typeof(Stellar.TrustLineAssetDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TrustLineEntryExtensionV2EncodeRequest)))
            {
                model.Add(typeof(Stellar.TrustLineEntryExtensionV2EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TrustLineEntryExtensionV2EncodeResponse)))
            {
                model.Add(typeof(Stellar.TrustLineEntryExtensionV2EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TrustLineEntryExtensionV2DecodeRequest)))
            {
                model.Add(typeof(Stellar.TrustLineEntryExtensionV2DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TrustLineEntryExtensionV2DecodeResponse)))
            {
                model.Add(typeof(Stellar.TrustLineEntryExtensionV2DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TrustLineEntryEncodeRequest)))
            {
                model.Add(typeof(Stellar.TrustLineEntryEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TrustLineEntryEncodeResponse)))
            {
                model.Add(typeof(Stellar.TrustLineEntryEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TrustLineEntryDecodeRequest)))
            {
                model.Add(typeof(Stellar.TrustLineEntryDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TrustLineEntryDecodeResponse)))
            {
                model.Add(typeof(Stellar.TrustLineEntryDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.OfferEntryFlagsEncodeRequest)))
            {
                model.Add(typeof(Stellar.OfferEntryFlagsEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.OfferEntryFlagsEncodeResponse)))
            {
                model.Add(typeof(Stellar.OfferEntryFlagsEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.OfferEntryFlagsDecodeRequest)))
            {
                model.Add(typeof(Stellar.OfferEntryFlagsDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.OfferEntryFlagsDecodeResponse)))
            {
                model.Add(typeof(Stellar.OfferEntryFlagsDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.OfferEntryEncodeRequest)))
            {
                model.Add(typeof(Stellar.OfferEntryEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.OfferEntryEncodeResponse)))
            {
                model.Add(typeof(Stellar.OfferEntryEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.OfferEntryDecodeRequest)))
            {
                model.Add(typeof(Stellar.OfferEntryDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.OfferEntryDecodeResponse)))
            {
                model.Add(typeof(Stellar.OfferEntryDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.DataEntryEncodeRequest)))
            {
                model.Add(typeof(Stellar.DataEntryEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.DataEntryEncodeResponse)))
            {
                model.Add(typeof(Stellar.DataEntryEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.DataEntryDecodeRequest)))
            {
                model.Add(typeof(Stellar.DataEntryDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.DataEntryDecodeResponse)))
            {
                model.Add(typeof(Stellar.DataEntryDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimPredicateTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimPredicateTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimPredicateTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimPredicateTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimPredicateTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimPredicateTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimPredicateTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimPredicateTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimPredicateEncodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimPredicateEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimPredicateEncodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimPredicateEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimPredicateDecodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimPredicateDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimPredicateDecodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimPredicateDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimantTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimantTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimantTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimantTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimantTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimantTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimantTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimantTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimantEncodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimantEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimantEncodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimantEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimantDecodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimantDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimantDecodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimantDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimableBalanceIDTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimableBalanceIDTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimableBalanceIDTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimableBalanceIDTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimableBalanceIDTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimableBalanceIDTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimableBalanceIDTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimableBalanceIDTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimableBalanceIDEncodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimableBalanceIDEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimableBalanceIDEncodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimableBalanceIDEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimableBalanceIDDecodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimableBalanceIDDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimableBalanceIDDecodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimableBalanceIDDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimableBalanceFlagsEncodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimableBalanceFlagsEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimableBalanceFlagsEncodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimableBalanceFlagsEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimableBalanceFlagsDecodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimableBalanceFlagsDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimableBalanceFlagsDecodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimableBalanceFlagsDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimableBalanceEntryExtensionV1EncodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimableBalanceEntryExtensionV1EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimableBalanceEntryExtensionV1EncodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimableBalanceEntryExtensionV1EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimableBalanceEntryExtensionV1DecodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimableBalanceEntryExtensionV1DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimableBalanceEntryExtensionV1DecodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimableBalanceEntryExtensionV1DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimableBalanceEntryEncodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimableBalanceEntryEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimableBalanceEntryEncodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimableBalanceEntryEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimableBalanceEntryDecodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimableBalanceEntryDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimableBalanceEntryDecodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimableBalanceEntryDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolConstantProductParametersEncodeRequest)))
            {
                model.Add(typeof(Stellar.LiquidityPoolConstantProductParametersEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolConstantProductParametersEncodeResponse)))
            {
                model.Add(typeof(Stellar.LiquidityPoolConstantProductParametersEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolConstantProductParametersDecodeRequest)))
            {
                model.Add(typeof(Stellar.LiquidityPoolConstantProductParametersDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolConstantProductParametersDecodeResponse)))
            {
                model.Add(typeof(Stellar.LiquidityPoolConstantProductParametersDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolEntryEncodeRequest)))
            {
                model.Add(typeof(Stellar.LiquidityPoolEntryEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolEntryEncodeResponse)))
            {
                model.Add(typeof(Stellar.LiquidityPoolEntryEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolEntryDecodeRequest)))
            {
                model.Add(typeof(Stellar.LiquidityPoolEntryDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolEntryDecodeResponse)))
            {
                model.Add(typeof(Stellar.LiquidityPoolEntryDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractDataDurabilityEncodeRequest)))
            {
                model.Add(typeof(Stellar.ContractDataDurabilityEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractDataDurabilityEncodeResponse)))
            {
                model.Add(typeof(Stellar.ContractDataDurabilityEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractDataDurabilityDecodeRequest)))
            {
                model.Add(typeof(Stellar.ContractDataDurabilityDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractDataDurabilityDecodeResponse)))
            {
                model.Add(typeof(Stellar.ContractDataDurabilityDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractDataEntryEncodeRequest)))
            {
                model.Add(typeof(Stellar.ContractDataEntryEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractDataEntryEncodeResponse)))
            {
                model.Add(typeof(Stellar.ContractDataEntryEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractDataEntryDecodeRequest)))
            {
                model.Add(typeof(Stellar.ContractDataEntryDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractDataEntryDecodeResponse)))
            {
                model.Add(typeof(Stellar.ContractDataEntryDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractCodeCostInputsEncodeRequest)))
            {
                model.Add(typeof(Stellar.ContractCodeCostInputsEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractCodeCostInputsEncodeResponse)))
            {
                model.Add(typeof(Stellar.ContractCodeCostInputsEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractCodeCostInputsDecodeRequest)))
            {
                model.Add(typeof(Stellar.ContractCodeCostInputsDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractCodeCostInputsDecodeResponse)))
            {
                model.Add(typeof(Stellar.ContractCodeCostInputsDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractCodeEntryEncodeRequest)))
            {
                model.Add(typeof(Stellar.ContractCodeEntryEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractCodeEntryEncodeResponse)))
            {
                model.Add(typeof(Stellar.ContractCodeEntryEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractCodeEntryDecodeRequest)))
            {
                model.Add(typeof(Stellar.ContractCodeEntryDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractCodeEntryDecodeResponse)))
            {
                model.Add(typeof(Stellar.ContractCodeEntryDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TTLEntryEncodeRequest)))
            {
                model.Add(typeof(Stellar.TTLEntryEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TTLEntryEncodeResponse)))
            {
                model.Add(typeof(Stellar.TTLEntryEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TTLEntryDecodeRequest)))
            {
                model.Add(typeof(Stellar.TTLEntryDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TTLEntryDecodeResponse)))
            {
                model.Add(typeof(Stellar.TTLEntryDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerEntryExtensionV1EncodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerEntryExtensionV1EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerEntryExtensionV1EncodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerEntryExtensionV1EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerEntryExtensionV1DecodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerEntryExtensionV1DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerEntryExtensionV1DecodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerEntryExtensionV1DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerEntryEncodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerEntryEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerEntryEncodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerEntryEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerEntryDecodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerEntryDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerEntryDecodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerEntryDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerKeyEncodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerKeyEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerKeyEncodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerKeyEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerKeyDecodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerKeyDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerKeyDecodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerKeyDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.EnvelopeTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.EnvelopeTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.EnvelopeTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.EnvelopeTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.EnvelopeTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.EnvelopeTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.EnvelopeTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.EnvelopeTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.BucketListTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.BucketListTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.BucketListTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.BucketListTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.BucketListTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.BucketListTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.BucketListTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.BucketListTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.BucketEntryTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.BucketEntryTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.BucketEntryTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.BucketEntryTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.BucketEntryTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.BucketEntryTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.BucketEntryTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.BucketEntryTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.HotArchiveBucketEntryTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.HotArchiveBucketEntryTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.HotArchiveBucketEntryTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.HotArchiveBucketEntryTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.HotArchiveBucketEntryTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.HotArchiveBucketEntryTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.HotArchiveBucketEntryTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.HotArchiveBucketEntryTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ColdArchiveBucketEntryTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.ColdArchiveBucketEntryTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ColdArchiveBucketEntryTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.ColdArchiveBucketEntryTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ColdArchiveBucketEntryTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.ColdArchiveBucketEntryTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ColdArchiveBucketEntryTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.ColdArchiveBucketEntryTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.BucketMetadataEncodeRequest)))
            {
                model.Add(typeof(Stellar.BucketMetadataEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.BucketMetadataEncodeResponse)))
            {
                model.Add(typeof(Stellar.BucketMetadataEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.BucketMetadataDecodeRequest)))
            {
                model.Add(typeof(Stellar.BucketMetadataDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.BucketMetadataDecodeResponse)))
            {
                model.Add(typeof(Stellar.BucketMetadataDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.BucketEntryEncodeRequest)))
            {
                model.Add(typeof(Stellar.BucketEntryEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.BucketEntryEncodeResponse)))
            {
                model.Add(typeof(Stellar.BucketEntryEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.BucketEntryDecodeRequest)))
            {
                model.Add(typeof(Stellar.BucketEntryDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.BucketEntryDecodeResponse)))
            {
                model.Add(typeof(Stellar.BucketEntryDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.HotArchiveBucketEntryEncodeRequest)))
            {
                model.Add(typeof(Stellar.HotArchiveBucketEntryEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.HotArchiveBucketEntryEncodeResponse)))
            {
                model.Add(typeof(Stellar.HotArchiveBucketEntryEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.HotArchiveBucketEntryDecodeRequest)))
            {
                model.Add(typeof(Stellar.HotArchiveBucketEntryDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.HotArchiveBucketEntryDecodeResponse)))
            {
                model.Add(typeof(Stellar.HotArchiveBucketEntryDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ColdArchiveArchivedLeafEncodeRequest)))
            {
                model.Add(typeof(Stellar.ColdArchiveArchivedLeafEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ColdArchiveArchivedLeafEncodeResponse)))
            {
                model.Add(typeof(Stellar.ColdArchiveArchivedLeafEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ColdArchiveArchivedLeafDecodeRequest)))
            {
                model.Add(typeof(Stellar.ColdArchiveArchivedLeafDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ColdArchiveArchivedLeafDecodeResponse)))
            {
                model.Add(typeof(Stellar.ColdArchiveArchivedLeafDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ColdArchiveDeletedLeafEncodeRequest)))
            {
                model.Add(typeof(Stellar.ColdArchiveDeletedLeafEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ColdArchiveDeletedLeafEncodeResponse)))
            {
                model.Add(typeof(Stellar.ColdArchiveDeletedLeafEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ColdArchiveDeletedLeafDecodeRequest)))
            {
                model.Add(typeof(Stellar.ColdArchiveDeletedLeafDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ColdArchiveDeletedLeafDecodeResponse)))
            {
                model.Add(typeof(Stellar.ColdArchiveDeletedLeafDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ColdArchiveBoundaryLeafEncodeRequest)))
            {
                model.Add(typeof(Stellar.ColdArchiveBoundaryLeafEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ColdArchiveBoundaryLeafEncodeResponse)))
            {
                model.Add(typeof(Stellar.ColdArchiveBoundaryLeafEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ColdArchiveBoundaryLeafDecodeRequest)))
            {
                model.Add(typeof(Stellar.ColdArchiveBoundaryLeafDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ColdArchiveBoundaryLeafDecodeResponse)))
            {
                model.Add(typeof(Stellar.ColdArchiveBoundaryLeafDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ColdArchiveHashEntryEncodeRequest)))
            {
                model.Add(typeof(Stellar.ColdArchiveHashEntryEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ColdArchiveHashEntryEncodeResponse)))
            {
                model.Add(typeof(Stellar.ColdArchiveHashEntryEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ColdArchiveHashEntryDecodeRequest)))
            {
                model.Add(typeof(Stellar.ColdArchiveHashEntryDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ColdArchiveHashEntryDecodeResponse)))
            {
                model.Add(typeof(Stellar.ColdArchiveHashEntryDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ColdArchiveBucketEntryEncodeRequest)))
            {
                model.Add(typeof(Stellar.ColdArchiveBucketEntryEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ColdArchiveBucketEntryEncodeResponse)))
            {
                model.Add(typeof(Stellar.ColdArchiveBucketEntryEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ColdArchiveBucketEntryDecodeRequest)))
            {
                model.Add(typeof(Stellar.ColdArchiveBucketEntryDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ColdArchiveBucketEntryDecodeResponse)))
            {
                model.Add(typeof(Stellar.ColdArchiveBucketEntryDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.UpgradeTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.UpgradeTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.UpgradeTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.UpgradeTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.UpgradeTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.UpgradeTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.UpgradeTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.UpgradeTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.StellarValueTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.StellarValueTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.StellarValueTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.StellarValueTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.StellarValueTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.StellarValueTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.StellarValueTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.StellarValueTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerCloseValueSignatureEncodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerCloseValueSignatureEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerCloseValueSignatureEncodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerCloseValueSignatureEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerCloseValueSignatureDecodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerCloseValueSignatureDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerCloseValueSignatureDecodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerCloseValueSignatureDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.StellarValueEncodeRequest)))
            {
                model.Add(typeof(Stellar.StellarValueEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.StellarValueEncodeResponse)))
            {
                model.Add(typeof(Stellar.StellarValueEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.StellarValueDecodeRequest)))
            {
                model.Add(typeof(Stellar.StellarValueDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.StellarValueDecodeResponse)))
            {
                model.Add(typeof(Stellar.StellarValueDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerHeaderFlagsEncodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerHeaderFlagsEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerHeaderFlagsEncodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerHeaderFlagsEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerHeaderFlagsDecodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerHeaderFlagsDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerHeaderFlagsDecodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerHeaderFlagsDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerHeaderExtensionV1EncodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerHeaderExtensionV1EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerHeaderExtensionV1EncodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerHeaderExtensionV1EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerHeaderExtensionV1DecodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerHeaderExtensionV1DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerHeaderExtensionV1DecodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerHeaderExtensionV1DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerHeaderEncodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerHeaderEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerHeaderEncodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerHeaderEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerHeaderDecodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerHeaderDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerHeaderDecodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerHeaderDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerUpgradeTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerUpgradeTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerUpgradeTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerUpgradeTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerUpgradeTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerUpgradeTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerUpgradeTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerUpgradeTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigUpgradeSetKeyEncodeRequest)))
            {
                model.Add(typeof(Stellar.ConfigUpgradeSetKeyEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigUpgradeSetKeyEncodeResponse)))
            {
                model.Add(typeof(Stellar.ConfigUpgradeSetKeyEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigUpgradeSetKeyDecodeRequest)))
            {
                model.Add(typeof(Stellar.ConfigUpgradeSetKeyDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigUpgradeSetKeyDecodeResponse)))
            {
                model.Add(typeof(Stellar.ConfigUpgradeSetKeyDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerUpgradeEncodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerUpgradeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerUpgradeEncodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerUpgradeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerUpgradeDecodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerUpgradeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerUpgradeDecodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerUpgradeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigUpgradeSetEncodeRequest)))
            {
                model.Add(typeof(Stellar.ConfigUpgradeSetEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigUpgradeSetEncodeResponse)))
            {
                model.Add(typeof(Stellar.ConfigUpgradeSetEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigUpgradeSetDecodeRequest)))
            {
                model.Add(typeof(Stellar.ConfigUpgradeSetDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ConfigUpgradeSetDecodeResponse)))
            {
                model.Add(typeof(Stellar.ConfigUpgradeSetDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TxSetComponentTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.TxSetComponentTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TxSetComponentTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.TxSetComponentTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TxSetComponentTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.TxSetComponentTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TxSetComponentTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.TxSetComponentTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TxSetComponentEncodeRequest)))
            {
                model.Add(typeof(Stellar.TxSetComponentEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TxSetComponentEncodeResponse)))
            {
                model.Add(typeof(Stellar.TxSetComponentEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TxSetComponentDecodeRequest)))
            {
                model.Add(typeof(Stellar.TxSetComponentDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TxSetComponentDecodeResponse)))
            {
                model.Add(typeof(Stellar.TxSetComponentDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionPhaseEncodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionPhaseEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionPhaseEncodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionPhaseEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionPhaseDecodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionPhaseDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionPhaseDecodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionPhaseDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionSetEncodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionSetEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionSetEncodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionSetEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionSetDecodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionSetDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionSetDecodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionSetDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionSetV1EncodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionSetV1EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionSetV1EncodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionSetV1EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionSetV1DecodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionSetV1DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionSetV1DecodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionSetV1DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.GeneralizedTransactionSetEncodeRequest)))
            {
                model.Add(typeof(Stellar.GeneralizedTransactionSetEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.GeneralizedTransactionSetEncodeResponse)))
            {
                model.Add(typeof(Stellar.GeneralizedTransactionSetEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.GeneralizedTransactionSetDecodeRequest)))
            {
                model.Add(typeof(Stellar.GeneralizedTransactionSetDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.GeneralizedTransactionSetDecodeResponse)))
            {
                model.Add(typeof(Stellar.GeneralizedTransactionSetDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionResultPairEncodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionResultPairEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionResultPairEncodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionResultPairEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionResultPairDecodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionResultPairDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionResultPairDecodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionResultPairDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionResultSetEncodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionResultSetEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionResultSetEncodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionResultSetEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionResultSetDecodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionResultSetDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionResultSetDecodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionResultSetDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionHistoryEntryEncodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionHistoryEntryEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionHistoryEntryEncodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionHistoryEntryEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionHistoryEntryDecodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionHistoryEntryDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionHistoryEntryDecodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionHistoryEntryDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionHistoryResultEntryEncodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionHistoryResultEntryEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionHistoryResultEntryEncodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionHistoryResultEntryEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionHistoryResultEntryDecodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionHistoryResultEntryDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionHistoryResultEntryDecodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionHistoryResultEntryDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerHeaderHistoryEntryEncodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerHeaderHistoryEntryEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerHeaderHistoryEntryEncodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerHeaderHistoryEntryEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerHeaderHistoryEntryDecodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerHeaderHistoryEntryDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerHeaderHistoryEntryDecodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerHeaderHistoryEntryDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerSCPMessagesEncodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerSCPMessagesEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerSCPMessagesEncodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerSCPMessagesEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerSCPMessagesDecodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerSCPMessagesDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerSCPMessagesDecodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerSCPMessagesDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPHistoryEntryV0EncodeRequest)))
            {
                model.Add(typeof(Stellar.SCPHistoryEntryV0EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPHistoryEntryV0EncodeResponse)))
            {
                model.Add(typeof(Stellar.SCPHistoryEntryV0EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPHistoryEntryV0DecodeRequest)))
            {
                model.Add(typeof(Stellar.SCPHistoryEntryV0DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPHistoryEntryV0DecodeResponse)))
            {
                model.Add(typeof(Stellar.SCPHistoryEntryV0DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPHistoryEntryEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCPHistoryEntryEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPHistoryEntryEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCPHistoryEntryEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPHistoryEntryDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCPHistoryEntryDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPHistoryEntryDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCPHistoryEntryDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerEntryChangeTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerEntryChangeTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerEntryChangeTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerEntryChangeTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerEntryChangeTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerEntryChangeTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerEntryChangeTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerEntryChangeTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerEntryChangeEncodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerEntryChangeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerEntryChangeEncodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerEntryChangeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerEntryChangeDecodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerEntryChangeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerEntryChangeDecodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerEntryChangeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerEntryChangesEncodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerEntryChangesEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerEntryChangesEncodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerEntryChangesEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerEntryChangesDecodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerEntryChangesDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerEntryChangesDecodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerEntryChangesDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.OperationMetaEncodeRequest)))
            {
                model.Add(typeof(Stellar.OperationMetaEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.OperationMetaEncodeResponse)))
            {
                model.Add(typeof(Stellar.OperationMetaEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.OperationMetaDecodeRequest)))
            {
                model.Add(typeof(Stellar.OperationMetaDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.OperationMetaDecodeResponse)))
            {
                model.Add(typeof(Stellar.OperationMetaDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionMetaV1EncodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionMetaV1EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionMetaV1EncodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionMetaV1EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionMetaV1DecodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionMetaV1DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionMetaV1DecodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionMetaV1DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionMetaV2EncodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionMetaV2EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionMetaV2EncodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionMetaV2EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionMetaV2DecodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionMetaV2DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionMetaV2DecodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionMetaV2DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractEventTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.ContractEventTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractEventTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.ContractEventTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractEventTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.ContractEventTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractEventTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.ContractEventTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractEventEncodeRequest)))
            {
                model.Add(typeof(Stellar.ContractEventEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractEventEncodeResponse)))
            {
                model.Add(typeof(Stellar.ContractEventEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractEventDecodeRequest)))
            {
                model.Add(typeof(Stellar.ContractEventDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractEventDecodeResponse)))
            {
                model.Add(typeof(Stellar.ContractEventDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.DiagnosticEventEncodeRequest)))
            {
                model.Add(typeof(Stellar.DiagnosticEventEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.DiagnosticEventEncodeResponse)))
            {
                model.Add(typeof(Stellar.DiagnosticEventEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.DiagnosticEventDecodeRequest)))
            {
                model.Add(typeof(Stellar.DiagnosticEventDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.DiagnosticEventDecodeResponse)))
            {
                model.Add(typeof(Stellar.DiagnosticEventDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.DiagnosticEventsEncodeRequest)))
            {
                model.Add(typeof(Stellar.DiagnosticEventsEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.DiagnosticEventsEncodeResponse)))
            {
                model.Add(typeof(Stellar.DiagnosticEventsEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.DiagnosticEventsDecodeRequest)))
            {
                model.Add(typeof(Stellar.DiagnosticEventsDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.DiagnosticEventsDecodeResponse)))
            {
                model.Add(typeof(Stellar.DiagnosticEventsDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanTransactionMetaExtV1EncodeRequest)))
            {
                model.Add(typeof(Stellar.SorobanTransactionMetaExtV1EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanTransactionMetaExtV1EncodeResponse)))
            {
                model.Add(typeof(Stellar.SorobanTransactionMetaExtV1EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanTransactionMetaExtV1DecodeRequest)))
            {
                model.Add(typeof(Stellar.SorobanTransactionMetaExtV1DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanTransactionMetaExtV1DecodeResponse)))
            {
                model.Add(typeof(Stellar.SorobanTransactionMetaExtV1DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanTransactionMetaExtEncodeRequest)))
            {
                model.Add(typeof(Stellar.SorobanTransactionMetaExtEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanTransactionMetaExtEncodeResponse)))
            {
                model.Add(typeof(Stellar.SorobanTransactionMetaExtEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanTransactionMetaExtDecodeRequest)))
            {
                model.Add(typeof(Stellar.SorobanTransactionMetaExtDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanTransactionMetaExtDecodeResponse)))
            {
                model.Add(typeof(Stellar.SorobanTransactionMetaExtDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanTransactionMetaEncodeRequest)))
            {
                model.Add(typeof(Stellar.SorobanTransactionMetaEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanTransactionMetaEncodeResponse)))
            {
                model.Add(typeof(Stellar.SorobanTransactionMetaEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanTransactionMetaDecodeRequest)))
            {
                model.Add(typeof(Stellar.SorobanTransactionMetaDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanTransactionMetaDecodeResponse)))
            {
                model.Add(typeof(Stellar.SorobanTransactionMetaDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionMetaV3EncodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionMetaV3EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionMetaV3EncodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionMetaV3EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionMetaV3DecodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionMetaV3DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionMetaV3DecodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionMetaV3DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.InvokeHostFunctionSuccessPreImageEncodeRequest)))
            {
                model.Add(typeof(Stellar.InvokeHostFunctionSuccessPreImageEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.InvokeHostFunctionSuccessPreImageEncodeResponse)))
            {
                model.Add(typeof(Stellar.InvokeHostFunctionSuccessPreImageEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.InvokeHostFunctionSuccessPreImageDecodeRequest)))
            {
                model.Add(typeof(Stellar.InvokeHostFunctionSuccessPreImageDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.InvokeHostFunctionSuccessPreImageDecodeResponse)))
            {
                model.Add(typeof(Stellar.InvokeHostFunctionSuccessPreImageDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionMetaEncodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionMetaEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionMetaEncodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionMetaEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionMetaDecodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionMetaDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionMetaDecodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionMetaDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionResultMetaEncodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionResultMetaEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionResultMetaEncodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionResultMetaEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionResultMetaDecodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionResultMetaDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionResultMetaDecodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionResultMetaDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.UpgradeEntryMetaEncodeRequest)))
            {
                model.Add(typeof(Stellar.UpgradeEntryMetaEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.UpgradeEntryMetaEncodeResponse)))
            {
                model.Add(typeof(Stellar.UpgradeEntryMetaEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.UpgradeEntryMetaDecodeRequest)))
            {
                model.Add(typeof(Stellar.UpgradeEntryMetaDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.UpgradeEntryMetaDecodeResponse)))
            {
                model.Add(typeof(Stellar.UpgradeEntryMetaDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerCloseMetaV0EncodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerCloseMetaV0EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerCloseMetaV0EncodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerCloseMetaV0EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerCloseMetaV0DecodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerCloseMetaV0DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerCloseMetaV0DecodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerCloseMetaV0DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerCloseMetaExtV1EncodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerCloseMetaExtV1EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerCloseMetaExtV1EncodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerCloseMetaExtV1EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerCloseMetaExtV1DecodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerCloseMetaExtV1DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerCloseMetaExtV1DecodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerCloseMetaExtV1DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerCloseMetaExtEncodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerCloseMetaExtEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerCloseMetaExtEncodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerCloseMetaExtEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerCloseMetaExtDecodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerCloseMetaExtDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerCloseMetaExtDecodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerCloseMetaExtDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerCloseMetaV1EncodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerCloseMetaV1EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerCloseMetaV1EncodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerCloseMetaV1EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerCloseMetaV1DecodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerCloseMetaV1DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerCloseMetaV1DecodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerCloseMetaV1DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerCloseMetaEncodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerCloseMetaEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerCloseMetaEncodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerCloseMetaEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerCloseMetaDecodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerCloseMetaDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerCloseMetaDecodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerCloseMetaDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ErrorCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.ErrorCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ErrorCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.ErrorCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ErrorCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.ErrorCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ErrorCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.ErrorCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ErrorEncodeRequest)))
            {
                model.Add(typeof(Stellar.ErrorEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ErrorEncodeResponse)))
            {
                model.Add(typeof(Stellar.ErrorEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ErrorDecodeRequest)))
            {
                model.Add(typeof(Stellar.ErrorDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ErrorDecodeResponse)))
            {
                model.Add(typeof(Stellar.ErrorDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SendMoreEncodeRequest)))
            {
                model.Add(typeof(Stellar.SendMoreEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SendMoreEncodeResponse)))
            {
                model.Add(typeof(Stellar.SendMoreEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SendMoreDecodeRequest)))
            {
                model.Add(typeof(Stellar.SendMoreDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SendMoreDecodeResponse)))
            {
                model.Add(typeof(Stellar.SendMoreDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SendMoreExtendedEncodeRequest)))
            {
                model.Add(typeof(Stellar.SendMoreExtendedEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SendMoreExtendedEncodeResponse)))
            {
                model.Add(typeof(Stellar.SendMoreExtendedEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SendMoreExtendedDecodeRequest)))
            {
                model.Add(typeof(Stellar.SendMoreExtendedDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SendMoreExtendedDecodeResponse)))
            {
                model.Add(typeof(Stellar.SendMoreExtendedDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AuthCertEncodeRequest)))
            {
                model.Add(typeof(Stellar.AuthCertEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AuthCertEncodeResponse)))
            {
                model.Add(typeof(Stellar.AuthCertEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AuthCertDecodeRequest)))
            {
                model.Add(typeof(Stellar.AuthCertDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AuthCertDecodeResponse)))
            {
                model.Add(typeof(Stellar.AuthCertDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.HelloEncodeRequest)))
            {
                model.Add(typeof(Stellar.HelloEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.HelloEncodeResponse)))
            {
                model.Add(typeof(Stellar.HelloEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.HelloDecodeRequest)))
            {
                model.Add(typeof(Stellar.HelloDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.HelloDecodeResponse)))
            {
                model.Add(typeof(Stellar.HelloDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AuthEncodeRequest)))
            {
                model.Add(typeof(Stellar.AuthEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AuthEncodeResponse)))
            {
                model.Add(typeof(Stellar.AuthEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AuthDecodeRequest)))
            {
                model.Add(typeof(Stellar.AuthDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AuthDecodeResponse)))
            {
                model.Add(typeof(Stellar.AuthDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.IPAddrTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.IPAddrTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.IPAddrTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.IPAddrTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.IPAddrTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.IPAddrTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.IPAddrTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.IPAddrTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PeerAddressEncodeRequest)))
            {
                model.Add(typeof(Stellar.PeerAddressEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PeerAddressEncodeResponse)))
            {
                model.Add(typeof(Stellar.PeerAddressEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PeerAddressDecodeRequest)))
            {
                model.Add(typeof(Stellar.PeerAddressDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PeerAddressDecodeResponse)))
            {
                model.Add(typeof(Stellar.PeerAddressDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.MessageTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.MessageTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.MessageTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.MessageTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.MessageTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.MessageTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.MessageTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.MessageTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.DontHaveEncodeRequest)))
            {
                model.Add(typeof(Stellar.DontHaveEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.DontHaveEncodeResponse)))
            {
                model.Add(typeof(Stellar.DontHaveEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.DontHaveDecodeRequest)))
            {
                model.Add(typeof(Stellar.DontHaveDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.DontHaveDecodeResponse)))
            {
                model.Add(typeof(Stellar.DontHaveDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SurveyMessageCommandTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.SurveyMessageCommandTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SurveyMessageCommandTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.SurveyMessageCommandTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SurveyMessageCommandTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.SurveyMessageCommandTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SurveyMessageCommandTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.SurveyMessageCommandTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SurveyMessageResponseTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.SurveyMessageResponseTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SurveyMessageResponseTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.SurveyMessageResponseTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SurveyMessageResponseTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.SurveyMessageResponseTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SurveyMessageResponseTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.SurveyMessageResponseTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedSurveyStartCollectingMessageEncodeRequest)))
            {
                model.Add(typeof(Stellar.TimeSlicedSurveyStartCollectingMessageEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedSurveyStartCollectingMessageEncodeResponse)))
            {
                model.Add(typeof(Stellar.TimeSlicedSurveyStartCollectingMessageEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedSurveyStartCollectingMessageDecodeRequest)))
            {
                model.Add(typeof(Stellar.TimeSlicedSurveyStartCollectingMessageDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedSurveyStartCollectingMessageDecodeResponse)))
            {
                model.Add(typeof(Stellar.TimeSlicedSurveyStartCollectingMessageDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeRequest)))
            {
                model.Add(typeof(Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeResponse)))
            {
                model.Add(typeof(Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeRequest)))
            {
                model.Add(typeof(Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeResponse)))
            {
                model.Add(typeof(Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedSurveyStopCollectingMessageEncodeRequest)))
            {
                model.Add(typeof(Stellar.TimeSlicedSurveyStopCollectingMessageEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedSurveyStopCollectingMessageEncodeResponse)))
            {
                model.Add(typeof(Stellar.TimeSlicedSurveyStopCollectingMessageEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedSurveyStopCollectingMessageDecodeRequest)))
            {
                model.Add(typeof(Stellar.TimeSlicedSurveyStopCollectingMessageDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedSurveyStopCollectingMessageDecodeResponse)))
            {
                model.Add(typeof(Stellar.TimeSlicedSurveyStopCollectingMessageDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeRequest)))
            {
                model.Add(typeof(Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeResponse)))
            {
                model.Add(typeof(Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeRequest)))
            {
                model.Add(typeof(Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeResponse)))
            {
                model.Add(typeof(Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SurveyRequestMessageEncodeRequest)))
            {
                model.Add(typeof(Stellar.SurveyRequestMessageEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SurveyRequestMessageEncodeResponse)))
            {
                model.Add(typeof(Stellar.SurveyRequestMessageEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SurveyRequestMessageDecodeRequest)))
            {
                model.Add(typeof(Stellar.SurveyRequestMessageDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SurveyRequestMessageDecodeResponse)))
            {
                model.Add(typeof(Stellar.SurveyRequestMessageDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedSurveyRequestMessageEncodeRequest)))
            {
                model.Add(typeof(Stellar.TimeSlicedSurveyRequestMessageEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedSurveyRequestMessageEncodeResponse)))
            {
                model.Add(typeof(Stellar.TimeSlicedSurveyRequestMessageEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedSurveyRequestMessageDecodeRequest)))
            {
                model.Add(typeof(Stellar.TimeSlicedSurveyRequestMessageDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedSurveyRequestMessageDecodeResponse)))
            {
                model.Add(typeof(Stellar.TimeSlicedSurveyRequestMessageDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignedSurveyRequestMessageEncodeRequest)))
            {
                model.Add(typeof(Stellar.SignedSurveyRequestMessageEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignedSurveyRequestMessageEncodeResponse)))
            {
                model.Add(typeof(Stellar.SignedSurveyRequestMessageEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignedSurveyRequestMessageDecodeRequest)))
            {
                model.Add(typeof(Stellar.SignedSurveyRequestMessageDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignedSurveyRequestMessageDecodeResponse)))
            {
                model.Add(typeof(Stellar.SignedSurveyRequestMessageDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignedTimeSlicedSurveyRequestMessageEncodeRequest)))
            {
                model.Add(typeof(Stellar.SignedTimeSlicedSurveyRequestMessageEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignedTimeSlicedSurveyRequestMessageEncodeResponse)))
            {
                model.Add(typeof(Stellar.SignedTimeSlicedSurveyRequestMessageEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignedTimeSlicedSurveyRequestMessageDecodeRequest)))
            {
                model.Add(typeof(Stellar.SignedTimeSlicedSurveyRequestMessageDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignedTimeSlicedSurveyRequestMessageDecodeResponse)))
            {
                model.Add(typeof(Stellar.SignedTimeSlicedSurveyRequestMessageDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.EncryptedBodyEncodeRequest)))
            {
                model.Add(typeof(Stellar.EncryptedBodyEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.EncryptedBodyEncodeResponse)))
            {
                model.Add(typeof(Stellar.EncryptedBodyEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.EncryptedBodyDecodeRequest)))
            {
                model.Add(typeof(Stellar.EncryptedBodyDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.EncryptedBodyDecodeResponse)))
            {
                model.Add(typeof(Stellar.EncryptedBodyDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SurveyResponseMessageEncodeRequest)))
            {
                model.Add(typeof(Stellar.SurveyResponseMessageEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SurveyResponseMessageEncodeResponse)))
            {
                model.Add(typeof(Stellar.SurveyResponseMessageEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SurveyResponseMessageDecodeRequest)))
            {
                model.Add(typeof(Stellar.SurveyResponseMessageDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SurveyResponseMessageDecodeResponse)))
            {
                model.Add(typeof(Stellar.SurveyResponseMessageDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedSurveyResponseMessageEncodeRequest)))
            {
                model.Add(typeof(Stellar.TimeSlicedSurveyResponseMessageEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedSurveyResponseMessageEncodeResponse)))
            {
                model.Add(typeof(Stellar.TimeSlicedSurveyResponseMessageEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedSurveyResponseMessageDecodeRequest)))
            {
                model.Add(typeof(Stellar.TimeSlicedSurveyResponseMessageDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedSurveyResponseMessageDecodeResponse)))
            {
                model.Add(typeof(Stellar.TimeSlicedSurveyResponseMessageDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignedSurveyResponseMessageEncodeRequest)))
            {
                model.Add(typeof(Stellar.SignedSurveyResponseMessageEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignedSurveyResponseMessageEncodeResponse)))
            {
                model.Add(typeof(Stellar.SignedSurveyResponseMessageEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignedSurveyResponseMessageDecodeRequest)))
            {
                model.Add(typeof(Stellar.SignedSurveyResponseMessageDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignedSurveyResponseMessageDecodeResponse)))
            {
                model.Add(typeof(Stellar.SignedSurveyResponseMessageDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignedTimeSlicedSurveyResponseMessageEncodeRequest)))
            {
                model.Add(typeof(Stellar.SignedTimeSlicedSurveyResponseMessageEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignedTimeSlicedSurveyResponseMessageEncodeResponse)))
            {
                model.Add(typeof(Stellar.SignedTimeSlicedSurveyResponseMessageEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignedTimeSlicedSurveyResponseMessageDecodeRequest)))
            {
                model.Add(typeof(Stellar.SignedTimeSlicedSurveyResponseMessageDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignedTimeSlicedSurveyResponseMessageDecodeResponse)))
            {
                model.Add(typeof(Stellar.SignedTimeSlicedSurveyResponseMessageDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PeerStatsEncodeRequest)))
            {
                model.Add(typeof(Stellar.PeerStatsEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PeerStatsEncodeResponse)))
            {
                model.Add(typeof(Stellar.PeerStatsEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PeerStatsDecodeRequest)))
            {
                model.Add(typeof(Stellar.PeerStatsDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PeerStatsDecodeResponse)))
            {
                model.Add(typeof(Stellar.PeerStatsDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PeerStatListEncodeRequest)))
            {
                model.Add(typeof(Stellar.PeerStatListEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PeerStatListEncodeResponse)))
            {
                model.Add(typeof(Stellar.PeerStatListEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PeerStatListDecodeRequest)))
            {
                model.Add(typeof(Stellar.PeerStatListDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PeerStatListDecodeResponse)))
            {
                model.Add(typeof(Stellar.PeerStatListDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedNodeDataEncodeRequest)))
            {
                model.Add(typeof(Stellar.TimeSlicedNodeDataEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedNodeDataEncodeResponse)))
            {
                model.Add(typeof(Stellar.TimeSlicedNodeDataEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedNodeDataDecodeRequest)))
            {
                model.Add(typeof(Stellar.TimeSlicedNodeDataDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedNodeDataDecodeResponse)))
            {
                model.Add(typeof(Stellar.TimeSlicedNodeDataDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedPeerDataEncodeRequest)))
            {
                model.Add(typeof(Stellar.TimeSlicedPeerDataEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedPeerDataEncodeResponse)))
            {
                model.Add(typeof(Stellar.TimeSlicedPeerDataEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedPeerDataDecodeRequest)))
            {
                model.Add(typeof(Stellar.TimeSlicedPeerDataDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedPeerDataDecodeResponse)))
            {
                model.Add(typeof(Stellar.TimeSlicedPeerDataDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedPeerDataListEncodeRequest)))
            {
                model.Add(typeof(Stellar.TimeSlicedPeerDataListEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedPeerDataListEncodeResponse)))
            {
                model.Add(typeof(Stellar.TimeSlicedPeerDataListEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedPeerDataListDecodeRequest)))
            {
                model.Add(typeof(Stellar.TimeSlicedPeerDataListDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeSlicedPeerDataListDecodeResponse)))
            {
                model.Add(typeof(Stellar.TimeSlicedPeerDataListDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TopologyResponseBodyV0EncodeRequest)))
            {
                model.Add(typeof(Stellar.TopologyResponseBodyV0EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TopologyResponseBodyV0EncodeResponse)))
            {
                model.Add(typeof(Stellar.TopologyResponseBodyV0EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TopologyResponseBodyV0DecodeRequest)))
            {
                model.Add(typeof(Stellar.TopologyResponseBodyV0DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TopologyResponseBodyV0DecodeResponse)))
            {
                model.Add(typeof(Stellar.TopologyResponseBodyV0DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TopologyResponseBodyV1EncodeRequest)))
            {
                model.Add(typeof(Stellar.TopologyResponseBodyV1EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TopologyResponseBodyV1EncodeResponse)))
            {
                model.Add(typeof(Stellar.TopologyResponseBodyV1EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TopologyResponseBodyV1DecodeRequest)))
            {
                model.Add(typeof(Stellar.TopologyResponseBodyV1DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TopologyResponseBodyV1DecodeResponse)))
            {
                model.Add(typeof(Stellar.TopologyResponseBodyV1DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TopologyResponseBodyV2EncodeRequest)))
            {
                model.Add(typeof(Stellar.TopologyResponseBodyV2EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TopologyResponseBodyV2EncodeResponse)))
            {
                model.Add(typeof(Stellar.TopologyResponseBodyV2EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TopologyResponseBodyV2DecodeRequest)))
            {
                model.Add(typeof(Stellar.TopologyResponseBodyV2DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TopologyResponseBodyV2DecodeResponse)))
            {
                model.Add(typeof(Stellar.TopologyResponseBodyV2DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SurveyResponseBodyEncodeRequest)))
            {
                model.Add(typeof(Stellar.SurveyResponseBodyEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SurveyResponseBodyEncodeResponse)))
            {
                model.Add(typeof(Stellar.SurveyResponseBodyEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SurveyResponseBodyDecodeRequest)))
            {
                model.Add(typeof(Stellar.SurveyResponseBodyDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SurveyResponseBodyDecodeResponse)))
            {
                model.Add(typeof(Stellar.SurveyResponseBodyDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TxAdvertVectorEncodeRequest)))
            {
                model.Add(typeof(Stellar.TxAdvertVectorEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TxAdvertVectorEncodeResponse)))
            {
                model.Add(typeof(Stellar.TxAdvertVectorEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TxAdvertVectorDecodeRequest)))
            {
                model.Add(typeof(Stellar.TxAdvertVectorDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TxAdvertVectorDecodeResponse)))
            {
                model.Add(typeof(Stellar.TxAdvertVectorDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.FloodAdvertEncodeRequest)))
            {
                model.Add(typeof(Stellar.FloodAdvertEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.FloodAdvertEncodeResponse)))
            {
                model.Add(typeof(Stellar.FloodAdvertEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.FloodAdvertDecodeRequest)))
            {
                model.Add(typeof(Stellar.FloodAdvertDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.FloodAdvertDecodeResponse)))
            {
                model.Add(typeof(Stellar.FloodAdvertDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TxDemandVectorEncodeRequest)))
            {
                model.Add(typeof(Stellar.TxDemandVectorEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TxDemandVectorEncodeResponse)))
            {
                model.Add(typeof(Stellar.TxDemandVectorEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TxDemandVectorDecodeRequest)))
            {
                model.Add(typeof(Stellar.TxDemandVectorDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TxDemandVectorDecodeResponse)))
            {
                model.Add(typeof(Stellar.TxDemandVectorDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.FloodDemandEncodeRequest)))
            {
                model.Add(typeof(Stellar.FloodDemandEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.FloodDemandEncodeResponse)))
            {
                model.Add(typeof(Stellar.FloodDemandEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.FloodDemandDecodeRequest)))
            {
                model.Add(typeof(Stellar.FloodDemandDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.FloodDemandDecodeResponse)))
            {
                model.Add(typeof(Stellar.FloodDemandDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.StellarMessageEncodeRequest)))
            {
                model.Add(typeof(Stellar.StellarMessageEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.StellarMessageEncodeResponse)))
            {
                model.Add(typeof(Stellar.StellarMessageEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.StellarMessageDecodeRequest)))
            {
                model.Add(typeof(Stellar.StellarMessageDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.StellarMessageDecodeResponse)))
            {
                model.Add(typeof(Stellar.StellarMessageDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AuthenticatedMessageEncodeRequest)))
            {
                model.Add(typeof(Stellar.AuthenticatedMessageEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AuthenticatedMessageEncodeResponse)))
            {
                model.Add(typeof(Stellar.AuthenticatedMessageEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AuthenticatedMessageDecodeRequest)))
            {
                model.Add(typeof(Stellar.AuthenticatedMessageDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AuthenticatedMessageDecodeResponse)))
            {
                model.Add(typeof(Stellar.AuthenticatedMessageDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ValueEncodeRequest)))
            {
                model.Add(typeof(Stellar.ValueEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ValueEncodeResponse)))
            {
                model.Add(typeof(Stellar.ValueEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ValueDecodeRequest)))
            {
                model.Add(typeof(Stellar.ValueDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ValueDecodeResponse)))
            {
                model.Add(typeof(Stellar.ValueDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPBallotEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCPBallotEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPBallotEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCPBallotEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPBallotDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCPBallotDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPBallotDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCPBallotDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPStatementTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCPStatementTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPStatementTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCPStatementTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPStatementTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCPStatementTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPStatementTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCPStatementTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPNominationEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCPNominationEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPNominationEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCPNominationEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPNominationDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCPNominationDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPNominationDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCPNominationDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPStatementEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCPStatementEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPStatementEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCPStatementEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPStatementDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCPStatementDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPStatementDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCPStatementDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPEnvelopeEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCPEnvelopeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPEnvelopeEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCPEnvelopeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPEnvelopeDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCPEnvelopeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPEnvelopeDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCPEnvelopeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPQuorumSetEncodeRequest)))
            {
                model.Add(typeof(Stellar.SCPQuorumSetEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPQuorumSetEncodeResponse)))
            {
                model.Add(typeof(Stellar.SCPQuorumSetEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPQuorumSetDecodeRequest)))
            {
                model.Add(typeof(Stellar.SCPQuorumSetDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SCPQuorumSetDecodeResponse)))
            {
                model.Add(typeof(Stellar.SCPQuorumSetDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolParametersEncodeRequest)))
            {
                model.Add(typeof(Stellar.LiquidityPoolParametersEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolParametersEncodeResponse)))
            {
                model.Add(typeof(Stellar.LiquidityPoolParametersEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolParametersDecodeRequest)))
            {
                model.Add(typeof(Stellar.LiquidityPoolParametersDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolParametersDecodeResponse)))
            {
                model.Add(typeof(Stellar.LiquidityPoolParametersDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.MuxedAccountEncodeRequest)))
            {
                model.Add(typeof(Stellar.MuxedAccountEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.MuxedAccountEncodeResponse)))
            {
                model.Add(typeof(Stellar.MuxedAccountEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.MuxedAccountDecodeRequest)))
            {
                model.Add(typeof(Stellar.MuxedAccountDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.MuxedAccountDecodeResponse)))
            {
                model.Add(typeof(Stellar.MuxedAccountDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.DecoratedSignatureEncodeRequest)))
            {
                model.Add(typeof(Stellar.DecoratedSignatureEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.DecoratedSignatureEncodeResponse)))
            {
                model.Add(typeof(Stellar.DecoratedSignatureEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.DecoratedSignatureDecodeRequest)))
            {
                model.Add(typeof(Stellar.DecoratedSignatureDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.DecoratedSignatureDecodeResponse)))
            {
                model.Add(typeof(Stellar.DecoratedSignatureDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.OperationTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.OperationTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.OperationTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.OperationTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.OperationTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.OperationTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.OperationTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.OperationTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateAccountOpEncodeRequest)))
            {
                model.Add(typeof(Stellar.CreateAccountOpEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateAccountOpEncodeResponse)))
            {
                model.Add(typeof(Stellar.CreateAccountOpEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateAccountOpDecodeRequest)))
            {
                model.Add(typeof(Stellar.CreateAccountOpDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateAccountOpDecodeResponse)))
            {
                model.Add(typeof(Stellar.CreateAccountOpDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PaymentOpEncodeRequest)))
            {
                model.Add(typeof(Stellar.PaymentOpEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PaymentOpEncodeResponse)))
            {
                model.Add(typeof(Stellar.PaymentOpEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PaymentOpDecodeRequest)))
            {
                model.Add(typeof(Stellar.PaymentOpDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PaymentOpDecodeResponse)))
            {
                model.Add(typeof(Stellar.PaymentOpDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PathPaymentStrictReceiveOpEncodeRequest)))
            {
                model.Add(typeof(Stellar.PathPaymentStrictReceiveOpEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PathPaymentStrictReceiveOpEncodeResponse)))
            {
                model.Add(typeof(Stellar.PathPaymentStrictReceiveOpEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PathPaymentStrictReceiveOpDecodeRequest)))
            {
                model.Add(typeof(Stellar.PathPaymentStrictReceiveOpDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PathPaymentStrictReceiveOpDecodeResponse)))
            {
                model.Add(typeof(Stellar.PathPaymentStrictReceiveOpDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PathPaymentStrictSendOpEncodeRequest)))
            {
                model.Add(typeof(Stellar.PathPaymentStrictSendOpEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PathPaymentStrictSendOpEncodeResponse)))
            {
                model.Add(typeof(Stellar.PathPaymentStrictSendOpEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PathPaymentStrictSendOpDecodeRequest)))
            {
                model.Add(typeof(Stellar.PathPaymentStrictSendOpDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PathPaymentStrictSendOpDecodeResponse)))
            {
                model.Add(typeof(Stellar.PathPaymentStrictSendOpDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageSellOfferOpEncodeRequest)))
            {
                model.Add(typeof(Stellar.ManageSellOfferOpEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageSellOfferOpEncodeResponse)))
            {
                model.Add(typeof(Stellar.ManageSellOfferOpEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageSellOfferOpDecodeRequest)))
            {
                model.Add(typeof(Stellar.ManageSellOfferOpDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageSellOfferOpDecodeResponse)))
            {
                model.Add(typeof(Stellar.ManageSellOfferOpDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageBuyOfferOpEncodeRequest)))
            {
                model.Add(typeof(Stellar.ManageBuyOfferOpEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageBuyOfferOpEncodeResponse)))
            {
                model.Add(typeof(Stellar.ManageBuyOfferOpEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageBuyOfferOpDecodeRequest)))
            {
                model.Add(typeof(Stellar.ManageBuyOfferOpDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageBuyOfferOpDecodeResponse)))
            {
                model.Add(typeof(Stellar.ManageBuyOfferOpDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreatePassiveSellOfferOpEncodeRequest)))
            {
                model.Add(typeof(Stellar.CreatePassiveSellOfferOpEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreatePassiveSellOfferOpEncodeResponse)))
            {
                model.Add(typeof(Stellar.CreatePassiveSellOfferOpEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreatePassiveSellOfferOpDecodeRequest)))
            {
                model.Add(typeof(Stellar.CreatePassiveSellOfferOpDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreatePassiveSellOfferOpDecodeResponse)))
            {
                model.Add(typeof(Stellar.CreatePassiveSellOfferOpDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SetOptionsOpEncodeRequest)))
            {
                model.Add(typeof(Stellar.SetOptionsOpEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SetOptionsOpEncodeResponse)))
            {
                model.Add(typeof(Stellar.SetOptionsOpEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SetOptionsOpDecodeRequest)))
            {
                model.Add(typeof(Stellar.SetOptionsOpDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SetOptionsOpDecodeResponse)))
            {
                model.Add(typeof(Stellar.SetOptionsOpDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ChangeTrustAssetEncodeRequest)))
            {
                model.Add(typeof(Stellar.ChangeTrustAssetEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ChangeTrustAssetEncodeResponse)))
            {
                model.Add(typeof(Stellar.ChangeTrustAssetEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ChangeTrustAssetDecodeRequest)))
            {
                model.Add(typeof(Stellar.ChangeTrustAssetDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ChangeTrustAssetDecodeResponse)))
            {
                model.Add(typeof(Stellar.ChangeTrustAssetDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ChangeTrustOpEncodeRequest)))
            {
                model.Add(typeof(Stellar.ChangeTrustOpEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ChangeTrustOpEncodeResponse)))
            {
                model.Add(typeof(Stellar.ChangeTrustOpEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ChangeTrustOpDecodeRequest)))
            {
                model.Add(typeof(Stellar.ChangeTrustOpDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ChangeTrustOpDecodeResponse)))
            {
                model.Add(typeof(Stellar.ChangeTrustOpDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AllowTrustOpEncodeRequest)))
            {
                model.Add(typeof(Stellar.AllowTrustOpEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AllowTrustOpEncodeResponse)))
            {
                model.Add(typeof(Stellar.AllowTrustOpEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AllowTrustOpDecodeRequest)))
            {
                model.Add(typeof(Stellar.AllowTrustOpDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AllowTrustOpDecodeResponse)))
            {
                model.Add(typeof(Stellar.AllowTrustOpDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageDataOpEncodeRequest)))
            {
                model.Add(typeof(Stellar.ManageDataOpEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageDataOpEncodeResponse)))
            {
                model.Add(typeof(Stellar.ManageDataOpEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageDataOpDecodeRequest)))
            {
                model.Add(typeof(Stellar.ManageDataOpDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageDataOpDecodeResponse)))
            {
                model.Add(typeof(Stellar.ManageDataOpDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.BumpSequenceOpEncodeRequest)))
            {
                model.Add(typeof(Stellar.BumpSequenceOpEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.BumpSequenceOpEncodeResponse)))
            {
                model.Add(typeof(Stellar.BumpSequenceOpEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.BumpSequenceOpDecodeRequest)))
            {
                model.Add(typeof(Stellar.BumpSequenceOpDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.BumpSequenceOpDecodeResponse)))
            {
                model.Add(typeof(Stellar.BumpSequenceOpDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateClaimableBalanceOpEncodeRequest)))
            {
                model.Add(typeof(Stellar.CreateClaimableBalanceOpEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateClaimableBalanceOpEncodeResponse)))
            {
                model.Add(typeof(Stellar.CreateClaimableBalanceOpEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateClaimableBalanceOpDecodeRequest)))
            {
                model.Add(typeof(Stellar.CreateClaimableBalanceOpDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateClaimableBalanceOpDecodeResponse)))
            {
                model.Add(typeof(Stellar.CreateClaimableBalanceOpDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimClaimableBalanceOpEncodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimClaimableBalanceOpEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimClaimableBalanceOpEncodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimClaimableBalanceOpEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimClaimableBalanceOpDecodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimClaimableBalanceOpDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimClaimableBalanceOpDecodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimClaimableBalanceOpDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.BeginSponsoringFutureReservesOpEncodeRequest)))
            {
                model.Add(typeof(Stellar.BeginSponsoringFutureReservesOpEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.BeginSponsoringFutureReservesOpEncodeResponse)))
            {
                model.Add(typeof(Stellar.BeginSponsoringFutureReservesOpEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.BeginSponsoringFutureReservesOpDecodeRequest)))
            {
                model.Add(typeof(Stellar.BeginSponsoringFutureReservesOpDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.BeginSponsoringFutureReservesOpDecodeResponse)))
            {
                model.Add(typeof(Stellar.BeginSponsoringFutureReservesOpDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.RevokeSponsorshipTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.RevokeSponsorshipTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.RevokeSponsorshipTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.RevokeSponsorshipTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.RevokeSponsorshipTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.RevokeSponsorshipTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.RevokeSponsorshipTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.RevokeSponsorshipTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.RevokeSponsorshipOpEncodeRequest)))
            {
                model.Add(typeof(Stellar.RevokeSponsorshipOpEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.RevokeSponsorshipOpEncodeResponse)))
            {
                model.Add(typeof(Stellar.RevokeSponsorshipOpEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.RevokeSponsorshipOpDecodeRequest)))
            {
                model.Add(typeof(Stellar.RevokeSponsorshipOpDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.RevokeSponsorshipOpDecodeResponse)))
            {
                model.Add(typeof(Stellar.RevokeSponsorshipOpDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClawbackOpEncodeRequest)))
            {
                model.Add(typeof(Stellar.ClawbackOpEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClawbackOpEncodeResponse)))
            {
                model.Add(typeof(Stellar.ClawbackOpEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClawbackOpDecodeRequest)))
            {
                model.Add(typeof(Stellar.ClawbackOpDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClawbackOpDecodeResponse)))
            {
                model.Add(typeof(Stellar.ClawbackOpDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClawbackClaimableBalanceOpEncodeRequest)))
            {
                model.Add(typeof(Stellar.ClawbackClaimableBalanceOpEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClawbackClaimableBalanceOpEncodeResponse)))
            {
                model.Add(typeof(Stellar.ClawbackClaimableBalanceOpEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClawbackClaimableBalanceOpDecodeRequest)))
            {
                model.Add(typeof(Stellar.ClawbackClaimableBalanceOpDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClawbackClaimableBalanceOpDecodeResponse)))
            {
                model.Add(typeof(Stellar.ClawbackClaimableBalanceOpDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SetTrustLineFlagsOpEncodeRequest)))
            {
                model.Add(typeof(Stellar.SetTrustLineFlagsOpEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SetTrustLineFlagsOpEncodeResponse)))
            {
                model.Add(typeof(Stellar.SetTrustLineFlagsOpEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SetTrustLineFlagsOpDecodeRequest)))
            {
                model.Add(typeof(Stellar.SetTrustLineFlagsOpDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SetTrustLineFlagsOpDecodeResponse)))
            {
                model.Add(typeof(Stellar.SetTrustLineFlagsOpDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolDepositOpEncodeRequest)))
            {
                model.Add(typeof(Stellar.LiquidityPoolDepositOpEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolDepositOpEncodeResponse)))
            {
                model.Add(typeof(Stellar.LiquidityPoolDepositOpEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolDepositOpDecodeRequest)))
            {
                model.Add(typeof(Stellar.LiquidityPoolDepositOpDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolDepositOpDecodeResponse)))
            {
                model.Add(typeof(Stellar.LiquidityPoolDepositOpDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolWithdrawOpEncodeRequest)))
            {
                model.Add(typeof(Stellar.LiquidityPoolWithdrawOpEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolWithdrawOpEncodeResponse)))
            {
                model.Add(typeof(Stellar.LiquidityPoolWithdrawOpEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolWithdrawOpDecodeRequest)))
            {
                model.Add(typeof(Stellar.LiquidityPoolWithdrawOpDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolWithdrawOpDecodeResponse)))
            {
                model.Add(typeof(Stellar.LiquidityPoolWithdrawOpDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.HostFunctionTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.HostFunctionTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.HostFunctionTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.HostFunctionTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.HostFunctionTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.HostFunctionTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.HostFunctionTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.HostFunctionTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractIDPreimageTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.ContractIDPreimageTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractIDPreimageTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.ContractIDPreimageTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractIDPreimageTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.ContractIDPreimageTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractIDPreimageTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.ContractIDPreimageTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractIDPreimageEncodeRequest)))
            {
                model.Add(typeof(Stellar.ContractIDPreimageEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractIDPreimageEncodeResponse)))
            {
                model.Add(typeof(Stellar.ContractIDPreimageEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractIDPreimageDecodeRequest)))
            {
                model.Add(typeof(Stellar.ContractIDPreimageDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ContractIDPreimageDecodeResponse)))
            {
                model.Add(typeof(Stellar.ContractIDPreimageDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateContractArgsEncodeRequest)))
            {
                model.Add(typeof(Stellar.CreateContractArgsEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateContractArgsEncodeResponse)))
            {
                model.Add(typeof(Stellar.CreateContractArgsEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateContractArgsDecodeRequest)))
            {
                model.Add(typeof(Stellar.CreateContractArgsDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateContractArgsDecodeResponse)))
            {
                model.Add(typeof(Stellar.CreateContractArgsDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateContractArgsV2EncodeRequest)))
            {
                model.Add(typeof(Stellar.CreateContractArgsV2EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateContractArgsV2EncodeResponse)))
            {
                model.Add(typeof(Stellar.CreateContractArgsV2EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateContractArgsV2DecodeRequest)))
            {
                model.Add(typeof(Stellar.CreateContractArgsV2DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateContractArgsV2DecodeResponse)))
            {
                model.Add(typeof(Stellar.CreateContractArgsV2DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.InvokeContractArgsEncodeRequest)))
            {
                model.Add(typeof(Stellar.InvokeContractArgsEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.InvokeContractArgsEncodeResponse)))
            {
                model.Add(typeof(Stellar.InvokeContractArgsEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.InvokeContractArgsDecodeRequest)))
            {
                model.Add(typeof(Stellar.InvokeContractArgsDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.InvokeContractArgsDecodeResponse)))
            {
                model.Add(typeof(Stellar.InvokeContractArgsDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.HostFunctionEncodeRequest)))
            {
                model.Add(typeof(Stellar.HostFunctionEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.HostFunctionEncodeResponse)))
            {
                model.Add(typeof(Stellar.HostFunctionEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.HostFunctionDecodeRequest)))
            {
                model.Add(typeof(Stellar.HostFunctionDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.HostFunctionDecodeResponse)))
            {
                model.Add(typeof(Stellar.HostFunctionDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanAuthorizedFunctionTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.SorobanAuthorizedFunctionTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanAuthorizedFunctionTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.SorobanAuthorizedFunctionTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanAuthorizedFunctionTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.SorobanAuthorizedFunctionTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanAuthorizedFunctionTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.SorobanAuthorizedFunctionTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanAuthorizedFunctionEncodeRequest)))
            {
                model.Add(typeof(Stellar.SorobanAuthorizedFunctionEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanAuthorizedFunctionEncodeResponse)))
            {
                model.Add(typeof(Stellar.SorobanAuthorizedFunctionEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanAuthorizedFunctionDecodeRequest)))
            {
                model.Add(typeof(Stellar.SorobanAuthorizedFunctionDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanAuthorizedFunctionDecodeResponse)))
            {
                model.Add(typeof(Stellar.SorobanAuthorizedFunctionDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanAuthorizedInvocationEncodeRequest)))
            {
                model.Add(typeof(Stellar.SorobanAuthorizedInvocationEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanAuthorizedInvocationEncodeResponse)))
            {
                model.Add(typeof(Stellar.SorobanAuthorizedInvocationEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanAuthorizedInvocationDecodeRequest)))
            {
                model.Add(typeof(Stellar.SorobanAuthorizedInvocationDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanAuthorizedInvocationDecodeResponse)))
            {
                model.Add(typeof(Stellar.SorobanAuthorizedInvocationDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanAddressCredentialsEncodeRequest)))
            {
                model.Add(typeof(Stellar.SorobanAddressCredentialsEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanAddressCredentialsEncodeResponse)))
            {
                model.Add(typeof(Stellar.SorobanAddressCredentialsEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanAddressCredentialsDecodeRequest)))
            {
                model.Add(typeof(Stellar.SorobanAddressCredentialsDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanAddressCredentialsDecodeResponse)))
            {
                model.Add(typeof(Stellar.SorobanAddressCredentialsDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanCredentialsTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.SorobanCredentialsTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanCredentialsTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.SorobanCredentialsTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanCredentialsTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.SorobanCredentialsTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanCredentialsTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.SorobanCredentialsTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanCredentialsEncodeRequest)))
            {
                model.Add(typeof(Stellar.SorobanCredentialsEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanCredentialsEncodeResponse)))
            {
                model.Add(typeof(Stellar.SorobanCredentialsEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanCredentialsDecodeRequest)))
            {
                model.Add(typeof(Stellar.SorobanCredentialsDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanCredentialsDecodeResponse)))
            {
                model.Add(typeof(Stellar.SorobanCredentialsDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanAuthorizationEntryEncodeRequest)))
            {
                model.Add(typeof(Stellar.SorobanAuthorizationEntryEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanAuthorizationEntryEncodeResponse)))
            {
                model.Add(typeof(Stellar.SorobanAuthorizationEntryEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanAuthorizationEntryDecodeRequest)))
            {
                model.Add(typeof(Stellar.SorobanAuthorizationEntryDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanAuthorizationEntryDecodeResponse)))
            {
                model.Add(typeof(Stellar.SorobanAuthorizationEntryDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.InvokeHostFunctionOpEncodeRequest)))
            {
                model.Add(typeof(Stellar.InvokeHostFunctionOpEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.InvokeHostFunctionOpEncodeResponse)))
            {
                model.Add(typeof(Stellar.InvokeHostFunctionOpEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.InvokeHostFunctionOpDecodeRequest)))
            {
                model.Add(typeof(Stellar.InvokeHostFunctionOpDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.InvokeHostFunctionOpDecodeResponse)))
            {
                model.Add(typeof(Stellar.InvokeHostFunctionOpDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ExtendFootprintTTLOpEncodeRequest)))
            {
                model.Add(typeof(Stellar.ExtendFootprintTTLOpEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ExtendFootprintTTLOpEncodeResponse)))
            {
                model.Add(typeof(Stellar.ExtendFootprintTTLOpEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ExtendFootprintTTLOpDecodeRequest)))
            {
                model.Add(typeof(Stellar.ExtendFootprintTTLOpDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ExtendFootprintTTLOpDecodeResponse)))
            {
                model.Add(typeof(Stellar.ExtendFootprintTTLOpDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.RestoreFootprintOpEncodeRequest)))
            {
                model.Add(typeof(Stellar.RestoreFootprintOpEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.RestoreFootprintOpEncodeResponse)))
            {
                model.Add(typeof(Stellar.RestoreFootprintOpEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.RestoreFootprintOpDecodeRequest)))
            {
                model.Add(typeof(Stellar.RestoreFootprintOpDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.RestoreFootprintOpDecodeResponse)))
            {
                model.Add(typeof(Stellar.RestoreFootprintOpDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.OperationEncodeRequest)))
            {
                model.Add(typeof(Stellar.OperationEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.OperationEncodeResponse)))
            {
                model.Add(typeof(Stellar.OperationEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.OperationDecodeRequest)))
            {
                model.Add(typeof(Stellar.OperationDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.OperationDecodeResponse)))
            {
                model.Add(typeof(Stellar.OperationDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.HashIDPreimageEncodeRequest)))
            {
                model.Add(typeof(Stellar.HashIDPreimageEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.HashIDPreimageEncodeResponse)))
            {
                model.Add(typeof(Stellar.HashIDPreimageEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.HashIDPreimageDecodeRequest)))
            {
                model.Add(typeof(Stellar.HashIDPreimageDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.HashIDPreimageDecodeResponse)))
            {
                model.Add(typeof(Stellar.HashIDPreimageDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.MemoTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.MemoTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.MemoTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.MemoTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.MemoTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.MemoTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.MemoTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.MemoTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.MemoEncodeRequest)))
            {
                model.Add(typeof(Stellar.MemoEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.MemoEncodeResponse)))
            {
                model.Add(typeof(Stellar.MemoEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.MemoDecodeRequest)))
            {
                model.Add(typeof(Stellar.MemoDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.MemoDecodeResponse)))
            {
                model.Add(typeof(Stellar.MemoDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeBoundsEncodeRequest)))
            {
                model.Add(typeof(Stellar.TimeBoundsEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeBoundsEncodeResponse)))
            {
                model.Add(typeof(Stellar.TimeBoundsEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeBoundsDecodeRequest)))
            {
                model.Add(typeof(Stellar.TimeBoundsDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimeBoundsDecodeResponse)))
            {
                model.Add(typeof(Stellar.TimeBoundsDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerBoundsEncodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerBoundsEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerBoundsEncodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerBoundsEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerBoundsDecodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerBoundsDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerBoundsDecodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerBoundsDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PreconditionsV2EncodeRequest)))
            {
                model.Add(typeof(Stellar.PreconditionsV2EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PreconditionsV2EncodeResponse)))
            {
                model.Add(typeof(Stellar.PreconditionsV2EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PreconditionsV2DecodeRequest)))
            {
                model.Add(typeof(Stellar.PreconditionsV2DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PreconditionsV2DecodeResponse)))
            {
                model.Add(typeof(Stellar.PreconditionsV2DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PreconditionTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.PreconditionTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PreconditionTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.PreconditionTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PreconditionTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.PreconditionTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PreconditionTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.PreconditionTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PreconditionsEncodeRequest)))
            {
                model.Add(typeof(Stellar.PreconditionsEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PreconditionsEncodeResponse)))
            {
                model.Add(typeof(Stellar.PreconditionsEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PreconditionsDecodeRequest)))
            {
                model.Add(typeof(Stellar.PreconditionsDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PreconditionsDecodeResponse)))
            {
                model.Add(typeof(Stellar.PreconditionsDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerFootprintEncodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerFootprintEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerFootprintEncodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerFootprintEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerFootprintDecodeRequest)))
            {
                model.Add(typeof(Stellar.LedgerFootprintDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LedgerFootprintDecodeResponse)))
            {
                model.Add(typeof(Stellar.LedgerFootprintDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ArchivalProofTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.ArchivalProofTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ArchivalProofTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.ArchivalProofTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ArchivalProofTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.ArchivalProofTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ArchivalProofTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.ArchivalProofTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ArchivalProofNodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.ArchivalProofNodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ArchivalProofNodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.ArchivalProofNodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ArchivalProofNodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.ArchivalProofNodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ArchivalProofNodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.ArchivalProofNodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ProofLevelEncodeRequest)))
            {
                model.Add(typeof(Stellar.ProofLevelEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ProofLevelEncodeResponse)))
            {
                model.Add(typeof(Stellar.ProofLevelEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ProofLevelDecodeRequest)))
            {
                model.Add(typeof(Stellar.ProofLevelDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ProofLevelDecodeResponse)))
            {
                model.Add(typeof(Stellar.ProofLevelDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.NonexistenceProofBodyEncodeRequest)))
            {
                model.Add(typeof(Stellar.NonexistenceProofBodyEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.NonexistenceProofBodyEncodeResponse)))
            {
                model.Add(typeof(Stellar.NonexistenceProofBodyEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.NonexistenceProofBodyDecodeRequest)))
            {
                model.Add(typeof(Stellar.NonexistenceProofBodyDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.NonexistenceProofBodyDecodeResponse)))
            {
                model.Add(typeof(Stellar.NonexistenceProofBodyDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ExistenceProofBodyEncodeRequest)))
            {
                model.Add(typeof(Stellar.ExistenceProofBodyEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ExistenceProofBodyEncodeResponse)))
            {
                model.Add(typeof(Stellar.ExistenceProofBodyEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ExistenceProofBodyDecodeRequest)))
            {
                model.Add(typeof(Stellar.ExistenceProofBodyDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ExistenceProofBodyDecodeResponse)))
            {
                model.Add(typeof(Stellar.ExistenceProofBodyDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ArchivalProofEncodeRequest)))
            {
                model.Add(typeof(Stellar.ArchivalProofEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ArchivalProofEncodeResponse)))
            {
                model.Add(typeof(Stellar.ArchivalProofEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ArchivalProofDecodeRequest)))
            {
                model.Add(typeof(Stellar.ArchivalProofDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ArchivalProofDecodeResponse)))
            {
                model.Add(typeof(Stellar.ArchivalProofDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanResourcesEncodeRequest)))
            {
                model.Add(typeof(Stellar.SorobanResourcesEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanResourcesEncodeResponse)))
            {
                model.Add(typeof(Stellar.SorobanResourcesEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanResourcesDecodeRequest)))
            {
                model.Add(typeof(Stellar.SorobanResourcesDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanResourcesDecodeResponse)))
            {
                model.Add(typeof(Stellar.SorobanResourcesDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanTransactionDataEncodeRequest)))
            {
                model.Add(typeof(Stellar.SorobanTransactionDataEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanTransactionDataEncodeResponse)))
            {
                model.Add(typeof(Stellar.SorobanTransactionDataEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanTransactionDataDecodeRequest)))
            {
                model.Add(typeof(Stellar.SorobanTransactionDataDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SorobanTransactionDataDecodeResponse)))
            {
                model.Add(typeof(Stellar.SorobanTransactionDataDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionV0EncodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionV0EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionV0EncodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionV0EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionV0DecodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionV0DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionV0DecodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionV0DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionV0EnvelopeEncodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionV0EnvelopeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionV0EnvelopeEncodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionV0EnvelopeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionV0EnvelopeDecodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionV0EnvelopeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionV0EnvelopeDecodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionV0EnvelopeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionEncodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionEncodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionDecodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionDecodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionV1EnvelopeEncodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionV1EnvelopeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionV1EnvelopeEncodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionV1EnvelopeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionV1EnvelopeDecodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionV1EnvelopeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionV1EnvelopeDecodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionV1EnvelopeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.FeeBumpTransactionEncodeRequest)))
            {
                model.Add(typeof(Stellar.FeeBumpTransactionEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.FeeBumpTransactionEncodeResponse)))
            {
                model.Add(typeof(Stellar.FeeBumpTransactionEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.FeeBumpTransactionDecodeRequest)))
            {
                model.Add(typeof(Stellar.FeeBumpTransactionDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.FeeBumpTransactionDecodeResponse)))
            {
                model.Add(typeof(Stellar.FeeBumpTransactionDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.FeeBumpTransactionEnvelopeEncodeRequest)))
            {
                model.Add(typeof(Stellar.FeeBumpTransactionEnvelopeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.FeeBumpTransactionEnvelopeEncodeResponse)))
            {
                model.Add(typeof(Stellar.FeeBumpTransactionEnvelopeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.FeeBumpTransactionEnvelopeDecodeRequest)))
            {
                model.Add(typeof(Stellar.FeeBumpTransactionEnvelopeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.FeeBumpTransactionEnvelopeDecodeResponse)))
            {
                model.Add(typeof(Stellar.FeeBumpTransactionEnvelopeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionEnvelopeEncodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionEnvelopeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionEnvelopeEncodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionEnvelopeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionEnvelopeDecodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionEnvelopeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionEnvelopeDecodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionEnvelopeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionSignaturePayloadEncodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionSignaturePayloadEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionSignaturePayloadEncodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionSignaturePayloadEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionSignaturePayloadDecodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionSignaturePayloadDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionSignaturePayloadDecodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionSignaturePayloadDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimAtomTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimAtomTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimAtomTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimAtomTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimAtomTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimAtomTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimAtomTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimAtomTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimOfferAtomV0EncodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimOfferAtomV0EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimOfferAtomV0EncodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimOfferAtomV0EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimOfferAtomV0DecodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimOfferAtomV0DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimOfferAtomV0DecodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimOfferAtomV0DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimOfferAtomEncodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimOfferAtomEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimOfferAtomEncodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimOfferAtomEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimOfferAtomDecodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimOfferAtomDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimOfferAtomDecodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimOfferAtomDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimLiquidityAtomEncodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimLiquidityAtomEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimLiquidityAtomEncodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimLiquidityAtomEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimLiquidityAtomDecodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimLiquidityAtomDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimLiquidityAtomDecodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimLiquidityAtomDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimAtomEncodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimAtomEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimAtomEncodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimAtomEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimAtomDecodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimAtomDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimAtomDecodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimAtomDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateAccountResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.CreateAccountResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateAccountResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.CreateAccountResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateAccountResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.CreateAccountResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateAccountResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.CreateAccountResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateAccountResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.CreateAccountResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateAccountResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.CreateAccountResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateAccountResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.CreateAccountResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateAccountResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.CreateAccountResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PaymentResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.PaymentResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PaymentResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.PaymentResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PaymentResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.PaymentResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PaymentResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.PaymentResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PaymentResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.PaymentResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PaymentResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.PaymentResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PaymentResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.PaymentResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PaymentResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.PaymentResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PathPaymentStrictReceiveResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.PathPaymentStrictReceiveResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PathPaymentStrictReceiveResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.PathPaymentStrictReceiveResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PathPaymentStrictReceiveResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.PathPaymentStrictReceiveResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PathPaymentStrictReceiveResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.PathPaymentStrictReceiveResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SimplePaymentResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.SimplePaymentResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SimplePaymentResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.SimplePaymentResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SimplePaymentResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.SimplePaymentResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SimplePaymentResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.SimplePaymentResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PathPaymentStrictReceiveResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.PathPaymentStrictReceiveResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PathPaymentStrictReceiveResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.PathPaymentStrictReceiveResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PathPaymentStrictReceiveResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.PathPaymentStrictReceiveResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PathPaymentStrictReceiveResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.PathPaymentStrictReceiveResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PathPaymentStrictSendResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.PathPaymentStrictSendResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PathPaymentStrictSendResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.PathPaymentStrictSendResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PathPaymentStrictSendResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.PathPaymentStrictSendResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PathPaymentStrictSendResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.PathPaymentStrictSendResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PathPaymentStrictSendResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.PathPaymentStrictSendResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PathPaymentStrictSendResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.PathPaymentStrictSendResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PathPaymentStrictSendResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.PathPaymentStrictSendResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PathPaymentStrictSendResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.PathPaymentStrictSendResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageSellOfferResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.ManageSellOfferResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageSellOfferResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.ManageSellOfferResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageSellOfferResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.ManageSellOfferResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageSellOfferResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.ManageSellOfferResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageOfferEffectEncodeRequest)))
            {
                model.Add(typeof(Stellar.ManageOfferEffectEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageOfferEffectEncodeResponse)))
            {
                model.Add(typeof(Stellar.ManageOfferEffectEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageOfferEffectDecodeRequest)))
            {
                model.Add(typeof(Stellar.ManageOfferEffectDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageOfferEffectDecodeResponse)))
            {
                model.Add(typeof(Stellar.ManageOfferEffectDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageOfferSuccessResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.ManageOfferSuccessResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageOfferSuccessResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.ManageOfferSuccessResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageOfferSuccessResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.ManageOfferSuccessResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageOfferSuccessResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.ManageOfferSuccessResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageSellOfferResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.ManageSellOfferResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageSellOfferResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.ManageSellOfferResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageSellOfferResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.ManageSellOfferResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageSellOfferResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.ManageSellOfferResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageBuyOfferResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.ManageBuyOfferResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageBuyOfferResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.ManageBuyOfferResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageBuyOfferResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.ManageBuyOfferResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageBuyOfferResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.ManageBuyOfferResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageBuyOfferResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.ManageBuyOfferResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageBuyOfferResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.ManageBuyOfferResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageBuyOfferResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.ManageBuyOfferResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageBuyOfferResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.ManageBuyOfferResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SetOptionsResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.SetOptionsResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SetOptionsResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.SetOptionsResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SetOptionsResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.SetOptionsResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SetOptionsResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.SetOptionsResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SetOptionsResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.SetOptionsResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SetOptionsResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.SetOptionsResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SetOptionsResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.SetOptionsResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SetOptionsResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.SetOptionsResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ChangeTrustResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.ChangeTrustResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ChangeTrustResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.ChangeTrustResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ChangeTrustResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.ChangeTrustResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ChangeTrustResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.ChangeTrustResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ChangeTrustResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.ChangeTrustResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ChangeTrustResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.ChangeTrustResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ChangeTrustResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.ChangeTrustResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ChangeTrustResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.ChangeTrustResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AllowTrustResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.AllowTrustResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AllowTrustResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.AllowTrustResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AllowTrustResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.AllowTrustResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AllowTrustResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.AllowTrustResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AllowTrustResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.AllowTrustResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AllowTrustResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.AllowTrustResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AllowTrustResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.AllowTrustResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AllowTrustResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.AllowTrustResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountMergeResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.AccountMergeResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountMergeResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.AccountMergeResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountMergeResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.AccountMergeResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountMergeResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.AccountMergeResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountMergeResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.AccountMergeResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountMergeResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.AccountMergeResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountMergeResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.AccountMergeResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountMergeResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.AccountMergeResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.InflationResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.InflationResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.InflationResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.InflationResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.InflationResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.InflationResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.InflationResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.InflationResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.InflationPayoutEncodeRequest)))
            {
                model.Add(typeof(Stellar.InflationPayoutEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.InflationPayoutEncodeResponse)))
            {
                model.Add(typeof(Stellar.InflationPayoutEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.InflationPayoutDecodeRequest)))
            {
                model.Add(typeof(Stellar.InflationPayoutDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.InflationPayoutDecodeResponse)))
            {
                model.Add(typeof(Stellar.InflationPayoutDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.InflationResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.InflationResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.InflationResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.InflationResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.InflationResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.InflationResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.InflationResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.InflationResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageDataResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.ManageDataResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageDataResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.ManageDataResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageDataResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.ManageDataResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageDataResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.ManageDataResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageDataResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.ManageDataResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageDataResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.ManageDataResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageDataResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.ManageDataResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ManageDataResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.ManageDataResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.BumpSequenceResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.BumpSequenceResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.BumpSequenceResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.BumpSequenceResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.BumpSequenceResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.BumpSequenceResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.BumpSequenceResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.BumpSequenceResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.BumpSequenceResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.BumpSequenceResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.BumpSequenceResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.BumpSequenceResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.BumpSequenceResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.BumpSequenceResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.BumpSequenceResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.BumpSequenceResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateClaimableBalanceResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.CreateClaimableBalanceResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateClaimableBalanceResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.CreateClaimableBalanceResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateClaimableBalanceResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.CreateClaimableBalanceResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateClaimableBalanceResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.CreateClaimableBalanceResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateClaimableBalanceResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.CreateClaimableBalanceResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateClaimableBalanceResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.CreateClaimableBalanceResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateClaimableBalanceResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.CreateClaimableBalanceResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.CreateClaimableBalanceResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.CreateClaimableBalanceResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimClaimableBalanceResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimClaimableBalanceResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimClaimableBalanceResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimClaimableBalanceResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimClaimableBalanceResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimClaimableBalanceResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimClaimableBalanceResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimClaimableBalanceResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimClaimableBalanceResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimClaimableBalanceResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimClaimableBalanceResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimClaimableBalanceResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimClaimableBalanceResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.ClaimClaimableBalanceResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClaimClaimableBalanceResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.ClaimClaimableBalanceResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.BeginSponsoringFutureReservesResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.BeginSponsoringFutureReservesResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.BeginSponsoringFutureReservesResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.BeginSponsoringFutureReservesResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.BeginSponsoringFutureReservesResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.BeginSponsoringFutureReservesResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.BeginSponsoringFutureReservesResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.BeginSponsoringFutureReservesResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.BeginSponsoringFutureReservesResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.BeginSponsoringFutureReservesResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.BeginSponsoringFutureReservesResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.BeginSponsoringFutureReservesResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.BeginSponsoringFutureReservesResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.BeginSponsoringFutureReservesResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.BeginSponsoringFutureReservesResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.BeginSponsoringFutureReservesResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.EndSponsoringFutureReservesResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.EndSponsoringFutureReservesResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.EndSponsoringFutureReservesResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.EndSponsoringFutureReservesResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.EndSponsoringFutureReservesResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.EndSponsoringFutureReservesResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.EndSponsoringFutureReservesResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.EndSponsoringFutureReservesResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.EndSponsoringFutureReservesResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.EndSponsoringFutureReservesResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.EndSponsoringFutureReservesResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.EndSponsoringFutureReservesResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.EndSponsoringFutureReservesResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.EndSponsoringFutureReservesResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.EndSponsoringFutureReservesResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.EndSponsoringFutureReservesResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.RevokeSponsorshipResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.RevokeSponsorshipResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.RevokeSponsorshipResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.RevokeSponsorshipResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.RevokeSponsorshipResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.RevokeSponsorshipResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.RevokeSponsorshipResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.RevokeSponsorshipResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.RevokeSponsorshipResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.RevokeSponsorshipResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.RevokeSponsorshipResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.RevokeSponsorshipResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.RevokeSponsorshipResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.RevokeSponsorshipResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.RevokeSponsorshipResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.RevokeSponsorshipResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClawbackResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.ClawbackResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClawbackResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.ClawbackResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClawbackResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.ClawbackResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClawbackResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.ClawbackResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClawbackResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.ClawbackResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClawbackResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.ClawbackResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClawbackResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.ClawbackResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClawbackResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.ClawbackResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClawbackClaimableBalanceResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.ClawbackClaimableBalanceResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClawbackClaimableBalanceResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.ClawbackClaimableBalanceResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClawbackClaimableBalanceResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.ClawbackClaimableBalanceResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClawbackClaimableBalanceResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.ClawbackClaimableBalanceResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClawbackClaimableBalanceResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.ClawbackClaimableBalanceResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClawbackClaimableBalanceResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.ClawbackClaimableBalanceResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClawbackClaimableBalanceResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.ClawbackClaimableBalanceResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ClawbackClaimableBalanceResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.ClawbackClaimableBalanceResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SetTrustLineFlagsResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.SetTrustLineFlagsResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SetTrustLineFlagsResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.SetTrustLineFlagsResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SetTrustLineFlagsResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.SetTrustLineFlagsResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SetTrustLineFlagsResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.SetTrustLineFlagsResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SetTrustLineFlagsResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.SetTrustLineFlagsResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SetTrustLineFlagsResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.SetTrustLineFlagsResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SetTrustLineFlagsResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.SetTrustLineFlagsResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SetTrustLineFlagsResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.SetTrustLineFlagsResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolDepositResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.LiquidityPoolDepositResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolDepositResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.LiquidityPoolDepositResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolDepositResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.LiquidityPoolDepositResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolDepositResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.LiquidityPoolDepositResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolDepositResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.LiquidityPoolDepositResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolDepositResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.LiquidityPoolDepositResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolDepositResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.LiquidityPoolDepositResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolDepositResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.LiquidityPoolDepositResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolWithdrawResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.LiquidityPoolWithdrawResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolWithdrawResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.LiquidityPoolWithdrawResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolWithdrawResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.LiquidityPoolWithdrawResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolWithdrawResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.LiquidityPoolWithdrawResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolWithdrawResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.LiquidityPoolWithdrawResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolWithdrawResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.LiquidityPoolWithdrawResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolWithdrawResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.LiquidityPoolWithdrawResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.LiquidityPoolWithdrawResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.LiquidityPoolWithdrawResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.InvokeHostFunctionResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.InvokeHostFunctionResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.InvokeHostFunctionResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.InvokeHostFunctionResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.InvokeHostFunctionResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.InvokeHostFunctionResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.InvokeHostFunctionResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.InvokeHostFunctionResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.InvokeHostFunctionResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.InvokeHostFunctionResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.InvokeHostFunctionResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.InvokeHostFunctionResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.InvokeHostFunctionResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.InvokeHostFunctionResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.InvokeHostFunctionResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.InvokeHostFunctionResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ExtendFootprintTTLResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.ExtendFootprintTTLResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ExtendFootprintTTLResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.ExtendFootprintTTLResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ExtendFootprintTTLResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.ExtendFootprintTTLResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ExtendFootprintTTLResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.ExtendFootprintTTLResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ExtendFootprintTTLResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.ExtendFootprintTTLResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ExtendFootprintTTLResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.ExtendFootprintTTLResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ExtendFootprintTTLResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.ExtendFootprintTTLResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ExtendFootprintTTLResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.ExtendFootprintTTLResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.RestoreFootprintResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.RestoreFootprintResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.RestoreFootprintResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.RestoreFootprintResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.RestoreFootprintResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.RestoreFootprintResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.RestoreFootprintResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.RestoreFootprintResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.RestoreFootprintResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.RestoreFootprintResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.RestoreFootprintResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.RestoreFootprintResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.RestoreFootprintResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.RestoreFootprintResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.RestoreFootprintResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.RestoreFootprintResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.OperationResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.OperationResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.OperationResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.OperationResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.OperationResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.OperationResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.OperationResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.OperationResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.OperationResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.OperationResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.OperationResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.OperationResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.OperationResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.OperationResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.OperationResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.OperationResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionResultCodeEncodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionResultCodeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionResultCodeEncodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionResultCodeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionResultCodeDecodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionResultCodeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionResultCodeDecodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionResultCodeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.InnerTransactionResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.InnerTransactionResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.InnerTransactionResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.InnerTransactionResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.InnerTransactionResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.InnerTransactionResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.InnerTransactionResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.InnerTransactionResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.InnerTransactionResultPairEncodeRequest)))
            {
                model.Add(typeof(Stellar.InnerTransactionResultPairEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.InnerTransactionResultPairEncodeResponse)))
            {
                model.Add(typeof(Stellar.InnerTransactionResultPairEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.InnerTransactionResultPairDecodeRequest)))
            {
                model.Add(typeof(Stellar.InnerTransactionResultPairDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.InnerTransactionResultPairDecodeResponse)))
            {
                model.Add(typeof(Stellar.InnerTransactionResultPairDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionResultEncodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionResultEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionResultEncodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionResultEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionResultDecodeRequest)))
            {
                model.Add(typeof(Stellar.TransactionResultDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TransactionResultDecodeResponse)))
            {
                model.Add(typeof(Stellar.TransactionResultDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.HashEncodeRequest)))
            {
                model.Add(typeof(Stellar.HashEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.HashEncodeResponse)))
            {
                model.Add(typeof(Stellar.HashEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.HashDecodeRequest)))
            {
                model.Add(typeof(Stellar.HashDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.HashDecodeResponse)))
            {
                model.Add(typeof(Stellar.HashDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.uint256EncodeRequest)))
            {
                model.Add(typeof(Stellar.uint256EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.uint256EncodeResponse)))
            {
                model.Add(typeof(Stellar.uint256EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.uint256DecodeRequest)))
            {
                model.Add(typeof(Stellar.uint256DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.uint256DecodeResponse)))
            {
                model.Add(typeof(Stellar.uint256DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.uint32EncodeRequest)))
            {
                model.Add(typeof(Stellar.uint32EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.uint32EncodeResponse)))
            {
                model.Add(typeof(Stellar.uint32EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.uint32DecodeRequest)))
            {
                model.Add(typeof(Stellar.uint32DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.uint32DecodeResponse)))
            {
                model.Add(typeof(Stellar.uint32DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.int32EncodeRequest)))
            {
                model.Add(typeof(Stellar.int32EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.int32EncodeResponse)))
            {
                model.Add(typeof(Stellar.int32EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.int32DecodeRequest)))
            {
                model.Add(typeof(Stellar.int32DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.int32DecodeResponse)))
            {
                model.Add(typeof(Stellar.int32DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.uint64EncodeRequest)))
            {
                model.Add(typeof(Stellar.uint64EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.uint64EncodeResponse)))
            {
                model.Add(typeof(Stellar.uint64EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.uint64DecodeRequest)))
            {
                model.Add(typeof(Stellar.uint64DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.uint64DecodeResponse)))
            {
                model.Add(typeof(Stellar.uint64DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.int64EncodeRequest)))
            {
                model.Add(typeof(Stellar.int64EncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.int64EncodeResponse)))
            {
                model.Add(typeof(Stellar.int64EncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.int64DecodeRequest)))
            {
                model.Add(typeof(Stellar.int64DecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.int64DecodeResponse)))
            {
                model.Add(typeof(Stellar.int64DecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimePointEncodeRequest)))
            {
                model.Add(typeof(Stellar.TimePointEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimePointEncodeResponse)))
            {
                model.Add(typeof(Stellar.TimePointEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimePointDecodeRequest)))
            {
                model.Add(typeof(Stellar.TimePointDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.TimePointDecodeResponse)))
            {
                model.Add(typeof(Stellar.TimePointDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.DurationEncodeRequest)))
            {
                model.Add(typeof(Stellar.DurationEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.DurationEncodeResponse)))
            {
                model.Add(typeof(Stellar.DurationEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.DurationDecodeRequest)))
            {
                model.Add(typeof(Stellar.DurationDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.DurationDecodeResponse)))
            {
                model.Add(typeof(Stellar.DurationDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ExtensionPointEncodeRequest)))
            {
                model.Add(typeof(Stellar.ExtensionPointEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ExtensionPointEncodeResponse)))
            {
                model.Add(typeof(Stellar.ExtensionPointEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ExtensionPointDecodeRequest)))
            {
                model.Add(typeof(Stellar.ExtensionPointDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ExtensionPointDecodeResponse)))
            {
                model.Add(typeof(Stellar.ExtensionPointDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.CryptoKeyTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.CryptoKeyTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.CryptoKeyTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.CryptoKeyTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.CryptoKeyTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.CryptoKeyTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.CryptoKeyTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.CryptoKeyTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PublicKeyTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.PublicKeyTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PublicKeyTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.PublicKeyTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PublicKeyTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.PublicKeyTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PublicKeyTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.PublicKeyTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignerKeyTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.SignerKeyTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignerKeyTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.SignerKeyTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignerKeyTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.SignerKeyTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignerKeyTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.SignerKeyTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PublicKeyEncodeRequest)))
            {
                model.Add(typeof(Stellar.PublicKeyEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PublicKeyEncodeResponse)))
            {
                model.Add(typeof(Stellar.PublicKeyEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.PublicKeyDecodeRequest)))
            {
                model.Add(typeof(Stellar.PublicKeyDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.PublicKeyDecodeResponse)))
            {
                model.Add(typeof(Stellar.PublicKeyDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignerKeyEncodeRequest)))
            {
                model.Add(typeof(Stellar.SignerKeyEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignerKeyEncodeResponse)))
            {
                model.Add(typeof(Stellar.SignerKeyEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignerKeyDecodeRequest)))
            {
                model.Add(typeof(Stellar.SignerKeyDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignerKeyDecodeResponse)))
            {
                model.Add(typeof(Stellar.SignerKeyDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignatureEncodeRequest)))
            {
                model.Add(typeof(Stellar.SignatureEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignatureEncodeResponse)))
            {
                model.Add(typeof(Stellar.SignatureEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignatureDecodeRequest)))
            {
                model.Add(typeof(Stellar.SignatureDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignatureDecodeResponse)))
            {
                model.Add(typeof(Stellar.SignatureDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignatureHintEncodeRequest)))
            {
                model.Add(typeof(Stellar.SignatureHintEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignatureHintEncodeResponse)))
            {
                model.Add(typeof(Stellar.SignatureHintEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignatureHintDecodeRequest)))
            {
                model.Add(typeof(Stellar.SignatureHintDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SignatureHintDecodeResponse)))
            {
                model.Add(typeof(Stellar.SignatureHintDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.NodeIDEncodeRequest)))
            {
                model.Add(typeof(Stellar.NodeIDEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.NodeIDEncodeResponse)))
            {
                model.Add(typeof(Stellar.NodeIDEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.NodeIDDecodeRequest)))
            {
                model.Add(typeof(Stellar.NodeIDDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.NodeIDDecodeResponse)))
            {
                model.Add(typeof(Stellar.NodeIDDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountIDEncodeRequest)))
            {
                model.Add(typeof(Stellar.AccountIDEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountIDEncodeResponse)))
            {
                model.Add(typeof(Stellar.AccountIDEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountIDDecodeRequest)))
            {
                model.Add(typeof(Stellar.AccountIDDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.AccountIDDecodeResponse)))
            {
                model.Add(typeof(Stellar.AccountIDDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.Curve25519SecretEncodeRequest)))
            {
                model.Add(typeof(Stellar.Curve25519SecretEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.Curve25519SecretEncodeResponse)))
            {
                model.Add(typeof(Stellar.Curve25519SecretEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.Curve25519SecretDecodeRequest)))
            {
                model.Add(typeof(Stellar.Curve25519SecretDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.Curve25519SecretDecodeResponse)))
            {
                model.Add(typeof(Stellar.Curve25519SecretDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.Curve25519PublicEncodeRequest)))
            {
                model.Add(typeof(Stellar.Curve25519PublicEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.Curve25519PublicEncodeResponse)))
            {
                model.Add(typeof(Stellar.Curve25519PublicEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.Curve25519PublicDecodeRequest)))
            {
                model.Add(typeof(Stellar.Curve25519PublicDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.Curve25519PublicDecodeResponse)))
            {
                model.Add(typeof(Stellar.Curve25519PublicDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.HmacSha256KeyEncodeRequest)))
            {
                model.Add(typeof(Stellar.HmacSha256KeyEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.HmacSha256KeyEncodeResponse)))
            {
                model.Add(typeof(Stellar.HmacSha256KeyEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.HmacSha256KeyDecodeRequest)))
            {
                model.Add(typeof(Stellar.HmacSha256KeyDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.HmacSha256KeyDecodeResponse)))
            {
                model.Add(typeof(Stellar.HmacSha256KeyDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.HmacSha256MacEncodeRequest)))
            {
                model.Add(typeof(Stellar.HmacSha256MacEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.HmacSha256MacEncodeResponse)))
            {
                model.Add(typeof(Stellar.HmacSha256MacEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.HmacSha256MacDecodeRequest)))
            {
                model.Add(typeof(Stellar.HmacSha256MacDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.HmacSha256MacDecodeResponse)))
            {
                model.Add(typeof(Stellar.HmacSha256MacDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ShortHashSeedEncodeRequest)))
            {
                model.Add(typeof(Stellar.ShortHashSeedEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ShortHashSeedEncodeResponse)))
            {
                model.Add(typeof(Stellar.ShortHashSeedEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.ShortHashSeedDecodeRequest)))
            {
                model.Add(typeof(Stellar.ShortHashSeedDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.ShortHashSeedDecodeResponse)))
            {
                model.Add(typeof(Stellar.ShortHashSeedDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.BinaryFuseFilterTypeEncodeRequest)))
            {
                model.Add(typeof(Stellar.BinaryFuseFilterTypeEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.BinaryFuseFilterTypeEncodeResponse)))
            {
                model.Add(typeof(Stellar.BinaryFuseFilterTypeEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.BinaryFuseFilterTypeDecodeRequest)))
            {
                model.Add(typeof(Stellar.BinaryFuseFilterTypeDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.BinaryFuseFilterTypeDecodeResponse)))
            {
                model.Add(typeof(Stellar.BinaryFuseFilterTypeDecodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SerializedBinaryFuseFilterEncodeRequest)))
            {
                model.Add(typeof(Stellar.SerializedBinaryFuseFilterEncodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SerializedBinaryFuseFilterEncodeResponse)))
            {
                model.Add(typeof(Stellar.SerializedBinaryFuseFilterEncodeResponse), true);
            }
            if (!model.IsDefined(typeof(Stellar.SerializedBinaryFuseFilterDecodeRequest)))
            {
                model.Add(typeof(Stellar.SerializedBinaryFuseFilterDecodeRequest), true);
            }
            if (!model.IsDefined(typeof(Stellar.SerializedBinaryFuseFilterDecodeResponse)))
            {
                model.Add(typeof(Stellar.SerializedBinaryFuseFilterDecodeResponse), true);
            }

        }

        /// <summary>Marshaller for ConfigSettingContractExecutionLanesV0EncodeRequest</summary>
        public static readonly Marshaller<Stellar.ConfigSettingContractExecutionLanesV0EncodeRequest> ConfigSettingContractExecutionLanesV0EncodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingContractExecutionLanesV0EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingContractExecutionLanesV0EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingContractExecutionLanesV0EncodeResponse</summary>
        public static readonly Marshaller<Stellar.ConfigSettingContractExecutionLanesV0EncodeResponse> ConfigSettingContractExecutionLanesV0EncodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingContractExecutionLanesV0EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingContractExecutionLanesV0EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingContractExecutionLanesV0DecodeRequest</summary>
        public static readonly Marshaller<Stellar.ConfigSettingContractExecutionLanesV0DecodeRequest> ConfigSettingContractExecutionLanesV0DecodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingContractExecutionLanesV0DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingContractExecutionLanesV0DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingContractExecutionLanesV0DecodeResponse</summary>
        public static readonly Marshaller<Stellar.ConfigSettingContractExecutionLanesV0DecodeResponse> ConfigSettingContractExecutionLanesV0DecodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingContractExecutionLanesV0DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingContractExecutionLanesV0DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingContractComputeV0EncodeRequest</summary>
        public static readonly Marshaller<Stellar.ConfigSettingContractComputeV0EncodeRequest> ConfigSettingContractComputeV0EncodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingContractComputeV0EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingContractComputeV0EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingContractComputeV0EncodeResponse</summary>
        public static readonly Marshaller<Stellar.ConfigSettingContractComputeV0EncodeResponse> ConfigSettingContractComputeV0EncodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingContractComputeV0EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingContractComputeV0EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingContractComputeV0DecodeRequest</summary>
        public static readonly Marshaller<Stellar.ConfigSettingContractComputeV0DecodeRequest> ConfigSettingContractComputeV0DecodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingContractComputeV0DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingContractComputeV0DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingContractComputeV0DecodeResponse</summary>
        public static readonly Marshaller<Stellar.ConfigSettingContractComputeV0DecodeResponse> ConfigSettingContractComputeV0DecodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingContractComputeV0DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingContractComputeV0DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingContractLedgerCostV0EncodeRequest</summary>
        public static readonly Marshaller<Stellar.ConfigSettingContractLedgerCostV0EncodeRequest> ConfigSettingContractLedgerCostV0EncodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingContractLedgerCostV0EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingContractLedgerCostV0EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingContractLedgerCostV0EncodeResponse</summary>
        public static readonly Marshaller<Stellar.ConfigSettingContractLedgerCostV0EncodeResponse> ConfigSettingContractLedgerCostV0EncodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingContractLedgerCostV0EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingContractLedgerCostV0EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingContractLedgerCostV0DecodeRequest</summary>
        public static readonly Marshaller<Stellar.ConfigSettingContractLedgerCostV0DecodeRequest> ConfigSettingContractLedgerCostV0DecodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingContractLedgerCostV0DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingContractLedgerCostV0DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingContractLedgerCostV0DecodeResponse</summary>
        public static readonly Marshaller<Stellar.ConfigSettingContractLedgerCostV0DecodeResponse> ConfigSettingContractLedgerCostV0DecodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingContractLedgerCostV0DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingContractLedgerCostV0DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingContractHistoricalDataV0EncodeRequest</summary>
        public static readonly Marshaller<Stellar.ConfigSettingContractHistoricalDataV0EncodeRequest> ConfigSettingContractHistoricalDataV0EncodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingContractHistoricalDataV0EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingContractHistoricalDataV0EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingContractHistoricalDataV0EncodeResponse</summary>
        public static readonly Marshaller<Stellar.ConfigSettingContractHistoricalDataV0EncodeResponse> ConfigSettingContractHistoricalDataV0EncodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingContractHistoricalDataV0EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingContractHistoricalDataV0EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingContractHistoricalDataV0DecodeRequest</summary>
        public static readonly Marshaller<Stellar.ConfigSettingContractHistoricalDataV0DecodeRequest> ConfigSettingContractHistoricalDataV0DecodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingContractHistoricalDataV0DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingContractHistoricalDataV0DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingContractHistoricalDataV0DecodeResponse</summary>
        public static readonly Marshaller<Stellar.ConfigSettingContractHistoricalDataV0DecodeResponse> ConfigSettingContractHistoricalDataV0DecodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingContractHistoricalDataV0DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingContractHistoricalDataV0DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingContractEventsV0EncodeRequest</summary>
        public static readonly Marshaller<Stellar.ConfigSettingContractEventsV0EncodeRequest> ConfigSettingContractEventsV0EncodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingContractEventsV0EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingContractEventsV0EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingContractEventsV0EncodeResponse</summary>
        public static readonly Marshaller<Stellar.ConfigSettingContractEventsV0EncodeResponse> ConfigSettingContractEventsV0EncodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingContractEventsV0EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingContractEventsV0EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingContractEventsV0DecodeRequest</summary>
        public static readonly Marshaller<Stellar.ConfigSettingContractEventsV0DecodeRequest> ConfigSettingContractEventsV0DecodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingContractEventsV0DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingContractEventsV0DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingContractEventsV0DecodeResponse</summary>
        public static readonly Marshaller<Stellar.ConfigSettingContractEventsV0DecodeResponse> ConfigSettingContractEventsV0DecodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingContractEventsV0DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingContractEventsV0DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingContractBandwidthV0EncodeRequest</summary>
        public static readonly Marshaller<Stellar.ConfigSettingContractBandwidthV0EncodeRequest> ConfigSettingContractBandwidthV0EncodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingContractBandwidthV0EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingContractBandwidthV0EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingContractBandwidthV0EncodeResponse</summary>
        public static readonly Marshaller<Stellar.ConfigSettingContractBandwidthV0EncodeResponse> ConfigSettingContractBandwidthV0EncodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingContractBandwidthV0EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingContractBandwidthV0EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingContractBandwidthV0DecodeRequest</summary>
        public static readonly Marshaller<Stellar.ConfigSettingContractBandwidthV0DecodeRequest> ConfigSettingContractBandwidthV0DecodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingContractBandwidthV0DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingContractBandwidthV0DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingContractBandwidthV0DecodeResponse</summary>
        public static readonly Marshaller<Stellar.ConfigSettingContractBandwidthV0DecodeResponse> ConfigSettingContractBandwidthV0DecodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingContractBandwidthV0DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingContractBandwidthV0DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractCostTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ContractCostTypeEncodeRequest> ContractCostTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.ContractCostTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractCostTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractCostTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ContractCostTypeEncodeResponse> ContractCostTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.ContractCostTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractCostTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractCostTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ContractCostTypeDecodeRequest> ContractCostTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.ContractCostTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractCostTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractCostTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ContractCostTypeDecodeResponse> ContractCostTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.ContractCostTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractCostTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractCostParamEntryEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ContractCostParamEntryEncodeRequest> ContractCostParamEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.ContractCostParamEntryEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractCostParamEntryEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractCostParamEntryEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ContractCostParamEntryEncodeResponse> ContractCostParamEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.ContractCostParamEntryEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractCostParamEntryEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractCostParamEntryDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ContractCostParamEntryDecodeRequest> ContractCostParamEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.ContractCostParamEntryDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractCostParamEntryDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractCostParamEntryDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ContractCostParamEntryDecodeResponse> ContractCostParamEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.ContractCostParamEntryDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractCostParamEntryDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for StateArchivalSettingsEncodeRequest</summary>
        public static readonly Marshaller<Stellar.StateArchivalSettingsEncodeRequest> StateArchivalSettingsEncodeRequestMarshaller = Marshallers.Create<Stellar.StateArchivalSettingsEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.StateArchivalSettingsEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for StateArchivalSettingsEncodeResponse</summary>
        public static readonly Marshaller<Stellar.StateArchivalSettingsEncodeResponse> StateArchivalSettingsEncodeResponseMarshaller = Marshallers.Create<Stellar.StateArchivalSettingsEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.StateArchivalSettingsEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for StateArchivalSettingsDecodeRequest</summary>
        public static readonly Marshaller<Stellar.StateArchivalSettingsDecodeRequest> StateArchivalSettingsDecodeRequestMarshaller = Marshallers.Create<Stellar.StateArchivalSettingsDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.StateArchivalSettingsDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for StateArchivalSettingsDecodeResponse</summary>
        public static readonly Marshaller<Stellar.StateArchivalSettingsDecodeResponse> StateArchivalSettingsDecodeResponseMarshaller = Marshallers.Create<Stellar.StateArchivalSettingsDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.StateArchivalSettingsDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for EvictionIteratorEncodeRequest</summary>
        public static readonly Marshaller<Stellar.EvictionIteratorEncodeRequest> EvictionIteratorEncodeRequestMarshaller = Marshallers.Create<Stellar.EvictionIteratorEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.EvictionIteratorEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for EvictionIteratorEncodeResponse</summary>
        public static readonly Marshaller<Stellar.EvictionIteratorEncodeResponse> EvictionIteratorEncodeResponseMarshaller = Marshallers.Create<Stellar.EvictionIteratorEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.EvictionIteratorEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for EvictionIteratorDecodeRequest</summary>
        public static readonly Marshaller<Stellar.EvictionIteratorDecodeRequest> EvictionIteratorDecodeRequestMarshaller = Marshallers.Create<Stellar.EvictionIteratorDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.EvictionIteratorDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for EvictionIteratorDecodeResponse</summary>
        public static readonly Marshaller<Stellar.EvictionIteratorDecodeResponse> EvictionIteratorDecodeResponseMarshaller = Marshallers.Create<Stellar.EvictionIteratorDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.EvictionIteratorDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractCostParamsEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ContractCostParamsEncodeRequest> ContractCostParamsEncodeRequestMarshaller = Marshallers.Create<Stellar.ContractCostParamsEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractCostParamsEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractCostParamsEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ContractCostParamsEncodeResponse> ContractCostParamsEncodeResponseMarshaller = Marshallers.Create<Stellar.ContractCostParamsEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractCostParamsEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractCostParamsDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ContractCostParamsDecodeRequest> ContractCostParamsDecodeRequestMarshaller = Marshallers.Create<Stellar.ContractCostParamsDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractCostParamsDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractCostParamsDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ContractCostParamsDecodeResponse> ContractCostParamsDecodeResponseMarshaller = Marshallers.Create<Stellar.ContractCostParamsDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractCostParamsDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingIDEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ConfigSettingIDEncodeRequest> ConfigSettingIDEncodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingIDEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingIDEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingIDEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ConfigSettingIDEncodeResponse> ConfigSettingIDEncodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingIDEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingIDEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingIDDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ConfigSettingIDDecodeRequest> ConfigSettingIDDecodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingIDDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingIDDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingIDDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ConfigSettingIDDecodeResponse> ConfigSettingIDDecodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingIDDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingIDDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingEntryEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ConfigSettingEntryEncodeRequest> ConfigSettingEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingEntryEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingEntryEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingEntryEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ConfigSettingEntryEncodeResponse> ConfigSettingEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingEntryEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingEntryEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingEntryDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ConfigSettingEntryDecodeRequest> ConfigSettingEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingEntryDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingEntryDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigSettingEntryDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ConfigSettingEntryDecodeResponse> ConfigSettingEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingEntryDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigSettingEntryDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCEnvMetaKindEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCEnvMetaKindEncodeRequest> SCEnvMetaKindEncodeRequestMarshaller = Marshallers.Create<Stellar.SCEnvMetaKindEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCEnvMetaKindEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCEnvMetaKindEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCEnvMetaKindEncodeResponse> SCEnvMetaKindEncodeResponseMarshaller = Marshallers.Create<Stellar.SCEnvMetaKindEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCEnvMetaKindEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCEnvMetaKindDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCEnvMetaKindDecodeRequest> SCEnvMetaKindDecodeRequestMarshaller = Marshallers.Create<Stellar.SCEnvMetaKindDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCEnvMetaKindDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCEnvMetaKindDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCEnvMetaKindDecodeResponse> SCEnvMetaKindDecodeResponseMarshaller = Marshallers.Create<Stellar.SCEnvMetaKindDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCEnvMetaKindDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCEnvMetaEntryEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCEnvMetaEntryEncodeRequest> SCEnvMetaEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.SCEnvMetaEntryEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCEnvMetaEntryEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCEnvMetaEntryEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCEnvMetaEntryEncodeResponse> SCEnvMetaEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.SCEnvMetaEntryEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCEnvMetaEntryEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCEnvMetaEntryDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCEnvMetaEntryDecodeRequest> SCEnvMetaEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.SCEnvMetaEntryDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCEnvMetaEntryDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCEnvMetaEntryDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCEnvMetaEntryDecodeResponse> SCEnvMetaEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.SCEnvMetaEntryDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCEnvMetaEntryDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCMetaV0EncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCMetaV0EncodeRequest> SCMetaV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCMetaV0EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCMetaV0EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCMetaV0EncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCMetaV0EncodeResponse> SCMetaV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCMetaV0EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCMetaV0EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCMetaV0DecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCMetaV0DecodeRequest> SCMetaV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCMetaV0DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCMetaV0DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCMetaV0DecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCMetaV0DecodeResponse> SCMetaV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCMetaV0DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCMetaV0DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCMetaKindEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCMetaKindEncodeRequest> SCMetaKindEncodeRequestMarshaller = Marshallers.Create<Stellar.SCMetaKindEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCMetaKindEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCMetaKindEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCMetaKindEncodeResponse> SCMetaKindEncodeResponseMarshaller = Marshallers.Create<Stellar.SCMetaKindEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCMetaKindEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCMetaKindDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCMetaKindDecodeRequest> SCMetaKindDecodeRequestMarshaller = Marshallers.Create<Stellar.SCMetaKindDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCMetaKindDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCMetaKindDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCMetaKindDecodeResponse> SCMetaKindDecodeResponseMarshaller = Marshallers.Create<Stellar.SCMetaKindDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCMetaKindDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCMetaEntryEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCMetaEntryEncodeRequest> SCMetaEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.SCMetaEntryEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCMetaEntryEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCMetaEntryEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCMetaEntryEncodeResponse> SCMetaEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.SCMetaEntryEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCMetaEntryEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCMetaEntryDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCMetaEntryDecodeRequest> SCMetaEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.SCMetaEntryDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCMetaEntryDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCMetaEntryDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCMetaEntryDecodeResponse> SCMetaEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.SCMetaEntryDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCMetaEntryDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeEncodeRequest> SCSpecTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeEncodeResponse> SCSpecTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeDecodeRequest> SCSpecTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeDecodeResponse> SCSpecTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeOptionEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeOptionEncodeRequest> SCSpecTypeOptionEncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeOptionEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeOptionEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeOptionEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeOptionEncodeResponse> SCSpecTypeOptionEncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeOptionEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeOptionEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeOptionDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeOptionDecodeRequest> SCSpecTypeOptionDecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeOptionDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeOptionDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeOptionDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeOptionDecodeResponse> SCSpecTypeOptionDecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeOptionDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeOptionDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeResultEncodeRequest> SCSpecTypeResultEncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeResultEncodeResponse> SCSpecTypeResultEncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeResultDecodeRequest> SCSpecTypeResultDecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeResultDecodeResponse> SCSpecTypeResultDecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeVecEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeVecEncodeRequest> SCSpecTypeVecEncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeVecEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeVecEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeVecEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeVecEncodeResponse> SCSpecTypeVecEncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeVecEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeVecEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeVecDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeVecDecodeRequest> SCSpecTypeVecDecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeVecDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeVecDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeVecDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeVecDecodeResponse> SCSpecTypeVecDecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeVecDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeVecDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeMapEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeMapEncodeRequest> SCSpecTypeMapEncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeMapEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeMapEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeMapEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeMapEncodeResponse> SCSpecTypeMapEncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeMapEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeMapEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeMapDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeMapDecodeRequest> SCSpecTypeMapDecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeMapDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeMapDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeMapDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeMapDecodeResponse> SCSpecTypeMapDecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeMapDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeMapDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeTupleEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeTupleEncodeRequest> SCSpecTypeTupleEncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeTupleEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeTupleEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeTupleEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeTupleEncodeResponse> SCSpecTypeTupleEncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeTupleEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeTupleEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeTupleDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeTupleDecodeRequest> SCSpecTypeTupleDecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeTupleDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeTupleDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeTupleDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeTupleDecodeResponse> SCSpecTypeTupleDecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeTupleDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeTupleDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeBytesNEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeBytesNEncodeRequest> SCSpecTypeBytesNEncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeBytesNEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeBytesNEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeBytesNEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeBytesNEncodeResponse> SCSpecTypeBytesNEncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeBytesNEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeBytesNEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeBytesNDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeBytesNDecodeRequest> SCSpecTypeBytesNDecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeBytesNDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeBytesNDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeBytesNDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeBytesNDecodeResponse> SCSpecTypeBytesNDecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeBytesNDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeBytesNDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeUDTEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeUDTEncodeRequest> SCSpecTypeUDTEncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeUDTEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeUDTEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeUDTEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeUDTEncodeResponse> SCSpecTypeUDTEncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeUDTEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeUDTEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeUDTDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeUDTDecodeRequest> SCSpecTypeUDTDecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeUDTDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeUDTDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeUDTDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeUDTDecodeResponse> SCSpecTypeUDTDecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeUDTDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeUDTDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeDefEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeDefEncodeRequest> SCSpecTypeDefEncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeDefEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeDefEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeDefEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeDefEncodeResponse> SCSpecTypeDefEncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeDefEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeDefEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeDefDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeDefDecodeRequest> SCSpecTypeDefDecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeDefDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeDefDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecTypeDefDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecTypeDefDecodeResponse> SCSpecTypeDefDecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeDefDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecTypeDefDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTStructFieldV0EncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTStructFieldV0EncodeRequest> SCSpecUDTStructFieldV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTStructFieldV0EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTStructFieldV0EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTStructFieldV0EncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTStructFieldV0EncodeResponse> SCSpecUDTStructFieldV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTStructFieldV0EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTStructFieldV0EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTStructFieldV0DecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTStructFieldV0DecodeRequest> SCSpecUDTStructFieldV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTStructFieldV0DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTStructFieldV0DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTStructFieldV0DecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTStructFieldV0DecodeResponse> SCSpecUDTStructFieldV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTStructFieldV0DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTStructFieldV0DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTStructV0EncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTStructV0EncodeRequest> SCSpecUDTStructV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTStructV0EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTStructV0EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTStructV0EncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTStructV0EncodeResponse> SCSpecUDTStructV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTStructV0EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTStructV0EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTStructV0DecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTStructV0DecodeRequest> SCSpecUDTStructV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTStructV0DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTStructV0DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTStructV0DecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTStructV0DecodeResponse> SCSpecUDTStructV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTStructV0DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTStructV0DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTUnionCaseVoidV0EncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseVoidV0EncodeRequest> SCSpecUDTUnionCaseVoidV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseVoidV0EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseVoidV0EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTUnionCaseVoidV0EncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseVoidV0EncodeResponse> SCSpecUDTUnionCaseVoidV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseVoidV0EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseVoidV0EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTUnionCaseVoidV0DecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseVoidV0DecodeRequest> SCSpecUDTUnionCaseVoidV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseVoidV0DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseVoidV0DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTUnionCaseVoidV0DecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseVoidV0DecodeResponse> SCSpecUDTUnionCaseVoidV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseVoidV0DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseVoidV0DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTUnionCaseTupleV0EncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseTupleV0EncodeRequest> SCSpecUDTUnionCaseTupleV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseTupleV0EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseTupleV0EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTUnionCaseTupleV0EncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseTupleV0EncodeResponse> SCSpecUDTUnionCaseTupleV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseTupleV0EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseTupleV0EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTUnionCaseTupleV0DecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseTupleV0DecodeRequest> SCSpecUDTUnionCaseTupleV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseTupleV0DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseTupleV0DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTUnionCaseTupleV0DecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseTupleV0DecodeResponse> SCSpecUDTUnionCaseTupleV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseTupleV0DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseTupleV0DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTUnionCaseV0KindEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseV0KindEncodeRequest> SCSpecUDTUnionCaseV0KindEncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseV0KindEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseV0KindEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTUnionCaseV0KindEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseV0KindEncodeResponse> SCSpecUDTUnionCaseV0KindEncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseV0KindEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseV0KindEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTUnionCaseV0KindDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseV0KindDecodeRequest> SCSpecUDTUnionCaseV0KindDecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseV0KindDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseV0KindDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTUnionCaseV0KindDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseV0KindDecodeResponse> SCSpecUDTUnionCaseV0KindDecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseV0KindDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseV0KindDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTUnionCaseV0EncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseV0EncodeRequest> SCSpecUDTUnionCaseV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseV0EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseV0EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTUnionCaseV0EncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseV0EncodeResponse> SCSpecUDTUnionCaseV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseV0EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseV0EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTUnionCaseV0DecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseV0DecodeRequest> SCSpecUDTUnionCaseV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseV0DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseV0DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTUnionCaseV0DecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseV0DecodeResponse> SCSpecUDTUnionCaseV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseV0DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseV0DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTUnionV0EncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTUnionV0EncodeRequest> SCSpecUDTUnionV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionV0EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTUnionV0EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTUnionV0EncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTUnionV0EncodeResponse> SCSpecUDTUnionV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionV0EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTUnionV0EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTUnionV0DecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTUnionV0DecodeRequest> SCSpecUDTUnionV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionV0DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTUnionV0DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTUnionV0DecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTUnionV0DecodeResponse> SCSpecUDTUnionV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionV0DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTUnionV0DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTEnumCaseV0EncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTEnumCaseV0EncodeRequest> SCSpecUDTEnumCaseV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTEnumCaseV0EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTEnumCaseV0EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTEnumCaseV0EncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTEnumCaseV0EncodeResponse> SCSpecUDTEnumCaseV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTEnumCaseV0EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTEnumCaseV0EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTEnumCaseV0DecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTEnumCaseV0DecodeRequest> SCSpecUDTEnumCaseV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTEnumCaseV0DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTEnumCaseV0DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTEnumCaseV0DecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTEnumCaseV0DecodeResponse> SCSpecUDTEnumCaseV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTEnumCaseV0DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTEnumCaseV0DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTEnumV0EncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTEnumV0EncodeRequest> SCSpecUDTEnumV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTEnumV0EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTEnumV0EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTEnumV0EncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTEnumV0EncodeResponse> SCSpecUDTEnumV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTEnumV0EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTEnumV0EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTEnumV0DecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTEnumV0DecodeRequest> SCSpecUDTEnumV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTEnumV0DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTEnumV0DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTEnumV0DecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTEnumV0DecodeResponse> SCSpecUDTEnumV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTEnumV0DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTEnumV0DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTErrorEnumCaseV0EncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTErrorEnumCaseV0EncodeRequest> SCSpecUDTErrorEnumCaseV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTErrorEnumCaseV0EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTErrorEnumCaseV0EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTErrorEnumCaseV0EncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTErrorEnumCaseV0EncodeResponse> SCSpecUDTErrorEnumCaseV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTErrorEnumCaseV0EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTErrorEnumCaseV0EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTErrorEnumCaseV0DecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTErrorEnumCaseV0DecodeRequest> SCSpecUDTErrorEnumCaseV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTErrorEnumCaseV0DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTErrorEnumCaseV0DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTErrorEnumCaseV0DecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTErrorEnumCaseV0DecodeResponse> SCSpecUDTErrorEnumCaseV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTErrorEnumCaseV0DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTErrorEnumCaseV0DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTErrorEnumV0EncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTErrorEnumV0EncodeRequest> SCSpecUDTErrorEnumV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTErrorEnumV0EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTErrorEnumV0EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTErrorEnumV0EncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTErrorEnumV0EncodeResponse> SCSpecUDTErrorEnumV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTErrorEnumV0EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTErrorEnumV0EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTErrorEnumV0DecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTErrorEnumV0DecodeRequest> SCSpecUDTErrorEnumV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTErrorEnumV0DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTErrorEnumV0DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecUDTErrorEnumV0DecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecUDTErrorEnumV0DecodeResponse> SCSpecUDTErrorEnumV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTErrorEnumV0DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecUDTErrorEnumV0DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecFunctionInputV0EncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecFunctionInputV0EncodeRequest> SCSpecFunctionInputV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecFunctionInputV0EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecFunctionInputV0EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecFunctionInputV0EncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecFunctionInputV0EncodeResponse> SCSpecFunctionInputV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecFunctionInputV0EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecFunctionInputV0EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecFunctionInputV0DecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecFunctionInputV0DecodeRequest> SCSpecFunctionInputV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecFunctionInputV0DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecFunctionInputV0DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecFunctionInputV0DecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecFunctionInputV0DecodeResponse> SCSpecFunctionInputV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecFunctionInputV0DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecFunctionInputV0DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecFunctionV0EncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecFunctionV0EncodeRequest> SCSpecFunctionV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecFunctionV0EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecFunctionV0EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecFunctionV0EncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecFunctionV0EncodeResponse> SCSpecFunctionV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecFunctionV0EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecFunctionV0EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecFunctionV0DecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecFunctionV0DecodeRequest> SCSpecFunctionV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecFunctionV0DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecFunctionV0DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecFunctionV0DecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecFunctionV0DecodeResponse> SCSpecFunctionV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecFunctionV0DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecFunctionV0DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecEntryKindEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecEntryKindEncodeRequest> SCSpecEntryKindEncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecEntryKindEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecEntryKindEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecEntryKindEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecEntryKindEncodeResponse> SCSpecEntryKindEncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecEntryKindEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecEntryKindEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecEntryKindDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecEntryKindDecodeRequest> SCSpecEntryKindDecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecEntryKindDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecEntryKindDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecEntryKindDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecEntryKindDecodeResponse> SCSpecEntryKindDecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecEntryKindDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecEntryKindDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecEntryEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecEntryEncodeRequest> SCSpecEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecEntryEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecEntryEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecEntryEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecEntryEncodeResponse> SCSpecEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecEntryEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecEntryEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecEntryDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSpecEntryDecodeRequest> SCSpecEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecEntryDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecEntryDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSpecEntryDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSpecEntryDecodeResponse> SCSpecEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecEntryDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSpecEntryDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCValTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCValTypeEncodeRequest> SCValTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.SCValTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCValTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCValTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCValTypeEncodeResponse> SCValTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.SCValTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCValTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCValTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCValTypeDecodeRequest> SCValTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.SCValTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCValTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCValTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCValTypeDecodeResponse> SCValTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.SCValTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCValTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCErrorTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCErrorTypeEncodeRequest> SCErrorTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.SCErrorTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCErrorTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCErrorTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCErrorTypeEncodeResponse> SCErrorTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.SCErrorTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCErrorTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCErrorTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCErrorTypeDecodeRequest> SCErrorTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.SCErrorTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCErrorTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCErrorTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCErrorTypeDecodeResponse> SCErrorTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.SCErrorTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCErrorTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCErrorCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCErrorCodeEncodeRequest> SCErrorCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.SCErrorCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCErrorCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCErrorCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCErrorCodeEncodeResponse> SCErrorCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.SCErrorCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCErrorCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCErrorCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCErrorCodeDecodeRequest> SCErrorCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.SCErrorCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCErrorCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCErrorCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCErrorCodeDecodeResponse> SCErrorCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.SCErrorCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCErrorCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCErrorEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCErrorEncodeRequest> SCErrorEncodeRequestMarshaller = Marshallers.Create<Stellar.SCErrorEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCErrorEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCErrorEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCErrorEncodeResponse> SCErrorEncodeResponseMarshaller = Marshallers.Create<Stellar.SCErrorEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCErrorEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCErrorDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCErrorDecodeRequest> SCErrorDecodeRequestMarshaller = Marshallers.Create<Stellar.SCErrorDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCErrorDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCErrorDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCErrorDecodeResponse> SCErrorDecodeResponseMarshaller = Marshallers.Create<Stellar.SCErrorDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCErrorDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for UInt128PartsEncodeRequest</summary>
        public static readonly Marshaller<Stellar.UInt128PartsEncodeRequest> UInt128PartsEncodeRequestMarshaller = Marshallers.Create<Stellar.UInt128PartsEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.UInt128PartsEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for UInt128PartsEncodeResponse</summary>
        public static readonly Marshaller<Stellar.UInt128PartsEncodeResponse> UInt128PartsEncodeResponseMarshaller = Marshallers.Create<Stellar.UInt128PartsEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.UInt128PartsEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for UInt128PartsDecodeRequest</summary>
        public static readonly Marshaller<Stellar.UInt128PartsDecodeRequest> UInt128PartsDecodeRequestMarshaller = Marshallers.Create<Stellar.UInt128PartsDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.UInt128PartsDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for UInt128PartsDecodeResponse</summary>
        public static readonly Marshaller<Stellar.UInt128PartsDecodeResponse> UInt128PartsDecodeResponseMarshaller = Marshallers.Create<Stellar.UInt128PartsDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.UInt128PartsDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for Int128PartsEncodeRequest</summary>
        public static readonly Marshaller<Stellar.Int128PartsEncodeRequest> Int128PartsEncodeRequestMarshaller = Marshallers.Create<Stellar.Int128PartsEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.Int128PartsEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for Int128PartsEncodeResponse</summary>
        public static readonly Marshaller<Stellar.Int128PartsEncodeResponse> Int128PartsEncodeResponseMarshaller = Marshallers.Create<Stellar.Int128PartsEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.Int128PartsEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for Int128PartsDecodeRequest</summary>
        public static readonly Marshaller<Stellar.Int128PartsDecodeRequest> Int128PartsDecodeRequestMarshaller = Marshallers.Create<Stellar.Int128PartsDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.Int128PartsDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for Int128PartsDecodeResponse</summary>
        public static readonly Marshaller<Stellar.Int128PartsDecodeResponse> Int128PartsDecodeResponseMarshaller = Marshallers.Create<Stellar.Int128PartsDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.Int128PartsDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for UInt256PartsEncodeRequest</summary>
        public static readonly Marshaller<Stellar.UInt256PartsEncodeRequest> UInt256PartsEncodeRequestMarshaller = Marshallers.Create<Stellar.UInt256PartsEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.UInt256PartsEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for UInt256PartsEncodeResponse</summary>
        public static readonly Marshaller<Stellar.UInt256PartsEncodeResponse> UInt256PartsEncodeResponseMarshaller = Marshallers.Create<Stellar.UInt256PartsEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.UInt256PartsEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for UInt256PartsDecodeRequest</summary>
        public static readonly Marshaller<Stellar.UInt256PartsDecodeRequest> UInt256PartsDecodeRequestMarshaller = Marshallers.Create<Stellar.UInt256PartsDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.UInt256PartsDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for UInt256PartsDecodeResponse</summary>
        public static readonly Marshaller<Stellar.UInt256PartsDecodeResponse> UInt256PartsDecodeResponseMarshaller = Marshallers.Create<Stellar.UInt256PartsDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.UInt256PartsDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for Int256PartsEncodeRequest</summary>
        public static readonly Marshaller<Stellar.Int256PartsEncodeRequest> Int256PartsEncodeRequestMarshaller = Marshallers.Create<Stellar.Int256PartsEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.Int256PartsEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for Int256PartsEncodeResponse</summary>
        public static readonly Marshaller<Stellar.Int256PartsEncodeResponse> Int256PartsEncodeResponseMarshaller = Marshallers.Create<Stellar.Int256PartsEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.Int256PartsEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for Int256PartsDecodeRequest</summary>
        public static readonly Marshaller<Stellar.Int256PartsDecodeRequest> Int256PartsDecodeRequestMarshaller = Marshallers.Create<Stellar.Int256PartsDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.Int256PartsDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for Int256PartsDecodeResponse</summary>
        public static readonly Marshaller<Stellar.Int256PartsDecodeResponse> Int256PartsDecodeResponseMarshaller = Marshallers.Create<Stellar.Int256PartsDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.Int256PartsDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractExecutableTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ContractExecutableTypeEncodeRequest> ContractExecutableTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.ContractExecutableTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractExecutableTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractExecutableTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ContractExecutableTypeEncodeResponse> ContractExecutableTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.ContractExecutableTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractExecutableTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractExecutableTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ContractExecutableTypeDecodeRequest> ContractExecutableTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.ContractExecutableTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractExecutableTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractExecutableTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ContractExecutableTypeDecodeResponse> ContractExecutableTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.ContractExecutableTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractExecutableTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractExecutableEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ContractExecutableEncodeRequest> ContractExecutableEncodeRequestMarshaller = Marshallers.Create<Stellar.ContractExecutableEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractExecutableEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractExecutableEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ContractExecutableEncodeResponse> ContractExecutableEncodeResponseMarshaller = Marshallers.Create<Stellar.ContractExecutableEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractExecutableEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractExecutableDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ContractExecutableDecodeRequest> ContractExecutableDecodeRequestMarshaller = Marshallers.Create<Stellar.ContractExecutableDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractExecutableDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractExecutableDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ContractExecutableDecodeResponse> ContractExecutableDecodeResponseMarshaller = Marshallers.Create<Stellar.ContractExecutableDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractExecutableDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCAddressTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCAddressTypeEncodeRequest> SCAddressTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.SCAddressTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCAddressTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCAddressTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCAddressTypeEncodeResponse> SCAddressTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.SCAddressTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCAddressTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCAddressTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCAddressTypeDecodeRequest> SCAddressTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.SCAddressTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCAddressTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCAddressTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCAddressTypeDecodeResponse> SCAddressTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.SCAddressTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCAddressTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCAddressEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCAddressEncodeRequest> SCAddressEncodeRequestMarshaller = Marshallers.Create<Stellar.SCAddressEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCAddressEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCAddressEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCAddressEncodeResponse> SCAddressEncodeResponseMarshaller = Marshallers.Create<Stellar.SCAddressEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCAddressEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCAddressDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCAddressDecodeRequest> SCAddressDecodeRequestMarshaller = Marshallers.Create<Stellar.SCAddressDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCAddressDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCAddressDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCAddressDecodeResponse> SCAddressDecodeResponseMarshaller = Marshallers.Create<Stellar.SCAddressDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCAddressDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCVecEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCVecEncodeRequest> SCVecEncodeRequestMarshaller = Marshallers.Create<Stellar.SCVecEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCVecEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCVecEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCVecEncodeResponse> SCVecEncodeResponseMarshaller = Marshallers.Create<Stellar.SCVecEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCVecEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCVecDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCVecDecodeRequest> SCVecDecodeRequestMarshaller = Marshallers.Create<Stellar.SCVecDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCVecDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCVecDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCVecDecodeResponse> SCVecDecodeResponseMarshaller = Marshallers.Create<Stellar.SCVecDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCVecDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCMapEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCMapEncodeRequest> SCMapEncodeRequestMarshaller = Marshallers.Create<Stellar.SCMapEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCMapEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCMapEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCMapEncodeResponse> SCMapEncodeResponseMarshaller = Marshallers.Create<Stellar.SCMapEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCMapEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCMapDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCMapDecodeRequest> SCMapDecodeRequestMarshaller = Marshallers.Create<Stellar.SCMapDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCMapDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCMapDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCMapDecodeResponse> SCMapDecodeResponseMarshaller = Marshallers.Create<Stellar.SCMapDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCMapDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCBytesEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCBytesEncodeRequest> SCBytesEncodeRequestMarshaller = Marshallers.Create<Stellar.SCBytesEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCBytesEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCBytesEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCBytesEncodeResponse> SCBytesEncodeResponseMarshaller = Marshallers.Create<Stellar.SCBytesEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCBytesEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCBytesDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCBytesDecodeRequest> SCBytesDecodeRequestMarshaller = Marshallers.Create<Stellar.SCBytesDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCBytesDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCBytesDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCBytesDecodeResponse> SCBytesDecodeResponseMarshaller = Marshallers.Create<Stellar.SCBytesDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCBytesDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCStringEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCStringEncodeRequest> SCStringEncodeRequestMarshaller = Marshallers.Create<Stellar.SCStringEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCStringEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCStringEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCStringEncodeResponse> SCStringEncodeResponseMarshaller = Marshallers.Create<Stellar.SCStringEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCStringEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCStringDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCStringDecodeRequest> SCStringDecodeRequestMarshaller = Marshallers.Create<Stellar.SCStringDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCStringDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCStringDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCStringDecodeResponse> SCStringDecodeResponseMarshaller = Marshallers.Create<Stellar.SCStringDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCStringDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSymbolEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSymbolEncodeRequest> SCSymbolEncodeRequestMarshaller = Marshallers.Create<Stellar.SCSymbolEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSymbolEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSymbolEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSymbolEncodeResponse> SCSymbolEncodeResponseMarshaller = Marshallers.Create<Stellar.SCSymbolEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSymbolEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSymbolDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCSymbolDecodeRequest> SCSymbolDecodeRequestMarshaller = Marshallers.Create<Stellar.SCSymbolDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSymbolDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCSymbolDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCSymbolDecodeResponse> SCSymbolDecodeResponseMarshaller = Marshallers.Create<Stellar.SCSymbolDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCSymbolDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCNonceKeyEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCNonceKeyEncodeRequest> SCNonceKeyEncodeRequestMarshaller = Marshallers.Create<Stellar.SCNonceKeyEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCNonceKeyEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCNonceKeyEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCNonceKeyEncodeResponse> SCNonceKeyEncodeResponseMarshaller = Marshallers.Create<Stellar.SCNonceKeyEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCNonceKeyEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCNonceKeyDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCNonceKeyDecodeRequest> SCNonceKeyDecodeRequestMarshaller = Marshallers.Create<Stellar.SCNonceKeyDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCNonceKeyDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCNonceKeyDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCNonceKeyDecodeResponse> SCNonceKeyDecodeResponseMarshaller = Marshallers.Create<Stellar.SCNonceKeyDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCNonceKeyDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCContractInstanceEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCContractInstanceEncodeRequest> SCContractInstanceEncodeRequestMarshaller = Marshallers.Create<Stellar.SCContractInstanceEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCContractInstanceEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCContractInstanceEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCContractInstanceEncodeResponse> SCContractInstanceEncodeResponseMarshaller = Marshallers.Create<Stellar.SCContractInstanceEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCContractInstanceEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCContractInstanceDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCContractInstanceDecodeRequest> SCContractInstanceDecodeRequestMarshaller = Marshallers.Create<Stellar.SCContractInstanceDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCContractInstanceDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCContractInstanceDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCContractInstanceDecodeResponse> SCContractInstanceDecodeResponseMarshaller = Marshallers.Create<Stellar.SCContractInstanceDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCContractInstanceDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCValEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCValEncodeRequest> SCValEncodeRequestMarshaller = Marshallers.Create<Stellar.SCValEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCValEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCValEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCValEncodeResponse> SCValEncodeResponseMarshaller = Marshallers.Create<Stellar.SCValEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCValEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCValDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCValDecodeRequest> SCValDecodeRequestMarshaller = Marshallers.Create<Stellar.SCValDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCValDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCValDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCValDecodeResponse> SCValDecodeResponseMarshaller = Marshallers.Create<Stellar.SCValDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCValDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCMapEntryEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCMapEntryEncodeRequest> SCMapEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.SCMapEntryEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCMapEntryEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCMapEntryEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCMapEntryEncodeResponse> SCMapEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.SCMapEntryEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCMapEntryEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCMapEntryDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCMapEntryDecodeRequest> SCMapEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.SCMapEntryDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCMapEntryDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCMapEntryDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCMapEntryDecodeResponse> SCMapEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.SCMapEntryDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCMapEntryDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for StoredTransactionSetEncodeRequest</summary>
        public static readonly Marshaller<Stellar.StoredTransactionSetEncodeRequest> StoredTransactionSetEncodeRequestMarshaller = Marshallers.Create<Stellar.StoredTransactionSetEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.StoredTransactionSetEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for StoredTransactionSetEncodeResponse</summary>
        public static readonly Marshaller<Stellar.StoredTransactionSetEncodeResponse> StoredTransactionSetEncodeResponseMarshaller = Marshallers.Create<Stellar.StoredTransactionSetEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.StoredTransactionSetEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for StoredTransactionSetDecodeRequest</summary>
        public static readonly Marshaller<Stellar.StoredTransactionSetDecodeRequest> StoredTransactionSetDecodeRequestMarshaller = Marshallers.Create<Stellar.StoredTransactionSetDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.StoredTransactionSetDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for StoredTransactionSetDecodeResponse</summary>
        public static readonly Marshaller<Stellar.StoredTransactionSetDecodeResponse> StoredTransactionSetDecodeResponseMarshaller = Marshallers.Create<Stellar.StoredTransactionSetDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.StoredTransactionSetDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for StoredDebugTransactionSetEncodeRequest</summary>
        public static readonly Marshaller<Stellar.StoredDebugTransactionSetEncodeRequest> StoredDebugTransactionSetEncodeRequestMarshaller = Marshallers.Create<Stellar.StoredDebugTransactionSetEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.StoredDebugTransactionSetEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for StoredDebugTransactionSetEncodeResponse</summary>
        public static readonly Marshaller<Stellar.StoredDebugTransactionSetEncodeResponse> StoredDebugTransactionSetEncodeResponseMarshaller = Marshallers.Create<Stellar.StoredDebugTransactionSetEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.StoredDebugTransactionSetEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for StoredDebugTransactionSetDecodeRequest</summary>
        public static readonly Marshaller<Stellar.StoredDebugTransactionSetDecodeRequest> StoredDebugTransactionSetDecodeRequestMarshaller = Marshallers.Create<Stellar.StoredDebugTransactionSetDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.StoredDebugTransactionSetDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for StoredDebugTransactionSetDecodeResponse</summary>
        public static readonly Marshaller<Stellar.StoredDebugTransactionSetDecodeResponse> StoredDebugTransactionSetDecodeResponseMarshaller = Marshallers.Create<Stellar.StoredDebugTransactionSetDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.StoredDebugTransactionSetDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PersistedSCPStateV0EncodeRequest</summary>
        public static readonly Marshaller<Stellar.PersistedSCPStateV0EncodeRequest> PersistedSCPStateV0EncodeRequestMarshaller = Marshallers.Create<Stellar.PersistedSCPStateV0EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PersistedSCPStateV0EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PersistedSCPStateV0EncodeResponse</summary>
        public static readonly Marshaller<Stellar.PersistedSCPStateV0EncodeResponse> PersistedSCPStateV0EncodeResponseMarshaller = Marshallers.Create<Stellar.PersistedSCPStateV0EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PersistedSCPStateV0EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PersistedSCPStateV0DecodeRequest</summary>
        public static readonly Marshaller<Stellar.PersistedSCPStateV0DecodeRequest> PersistedSCPStateV0DecodeRequestMarshaller = Marshallers.Create<Stellar.PersistedSCPStateV0DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PersistedSCPStateV0DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PersistedSCPStateV0DecodeResponse</summary>
        public static readonly Marshaller<Stellar.PersistedSCPStateV0DecodeResponse> PersistedSCPStateV0DecodeResponseMarshaller = Marshallers.Create<Stellar.PersistedSCPStateV0DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PersistedSCPStateV0DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PersistedSCPStateV1EncodeRequest</summary>
        public static readonly Marshaller<Stellar.PersistedSCPStateV1EncodeRequest> PersistedSCPStateV1EncodeRequestMarshaller = Marshallers.Create<Stellar.PersistedSCPStateV1EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PersistedSCPStateV1EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PersistedSCPStateV1EncodeResponse</summary>
        public static readonly Marshaller<Stellar.PersistedSCPStateV1EncodeResponse> PersistedSCPStateV1EncodeResponseMarshaller = Marshallers.Create<Stellar.PersistedSCPStateV1EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PersistedSCPStateV1EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PersistedSCPStateV1DecodeRequest</summary>
        public static readonly Marshaller<Stellar.PersistedSCPStateV1DecodeRequest> PersistedSCPStateV1DecodeRequestMarshaller = Marshallers.Create<Stellar.PersistedSCPStateV1DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PersistedSCPStateV1DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PersistedSCPStateV1DecodeResponse</summary>
        public static readonly Marshaller<Stellar.PersistedSCPStateV1DecodeResponse> PersistedSCPStateV1DecodeResponseMarshaller = Marshallers.Create<Stellar.PersistedSCPStateV1DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PersistedSCPStateV1DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PersistedSCPStateEncodeRequest</summary>
        public static readonly Marshaller<Stellar.PersistedSCPStateEncodeRequest> PersistedSCPStateEncodeRequestMarshaller = Marshallers.Create<Stellar.PersistedSCPStateEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PersistedSCPStateEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PersistedSCPStateEncodeResponse</summary>
        public static readonly Marshaller<Stellar.PersistedSCPStateEncodeResponse> PersistedSCPStateEncodeResponseMarshaller = Marshallers.Create<Stellar.PersistedSCPStateEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PersistedSCPStateEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PersistedSCPStateDecodeRequest</summary>
        public static readonly Marshaller<Stellar.PersistedSCPStateDecodeRequest> PersistedSCPStateDecodeRequestMarshaller = Marshallers.Create<Stellar.PersistedSCPStateDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PersistedSCPStateDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PersistedSCPStateDecodeResponse</summary>
        public static readonly Marshaller<Stellar.PersistedSCPStateDecodeResponse> PersistedSCPStateDecodeResponseMarshaller = Marshallers.Create<Stellar.PersistedSCPStateDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PersistedSCPStateDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ThresholdsEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ThresholdsEncodeRequest> ThresholdsEncodeRequestMarshaller = Marshallers.Create<Stellar.ThresholdsEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ThresholdsEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ThresholdsEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ThresholdsEncodeResponse> ThresholdsEncodeResponseMarshaller = Marshallers.Create<Stellar.ThresholdsEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ThresholdsEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ThresholdsDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ThresholdsDecodeRequest> ThresholdsDecodeRequestMarshaller = Marshallers.Create<Stellar.ThresholdsDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ThresholdsDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ThresholdsDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ThresholdsDecodeResponse> ThresholdsDecodeResponseMarshaller = Marshallers.Create<Stellar.ThresholdsDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ThresholdsDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for string32EncodeRequest</summary>
        public static readonly Marshaller<Stellar.string32EncodeRequest> string32EncodeRequestMarshaller = Marshallers.Create<Stellar.string32EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.string32EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for string32EncodeResponse</summary>
        public static readonly Marshaller<Stellar.string32EncodeResponse> string32EncodeResponseMarshaller = Marshallers.Create<Stellar.string32EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.string32EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for string32DecodeRequest</summary>
        public static readonly Marshaller<Stellar.string32DecodeRequest> string32DecodeRequestMarshaller = Marshallers.Create<Stellar.string32DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.string32DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for string32DecodeResponse</summary>
        public static readonly Marshaller<Stellar.string32DecodeResponse> string32DecodeResponseMarshaller = Marshallers.Create<Stellar.string32DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.string32DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for string64EncodeRequest</summary>
        public static readonly Marshaller<Stellar.string64EncodeRequest> string64EncodeRequestMarshaller = Marshallers.Create<Stellar.string64EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.string64EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for string64EncodeResponse</summary>
        public static readonly Marshaller<Stellar.string64EncodeResponse> string64EncodeResponseMarshaller = Marshallers.Create<Stellar.string64EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.string64EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for string64DecodeRequest</summary>
        public static readonly Marshaller<Stellar.string64DecodeRequest> string64DecodeRequestMarshaller = Marshallers.Create<Stellar.string64DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.string64DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for string64DecodeResponse</summary>
        public static readonly Marshaller<Stellar.string64DecodeResponse> string64DecodeResponseMarshaller = Marshallers.Create<Stellar.string64DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.string64DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SequenceNumberEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SequenceNumberEncodeRequest> SequenceNumberEncodeRequestMarshaller = Marshallers.Create<Stellar.SequenceNumberEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SequenceNumberEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SequenceNumberEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SequenceNumberEncodeResponse> SequenceNumberEncodeResponseMarshaller = Marshallers.Create<Stellar.SequenceNumberEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SequenceNumberEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SequenceNumberDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SequenceNumberDecodeRequest> SequenceNumberDecodeRequestMarshaller = Marshallers.Create<Stellar.SequenceNumberDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SequenceNumberDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SequenceNumberDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SequenceNumberDecodeResponse> SequenceNumberDecodeResponseMarshaller = Marshallers.Create<Stellar.SequenceNumberDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SequenceNumberDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DataValueEncodeRequest</summary>
        public static readonly Marshaller<Stellar.DataValueEncodeRequest> DataValueEncodeRequestMarshaller = Marshallers.Create<Stellar.DataValueEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DataValueEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DataValueEncodeResponse</summary>
        public static readonly Marshaller<Stellar.DataValueEncodeResponse> DataValueEncodeResponseMarshaller = Marshallers.Create<Stellar.DataValueEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DataValueEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DataValueDecodeRequest</summary>
        public static readonly Marshaller<Stellar.DataValueDecodeRequest> DataValueDecodeRequestMarshaller = Marshallers.Create<Stellar.DataValueDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DataValueDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DataValueDecodeResponse</summary>
        public static readonly Marshaller<Stellar.DataValueDecodeResponse> DataValueDecodeResponseMarshaller = Marshallers.Create<Stellar.DataValueDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DataValueDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PoolIDEncodeRequest</summary>
        public static readonly Marshaller<Stellar.PoolIDEncodeRequest> PoolIDEncodeRequestMarshaller = Marshallers.Create<Stellar.PoolIDEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PoolIDEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PoolIDEncodeResponse</summary>
        public static readonly Marshaller<Stellar.PoolIDEncodeResponse> PoolIDEncodeResponseMarshaller = Marshallers.Create<Stellar.PoolIDEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PoolIDEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PoolIDDecodeRequest</summary>
        public static readonly Marshaller<Stellar.PoolIDDecodeRequest> PoolIDDecodeRequestMarshaller = Marshallers.Create<Stellar.PoolIDDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PoolIDDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PoolIDDecodeResponse</summary>
        public static readonly Marshaller<Stellar.PoolIDDecodeResponse> PoolIDDecodeResponseMarshaller = Marshallers.Create<Stellar.PoolIDDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PoolIDDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AssetCode4EncodeRequest</summary>
        public static readonly Marshaller<Stellar.AssetCode4EncodeRequest> AssetCode4EncodeRequestMarshaller = Marshallers.Create<Stellar.AssetCode4EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AssetCode4EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AssetCode4EncodeResponse</summary>
        public static readonly Marshaller<Stellar.AssetCode4EncodeResponse> AssetCode4EncodeResponseMarshaller = Marshallers.Create<Stellar.AssetCode4EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AssetCode4EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AssetCode4DecodeRequest</summary>
        public static readonly Marshaller<Stellar.AssetCode4DecodeRequest> AssetCode4DecodeRequestMarshaller = Marshallers.Create<Stellar.AssetCode4DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AssetCode4DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AssetCode4DecodeResponse</summary>
        public static readonly Marshaller<Stellar.AssetCode4DecodeResponse> AssetCode4DecodeResponseMarshaller = Marshallers.Create<Stellar.AssetCode4DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AssetCode4DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AssetCode12EncodeRequest</summary>
        public static readonly Marshaller<Stellar.AssetCode12EncodeRequest> AssetCode12EncodeRequestMarshaller = Marshallers.Create<Stellar.AssetCode12EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AssetCode12EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AssetCode12EncodeResponse</summary>
        public static readonly Marshaller<Stellar.AssetCode12EncodeResponse> AssetCode12EncodeResponseMarshaller = Marshallers.Create<Stellar.AssetCode12EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AssetCode12EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AssetCode12DecodeRequest</summary>
        public static readonly Marshaller<Stellar.AssetCode12DecodeRequest> AssetCode12DecodeRequestMarshaller = Marshallers.Create<Stellar.AssetCode12DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AssetCode12DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AssetCode12DecodeResponse</summary>
        public static readonly Marshaller<Stellar.AssetCode12DecodeResponse> AssetCode12DecodeResponseMarshaller = Marshallers.Create<Stellar.AssetCode12DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AssetCode12DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AssetTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.AssetTypeEncodeRequest> AssetTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.AssetTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AssetTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AssetTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.AssetTypeEncodeResponse> AssetTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.AssetTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AssetTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AssetTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.AssetTypeDecodeRequest> AssetTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.AssetTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AssetTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AssetTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.AssetTypeDecodeResponse> AssetTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.AssetTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AssetTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AssetCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.AssetCodeEncodeRequest> AssetCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.AssetCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AssetCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AssetCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.AssetCodeEncodeResponse> AssetCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.AssetCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AssetCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AssetCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.AssetCodeDecodeRequest> AssetCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.AssetCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AssetCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AssetCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.AssetCodeDecodeResponse> AssetCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.AssetCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AssetCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AlphaNum4EncodeRequest</summary>
        public static readonly Marshaller<Stellar.AlphaNum4EncodeRequest> AlphaNum4EncodeRequestMarshaller = Marshallers.Create<Stellar.AlphaNum4EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AlphaNum4EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AlphaNum4EncodeResponse</summary>
        public static readonly Marshaller<Stellar.AlphaNum4EncodeResponse> AlphaNum4EncodeResponseMarshaller = Marshallers.Create<Stellar.AlphaNum4EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AlphaNum4EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AlphaNum4DecodeRequest</summary>
        public static readonly Marshaller<Stellar.AlphaNum4DecodeRequest> AlphaNum4DecodeRequestMarshaller = Marshallers.Create<Stellar.AlphaNum4DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AlphaNum4DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AlphaNum4DecodeResponse</summary>
        public static readonly Marshaller<Stellar.AlphaNum4DecodeResponse> AlphaNum4DecodeResponseMarshaller = Marshallers.Create<Stellar.AlphaNum4DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AlphaNum4DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AlphaNum12EncodeRequest</summary>
        public static readonly Marshaller<Stellar.AlphaNum12EncodeRequest> AlphaNum12EncodeRequestMarshaller = Marshallers.Create<Stellar.AlphaNum12EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AlphaNum12EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AlphaNum12EncodeResponse</summary>
        public static readonly Marshaller<Stellar.AlphaNum12EncodeResponse> AlphaNum12EncodeResponseMarshaller = Marshallers.Create<Stellar.AlphaNum12EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AlphaNum12EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AlphaNum12DecodeRequest</summary>
        public static readonly Marshaller<Stellar.AlphaNum12DecodeRequest> AlphaNum12DecodeRequestMarshaller = Marshallers.Create<Stellar.AlphaNum12DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AlphaNum12DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AlphaNum12DecodeResponse</summary>
        public static readonly Marshaller<Stellar.AlphaNum12DecodeResponse> AlphaNum12DecodeResponseMarshaller = Marshallers.Create<Stellar.AlphaNum12DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AlphaNum12DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AssetEncodeRequest</summary>
        public static readonly Marshaller<Stellar.AssetEncodeRequest> AssetEncodeRequestMarshaller = Marshallers.Create<Stellar.AssetEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AssetEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AssetEncodeResponse</summary>
        public static readonly Marshaller<Stellar.AssetEncodeResponse> AssetEncodeResponseMarshaller = Marshallers.Create<Stellar.AssetEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AssetEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AssetDecodeRequest</summary>
        public static readonly Marshaller<Stellar.AssetDecodeRequest> AssetDecodeRequestMarshaller = Marshallers.Create<Stellar.AssetDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AssetDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AssetDecodeResponse</summary>
        public static readonly Marshaller<Stellar.AssetDecodeResponse> AssetDecodeResponseMarshaller = Marshallers.Create<Stellar.AssetDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AssetDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PriceEncodeRequest</summary>
        public static readonly Marshaller<Stellar.PriceEncodeRequest> PriceEncodeRequestMarshaller = Marshallers.Create<Stellar.PriceEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PriceEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PriceEncodeResponse</summary>
        public static readonly Marshaller<Stellar.PriceEncodeResponse> PriceEncodeResponseMarshaller = Marshallers.Create<Stellar.PriceEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PriceEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PriceDecodeRequest</summary>
        public static readonly Marshaller<Stellar.PriceDecodeRequest> PriceDecodeRequestMarshaller = Marshallers.Create<Stellar.PriceDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PriceDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PriceDecodeResponse</summary>
        public static readonly Marshaller<Stellar.PriceDecodeResponse> PriceDecodeResponseMarshaller = Marshallers.Create<Stellar.PriceDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PriceDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiabilitiesEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LiabilitiesEncodeRequest> LiabilitiesEncodeRequestMarshaller = Marshallers.Create<Stellar.LiabilitiesEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiabilitiesEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiabilitiesEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LiabilitiesEncodeResponse> LiabilitiesEncodeResponseMarshaller = Marshallers.Create<Stellar.LiabilitiesEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiabilitiesEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiabilitiesDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LiabilitiesDecodeRequest> LiabilitiesDecodeRequestMarshaller = Marshallers.Create<Stellar.LiabilitiesDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiabilitiesDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiabilitiesDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LiabilitiesDecodeResponse> LiabilitiesDecodeResponseMarshaller = Marshallers.Create<Stellar.LiabilitiesDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiabilitiesDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ThresholdIndexesEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ThresholdIndexesEncodeRequest> ThresholdIndexesEncodeRequestMarshaller = Marshallers.Create<Stellar.ThresholdIndexesEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ThresholdIndexesEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ThresholdIndexesEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ThresholdIndexesEncodeResponse> ThresholdIndexesEncodeResponseMarshaller = Marshallers.Create<Stellar.ThresholdIndexesEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ThresholdIndexesEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ThresholdIndexesDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ThresholdIndexesDecodeRequest> ThresholdIndexesDecodeRequestMarshaller = Marshallers.Create<Stellar.ThresholdIndexesDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ThresholdIndexesDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ThresholdIndexesDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ThresholdIndexesDecodeResponse> ThresholdIndexesDecodeResponseMarshaller = Marshallers.Create<Stellar.ThresholdIndexesDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ThresholdIndexesDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerEntryTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerEntryTypeEncodeRequest> LedgerEntryTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerEntryTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerEntryTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerEntryTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerEntryTypeEncodeResponse> LedgerEntryTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerEntryTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerEntryTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerEntryTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerEntryTypeDecodeRequest> LedgerEntryTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerEntryTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerEntryTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerEntryTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerEntryTypeDecodeResponse> LedgerEntryTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerEntryTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerEntryTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignerEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SignerEncodeRequest> SignerEncodeRequestMarshaller = Marshallers.Create<Stellar.SignerEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignerEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignerEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SignerEncodeResponse> SignerEncodeResponseMarshaller = Marshallers.Create<Stellar.SignerEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignerEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignerDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SignerDecodeRequest> SignerDecodeRequestMarshaller = Marshallers.Create<Stellar.SignerDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignerDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignerDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SignerDecodeResponse> SignerDecodeResponseMarshaller = Marshallers.Create<Stellar.SignerDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignerDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountFlagsEncodeRequest</summary>
        public static readonly Marshaller<Stellar.AccountFlagsEncodeRequest> AccountFlagsEncodeRequestMarshaller = Marshallers.Create<Stellar.AccountFlagsEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountFlagsEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountFlagsEncodeResponse</summary>
        public static readonly Marshaller<Stellar.AccountFlagsEncodeResponse> AccountFlagsEncodeResponseMarshaller = Marshallers.Create<Stellar.AccountFlagsEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountFlagsEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountFlagsDecodeRequest</summary>
        public static readonly Marshaller<Stellar.AccountFlagsDecodeRequest> AccountFlagsDecodeRequestMarshaller = Marshallers.Create<Stellar.AccountFlagsDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountFlagsDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountFlagsDecodeResponse</summary>
        public static readonly Marshaller<Stellar.AccountFlagsDecodeResponse> AccountFlagsDecodeResponseMarshaller = Marshallers.Create<Stellar.AccountFlagsDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountFlagsDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SponsorshipDescriptorEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SponsorshipDescriptorEncodeRequest> SponsorshipDescriptorEncodeRequestMarshaller = Marshallers.Create<Stellar.SponsorshipDescriptorEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SponsorshipDescriptorEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SponsorshipDescriptorEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SponsorshipDescriptorEncodeResponse> SponsorshipDescriptorEncodeResponseMarshaller = Marshallers.Create<Stellar.SponsorshipDescriptorEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SponsorshipDescriptorEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SponsorshipDescriptorDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SponsorshipDescriptorDecodeRequest> SponsorshipDescriptorDecodeRequestMarshaller = Marshallers.Create<Stellar.SponsorshipDescriptorDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SponsorshipDescriptorDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SponsorshipDescriptorDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SponsorshipDescriptorDecodeResponse> SponsorshipDescriptorDecodeResponseMarshaller = Marshallers.Create<Stellar.SponsorshipDescriptorDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SponsorshipDescriptorDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountEntryExtensionV3EncodeRequest</summary>
        public static readonly Marshaller<Stellar.AccountEntryExtensionV3EncodeRequest> AccountEntryExtensionV3EncodeRequestMarshaller = Marshallers.Create<Stellar.AccountEntryExtensionV3EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountEntryExtensionV3EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountEntryExtensionV3EncodeResponse</summary>
        public static readonly Marshaller<Stellar.AccountEntryExtensionV3EncodeResponse> AccountEntryExtensionV3EncodeResponseMarshaller = Marshallers.Create<Stellar.AccountEntryExtensionV3EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountEntryExtensionV3EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountEntryExtensionV3DecodeRequest</summary>
        public static readonly Marshaller<Stellar.AccountEntryExtensionV3DecodeRequest> AccountEntryExtensionV3DecodeRequestMarshaller = Marshallers.Create<Stellar.AccountEntryExtensionV3DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountEntryExtensionV3DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountEntryExtensionV3DecodeResponse</summary>
        public static readonly Marshaller<Stellar.AccountEntryExtensionV3DecodeResponse> AccountEntryExtensionV3DecodeResponseMarshaller = Marshallers.Create<Stellar.AccountEntryExtensionV3DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountEntryExtensionV3DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountEntryExtensionV2EncodeRequest</summary>
        public static readonly Marshaller<Stellar.AccountEntryExtensionV2EncodeRequest> AccountEntryExtensionV2EncodeRequestMarshaller = Marshallers.Create<Stellar.AccountEntryExtensionV2EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountEntryExtensionV2EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountEntryExtensionV2EncodeResponse</summary>
        public static readonly Marshaller<Stellar.AccountEntryExtensionV2EncodeResponse> AccountEntryExtensionV2EncodeResponseMarshaller = Marshallers.Create<Stellar.AccountEntryExtensionV2EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountEntryExtensionV2EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountEntryExtensionV2DecodeRequest</summary>
        public static readonly Marshaller<Stellar.AccountEntryExtensionV2DecodeRequest> AccountEntryExtensionV2DecodeRequestMarshaller = Marshallers.Create<Stellar.AccountEntryExtensionV2DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountEntryExtensionV2DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountEntryExtensionV2DecodeResponse</summary>
        public static readonly Marshaller<Stellar.AccountEntryExtensionV2DecodeResponse> AccountEntryExtensionV2DecodeResponseMarshaller = Marshallers.Create<Stellar.AccountEntryExtensionV2DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountEntryExtensionV2DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountEntryExtensionV1EncodeRequest</summary>
        public static readonly Marshaller<Stellar.AccountEntryExtensionV1EncodeRequest> AccountEntryExtensionV1EncodeRequestMarshaller = Marshallers.Create<Stellar.AccountEntryExtensionV1EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountEntryExtensionV1EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountEntryExtensionV1EncodeResponse</summary>
        public static readonly Marshaller<Stellar.AccountEntryExtensionV1EncodeResponse> AccountEntryExtensionV1EncodeResponseMarshaller = Marshallers.Create<Stellar.AccountEntryExtensionV1EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountEntryExtensionV1EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountEntryExtensionV1DecodeRequest</summary>
        public static readonly Marshaller<Stellar.AccountEntryExtensionV1DecodeRequest> AccountEntryExtensionV1DecodeRequestMarshaller = Marshallers.Create<Stellar.AccountEntryExtensionV1DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountEntryExtensionV1DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountEntryExtensionV1DecodeResponse</summary>
        public static readonly Marshaller<Stellar.AccountEntryExtensionV1DecodeResponse> AccountEntryExtensionV1DecodeResponseMarshaller = Marshallers.Create<Stellar.AccountEntryExtensionV1DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountEntryExtensionV1DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountEntryEncodeRequest</summary>
        public static readonly Marshaller<Stellar.AccountEntryEncodeRequest> AccountEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.AccountEntryEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountEntryEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountEntryEncodeResponse</summary>
        public static readonly Marshaller<Stellar.AccountEntryEncodeResponse> AccountEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.AccountEntryEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountEntryEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountEntryDecodeRequest</summary>
        public static readonly Marshaller<Stellar.AccountEntryDecodeRequest> AccountEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.AccountEntryDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountEntryDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountEntryDecodeResponse</summary>
        public static readonly Marshaller<Stellar.AccountEntryDecodeResponse> AccountEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.AccountEntryDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountEntryDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TrustLineFlagsEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TrustLineFlagsEncodeRequest> TrustLineFlagsEncodeRequestMarshaller = Marshallers.Create<Stellar.TrustLineFlagsEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TrustLineFlagsEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TrustLineFlagsEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TrustLineFlagsEncodeResponse> TrustLineFlagsEncodeResponseMarshaller = Marshallers.Create<Stellar.TrustLineFlagsEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TrustLineFlagsEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TrustLineFlagsDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TrustLineFlagsDecodeRequest> TrustLineFlagsDecodeRequestMarshaller = Marshallers.Create<Stellar.TrustLineFlagsDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TrustLineFlagsDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TrustLineFlagsDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TrustLineFlagsDecodeResponse> TrustLineFlagsDecodeResponseMarshaller = Marshallers.Create<Stellar.TrustLineFlagsDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TrustLineFlagsDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolTypeEncodeRequest> LiquidityPoolTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolTypeEncodeResponse> LiquidityPoolTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolTypeDecodeRequest> LiquidityPoolTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolTypeDecodeResponse> LiquidityPoolTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TrustLineAssetEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TrustLineAssetEncodeRequest> TrustLineAssetEncodeRequestMarshaller = Marshallers.Create<Stellar.TrustLineAssetEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TrustLineAssetEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TrustLineAssetEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TrustLineAssetEncodeResponse> TrustLineAssetEncodeResponseMarshaller = Marshallers.Create<Stellar.TrustLineAssetEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TrustLineAssetEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TrustLineAssetDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TrustLineAssetDecodeRequest> TrustLineAssetDecodeRequestMarshaller = Marshallers.Create<Stellar.TrustLineAssetDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TrustLineAssetDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TrustLineAssetDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TrustLineAssetDecodeResponse> TrustLineAssetDecodeResponseMarshaller = Marshallers.Create<Stellar.TrustLineAssetDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TrustLineAssetDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TrustLineEntryExtensionV2EncodeRequest</summary>
        public static readonly Marshaller<Stellar.TrustLineEntryExtensionV2EncodeRequest> TrustLineEntryExtensionV2EncodeRequestMarshaller = Marshallers.Create<Stellar.TrustLineEntryExtensionV2EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TrustLineEntryExtensionV2EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TrustLineEntryExtensionV2EncodeResponse</summary>
        public static readonly Marshaller<Stellar.TrustLineEntryExtensionV2EncodeResponse> TrustLineEntryExtensionV2EncodeResponseMarshaller = Marshallers.Create<Stellar.TrustLineEntryExtensionV2EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TrustLineEntryExtensionV2EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TrustLineEntryExtensionV2DecodeRequest</summary>
        public static readonly Marshaller<Stellar.TrustLineEntryExtensionV2DecodeRequest> TrustLineEntryExtensionV2DecodeRequestMarshaller = Marshallers.Create<Stellar.TrustLineEntryExtensionV2DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TrustLineEntryExtensionV2DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TrustLineEntryExtensionV2DecodeResponse</summary>
        public static readonly Marshaller<Stellar.TrustLineEntryExtensionV2DecodeResponse> TrustLineEntryExtensionV2DecodeResponseMarshaller = Marshallers.Create<Stellar.TrustLineEntryExtensionV2DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TrustLineEntryExtensionV2DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TrustLineEntryEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TrustLineEntryEncodeRequest> TrustLineEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.TrustLineEntryEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TrustLineEntryEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TrustLineEntryEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TrustLineEntryEncodeResponse> TrustLineEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.TrustLineEntryEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TrustLineEntryEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TrustLineEntryDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TrustLineEntryDecodeRequest> TrustLineEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.TrustLineEntryDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TrustLineEntryDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TrustLineEntryDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TrustLineEntryDecodeResponse> TrustLineEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.TrustLineEntryDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TrustLineEntryDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OfferEntryFlagsEncodeRequest</summary>
        public static readonly Marshaller<Stellar.OfferEntryFlagsEncodeRequest> OfferEntryFlagsEncodeRequestMarshaller = Marshallers.Create<Stellar.OfferEntryFlagsEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OfferEntryFlagsEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OfferEntryFlagsEncodeResponse</summary>
        public static readonly Marshaller<Stellar.OfferEntryFlagsEncodeResponse> OfferEntryFlagsEncodeResponseMarshaller = Marshallers.Create<Stellar.OfferEntryFlagsEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OfferEntryFlagsEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OfferEntryFlagsDecodeRequest</summary>
        public static readonly Marshaller<Stellar.OfferEntryFlagsDecodeRequest> OfferEntryFlagsDecodeRequestMarshaller = Marshallers.Create<Stellar.OfferEntryFlagsDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OfferEntryFlagsDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OfferEntryFlagsDecodeResponse</summary>
        public static readonly Marshaller<Stellar.OfferEntryFlagsDecodeResponse> OfferEntryFlagsDecodeResponseMarshaller = Marshallers.Create<Stellar.OfferEntryFlagsDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OfferEntryFlagsDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OfferEntryEncodeRequest</summary>
        public static readonly Marshaller<Stellar.OfferEntryEncodeRequest> OfferEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.OfferEntryEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OfferEntryEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OfferEntryEncodeResponse</summary>
        public static readonly Marshaller<Stellar.OfferEntryEncodeResponse> OfferEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.OfferEntryEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OfferEntryEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OfferEntryDecodeRequest</summary>
        public static readonly Marshaller<Stellar.OfferEntryDecodeRequest> OfferEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.OfferEntryDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OfferEntryDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OfferEntryDecodeResponse</summary>
        public static readonly Marshaller<Stellar.OfferEntryDecodeResponse> OfferEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.OfferEntryDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OfferEntryDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DataEntryEncodeRequest</summary>
        public static readonly Marshaller<Stellar.DataEntryEncodeRequest> DataEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.DataEntryEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DataEntryEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DataEntryEncodeResponse</summary>
        public static readonly Marshaller<Stellar.DataEntryEncodeResponse> DataEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.DataEntryEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DataEntryEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DataEntryDecodeRequest</summary>
        public static readonly Marshaller<Stellar.DataEntryDecodeRequest> DataEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.DataEntryDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DataEntryDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DataEntryDecodeResponse</summary>
        public static readonly Marshaller<Stellar.DataEntryDecodeResponse> DataEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.DataEntryDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DataEntryDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimPredicateTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimPredicateTypeEncodeRequest> ClaimPredicateTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimPredicateTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimPredicateTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimPredicateTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimPredicateTypeEncodeResponse> ClaimPredicateTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimPredicateTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimPredicateTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimPredicateTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimPredicateTypeDecodeRequest> ClaimPredicateTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimPredicateTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimPredicateTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimPredicateTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimPredicateTypeDecodeResponse> ClaimPredicateTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimPredicateTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimPredicateTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimPredicateEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimPredicateEncodeRequest> ClaimPredicateEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimPredicateEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimPredicateEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimPredicateEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimPredicateEncodeResponse> ClaimPredicateEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimPredicateEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimPredicateEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimPredicateDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimPredicateDecodeRequest> ClaimPredicateDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimPredicateDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimPredicateDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimPredicateDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimPredicateDecodeResponse> ClaimPredicateDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimPredicateDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimPredicateDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimantTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimantTypeEncodeRequest> ClaimantTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimantTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimantTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimantTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimantTypeEncodeResponse> ClaimantTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimantTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimantTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimantTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimantTypeDecodeRequest> ClaimantTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimantTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimantTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimantTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimantTypeDecodeResponse> ClaimantTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimantTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimantTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimantEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimantEncodeRequest> ClaimantEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimantEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimantEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimantEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimantEncodeResponse> ClaimantEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimantEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimantEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimantDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimantDecodeRequest> ClaimantDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimantDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimantDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimantDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimantDecodeResponse> ClaimantDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimantDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimantDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimableBalanceIDTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimableBalanceIDTypeEncodeRequest> ClaimableBalanceIDTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimableBalanceIDTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimableBalanceIDTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimableBalanceIDTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimableBalanceIDTypeEncodeResponse> ClaimableBalanceIDTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimableBalanceIDTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimableBalanceIDTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimableBalanceIDTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimableBalanceIDTypeDecodeRequest> ClaimableBalanceIDTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimableBalanceIDTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimableBalanceIDTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimableBalanceIDTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimableBalanceIDTypeDecodeResponse> ClaimableBalanceIDTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimableBalanceIDTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimableBalanceIDTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimableBalanceIDEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimableBalanceIDEncodeRequest> ClaimableBalanceIDEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimableBalanceIDEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimableBalanceIDEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimableBalanceIDEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimableBalanceIDEncodeResponse> ClaimableBalanceIDEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimableBalanceIDEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimableBalanceIDEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimableBalanceIDDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimableBalanceIDDecodeRequest> ClaimableBalanceIDDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimableBalanceIDDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimableBalanceIDDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimableBalanceIDDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimableBalanceIDDecodeResponse> ClaimableBalanceIDDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimableBalanceIDDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimableBalanceIDDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimableBalanceFlagsEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimableBalanceFlagsEncodeRequest> ClaimableBalanceFlagsEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimableBalanceFlagsEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimableBalanceFlagsEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimableBalanceFlagsEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimableBalanceFlagsEncodeResponse> ClaimableBalanceFlagsEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimableBalanceFlagsEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimableBalanceFlagsEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimableBalanceFlagsDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimableBalanceFlagsDecodeRequest> ClaimableBalanceFlagsDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimableBalanceFlagsDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimableBalanceFlagsDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimableBalanceFlagsDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimableBalanceFlagsDecodeResponse> ClaimableBalanceFlagsDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimableBalanceFlagsDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimableBalanceFlagsDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimableBalanceEntryExtensionV1EncodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimableBalanceEntryExtensionV1EncodeRequest> ClaimableBalanceEntryExtensionV1EncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimableBalanceEntryExtensionV1EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimableBalanceEntryExtensionV1EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimableBalanceEntryExtensionV1EncodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimableBalanceEntryExtensionV1EncodeResponse> ClaimableBalanceEntryExtensionV1EncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimableBalanceEntryExtensionV1EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimableBalanceEntryExtensionV1EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimableBalanceEntryExtensionV1DecodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimableBalanceEntryExtensionV1DecodeRequest> ClaimableBalanceEntryExtensionV1DecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimableBalanceEntryExtensionV1DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimableBalanceEntryExtensionV1DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimableBalanceEntryExtensionV1DecodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimableBalanceEntryExtensionV1DecodeResponse> ClaimableBalanceEntryExtensionV1DecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimableBalanceEntryExtensionV1DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimableBalanceEntryExtensionV1DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimableBalanceEntryEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimableBalanceEntryEncodeRequest> ClaimableBalanceEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimableBalanceEntryEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimableBalanceEntryEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimableBalanceEntryEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimableBalanceEntryEncodeResponse> ClaimableBalanceEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimableBalanceEntryEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimableBalanceEntryEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimableBalanceEntryDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimableBalanceEntryDecodeRequest> ClaimableBalanceEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimableBalanceEntryDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimableBalanceEntryDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimableBalanceEntryDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimableBalanceEntryDecodeResponse> ClaimableBalanceEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimableBalanceEntryDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimableBalanceEntryDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolConstantProductParametersEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolConstantProductParametersEncodeRequest> LiquidityPoolConstantProductParametersEncodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolConstantProductParametersEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolConstantProductParametersEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolConstantProductParametersEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolConstantProductParametersEncodeResponse> LiquidityPoolConstantProductParametersEncodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolConstantProductParametersEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolConstantProductParametersEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolConstantProductParametersDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolConstantProductParametersDecodeRequest> LiquidityPoolConstantProductParametersDecodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolConstantProductParametersDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolConstantProductParametersDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolConstantProductParametersDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolConstantProductParametersDecodeResponse> LiquidityPoolConstantProductParametersDecodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolConstantProductParametersDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolConstantProductParametersDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolEntryEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolEntryEncodeRequest> LiquidityPoolEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolEntryEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolEntryEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolEntryEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolEntryEncodeResponse> LiquidityPoolEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolEntryEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolEntryEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolEntryDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolEntryDecodeRequest> LiquidityPoolEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolEntryDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolEntryDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolEntryDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolEntryDecodeResponse> LiquidityPoolEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolEntryDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolEntryDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractDataDurabilityEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ContractDataDurabilityEncodeRequest> ContractDataDurabilityEncodeRequestMarshaller = Marshallers.Create<Stellar.ContractDataDurabilityEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractDataDurabilityEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractDataDurabilityEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ContractDataDurabilityEncodeResponse> ContractDataDurabilityEncodeResponseMarshaller = Marshallers.Create<Stellar.ContractDataDurabilityEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractDataDurabilityEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractDataDurabilityDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ContractDataDurabilityDecodeRequest> ContractDataDurabilityDecodeRequestMarshaller = Marshallers.Create<Stellar.ContractDataDurabilityDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractDataDurabilityDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractDataDurabilityDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ContractDataDurabilityDecodeResponse> ContractDataDurabilityDecodeResponseMarshaller = Marshallers.Create<Stellar.ContractDataDurabilityDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractDataDurabilityDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractDataEntryEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ContractDataEntryEncodeRequest> ContractDataEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.ContractDataEntryEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractDataEntryEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractDataEntryEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ContractDataEntryEncodeResponse> ContractDataEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.ContractDataEntryEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractDataEntryEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractDataEntryDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ContractDataEntryDecodeRequest> ContractDataEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.ContractDataEntryDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractDataEntryDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractDataEntryDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ContractDataEntryDecodeResponse> ContractDataEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.ContractDataEntryDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractDataEntryDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractCodeCostInputsEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ContractCodeCostInputsEncodeRequest> ContractCodeCostInputsEncodeRequestMarshaller = Marshallers.Create<Stellar.ContractCodeCostInputsEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractCodeCostInputsEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractCodeCostInputsEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ContractCodeCostInputsEncodeResponse> ContractCodeCostInputsEncodeResponseMarshaller = Marshallers.Create<Stellar.ContractCodeCostInputsEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractCodeCostInputsEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractCodeCostInputsDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ContractCodeCostInputsDecodeRequest> ContractCodeCostInputsDecodeRequestMarshaller = Marshallers.Create<Stellar.ContractCodeCostInputsDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractCodeCostInputsDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractCodeCostInputsDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ContractCodeCostInputsDecodeResponse> ContractCodeCostInputsDecodeResponseMarshaller = Marshallers.Create<Stellar.ContractCodeCostInputsDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractCodeCostInputsDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractCodeEntryEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ContractCodeEntryEncodeRequest> ContractCodeEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.ContractCodeEntryEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractCodeEntryEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractCodeEntryEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ContractCodeEntryEncodeResponse> ContractCodeEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.ContractCodeEntryEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractCodeEntryEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractCodeEntryDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ContractCodeEntryDecodeRequest> ContractCodeEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.ContractCodeEntryDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractCodeEntryDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractCodeEntryDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ContractCodeEntryDecodeResponse> ContractCodeEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.ContractCodeEntryDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractCodeEntryDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TTLEntryEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TTLEntryEncodeRequest> TTLEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.TTLEntryEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TTLEntryEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TTLEntryEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TTLEntryEncodeResponse> TTLEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.TTLEntryEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TTLEntryEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TTLEntryDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TTLEntryDecodeRequest> TTLEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.TTLEntryDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TTLEntryDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TTLEntryDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TTLEntryDecodeResponse> TTLEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.TTLEntryDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TTLEntryDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerEntryExtensionV1EncodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerEntryExtensionV1EncodeRequest> LedgerEntryExtensionV1EncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerEntryExtensionV1EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerEntryExtensionV1EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerEntryExtensionV1EncodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerEntryExtensionV1EncodeResponse> LedgerEntryExtensionV1EncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerEntryExtensionV1EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerEntryExtensionV1EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerEntryExtensionV1DecodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerEntryExtensionV1DecodeRequest> LedgerEntryExtensionV1DecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerEntryExtensionV1DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerEntryExtensionV1DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerEntryExtensionV1DecodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerEntryExtensionV1DecodeResponse> LedgerEntryExtensionV1DecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerEntryExtensionV1DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerEntryExtensionV1DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerEntryEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerEntryEncodeRequest> LedgerEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerEntryEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerEntryEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerEntryEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerEntryEncodeResponse> LedgerEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerEntryEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerEntryEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerEntryDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerEntryDecodeRequest> LedgerEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerEntryDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerEntryDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerEntryDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerEntryDecodeResponse> LedgerEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerEntryDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerEntryDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerKeyEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerKeyEncodeRequest> LedgerKeyEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerKeyEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerKeyEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerKeyEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerKeyEncodeResponse> LedgerKeyEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerKeyEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerKeyEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerKeyDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerKeyDecodeRequest> LedgerKeyDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerKeyDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerKeyDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerKeyDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerKeyDecodeResponse> LedgerKeyDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerKeyDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerKeyDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for EnvelopeTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.EnvelopeTypeEncodeRequest> EnvelopeTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.EnvelopeTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.EnvelopeTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for EnvelopeTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.EnvelopeTypeEncodeResponse> EnvelopeTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.EnvelopeTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.EnvelopeTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for EnvelopeTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.EnvelopeTypeDecodeRequest> EnvelopeTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.EnvelopeTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.EnvelopeTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for EnvelopeTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.EnvelopeTypeDecodeResponse> EnvelopeTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.EnvelopeTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.EnvelopeTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BucketListTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.BucketListTypeEncodeRequest> BucketListTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.BucketListTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BucketListTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BucketListTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.BucketListTypeEncodeResponse> BucketListTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.BucketListTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BucketListTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BucketListTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.BucketListTypeDecodeRequest> BucketListTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.BucketListTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BucketListTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BucketListTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.BucketListTypeDecodeResponse> BucketListTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.BucketListTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BucketListTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BucketEntryTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.BucketEntryTypeEncodeRequest> BucketEntryTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.BucketEntryTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BucketEntryTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BucketEntryTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.BucketEntryTypeEncodeResponse> BucketEntryTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.BucketEntryTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BucketEntryTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BucketEntryTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.BucketEntryTypeDecodeRequest> BucketEntryTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.BucketEntryTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BucketEntryTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BucketEntryTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.BucketEntryTypeDecodeResponse> BucketEntryTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.BucketEntryTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BucketEntryTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HotArchiveBucketEntryTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.HotArchiveBucketEntryTypeEncodeRequest> HotArchiveBucketEntryTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.HotArchiveBucketEntryTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HotArchiveBucketEntryTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HotArchiveBucketEntryTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.HotArchiveBucketEntryTypeEncodeResponse> HotArchiveBucketEntryTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.HotArchiveBucketEntryTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HotArchiveBucketEntryTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HotArchiveBucketEntryTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.HotArchiveBucketEntryTypeDecodeRequest> HotArchiveBucketEntryTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.HotArchiveBucketEntryTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HotArchiveBucketEntryTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HotArchiveBucketEntryTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.HotArchiveBucketEntryTypeDecodeResponse> HotArchiveBucketEntryTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.HotArchiveBucketEntryTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HotArchiveBucketEntryTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ColdArchiveBucketEntryTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ColdArchiveBucketEntryTypeEncodeRequest> ColdArchiveBucketEntryTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.ColdArchiveBucketEntryTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ColdArchiveBucketEntryTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ColdArchiveBucketEntryTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ColdArchiveBucketEntryTypeEncodeResponse> ColdArchiveBucketEntryTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.ColdArchiveBucketEntryTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ColdArchiveBucketEntryTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ColdArchiveBucketEntryTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ColdArchiveBucketEntryTypeDecodeRequest> ColdArchiveBucketEntryTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.ColdArchiveBucketEntryTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ColdArchiveBucketEntryTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ColdArchiveBucketEntryTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ColdArchiveBucketEntryTypeDecodeResponse> ColdArchiveBucketEntryTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.ColdArchiveBucketEntryTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ColdArchiveBucketEntryTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BucketMetadataEncodeRequest</summary>
        public static readonly Marshaller<Stellar.BucketMetadataEncodeRequest> BucketMetadataEncodeRequestMarshaller = Marshallers.Create<Stellar.BucketMetadataEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BucketMetadataEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BucketMetadataEncodeResponse</summary>
        public static readonly Marshaller<Stellar.BucketMetadataEncodeResponse> BucketMetadataEncodeResponseMarshaller = Marshallers.Create<Stellar.BucketMetadataEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BucketMetadataEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BucketMetadataDecodeRequest</summary>
        public static readonly Marshaller<Stellar.BucketMetadataDecodeRequest> BucketMetadataDecodeRequestMarshaller = Marshallers.Create<Stellar.BucketMetadataDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BucketMetadataDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BucketMetadataDecodeResponse</summary>
        public static readonly Marshaller<Stellar.BucketMetadataDecodeResponse> BucketMetadataDecodeResponseMarshaller = Marshallers.Create<Stellar.BucketMetadataDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BucketMetadataDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BucketEntryEncodeRequest</summary>
        public static readonly Marshaller<Stellar.BucketEntryEncodeRequest> BucketEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.BucketEntryEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BucketEntryEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BucketEntryEncodeResponse</summary>
        public static readonly Marshaller<Stellar.BucketEntryEncodeResponse> BucketEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.BucketEntryEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BucketEntryEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BucketEntryDecodeRequest</summary>
        public static readonly Marshaller<Stellar.BucketEntryDecodeRequest> BucketEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.BucketEntryDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BucketEntryDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BucketEntryDecodeResponse</summary>
        public static readonly Marshaller<Stellar.BucketEntryDecodeResponse> BucketEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.BucketEntryDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BucketEntryDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HotArchiveBucketEntryEncodeRequest</summary>
        public static readonly Marshaller<Stellar.HotArchiveBucketEntryEncodeRequest> HotArchiveBucketEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.HotArchiveBucketEntryEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HotArchiveBucketEntryEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HotArchiveBucketEntryEncodeResponse</summary>
        public static readonly Marshaller<Stellar.HotArchiveBucketEntryEncodeResponse> HotArchiveBucketEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.HotArchiveBucketEntryEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HotArchiveBucketEntryEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HotArchiveBucketEntryDecodeRequest</summary>
        public static readonly Marshaller<Stellar.HotArchiveBucketEntryDecodeRequest> HotArchiveBucketEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.HotArchiveBucketEntryDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HotArchiveBucketEntryDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HotArchiveBucketEntryDecodeResponse</summary>
        public static readonly Marshaller<Stellar.HotArchiveBucketEntryDecodeResponse> HotArchiveBucketEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.HotArchiveBucketEntryDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HotArchiveBucketEntryDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ColdArchiveArchivedLeafEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ColdArchiveArchivedLeafEncodeRequest> ColdArchiveArchivedLeafEncodeRequestMarshaller = Marshallers.Create<Stellar.ColdArchiveArchivedLeafEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ColdArchiveArchivedLeafEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ColdArchiveArchivedLeafEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ColdArchiveArchivedLeafEncodeResponse> ColdArchiveArchivedLeafEncodeResponseMarshaller = Marshallers.Create<Stellar.ColdArchiveArchivedLeafEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ColdArchiveArchivedLeafEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ColdArchiveArchivedLeafDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ColdArchiveArchivedLeafDecodeRequest> ColdArchiveArchivedLeafDecodeRequestMarshaller = Marshallers.Create<Stellar.ColdArchiveArchivedLeafDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ColdArchiveArchivedLeafDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ColdArchiveArchivedLeafDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ColdArchiveArchivedLeafDecodeResponse> ColdArchiveArchivedLeafDecodeResponseMarshaller = Marshallers.Create<Stellar.ColdArchiveArchivedLeafDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ColdArchiveArchivedLeafDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ColdArchiveDeletedLeafEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ColdArchiveDeletedLeafEncodeRequest> ColdArchiveDeletedLeafEncodeRequestMarshaller = Marshallers.Create<Stellar.ColdArchiveDeletedLeafEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ColdArchiveDeletedLeafEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ColdArchiveDeletedLeafEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ColdArchiveDeletedLeafEncodeResponse> ColdArchiveDeletedLeafEncodeResponseMarshaller = Marshallers.Create<Stellar.ColdArchiveDeletedLeafEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ColdArchiveDeletedLeafEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ColdArchiveDeletedLeafDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ColdArchiveDeletedLeafDecodeRequest> ColdArchiveDeletedLeafDecodeRequestMarshaller = Marshallers.Create<Stellar.ColdArchiveDeletedLeafDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ColdArchiveDeletedLeafDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ColdArchiveDeletedLeafDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ColdArchiveDeletedLeafDecodeResponse> ColdArchiveDeletedLeafDecodeResponseMarshaller = Marshallers.Create<Stellar.ColdArchiveDeletedLeafDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ColdArchiveDeletedLeafDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ColdArchiveBoundaryLeafEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ColdArchiveBoundaryLeafEncodeRequest> ColdArchiveBoundaryLeafEncodeRequestMarshaller = Marshallers.Create<Stellar.ColdArchiveBoundaryLeafEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ColdArchiveBoundaryLeafEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ColdArchiveBoundaryLeafEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ColdArchiveBoundaryLeafEncodeResponse> ColdArchiveBoundaryLeafEncodeResponseMarshaller = Marshallers.Create<Stellar.ColdArchiveBoundaryLeafEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ColdArchiveBoundaryLeafEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ColdArchiveBoundaryLeafDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ColdArchiveBoundaryLeafDecodeRequest> ColdArchiveBoundaryLeafDecodeRequestMarshaller = Marshallers.Create<Stellar.ColdArchiveBoundaryLeafDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ColdArchiveBoundaryLeafDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ColdArchiveBoundaryLeafDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ColdArchiveBoundaryLeafDecodeResponse> ColdArchiveBoundaryLeafDecodeResponseMarshaller = Marshallers.Create<Stellar.ColdArchiveBoundaryLeafDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ColdArchiveBoundaryLeafDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ColdArchiveHashEntryEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ColdArchiveHashEntryEncodeRequest> ColdArchiveHashEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.ColdArchiveHashEntryEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ColdArchiveHashEntryEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ColdArchiveHashEntryEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ColdArchiveHashEntryEncodeResponse> ColdArchiveHashEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.ColdArchiveHashEntryEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ColdArchiveHashEntryEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ColdArchiveHashEntryDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ColdArchiveHashEntryDecodeRequest> ColdArchiveHashEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.ColdArchiveHashEntryDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ColdArchiveHashEntryDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ColdArchiveHashEntryDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ColdArchiveHashEntryDecodeResponse> ColdArchiveHashEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.ColdArchiveHashEntryDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ColdArchiveHashEntryDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ColdArchiveBucketEntryEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ColdArchiveBucketEntryEncodeRequest> ColdArchiveBucketEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.ColdArchiveBucketEntryEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ColdArchiveBucketEntryEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ColdArchiveBucketEntryEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ColdArchiveBucketEntryEncodeResponse> ColdArchiveBucketEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.ColdArchiveBucketEntryEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ColdArchiveBucketEntryEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ColdArchiveBucketEntryDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ColdArchiveBucketEntryDecodeRequest> ColdArchiveBucketEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.ColdArchiveBucketEntryDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ColdArchiveBucketEntryDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ColdArchiveBucketEntryDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ColdArchiveBucketEntryDecodeResponse> ColdArchiveBucketEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.ColdArchiveBucketEntryDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ColdArchiveBucketEntryDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for UpgradeTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.UpgradeTypeEncodeRequest> UpgradeTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.UpgradeTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.UpgradeTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for UpgradeTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.UpgradeTypeEncodeResponse> UpgradeTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.UpgradeTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.UpgradeTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for UpgradeTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.UpgradeTypeDecodeRequest> UpgradeTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.UpgradeTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.UpgradeTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for UpgradeTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.UpgradeTypeDecodeResponse> UpgradeTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.UpgradeTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.UpgradeTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for StellarValueTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.StellarValueTypeEncodeRequest> StellarValueTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.StellarValueTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.StellarValueTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for StellarValueTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.StellarValueTypeEncodeResponse> StellarValueTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.StellarValueTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.StellarValueTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for StellarValueTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.StellarValueTypeDecodeRequest> StellarValueTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.StellarValueTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.StellarValueTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for StellarValueTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.StellarValueTypeDecodeResponse> StellarValueTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.StellarValueTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.StellarValueTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerCloseValueSignatureEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerCloseValueSignatureEncodeRequest> LedgerCloseValueSignatureEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerCloseValueSignatureEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerCloseValueSignatureEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerCloseValueSignatureEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerCloseValueSignatureEncodeResponse> LedgerCloseValueSignatureEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerCloseValueSignatureEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerCloseValueSignatureEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerCloseValueSignatureDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerCloseValueSignatureDecodeRequest> LedgerCloseValueSignatureDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerCloseValueSignatureDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerCloseValueSignatureDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerCloseValueSignatureDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerCloseValueSignatureDecodeResponse> LedgerCloseValueSignatureDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerCloseValueSignatureDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerCloseValueSignatureDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for StellarValueEncodeRequest</summary>
        public static readonly Marshaller<Stellar.StellarValueEncodeRequest> StellarValueEncodeRequestMarshaller = Marshallers.Create<Stellar.StellarValueEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.StellarValueEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for StellarValueEncodeResponse</summary>
        public static readonly Marshaller<Stellar.StellarValueEncodeResponse> StellarValueEncodeResponseMarshaller = Marshallers.Create<Stellar.StellarValueEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.StellarValueEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for StellarValueDecodeRequest</summary>
        public static readonly Marshaller<Stellar.StellarValueDecodeRequest> StellarValueDecodeRequestMarshaller = Marshallers.Create<Stellar.StellarValueDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.StellarValueDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for StellarValueDecodeResponse</summary>
        public static readonly Marshaller<Stellar.StellarValueDecodeResponse> StellarValueDecodeResponseMarshaller = Marshallers.Create<Stellar.StellarValueDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.StellarValueDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerHeaderFlagsEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerHeaderFlagsEncodeRequest> LedgerHeaderFlagsEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerHeaderFlagsEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerHeaderFlagsEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerHeaderFlagsEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerHeaderFlagsEncodeResponse> LedgerHeaderFlagsEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerHeaderFlagsEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerHeaderFlagsEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerHeaderFlagsDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerHeaderFlagsDecodeRequest> LedgerHeaderFlagsDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerHeaderFlagsDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerHeaderFlagsDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerHeaderFlagsDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerHeaderFlagsDecodeResponse> LedgerHeaderFlagsDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerHeaderFlagsDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerHeaderFlagsDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerHeaderExtensionV1EncodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerHeaderExtensionV1EncodeRequest> LedgerHeaderExtensionV1EncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerHeaderExtensionV1EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerHeaderExtensionV1EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerHeaderExtensionV1EncodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerHeaderExtensionV1EncodeResponse> LedgerHeaderExtensionV1EncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerHeaderExtensionV1EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerHeaderExtensionV1EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerHeaderExtensionV1DecodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerHeaderExtensionV1DecodeRequest> LedgerHeaderExtensionV1DecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerHeaderExtensionV1DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerHeaderExtensionV1DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerHeaderExtensionV1DecodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerHeaderExtensionV1DecodeResponse> LedgerHeaderExtensionV1DecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerHeaderExtensionV1DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerHeaderExtensionV1DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerHeaderEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerHeaderEncodeRequest> LedgerHeaderEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerHeaderEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerHeaderEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerHeaderEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerHeaderEncodeResponse> LedgerHeaderEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerHeaderEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerHeaderEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerHeaderDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerHeaderDecodeRequest> LedgerHeaderDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerHeaderDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerHeaderDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerHeaderDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerHeaderDecodeResponse> LedgerHeaderDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerHeaderDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerHeaderDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerUpgradeTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerUpgradeTypeEncodeRequest> LedgerUpgradeTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerUpgradeTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerUpgradeTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerUpgradeTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerUpgradeTypeEncodeResponse> LedgerUpgradeTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerUpgradeTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerUpgradeTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerUpgradeTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerUpgradeTypeDecodeRequest> LedgerUpgradeTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerUpgradeTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerUpgradeTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerUpgradeTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerUpgradeTypeDecodeResponse> LedgerUpgradeTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerUpgradeTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerUpgradeTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigUpgradeSetKeyEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ConfigUpgradeSetKeyEncodeRequest> ConfigUpgradeSetKeyEncodeRequestMarshaller = Marshallers.Create<Stellar.ConfigUpgradeSetKeyEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigUpgradeSetKeyEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigUpgradeSetKeyEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ConfigUpgradeSetKeyEncodeResponse> ConfigUpgradeSetKeyEncodeResponseMarshaller = Marshallers.Create<Stellar.ConfigUpgradeSetKeyEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigUpgradeSetKeyEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigUpgradeSetKeyDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ConfigUpgradeSetKeyDecodeRequest> ConfigUpgradeSetKeyDecodeRequestMarshaller = Marshallers.Create<Stellar.ConfigUpgradeSetKeyDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigUpgradeSetKeyDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigUpgradeSetKeyDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ConfigUpgradeSetKeyDecodeResponse> ConfigUpgradeSetKeyDecodeResponseMarshaller = Marshallers.Create<Stellar.ConfigUpgradeSetKeyDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigUpgradeSetKeyDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerUpgradeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerUpgradeEncodeRequest> LedgerUpgradeEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerUpgradeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerUpgradeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerUpgradeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerUpgradeEncodeResponse> LedgerUpgradeEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerUpgradeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerUpgradeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerUpgradeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerUpgradeDecodeRequest> LedgerUpgradeDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerUpgradeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerUpgradeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerUpgradeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerUpgradeDecodeResponse> LedgerUpgradeDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerUpgradeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerUpgradeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigUpgradeSetEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ConfigUpgradeSetEncodeRequest> ConfigUpgradeSetEncodeRequestMarshaller = Marshallers.Create<Stellar.ConfigUpgradeSetEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigUpgradeSetEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigUpgradeSetEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ConfigUpgradeSetEncodeResponse> ConfigUpgradeSetEncodeResponseMarshaller = Marshallers.Create<Stellar.ConfigUpgradeSetEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigUpgradeSetEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigUpgradeSetDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ConfigUpgradeSetDecodeRequest> ConfigUpgradeSetDecodeRequestMarshaller = Marshallers.Create<Stellar.ConfigUpgradeSetDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigUpgradeSetDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ConfigUpgradeSetDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ConfigUpgradeSetDecodeResponse> ConfigUpgradeSetDecodeResponseMarshaller = Marshallers.Create<Stellar.ConfigUpgradeSetDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ConfigUpgradeSetDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TxSetComponentTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TxSetComponentTypeEncodeRequest> TxSetComponentTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.TxSetComponentTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TxSetComponentTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TxSetComponentTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TxSetComponentTypeEncodeResponse> TxSetComponentTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.TxSetComponentTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TxSetComponentTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TxSetComponentTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TxSetComponentTypeDecodeRequest> TxSetComponentTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.TxSetComponentTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TxSetComponentTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TxSetComponentTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TxSetComponentTypeDecodeResponse> TxSetComponentTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.TxSetComponentTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TxSetComponentTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TxSetComponentEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TxSetComponentEncodeRequest> TxSetComponentEncodeRequestMarshaller = Marshallers.Create<Stellar.TxSetComponentEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TxSetComponentEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TxSetComponentEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TxSetComponentEncodeResponse> TxSetComponentEncodeResponseMarshaller = Marshallers.Create<Stellar.TxSetComponentEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TxSetComponentEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TxSetComponentDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TxSetComponentDecodeRequest> TxSetComponentDecodeRequestMarshaller = Marshallers.Create<Stellar.TxSetComponentDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TxSetComponentDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TxSetComponentDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TxSetComponentDecodeResponse> TxSetComponentDecodeResponseMarshaller = Marshallers.Create<Stellar.TxSetComponentDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TxSetComponentDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionPhaseEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionPhaseEncodeRequest> TransactionPhaseEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionPhaseEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionPhaseEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionPhaseEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionPhaseEncodeResponse> TransactionPhaseEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionPhaseEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionPhaseEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionPhaseDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionPhaseDecodeRequest> TransactionPhaseDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionPhaseDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionPhaseDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionPhaseDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionPhaseDecodeResponse> TransactionPhaseDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionPhaseDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionPhaseDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionSetEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionSetEncodeRequest> TransactionSetEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionSetEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionSetEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionSetEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionSetEncodeResponse> TransactionSetEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionSetEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionSetEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionSetDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionSetDecodeRequest> TransactionSetDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionSetDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionSetDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionSetDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionSetDecodeResponse> TransactionSetDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionSetDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionSetDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionSetV1EncodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionSetV1EncodeRequest> TransactionSetV1EncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionSetV1EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionSetV1EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionSetV1EncodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionSetV1EncodeResponse> TransactionSetV1EncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionSetV1EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionSetV1EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionSetV1DecodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionSetV1DecodeRequest> TransactionSetV1DecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionSetV1DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionSetV1DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionSetV1DecodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionSetV1DecodeResponse> TransactionSetV1DecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionSetV1DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionSetV1DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for GeneralizedTransactionSetEncodeRequest</summary>
        public static readonly Marshaller<Stellar.GeneralizedTransactionSetEncodeRequest> GeneralizedTransactionSetEncodeRequestMarshaller = Marshallers.Create<Stellar.GeneralizedTransactionSetEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.GeneralizedTransactionSetEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for GeneralizedTransactionSetEncodeResponse</summary>
        public static readonly Marshaller<Stellar.GeneralizedTransactionSetEncodeResponse> GeneralizedTransactionSetEncodeResponseMarshaller = Marshallers.Create<Stellar.GeneralizedTransactionSetEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.GeneralizedTransactionSetEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for GeneralizedTransactionSetDecodeRequest</summary>
        public static readonly Marshaller<Stellar.GeneralizedTransactionSetDecodeRequest> GeneralizedTransactionSetDecodeRequestMarshaller = Marshallers.Create<Stellar.GeneralizedTransactionSetDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.GeneralizedTransactionSetDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for GeneralizedTransactionSetDecodeResponse</summary>
        public static readonly Marshaller<Stellar.GeneralizedTransactionSetDecodeResponse> GeneralizedTransactionSetDecodeResponseMarshaller = Marshallers.Create<Stellar.GeneralizedTransactionSetDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.GeneralizedTransactionSetDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionResultPairEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionResultPairEncodeRequest> TransactionResultPairEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionResultPairEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionResultPairEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionResultPairEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionResultPairEncodeResponse> TransactionResultPairEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionResultPairEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionResultPairEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionResultPairDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionResultPairDecodeRequest> TransactionResultPairDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionResultPairDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionResultPairDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionResultPairDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionResultPairDecodeResponse> TransactionResultPairDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionResultPairDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionResultPairDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionResultSetEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionResultSetEncodeRequest> TransactionResultSetEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionResultSetEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionResultSetEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionResultSetEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionResultSetEncodeResponse> TransactionResultSetEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionResultSetEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionResultSetEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionResultSetDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionResultSetDecodeRequest> TransactionResultSetDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionResultSetDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionResultSetDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionResultSetDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionResultSetDecodeResponse> TransactionResultSetDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionResultSetDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionResultSetDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionHistoryEntryEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionHistoryEntryEncodeRequest> TransactionHistoryEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionHistoryEntryEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionHistoryEntryEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionHistoryEntryEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionHistoryEntryEncodeResponse> TransactionHistoryEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionHistoryEntryEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionHistoryEntryEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionHistoryEntryDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionHistoryEntryDecodeRequest> TransactionHistoryEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionHistoryEntryDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionHistoryEntryDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionHistoryEntryDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionHistoryEntryDecodeResponse> TransactionHistoryEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionHistoryEntryDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionHistoryEntryDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionHistoryResultEntryEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionHistoryResultEntryEncodeRequest> TransactionHistoryResultEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionHistoryResultEntryEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionHistoryResultEntryEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionHistoryResultEntryEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionHistoryResultEntryEncodeResponse> TransactionHistoryResultEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionHistoryResultEntryEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionHistoryResultEntryEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionHistoryResultEntryDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionHistoryResultEntryDecodeRequest> TransactionHistoryResultEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionHistoryResultEntryDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionHistoryResultEntryDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionHistoryResultEntryDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionHistoryResultEntryDecodeResponse> TransactionHistoryResultEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionHistoryResultEntryDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionHistoryResultEntryDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerHeaderHistoryEntryEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerHeaderHistoryEntryEncodeRequest> LedgerHeaderHistoryEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerHeaderHistoryEntryEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerHeaderHistoryEntryEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerHeaderHistoryEntryEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerHeaderHistoryEntryEncodeResponse> LedgerHeaderHistoryEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerHeaderHistoryEntryEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerHeaderHistoryEntryEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerHeaderHistoryEntryDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerHeaderHistoryEntryDecodeRequest> LedgerHeaderHistoryEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerHeaderHistoryEntryDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerHeaderHistoryEntryDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerHeaderHistoryEntryDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerHeaderHistoryEntryDecodeResponse> LedgerHeaderHistoryEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerHeaderHistoryEntryDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerHeaderHistoryEntryDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerSCPMessagesEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerSCPMessagesEncodeRequest> LedgerSCPMessagesEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerSCPMessagesEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerSCPMessagesEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerSCPMessagesEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerSCPMessagesEncodeResponse> LedgerSCPMessagesEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerSCPMessagesEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerSCPMessagesEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerSCPMessagesDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerSCPMessagesDecodeRequest> LedgerSCPMessagesDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerSCPMessagesDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerSCPMessagesDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerSCPMessagesDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerSCPMessagesDecodeResponse> LedgerSCPMessagesDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerSCPMessagesDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerSCPMessagesDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPHistoryEntryV0EncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCPHistoryEntryV0EncodeRequest> SCPHistoryEntryV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCPHistoryEntryV0EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPHistoryEntryV0EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPHistoryEntryV0EncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCPHistoryEntryV0EncodeResponse> SCPHistoryEntryV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCPHistoryEntryV0EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPHistoryEntryV0EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPHistoryEntryV0DecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCPHistoryEntryV0DecodeRequest> SCPHistoryEntryV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCPHistoryEntryV0DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPHistoryEntryV0DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPHistoryEntryV0DecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCPHistoryEntryV0DecodeResponse> SCPHistoryEntryV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCPHistoryEntryV0DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPHistoryEntryV0DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPHistoryEntryEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCPHistoryEntryEncodeRequest> SCPHistoryEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.SCPHistoryEntryEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPHistoryEntryEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPHistoryEntryEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCPHistoryEntryEncodeResponse> SCPHistoryEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.SCPHistoryEntryEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPHistoryEntryEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPHistoryEntryDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCPHistoryEntryDecodeRequest> SCPHistoryEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.SCPHistoryEntryDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPHistoryEntryDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPHistoryEntryDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCPHistoryEntryDecodeResponse> SCPHistoryEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.SCPHistoryEntryDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPHistoryEntryDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerEntryChangeTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerEntryChangeTypeEncodeRequest> LedgerEntryChangeTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerEntryChangeTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerEntryChangeTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerEntryChangeTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerEntryChangeTypeEncodeResponse> LedgerEntryChangeTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerEntryChangeTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerEntryChangeTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerEntryChangeTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerEntryChangeTypeDecodeRequest> LedgerEntryChangeTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerEntryChangeTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerEntryChangeTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerEntryChangeTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerEntryChangeTypeDecodeResponse> LedgerEntryChangeTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerEntryChangeTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerEntryChangeTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerEntryChangeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerEntryChangeEncodeRequest> LedgerEntryChangeEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerEntryChangeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerEntryChangeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerEntryChangeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerEntryChangeEncodeResponse> LedgerEntryChangeEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerEntryChangeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerEntryChangeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerEntryChangeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerEntryChangeDecodeRequest> LedgerEntryChangeDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerEntryChangeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerEntryChangeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerEntryChangeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerEntryChangeDecodeResponse> LedgerEntryChangeDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerEntryChangeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerEntryChangeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerEntryChangesEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerEntryChangesEncodeRequest> LedgerEntryChangesEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerEntryChangesEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerEntryChangesEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerEntryChangesEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerEntryChangesEncodeResponse> LedgerEntryChangesEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerEntryChangesEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerEntryChangesEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerEntryChangesDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerEntryChangesDecodeRequest> LedgerEntryChangesDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerEntryChangesDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerEntryChangesDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerEntryChangesDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerEntryChangesDecodeResponse> LedgerEntryChangesDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerEntryChangesDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerEntryChangesDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OperationMetaEncodeRequest</summary>
        public static readonly Marshaller<Stellar.OperationMetaEncodeRequest> OperationMetaEncodeRequestMarshaller = Marshallers.Create<Stellar.OperationMetaEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OperationMetaEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OperationMetaEncodeResponse</summary>
        public static readonly Marshaller<Stellar.OperationMetaEncodeResponse> OperationMetaEncodeResponseMarshaller = Marshallers.Create<Stellar.OperationMetaEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OperationMetaEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OperationMetaDecodeRequest</summary>
        public static readonly Marshaller<Stellar.OperationMetaDecodeRequest> OperationMetaDecodeRequestMarshaller = Marshallers.Create<Stellar.OperationMetaDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OperationMetaDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OperationMetaDecodeResponse</summary>
        public static readonly Marshaller<Stellar.OperationMetaDecodeResponse> OperationMetaDecodeResponseMarshaller = Marshallers.Create<Stellar.OperationMetaDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OperationMetaDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionMetaV1EncodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionMetaV1EncodeRequest> TransactionMetaV1EncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionMetaV1EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionMetaV1EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionMetaV1EncodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionMetaV1EncodeResponse> TransactionMetaV1EncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionMetaV1EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionMetaV1EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionMetaV1DecodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionMetaV1DecodeRequest> TransactionMetaV1DecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionMetaV1DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionMetaV1DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionMetaV1DecodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionMetaV1DecodeResponse> TransactionMetaV1DecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionMetaV1DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionMetaV1DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionMetaV2EncodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionMetaV2EncodeRequest> TransactionMetaV2EncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionMetaV2EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionMetaV2EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionMetaV2EncodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionMetaV2EncodeResponse> TransactionMetaV2EncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionMetaV2EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionMetaV2EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionMetaV2DecodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionMetaV2DecodeRequest> TransactionMetaV2DecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionMetaV2DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionMetaV2DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionMetaV2DecodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionMetaV2DecodeResponse> TransactionMetaV2DecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionMetaV2DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionMetaV2DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractEventTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ContractEventTypeEncodeRequest> ContractEventTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.ContractEventTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractEventTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractEventTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ContractEventTypeEncodeResponse> ContractEventTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.ContractEventTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractEventTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractEventTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ContractEventTypeDecodeRequest> ContractEventTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.ContractEventTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractEventTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractEventTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ContractEventTypeDecodeResponse> ContractEventTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.ContractEventTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractEventTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractEventEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ContractEventEncodeRequest> ContractEventEncodeRequestMarshaller = Marshallers.Create<Stellar.ContractEventEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractEventEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractEventEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ContractEventEncodeResponse> ContractEventEncodeResponseMarshaller = Marshallers.Create<Stellar.ContractEventEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractEventEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractEventDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ContractEventDecodeRequest> ContractEventDecodeRequestMarshaller = Marshallers.Create<Stellar.ContractEventDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractEventDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractEventDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ContractEventDecodeResponse> ContractEventDecodeResponseMarshaller = Marshallers.Create<Stellar.ContractEventDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractEventDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DiagnosticEventEncodeRequest</summary>
        public static readonly Marshaller<Stellar.DiagnosticEventEncodeRequest> DiagnosticEventEncodeRequestMarshaller = Marshallers.Create<Stellar.DiagnosticEventEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DiagnosticEventEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DiagnosticEventEncodeResponse</summary>
        public static readonly Marshaller<Stellar.DiagnosticEventEncodeResponse> DiagnosticEventEncodeResponseMarshaller = Marshallers.Create<Stellar.DiagnosticEventEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DiagnosticEventEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DiagnosticEventDecodeRequest</summary>
        public static readonly Marshaller<Stellar.DiagnosticEventDecodeRequest> DiagnosticEventDecodeRequestMarshaller = Marshallers.Create<Stellar.DiagnosticEventDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DiagnosticEventDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DiagnosticEventDecodeResponse</summary>
        public static readonly Marshaller<Stellar.DiagnosticEventDecodeResponse> DiagnosticEventDecodeResponseMarshaller = Marshallers.Create<Stellar.DiagnosticEventDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DiagnosticEventDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DiagnosticEventsEncodeRequest</summary>
        public static readonly Marshaller<Stellar.DiagnosticEventsEncodeRequest> DiagnosticEventsEncodeRequestMarshaller = Marshallers.Create<Stellar.DiagnosticEventsEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DiagnosticEventsEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DiagnosticEventsEncodeResponse</summary>
        public static readonly Marshaller<Stellar.DiagnosticEventsEncodeResponse> DiagnosticEventsEncodeResponseMarshaller = Marshallers.Create<Stellar.DiagnosticEventsEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DiagnosticEventsEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DiagnosticEventsDecodeRequest</summary>
        public static readonly Marshaller<Stellar.DiagnosticEventsDecodeRequest> DiagnosticEventsDecodeRequestMarshaller = Marshallers.Create<Stellar.DiagnosticEventsDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DiagnosticEventsDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DiagnosticEventsDecodeResponse</summary>
        public static readonly Marshaller<Stellar.DiagnosticEventsDecodeResponse> DiagnosticEventsDecodeResponseMarshaller = Marshallers.Create<Stellar.DiagnosticEventsDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DiagnosticEventsDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanTransactionMetaExtV1EncodeRequest</summary>
        public static readonly Marshaller<Stellar.SorobanTransactionMetaExtV1EncodeRequest> SorobanTransactionMetaExtV1EncodeRequestMarshaller = Marshallers.Create<Stellar.SorobanTransactionMetaExtV1EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanTransactionMetaExtV1EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanTransactionMetaExtV1EncodeResponse</summary>
        public static readonly Marshaller<Stellar.SorobanTransactionMetaExtV1EncodeResponse> SorobanTransactionMetaExtV1EncodeResponseMarshaller = Marshallers.Create<Stellar.SorobanTransactionMetaExtV1EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanTransactionMetaExtV1EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanTransactionMetaExtV1DecodeRequest</summary>
        public static readonly Marshaller<Stellar.SorobanTransactionMetaExtV1DecodeRequest> SorobanTransactionMetaExtV1DecodeRequestMarshaller = Marshallers.Create<Stellar.SorobanTransactionMetaExtV1DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanTransactionMetaExtV1DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanTransactionMetaExtV1DecodeResponse</summary>
        public static readonly Marshaller<Stellar.SorobanTransactionMetaExtV1DecodeResponse> SorobanTransactionMetaExtV1DecodeResponseMarshaller = Marshallers.Create<Stellar.SorobanTransactionMetaExtV1DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanTransactionMetaExtV1DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanTransactionMetaExtEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SorobanTransactionMetaExtEncodeRequest> SorobanTransactionMetaExtEncodeRequestMarshaller = Marshallers.Create<Stellar.SorobanTransactionMetaExtEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanTransactionMetaExtEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanTransactionMetaExtEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SorobanTransactionMetaExtEncodeResponse> SorobanTransactionMetaExtEncodeResponseMarshaller = Marshallers.Create<Stellar.SorobanTransactionMetaExtEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanTransactionMetaExtEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanTransactionMetaExtDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SorobanTransactionMetaExtDecodeRequest> SorobanTransactionMetaExtDecodeRequestMarshaller = Marshallers.Create<Stellar.SorobanTransactionMetaExtDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanTransactionMetaExtDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanTransactionMetaExtDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SorobanTransactionMetaExtDecodeResponse> SorobanTransactionMetaExtDecodeResponseMarshaller = Marshallers.Create<Stellar.SorobanTransactionMetaExtDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanTransactionMetaExtDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanTransactionMetaEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SorobanTransactionMetaEncodeRequest> SorobanTransactionMetaEncodeRequestMarshaller = Marshallers.Create<Stellar.SorobanTransactionMetaEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanTransactionMetaEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanTransactionMetaEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SorobanTransactionMetaEncodeResponse> SorobanTransactionMetaEncodeResponseMarshaller = Marshallers.Create<Stellar.SorobanTransactionMetaEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanTransactionMetaEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanTransactionMetaDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SorobanTransactionMetaDecodeRequest> SorobanTransactionMetaDecodeRequestMarshaller = Marshallers.Create<Stellar.SorobanTransactionMetaDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanTransactionMetaDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanTransactionMetaDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SorobanTransactionMetaDecodeResponse> SorobanTransactionMetaDecodeResponseMarshaller = Marshallers.Create<Stellar.SorobanTransactionMetaDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanTransactionMetaDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionMetaV3EncodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionMetaV3EncodeRequest> TransactionMetaV3EncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionMetaV3EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionMetaV3EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionMetaV3EncodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionMetaV3EncodeResponse> TransactionMetaV3EncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionMetaV3EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionMetaV3EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionMetaV3DecodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionMetaV3DecodeRequest> TransactionMetaV3DecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionMetaV3DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionMetaV3DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionMetaV3DecodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionMetaV3DecodeResponse> TransactionMetaV3DecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionMetaV3DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionMetaV3DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InvokeHostFunctionSuccessPreImageEncodeRequest</summary>
        public static readonly Marshaller<Stellar.InvokeHostFunctionSuccessPreImageEncodeRequest> InvokeHostFunctionSuccessPreImageEncodeRequestMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionSuccessPreImageEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InvokeHostFunctionSuccessPreImageEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InvokeHostFunctionSuccessPreImageEncodeResponse</summary>
        public static readonly Marshaller<Stellar.InvokeHostFunctionSuccessPreImageEncodeResponse> InvokeHostFunctionSuccessPreImageEncodeResponseMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionSuccessPreImageEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InvokeHostFunctionSuccessPreImageEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InvokeHostFunctionSuccessPreImageDecodeRequest</summary>
        public static readonly Marshaller<Stellar.InvokeHostFunctionSuccessPreImageDecodeRequest> InvokeHostFunctionSuccessPreImageDecodeRequestMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionSuccessPreImageDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InvokeHostFunctionSuccessPreImageDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InvokeHostFunctionSuccessPreImageDecodeResponse</summary>
        public static readonly Marshaller<Stellar.InvokeHostFunctionSuccessPreImageDecodeResponse> InvokeHostFunctionSuccessPreImageDecodeResponseMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionSuccessPreImageDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InvokeHostFunctionSuccessPreImageDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionMetaEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionMetaEncodeRequest> TransactionMetaEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionMetaEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionMetaEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionMetaEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionMetaEncodeResponse> TransactionMetaEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionMetaEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionMetaEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionMetaDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionMetaDecodeRequest> TransactionMetaDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionMetaDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionMetaDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionMetaDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionMetaDecodeResponse> TransactionMetaDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionMetaDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionMetaDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionResultMetaEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionResultMetaEncodeRequest> TransactionResultMetaEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionResultMetaEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionResultMetaEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionResultMetaEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionResultMetaEncodeResponse> TransactionResultMetaEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionResultMetaEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionResultMetaEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionResultMetaDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionResultMetaDecodeRequest> TransactionResultMetaDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionResultMetaDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionResultMetaDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionResultMetaDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionResultMetaDecodeResponse> TransactionResultMetaDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionResultMetaDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionResultMetaDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for UpgradeEntryMetaEncodeRequest</summary>
        public static readonly Marshaller<Stellar.UpgradeEntryMetaEncodeRequest> UpgradeEntryMetaEncodeRequestMarshaller = Marshallers.Create<Stellar.UpgradeEntryMetaEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.UpgradeEntryMetaEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for UpgradeEntryMetaEncodeResponse</summary>
        public static readonly Marshaller<Stellar.UpgradeEntryMetaEncodeResponse> UpgradeEntryMetaEncodeResponseMarshaller = Marshallers.Create<Stellar.UpgradeEntryMetaEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.UpgradeEntryMetaEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for UpgradeEntryMetaDecodeRequest</summary>
        public static readonly Marshaller<Stellar.UpgradeEntryMetaDecodeRequest> UpgradeEntryMetaDecodeRequestMarshaller = Marshallers.Create<Stellar.UpgradeEntryMetaDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.UpgradeEntryMetaDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for UpgradeEntryMetaDecodeResponse</summary>
        public static readonly Marshaller<Stellar.UpgradeEntryMetaDecodeResponse> UpgradeEntryMetaDecodeResponseMarshaller = Marshallers.Create<Stellar.UpgradeEntryMetaDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.UpgradeEntryMetaDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerCloseMetaV0EncodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerCloseMetaV0EncodeRequest> LedgerCloseMetaV0EncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaV0EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerCloseMetaV0EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerCloseMetaV0EncodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerCloseMetaV0EncodeResponse> LedgerCloseMetaV0EncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaV0EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerCloseMetaV0EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerCloseMetaV0DecodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerCloseMetaV0DecodeRequest> LedgerCloseMetaV0DecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaV0DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerCloseMetaV0DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerCloseMetaV0DecodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerCloseMetaV0DecodeResponse> LedgerCloseMetaV0DecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaV0DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerCloseMetaV0DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerCloseMetaExtV1EncodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerCloseMetaExtV1EncodeRequest> LedgerCloseMetaExtV1EncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaExtV1EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerCloseMetaExtV1EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerCloseMetaExtV1EncodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerCloseMetaExtV1EncodeResponse> LedgerCloseMetaExtV1EncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaExtV1EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerCloseMetaExtV1EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerCloseMetaExtV1DecodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerCloseMetaExtV1DecodeRequest> LedgerCloseMetaExtV1DecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaExtV1DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerCloseMetaExtV1DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerCloseMetaExtV1DecodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerCloseMetaExtV1DecodeResponse> LedgerCloseMetaExtV1DecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaExtV1DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerCloseMetaExtV1DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerCloseMetaExtEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerCloseMetaExtEncodeRequest> LedgerCloseMetaExtEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaExtEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerCloseMetaExtEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerCloseMetaExtEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerCloseMetaExtEncodeResponse> LedgerCloseMetaExtEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaExtEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerCloseMetaExtEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerCloseMetaExtDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerCloseMetaExtDecodeRequest> LedgerCloseMetaExtDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaExtDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerCloseMetaExtDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerCloseMetaExtDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerCloseMetaExtDecodeResponse> LedgerCloseMetaExtDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaExtDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerCloseMetaExtDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerCloseMetaV1EncodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerCloseMetaV1EncodeRequest> LedgerCloseMetaV1EncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaV1EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerCloseMetaV1EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerCloseMetaV1EncodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerCloseMetaV1EncodeResponse> LedgerCloseMetaV1EncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaV1EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerCloseMetaV1EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerCloseMetaV1DecodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerCloseMetaV1DecodeRequest> LedgerCloseMetaV1DecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaV1DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerCloseMetaV1DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerCloseMetaV1DecodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerCloseMetaV1DecodeResponse> LedgerCloseMetaV1DecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaV1DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerCloseMetaV1DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerCloseMetaEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerCloseMetaEncodeRequest> LedgerCloseMetaEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerCloseMetaEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerCloseMetaEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerCloseMetaEncodeResponse> LedgerCloseMetaEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerCloseMetaEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerCloseMetaDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerCloseMetaDecodeRequest> LedgerCloseMetaDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerCloseMetaDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerCloseMetaDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerCloseMetaDecodeResponse> LedgerCloseMetaDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerCloseMetaDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ErrorCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ErrorCodeEncodeRequest> ErrorCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.ErrorCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ErrorCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ErrorCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ErrorCodeEncodeResponse> ErrorCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.ErrorCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ErrorCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ErrorCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ErrorCodeDecodeRequest> ErrorCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.ErrorCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ErrorCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ErrorCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ErrorCodeDecodeResponse> ErrorCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.ErrorCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ErrorCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ErrorEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ErrorEncodeRequest> ErrorEncodeRequestMarshaller = Marshallers.Create<Stellar.ErrorEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ErrorEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ErrorEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ErrorEncodeResponse> ErrorEncodeResponseMarshaller = Marshallers.Create<Stellar.ErrorEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ErrorEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ErrorDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ErrorDecodeRequest> ErrorDecodeRequestMarshaller = Marshallers.Create<Stellar.ErrorDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ErrorDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ErrorDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ErrorDecodeResponse> ErrorDecodeResponseMarshaller = Marshallers.Create<Stellar.ErrorDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ErrorDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SendMoreEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SendMoreEncodeRequest> SendMoreEncodeRequestMarshaller = Marshallers.Create<Stellar.SendMoreEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SendMoreEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SendMoreEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SendMoreEncodeResponse> SendMoreEncodeResponseMarshaller = Marshallers.Create<Stellar.SendMoreEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SendMoreEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SendMoreDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SendMoreDecodeRequest> SendMoreDecodeRequestMarshaller = Marshallers.Create<Stellar.SendMoreDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SendMoreDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SendMoreDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SendMoreDecodeResponse> SendMoreDecodeResponseMarshaller = Marshallers.Create<Stellar.SendMoreDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SendMoreDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SendMoreExtendedEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SendMoreExtendedEncodeRequest> SendMoreExtendedEncodeRequestMarshaller = Marshallers.Create<Stellar.SendMoreExtendedEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SendMoreExtendedEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SendMoreExtendedEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SendMoreExtendedEncodeResponse> SendMoreExtendedEncodeResponseMarshaller = Marshallers.Create<Stellar.SendMoreExtendedEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SendMoreExtendedEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SendMoreExtendedDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SendMoreExtendedDecodeRequest> SendMoreExtendedDecodeRequestMarshaller = Marshallers.Create<Stellar.SendMoreExtendedDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SendMoreExtendedDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SendMoreExtendedDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SendMoreExtendedDecodeResponse> SendMoreExtendedDecodeResponseMarshaller = Marshallers.Create<Stellar.SendMoreExtendedDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SendMoreExtendedDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AuthCertEncodeRequest</summary>
        public static readonly Marshaller<Stellar.AuthCertEncodeRequest> AuthCertEncodeRequestMarshaller = Marshallers.Create<Stellar.AuthCertEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AuthCertEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AuthCertEncodeResponse</summary>
        public static readonly Marshaller<Stellar.AuthCertEncodeResponse> AuthCertEncodeResponseMarshaller = Marshallers.Create<Stellar.AuthCertEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AuthCertEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AuthCertDecodeRequest</summary>
        public static readonly Marshaller<Stellar.AuthCertDecodeRequest> AuthCertDecodeRequestMarshaller = Marshallers.Create<Stellar.AuthCertDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AuthCertDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AuthCertDecodeResponse</summary>
        public static readonly Marshaller<Stellar.AuthCertDecodeResponse> AuthCertDecodeResponseMarshaller = Marshallers.Create<Stellar.AuthCertDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AuthCertDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HelloEncodeRequest</summary>
        public static readonly Marshaller<Stellar.HelloEncodeRequest> HelloEncodeRequestMarshaller = Marshallers.Create<Stellar.HelloEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HelloEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HelloEncodeResponse</summary>
        public static readonly Marshaller<Stellar.HelloEncodeResponse> HelloEncodeResponseMarshaller = Marshallers.Create<Stellar.HelloEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HelloEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HelloDecodeRequest</summary>
        public static readonly Marshaller<Stellar.HelloDecodeRequest> HelloDecodeRequestMarshaller = Marshallers.Create<Stellar.HelloDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HelloDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HelloDecodeResponse</summary>
        public static readonly Marshaller<Stellar.HelloDecodeResponse> HelloDecodeResponseMarshaller = Marshallers.Create<Stellar.HelloDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HelloDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AuthEncodeRequest</summary>
        public static readonly Marshaller<Stellar.AuthEncodeRequest> AuthEncodeRequestMarshaller = Marshallers.Create<Stellar.AuthEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AuthEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AuthEncodeResponse</summary>
        public static readonly Marshaller<Stellar.AuthEncodeResponse> AuthEncodeResponseMarshaller = Marshallers.Create<Stellar.AuthEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AuthEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AuthDecodeRequest</summary>
        public static readonly Marshaller<Stellar.AuthDecodeRequest> AuthDecodeRequestMarshaller = Marshallers.Create<Stellar.AuthDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AuthDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AuthDecodeResponse</summary>
        public static readonly Marshaller<Stellar.AuthDecodeResponse> AuthDecodeResponseMarshaller = Marshallers.Create<Stellar.AuthDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AuthDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for IPAddrTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.IPAddrTypeEncodeRequest> IPAddrTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.IPAddrTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.IPAddrTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for IPAddrTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.IPAddrTypeEncodeResponse> IPAddrTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.IPAddrTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.IPAddrTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for IPAddrTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.IPAddrTypeDecodeRequest> IPAddrTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.IPAddrTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.IPAddrTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for IPAddrTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.IPAddrTypeDecodeResponse> IPAddrTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.IPAddrTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.IPAddrTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PeerAddressEncodeRequest</summary>
        public static readonly Marshaller<Stellar.PeerAddressEncodeRequest> PeerAddressEncodeRequestMarshaller = Marshallers.Create<Stellar.PeerAddressEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PeerAddressEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PeerAddressEncodeResponse</summary>
        public static readonly Marshaller<Stellar.PeerAddressEncodeResponse> PeerAddressEncodeResponseMarshaller = Marshallers.Create<Stellar.PeerAddressEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PeerAddressEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PeerAddressDecodeRequest</summary>
        public static readonly Marshaller<Stellar.PeerAddressDecodeRequest> PeerAddressDecodeRequestMarshaller = Marshallers.Create<Stellar.PeerAddressDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PeerAddressDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PeerAddressDecodeResponse</summary>
        public static readonly Marshaller<Stellar.PeerAddressDecodeResponse> PeerAddressDecodeResponseMarshaller = Marshallers.Create<Stellar.PeerAddressDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PeerAddressDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for MessageTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.MessageTypeEncodeRequest> MessageTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.MessageTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.MessageTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for MessageTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.MessageTypeEncodeResponse> MessageTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.MessageTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.MessageTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for MessageTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.MessageTypeDecodeRequest> MessageTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.MessageTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.MessageTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for MessageTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.MessageTypeDecodeResponse> MessageTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.MessageTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.MessageTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DontHaveEncodeRequest</summary>
        public static readonly Marshaller<Stellar.DontHaveEncodeRequest> DontHaveEncodeRequestMarshaller = Marshallers.Create<Stellar.DontHaveEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DontHaveEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DontHaveEncodeResponse</summary>
        public static readonly Marshaller<Stellar.DontHaveEncodeResponse> DontHaveEncodeResponseMarshaller = Marshallers.Create<Stellar.DontHaveEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DontHaveEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DontHaveDecodeRequest</summary>
        public static readonly Marshaller<Stellar.DontHaveDecodeRequest> DontHaveDecodeRequestMarshaller = Marshallers.Create<Stellar.DontHaveDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DontHaveDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DontHaveDecodeResponse</summary>
        public static readonly Marshaller<Stellar.DontHaveDecodeResponse> DontHaveDecodeResponseMarshaller = Marshallers.Create<Stellar.DontHaveDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DontHaveDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SurveyMessageCommandTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SurveyMessageCommandTypeEncodeRequest> SurveyMessageCommandTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.SurveyMessageCommandTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SurveyMessageCommandTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SurveyMessageCommandTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SurveyMessageCommandTypeEncodeResponse> SurveyMessageCommandTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.SurveyMessageCommandTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SurveyMessageCommandTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SurveyMessageCommandTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SurveyMessageCommandTypeDecodeRequest> SurveyMessageCommandTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.SurveyMessageCommandTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SurveyMessageCommandTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SurveyMessageCommandTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SurveyMessageCommandTypeDecodeResponse> SurveyMessageCommandTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.SurveyMessageCommandTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SurveyMessageCommandTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SurveyMessageResponseTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SurveyMessageResponseTypeEncodeRequest> SurveyMessageResponseTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.SurveyMessageResponseTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SurveyMessageResponseTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SurveyMessageResponseTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SurveyMessageResponseTypeEncodeResponse> SurveyMessageResponseTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.SurveyMessageResponseTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SurveyMessageResponseTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SurveyMessageResponseTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SurveyMessageResponseTypeDecodeRequest> SurveyMessageResponseTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.SurveyMessageResponseTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SurveyMessageResponseTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SurveyMessageResponseTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SurveyMessageResponseTypeDecodeResponse> SurveyMessageResponseTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.SurveyMessageResponseTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SurveyMessageResponseTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedSurveyStartCollectingMessageEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TimeSlicedSurveyStartCollectingMessageEncodeRequest> TimeSlicedSurveyStartCollectingMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyStartCollectingMessageEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedSurveyStartCollectingMessageEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedSurveyStartCollectingMessageEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TimeSlicedSurveyStartCollectingMessageEncodeResponse> TimeSlicedSurveyStartCollectingMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyStartCollectingMessageEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedSurveyStartCollectingMessageEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedSurveyStartCollectingMessageDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TimeSlicedSurveyStartCollectingMessageDecodeRequest> TimeSlicedSurveyStartCollectingMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyStartCollectingMessageDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedSurveyStartCollectingMessageDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedSurveyStartCollectingMessageDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TimeSlicedSurveyStartCollectingMessageDecodeResponse> TimeSlicedSurveyStartCollectingMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyStartCollectingMessageDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedSurveyStartCollectingMessageDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignedTimeSlicedSurveyStartCollectingMessageEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeRequest> SignedTimeSlicedSurveyStartCollectingMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignedTimeSlicedSurveyStartCollectingMessageEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeResponse> SignedTimeSlicedSurveyStartCollectingMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignedTimeSlicedSurveyStartCollectingMessageDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeRequest> SignedTimeSlicedSurveyStartCollectingMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignedTimeSlicedSurveyStartCollectingMessageDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeResponse> SignedTimeSlicedSurveyStartCollectingMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedSurveyStopCollectingMessageEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TimeSlicedSurveyStopCollectingMessageEncodeRequest> TimeSlicedSurveyStopCollectingMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyStopCollectingMessageEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedSurveyStopCollectingMessageEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedSurveyStopCollectingMessageEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TimeSlicedSurveyStopCollectingMessageEncodeResponse> TimeSlicedSurveyStopCollectingMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyStopCollectingMessageEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedSurveyStopCollectingMessageEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedSurveyStopCollectingMessageDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TimeSlicedSurveyStopCollectingMessageDecodeRequest> TimeSlicedSurveyStopCollectingMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyStopCollectingMessageDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedSurveyStopCollectingMessageDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedSurveyStopCollectingMessageDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TimeSlicedSurveyStopCollectingMessageDecodeResponse> TimeSlicedSurveyStopCollectingMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyStopCollectingMessageDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedSurveyStopCollectingMessageDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignedTimeSlicedSurveyStopCollectingMessageEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeRequest> SignedTimeSlicedSurveyStopCollectingMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignedTimeSlicedSurveyStopCollectingMessageEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeResponse> SignedTimeSlicedSurveyStopCollectingMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignedTimeSlicedSurveyStopCollectingMessageDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeRequest> SignedTimeSlicedSurveyStopCollectingMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignedTimeSlicedSurveyStopCollectingMessageDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeResponse> SignedTimeSlicedSurveyStopCollectingMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SurveyRequestMessageEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SurveyRequestMessageEncodeRequest> SurveyRequestMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.SurveyRequestMessageEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SurveyRequestMessageEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SurveyRequestMessageEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SurveyRequestMessageEncodeResponse> SurveyRequestMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.SurveyRequestMessageEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SurveyRequestMessageEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SurveyRequestMessageDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SurveyRequestMessageDecodeRequest> SurveyRequestMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.SurveyRequestMessageDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SurveyRequestMessageDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SurveyRequestMessageDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SurveyRequestMessageDecodeResponse> SurveyRequestMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.SurveyRequestMessageDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SurveyRequestMessageDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedSurveyRequestMessageEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TimeSlicedSurveyRequestMessageEncodeRequest> TimeSlicedSurveyRequestMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyRequestMessageEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedSurveyRequestMessageEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedSurveyRequestMessageEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TimeSlicedSurveyRequestMessageEncodeResponse> TimeSlicedSurveyRequestMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyRequestMessageEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedSurveyRequestMessageEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedSurveyRequestMessageDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TimeSlicedSurveyRequestMessageDecodeRequest> TimeSlicedSurveyRequestMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyRequestMessageDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedSurveyRequestMessageDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedSurveyRequestMessageDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TimeSlicedSurveyRequestMessageDecodeResponse> TimeSlicedSurveyRequestMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyRequestMessageDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedSurveyRequestMessageDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignedSurveyRequestMessageEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SignedSurveyRequestMessageEncodeRequest> SignedSurveyRequestMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.SignedSurveyRequestMessageEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignedSurveyRequestMessageEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignedSurveyRequestMessageEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SignedSurveyRequestMessageEncodeResponse> SignedSurveyRequestMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.SignedSurveyRequestMessageEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignedSurveyRequestMessageEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignedSurveyRequestMessageDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SignedSurveyRequestMessageDecodeRequest> SignedSurveyRequestMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.SignedSurveyRequestMessageDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignedSurveyRequestMessageDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignedSurveyRequestMessageDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SignedSurveyRequestMessageDecodeResponse> SignedSurveyRequestMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.SignedSurveyRequestMessageDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignedSurveyRequestMessageDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignedTimeSlicedSurveyRequestMessageEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyRequestMessageEncodeRequest> SignedTimeSlicedSurveyRequestMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyRequestMessageEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyRequestMessageEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignedTimeSlicedSurveyRequestMessageEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyRequestMessageEncodeResponse> SignedTimeSlicedSurveyRequestMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyRequestMessageEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyRequestMessageEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignedTimeSlicedSurveyRequestMessageDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyRequestMessageDecodeRequest> SignedTimeSlicedSurveyRequestMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyRequestMessageDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyRequestMessageDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignedTimeSlicedSurveyRequestMessageDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyRequestMessageDecodeResponse> SignedTimeSlicedSurveyRequestMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyRequestMessageDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyRequestMessageDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for EncryptedBodyEncodeRequest</summary>
        public static readonly Marshaller<Stellar.EncryptedBodyEncodeRequest> EncryptedBodyEncodeRequestMarshaller = Marshallers.Create<Stellar.EncryptedBodyEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.EncryptedBodyEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for EncryptedBodyEncodeResponse</summary>
        public static readonly Marshaller<Stellar.EncryptedBodyEncodeResponse> EncryptedBodyEncodeResponseMarshaller = Marshallers.Create<Stellar.EncryptedBodyEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.EncryptedBodyEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for EncryptedBodyDecodeRequest</summary>
        public static readonly Marshaller<Stellar.EncryptedBodyDecodeRequest> EncryptedBodyDecodeRequestMarshaller = Marshallers.Create<Stellar.EncryptedBodyDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.EncryptedBodyDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for EncryptedBodyDecodeResponse</summary>
        public static readonly Marshaller<Stellar.EncryptedBodyDecodeResponse> EncryptedBodyDecodeResponseMarshaller = Marshallers.Create<Stellar.EncryptedBodyDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.EncryptedBodyDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SurveyResponseMessageEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SurveyResponseMessageEncodeRequest> SurveyResponseMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.SurveyResponseMessageEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SurveyResponseMessageEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SurveyResponseMessageEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SurveyResponseMessageEncodeResponse> SurveyResponseMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.SurveyResponseMessageEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SurveyResponseMessageEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SurveyResponseMessageDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SurveyResponseMessageDecodeRequest> SurveyResponseMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.SurveyResponseMessageDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SurveyResponseMessageDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SurveyResponseMessageDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SurveyResponseMessageDecodeResponse> SurveyResponseMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.SurveyResponseMessageDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SurveyResponseMessageDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedSurveyResponseMessageEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TimeSlicedSurveyResponseMessageEncodeRequest> TimeSlicedSurveyResponseMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyResponseMessageEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedSurveyResponseMessageEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedSurveyResponseMessageEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TimeSlicedSurveyResponseMessageEncodeResponse> TimeSlicedSurveyResponseMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyResponseMessageEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedSurveyResponseMessageEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedSurveyResponseMessageDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TimeSlicedSurveyResponseMessageDecodeRequest> TimeSlicedSurveyResponseMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyResponseMessageDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedSurveyResponseMessageDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedSurveyResponseMessageDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TimeSlicedSurveyResponseMessageDecodeResponse> TimeSlicedSurveyResponseMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyResponseMessageDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedSurveyResponseMessageDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignedSurveyResponseMessageEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SignedSurveyResponseMessageEncodeRequest> SignedSurveyResponseMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.SignedSurveyResponseMessageEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignedSurveyResponseMessageEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignedSurveyResponseMessageEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SignedSurveyResponseMessageEncodeResponse> SignedSurveyResponseMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.SignedSurveyResponseMessageEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignedSurveyResponseMessageEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignedSurveyResponseMessageDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SignedSurveyResponseMessageDecodeRequest> SignedSurveyResponseMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.SignedSurveyResponseMessageDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignedSurveyResponseMessageDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignedSurveyResponseMessageDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SignedSurveyResponseMessageDecodeResponse> SignedSurveyResponseMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.SignedSurveyResponseMessageDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignedSurveyResponseMessageDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignedTimeSlicedSurveyResponseMessageEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyResponseMessageEncodeRequest> SignedTimeSlicedSurveyResponseMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyResponseMessageEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyResponseMessageEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignedTimeSlicedSurveyResponseMessageEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyResponseMessageEncodeResponse> SignedTimeSlicedSurveyResponseMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyResponseMessageEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyResponseMessageEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignedTimeSlicedSurveyResponseMessageDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyResponseMessageDecodeRequest> SignedTimeSlicedSurveyResponseMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyResponseMessageDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyResponseMessageDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignedTimeSlicedSurveyResponseMessageDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyResponseMessageDecodeResponse> SignedTimeSlicedSurveyResponseMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyResponseMessageDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyResponseMessageDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PeerStatsEncodeRequest</summary>
        public static readonly Marshaller<Stellar.PeerStatsEncodeRequest> PeerStatsEncodeRequestMarshaller = Marshallers.Create<Stellar.PeerStatsEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PeerStatsEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PeerStatsEncodeResponse</summary>
        public static readonly Marshaller<Stellar.PeerStatsEncodeResponse> PeerStatsEncodeResponseMarshaller = Marshallers.Create<Stellar.PeerStatsEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PeerStatsEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PeerStatsDecodeRequest</summary>
        public static readonly Marshaller<Stellar.PeerStatsDecodeRequest> PeerStatsDecodeRequestMarshaller = Marshallers.Create<Stellar.PeerStatsDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PeerStatsDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PeerStatsDecodeResponse</summary>
        public static readonly Marshaller<Stellar.PeerStatsDecodeResponse> PeerStatsDecodeResponseMarshaller = Marshallers.Create<Stellar.PeerStatsDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PeerStatsDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PeerStatListEncodeRequest</summary>
        public static readonly Marshaller<Stellar.PeerStatListEncodeRequest> PeerStatListEncodeRequestMarshaller = Marshallers.Create<Stellar.PeerStatListEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PeerStatListEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PeerStatListEncodeResponse</summary>
        public static readonly Marshaller<Stellar.PeerStatListEncodeResponse> PeerStatListEncodeResponseMarshaller = Marshallers.Create<Stellar.PeerStatListEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PeerStatListEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PeerStatListDecodeRequest</summary>
        public static readonly Marshaller<Stellar.PeerStatListDecodeRequest> PeerStatListDecodeRequestMarshaller = Marshallers.Create<Stellar.PeerStatListDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PeerStatListDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PeerStatListDecodeResponse</summary>
        public static readonly Marshaller<Stellar.PeerStatListDecodeResponse> PeerStatListDecodeResponseMarshaller = Marshallers.Create<Stellar.PeerStatListDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PeerStatListDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedNodeDataEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TimeSlicedNodeDataEncodeRequest> TimeSlicedNodeDataEncodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedNodeDataEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedNodeDataEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedNodeDataEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TimeSlicedNodeDataEncodeResponse> TimeSlicedNodeDataEncodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedNodeDataEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedNodeDataEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedNodeDataDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TimeSlicedNodeDataDecodeRequest> TimeSlicedNodeDataDecodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedNodeDataDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedNodeDataDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedNodeDataDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TimeSlicedNodeDataDecodeResponse> TimeSlicedNodeDataDecodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedNodeDataDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedNodeDataDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedPeerDataEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TimeSlicedPeerDataEncodeRequest> TimeSlicedPeerDataEncodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedPeerDataEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedPeerDataEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedPeerDataEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TimeSlicedPeerDataEncodeResponse> TimeSlicedPeerDataEncodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedPeerDataEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedPeerDataEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedPeerDataDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TimeSlicedPeerDataDecodeRequest> TimeSlicedPeerDataDecodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedPeerDataDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedPeerDataDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedPeerDataDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TimeSlicedPeerDataDecodeResponse> TimeSlicedPeerDataDecodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedPeerDataDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedPeerDataDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedPeerDataListEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TimeSlicedPeerDataListEncodeRequest> TimeSlicedPeerDataListEncodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedPeerDataListEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedPeerDataListEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedPeerDataListEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TimeSlicedPeerDataListEncodeResponse> TimeSlicedPeerDataListEncodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedPeerDataListEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedPeerDataListEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedPeerDataListDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TimeSlicedPeerDataListDecodeRequest> TimeSlicedPeerDataListDecodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedPeerDataListDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedPeerDataListDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeSlicedPeerDataListDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TimeSlicedPeerDataListDecodeResponse> TimeSlicedPeerDataListDecodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedPeerDataListDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeSlicedPeerDataListDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TopologyResponseBodyV0EncodeRequest</summary>
        public static readonly Marshaller<Stellar.TopologyResponseBodyV0EncodeRequest> TopologyResponseBodyV0EncodeRequestMarshaller = Marshallers.Create<Stellar.TopologyResponseBodyV0EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TopologyResponseBodyV0EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TopologyResponseBodyV0EncodeResponse</summary>
        public static readonly Marshaller<Stellar.TopologyResponseBodyV0EncodeResponse> TopologyResponseBodyV0EncodeResponseMarshaller = Marshallers.Create<Stellar.TopologyResponseBodyV0EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TopologyResponseBodyV0EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TopologyResponseBodyV0DecodeRequest</summary>
        public static readonly Marshaller<Stellar.TopologyResponseBodyV0DecodeRequest> TopologyResponseBodyV0DecodeRequestMarshaller = Marshallers.Create<Stellar.TopologyResponseBodyV0DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TopologyResponseBodyV0DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TopologyResponseBodyV0DecodeResponse</summary>
        public static readonly Marshaller<Stellar.TopologyResponseBodyV0DecodeResponse> TopologyResponseBodyV0DecodeResponseMarshaller = Marshallers.Create<Stellar.TopologyResponseBodyV0DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TopologyResponseBodyV0DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TopologyResponseBodyV1EncodeRequest</summary>
        public static readonly Marshaller<Stellar.TopologyResponseBodyV1EncodeRequest> TopologyResponseBodyV1EncodeRequestMarshaller = Marshallers.Create<Stellar.TopologyResponseBodyV1EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TopologyResponseBodyV1EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TopologyResponseBodyV1EncodeResponse</summary>
        public static readonly Marshaller<Stellar.TopologyResponseBodyV1EncodeResponse> TopologyResponseBodyV1EncodeResponseMarshaller = Marshallers.Create<Stellar.TopologyResponseBodyV1EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TopologyResponseBodyV1EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TopologyResponseBodyV1DecodeRequest</summary>
        public static readonly Marshaller<Stellar.TopologyResponseBodyV1DecodeRequest> TopologyResponseBodyV1DecodeRequestMarshaller = Marshallers.Create<Stellar.TopologyResponseBodyV1DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TopologyResponseBodyV1DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TopologyResponseBodyV1DecodeResponse</summary>
        public static readonly Marshaller<Stellar.TopologyResponseBodyV1DecodeResponse> TopologyResponseBodyV1DecodeResponseMarshaller = Marshallers.Create<Stellar.TopologyResponseBodyV1DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TopologyResponseBodyV1DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TopologyResponseBodyV2EncodeRequest</summary>
        public static readonly Marshaller<Stellar.TopologyResponseBodyV2EncodeRequest> TopologyResponseBodyV2EncodeRequestMarshaller = Marshallers.Create<Stellar.TopologyResponseBodyV2EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TopologyResponseBodyV2EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TopologyResponseBodyV2EncodeResponse</summary>
        public static readonly Marshaller<Stellar.TopologyResponseBodyV2EncodeResponse> TopologyResponseBodyV2EncodeResponseMarshaller = Marshallers.Create<Stellar.TopologyResponseBodyV2EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TopologyResponseBodyV2EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TopologyResponseBodyV2DecodeRequest</summary>
        public static readonly Marshaller<Stellar.TopologyResponseBodyV2DecodeRequest> TopologyResponseBodyV2DecodeRequestMarshaller = Marshallers.Create<Stellar.TopologyResponseBodyV2DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TopologyResponseBodyV2DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TopologyResponseBodyV2DecodeResponse</summary>
        public static readonly Marshaller<Stellar.TopologyResponseBodyV2DecodeResponse> TopologyResponseBodyV2DecodeResponseMarshaller = Marshallers.Create<Stellar.TopologyResponseBodyV2DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TopologyResponseBodyV2DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SurveyResponseBodyEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SurveyResponseBodyEncodeRequest> SurveyResponseBodyEncodeRequestMarshaller = Marshallers.Create<Stellar.SurveyResponseBodyEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SurveyResponseBodyEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SurveyResponseBodyEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SurveyResponseBodyEncodeResponse> SurveyResponseBodyEncodeResponseMarshaller = Marshallers.Create<Stellar.SurveyResponseBodyEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SurveyResponseBodyEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SurveyResponseBodyDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SurveyResponseBodyDecodeRequest> SurveyResponseBodyDecodeRequestMarshaller = Marshallers.Create<Stellar.SurveyResponseBodyDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SurveyResponseBodyDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SurveyResponseBodyDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SurveyResponseBodyDecodeResponse> SurveyResponseBodyDecodeResponseMarshaller = Marshallers.Create<Stellar.SurveyResponseBodyDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SurveyResponseBodyDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TxAdvertVectorEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TxAdvertVectorEncodeRequest> TxAdvertVectorEncodeRequestMarshaller = Marshallers.Create<Stellar.TxAdvertVectorEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TxAdvertVectorEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TxAdvertVectorEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TxAdvertVectorEncodeResponse> TxAdvertVectorEncodeResponseMarshaller = Marshallers.Create<Stellar.TxAdvertVectorEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TxAdvertVectorEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TxAdvertVectorDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TxAdvertVectorDecodeRequest> TxAdvertVectorDecodeRequestMarshaller = Marshallers.Create<Stellar.TxAdvertVectorDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TxAdvertVectorDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TxAdvertVectorDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TxAdvertVectorDecodeResponse> TxAdvertVectorDecodeResponseMarshaller = Marshallers.Create<Stellar.TxAdvertVectorDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TxAdvertVectorDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for FloodAdvertEncodeRequest</summary>
        public static readonly Marshaller<Stellar.FloodAdvertEncodeRequest> FloodAdvertEncodeRequestMarshaller = Marshallers.Create<Stellar.FloodAdvertEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.FloodAdvertEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for FloodAdvertEncodeResponse</summary>
        public static readonly Marshaller<Stellar.FloodAdvertEncodeResponse> FloodAdvertEncodeResponseMarshaller = Marshallers.Create<Stellar.FloodAdvertEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.FloodAdvertEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for FloodAdvertDecodeRequest</summary>
        public static readonly Marshaller<Stellar.FloodAdvertDecodeRequest> FloodAdvertDecodeRequestMarshaller = Marshallers.Create<Stellar.FloodAdvertDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.FloodAdvertDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for FloodAdvertDecodeResponse</summary>
        public static readonly Marshaller<Stellar.FloodAdvertDecodeResponse> FloodAdvertDecodeResponseMarshaller = Marshallers.Create<Stellar.FloodAdvertDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.FloodAdvertDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TxDemandVectorEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TxDemandVectorEncodeRequest> TxDemandVectorEncodeRequestMarshaller = Marshallers.Create<Stellar.TxDemandVectorEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TxDemandVectorEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TxDemandVectorEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TxDemandVectorEncodeResponse> TxDemandVectorEncodeResponseMarshaller = Marshallers.Create<Stellar.TxDemandVectorEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TxDemandVectorEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TxDemandVectorDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TxDemandVectorDecodeRequest> TxDemandVectorDecodeRequestMarshaller = Marshallers.Create<Stellar.TxDemandVectorDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TxDemandVectorDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TxDemandVectorDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TxDemandVectorDecodeResponse> TxDemandVectorDecodeResponseMarshaller = Marshallers.Create<Stellar.TxDemandVectorDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TxDemandVectorDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for FloodDemandEncodeRequest</summary>
        public static readonly Marshaller<Stellar.FloodDemandEncodeRequest> FloodDemandEncodeRequestMarshaller = Marshallers.Create<Stellar.FloodDemandEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.FloodDemandEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for FloodDemandEncodeResponse</summary>
        public static readonly Marshaller<Stellar.FloodDemandEncodeResponse> FloodDemandEncodeResponseMarshaller = Marshallers.Create<Stellar.FloodDemandEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.FloodDemandEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for FloodDemandDecodeRequest</summary>
        public static readonly Marshaller<Stellar.FloodDemandDecodeRequest> FloodDemandDecodeRequestMarshaller = Marshallers.Create<Stellar.FloodDemandDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.FloodDemandDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for FloodDemandDecodeResponse</summary>
        public static readonly Marshaller<Stellar.FloodDemandDecodeResponse> FloodDemandDecodeResponseMarshaller = Marshallers.Create<Stellar.FloodDemandDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.FloodDemandDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for StellarMessageEncodeRequest</summary>
        public static readonly Marshaller<Stellar.StellarMessageEncodeRequest> StellarMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.StellarMessageEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.StellarMessageEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for StellarMessageEncodeResponse</summary>
        public static readonly Marshaller<Stellar.StellarMessageEncodeResponse> StellarMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.StellarMessageEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.StellarMessageEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for StellarMessageDecodeRequest</summary>
        public static readonly Marshaller<Stellar.StellarMessageDecodeRequest> StellarMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.StellarMessageDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.StellarMessageDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for StellarMessageDecodeResponse</summary>
        public static readonly Marshaller<Stellar.StellarMessageDecodeResponse> StellarMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.StellarMessageDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.StellarMessageDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AuthenticatedMessageEncodeRequest</summary>
        public static readonly Marshaller<Stellar.AuthenticatedMessageEncodeRequest> AuthenticatedMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.AuthenticatedMessageEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AuthenticatedMessageEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AuthenticatedMessageEncodeResponse</summary>
        public static readonly Marshaller<Stellar.AuthenticatedMessageEncodeResponse> AuthenticatedMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.AuthenticatedMessageEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AuthenticatedMessageEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AuthenticatedMessageDecodeRequest</summary>
        public static readonly Marshaller<Stellar.AuthenticatedMessageDecodeRequest> AuthenticatedMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.AuthenticatedMessageDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AuthenticatedMessageDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AuthenticatedMessageDecodeResponse</summary>
        public static readonly Marshaller<Stellar.AuthenticatedMessageDecodeResponse> AuthenticatedMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.AuthenticatedMessageDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AuthenticatedMessageDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ValueEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ValueEncodeRequest> ValueEncodeRequestMarshaller = Marshallers.Create<Stellar.ValueEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ValueEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ValueEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ValueEncodeResponse> ValueEncodeResponseMarshaller = Marshallers.Create<Stellar.ValueEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ValueEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ValueDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ValueDecodeRequest> ValueDecodeRequestMarshaller = Marshallers.Create<Stellar.ValueDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ValueDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ValueDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ValueDecodeResponse> ValueDecodeResponseMarshaller = Marshallers.Create<Stellar.ValueDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ValueDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPBallotEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCPBallotEncodeRequest> SCPBallotEncodeRequestMarshaller = Marshallers.Create<Stellar.SCPBallotEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPBallotEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPBallotEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCPBallotEncodeResponse> SCPBallotEncodeResponseMarshaller = Marshallers.Create<Stellar.SCPBallotEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPBallotEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPBallotDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCPBallotDecodeRequest> SCPBallotDecodeRequestMarshaller = Marshallers.Create<Stellar.SCPBallotDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPBallotDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPBallotDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCPBallotDecodeResponse> SCPBallotDecodeResponseMarshaller = Marshallers.Create<Stellar.SCPBallotDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPBallotDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPStatementTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCPStatementTypeEncodeRequest> SCPStatementTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.SCPStatementTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPStatementTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPStatementTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCPStatementTypeEncodeResponse> SCPStatementTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.SCPStatementTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPStatementTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPStatementTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCPStatementTypeDecodeRequest> SCPStatementTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.SCPStatementTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPStatementTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPStatementTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCPStatementTypeDecodeResponse> SCPStatementTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.SCPStatementTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPStatementTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPNominationEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCPNominationEncodeRequest> SCPNominationEncodeRequestMarshaller = Marshallers.Create<Stellar.SCPNominationEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPNominationEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPNominationEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCPNominationEncodeResponse> SCPNominationEncodeResponseMarshaller = Marshallers.Create<Stellar.SCPNominationEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPNominationEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPNominationDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCPNominationDecodeRequest> SCPNominationDecodeRequestMarshaller = Marshallers.Create<Stellar.SCPNominationDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPNominationDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPNominationDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCPNominationDecodeResponse> SCPNominationDecodeResponseMarshaller = Marshallers.Create<Stellar.SCPNominationDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPNominationDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPStatementEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCPStatementEncodeRequest> SCPStatementEncodeRequestMarshaller = Marshallers.Create<Stellar.SCPStatementEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPStatementEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPStatementEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCPStatementEncodeResponse> SCPStatementEncodeResponseMarshaller = Marshallers.Create<Stellar.SCPStatementEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPStatementEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPStatementDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCPStatementDecodeRequest> SCPStatementDecodeRequestMarshaller = Marshallers.Create<Stellar.SCPStatementDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPStatementDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPStatementDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCPStatementDecodeResponse> SCPStatementDecodeResponseMarshaller = Marshallers.Create<Stellar.SCPStatementDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPStatementDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPEnvelopeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCPEnvelopeEncodeRequest> SCPEnvelopeEncodeRequestMarshaller = Marshallers.Create<Stellar.SCPEnvelopeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPEnvelopeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPEnvelopeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCPEnvelopeEncodeResponse> SCPEnvelopeEncodeResponseMarshaller = Marshallers.Create<Stellar.SCPEnvelopeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPEnvelopeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPEnvelopeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCPEnvelopeDecodeRequest> SCPEnvelopeDecodeRequestMarshaller = Marshallers.Create<Stellar.SCPEnvelopeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPEnvelopeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPEnvelopeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCPEnvelopeDecodeResponse> SCPEnvelopeDecodeResponseMarshaller = Marshallers.Create<Stellar.SCPEnvelopeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPEnvelopeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPQuorumSetEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SCPQuorumSetEncodeRequest> SCPQuorumSetEncodeRequestMarshaller = Marshallers.Create<Stellar.SCPQuorumSetEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPQuorumSetEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPQuorumSetEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SCPQuorumSetEncodeResponse> SCPQuorumSetEncodeResponseMarshaller = Marshallers.Create<Stellar.SCPQuorumSetEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPQuorumSetEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPQuorumSetDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SCPQuorumSetDecodeRequest> SCPQuorumSetDecodeRequestMarshaller = Marshallers.Create<Stellar.SCPQuorumSetDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPQuorumSetDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SCPQuorumSetDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SCPQuorumSetDecodeResponse> SCPQuorumSetDecodeResponseMarshaller = Marshallers.Create<Stellar.SCPQuorumSetDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SCPQuorumSetDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolParametersEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolParametersEncodeRequest> LiquidityPoolParametersEncodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolParametersEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolParametersEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolParametersEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolParametersEncodeResponse> LiquidityPoolParametersEncodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolParametersEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolParametersEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolParametersDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolParametersDecodeRequest> LiquidityPoolParametersDecodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolParametersDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolParametersDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolParametersDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolParametersDecodeResponse> LiquidityPoolParametersDecodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolParametersDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolParametersDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for MuxedAccountEncodeRequest</summary>
        public static readonly Marshaller<Stellar.MuxedAccountEncodeRequest> MuxedAccountEncodeRequestMarshaller = Marshallers.Create<Stellar.MuxedAccountEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.MuxedAccountEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for MuxedAccountEncodeResponse</summary>
        public static readonly Marshaller<Stellar.MuxedAccountEncodeResponse> MuxedAccountEncodeResponseMarshaller = Marshallers.Create<Stellar.MuxedAccountEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.MuxedAccountEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for MuxedAccountDecodeRequest</summary>
        public static readonly Marshaller<Stellar.MuxedAccountDecodeRequest> MuxedAccountDecodeRequestMarshaller = Marshallers.Create<Stellar.MuxedAccountDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.MuxedAccountDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for MuxedAccountDecodeResponse</summary>
        public static readonly Marshaller<Stellar.MuxedAccountDecodeResponse> MuxedAccountDecodeResponseMarshaller = Marshallers.Create<Stellar.MuxedAccountDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.MuxedAccountDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DecoratedSignatureEncodeRequest</summary>
        public static readonly Marshaller<Stellar.DecoratedSignatureEncodeRequest> DecoratedSignatureEncodeRequestMarshaller = Marshallers.Create<Stellar.DecoratedSignatureEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DecoratedSignatureEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DecoratedSignatureEncodeResponse</summary>
        public static readonly Marshaller<Stellar.DecoratedSignatureEncodeResponse> DecoratedSignatureEncodeResponseMarshaller = Marshallers.Create<Stellar.DecoratedSignatureEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DecoratedSignatureEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DecoratedSignatureDecodeRequest</summary>
        public static readonly Marshaller<Stellar.DecoratedSignatureDecodeRequest> DecoratedSignatureDecodeRequestMarshaller = Marshallers.Create<Stellar.DecoratedSignatureDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DecoratedSignatureDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DecoratedSignatureDecodeResponse</summary>
        public static readonly Marshaller<Stellar.DecoratedSignatureDecodeResponse> DecoratedSignatureDecodeResponseMarshaller = Marshallers.Create<Stellar.DecoratedSignatureDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DecoratedSignatureDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OperationTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.OperationTypeEncodeRequest> OperationTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.OperationTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OperationTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OperationTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.OperationTypeEncodeResponse> OperationTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.OperationTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OperationTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OperationTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.OperationTypeDecodeRequest> OperationTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.OperationTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OperationTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OperationTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.OperationTypeDecodeResponse> OperationTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.OperationTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OperationTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateAccountOpEncodeRequest</summary>
        public static readonly Marshaller<Stellar.CreateAccountOpEncodeRequest> CreateAccountOpEncodeRequestMarshaller = Marshallers.Create<Stellar.CreateAccountOpEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateAccountOpEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateAccountOpEncodeResponse</summary>
        public static readonly Marshaller<Stellar.CreateAccountOpEncodeResponse> CreateAccountOpEncodeResponseMarshaller = Marshallers.Create<Stellar.CreateAccountOpEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateAccountOpEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateAccountOpDecodeRequest</summary>
        public static readonly Marshaller<Stellar.CreateAccountOpDecodeRequest> CreateAccountOpDecodeRequestMarshaller = Marshallers.Create<Stellar.CreateAccountOpDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateAccountOpDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateAccountOpDecodeResponse</summary>
        public static readonly Marshaller<Stellar.CreateAccountOpDecodeResponse> CreateAccountOpDecodeResponseMarshaller = Marshallers.Create<Stellar.CreateAccountOpDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateAccountOpDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PaymentOpEncodeRequest</summary>
        public static readonly Marshaller<Stellar.PaymentOpEncodeRequest> PaymentOpEncodeRequestMarshaller = Marshallers.Create<Stellar.PaymentOpEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PaymentOpEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PaymentOpEncodeResponse</summary>
        public static readonly Marshaller<Stellar.PaymentOpEncodeResponse> PaymentOpEncodeResponseMarshaller = Marshallers.Create<Stellar.PaymentOpEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PaymentOpEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PaymentOpDecodeRequest</summary>
        public static readonly Marshaller<Stellar.PaymentOpDecodeRequest> PaymentOpDecodeRequestMarshaller = Marshallers.Create<Stellar.PaymentOpDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PaymentOpDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PaymentOpDecodeResponse</summary>
        public static readonly Marshaller<Stellar.PaymentOpDecodeResponse> PaymentOpDecodeResponseMarshaller = Marshallers.Create<Stellar.PaymentOpDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PaymentOpDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PathPaymentStrictReceiveOpEncodeRequest</summary>
        public static readonly Marshaller<Stellar.PathPaymentStrictReceiveOpEncodeRequest> PathPaymentStrictReceiveOpEncodeRequestMarshaller = Marshallers.Create<Stellar.PathPaymentStrictReceiveOpEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PathPaymentStrictReceiveOpEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PathPaymentStrictReceiveOpEncodeResponse</summary>
        public static readonly Marshaller<Stellar.PathPaymentStrictReceiveOpEncodeResponse> PathPaymentStrictReceiveOpEncodeResponseMarshaller = Marshallers.Create<Stellar.PathPaymentStrictReceiveOpEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PathPaymentStrictReceiveOpEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PathPaymentStrictReceiveOpDecodeRequest</summary>
        public static readonly Marshaller<Stellar.PathPaymentStrictReceiveOpDecodeRequest> PathPaymentStrictReceiveOpDecodeRequestMarshaller = Marshallers.Create<Stellar.PathPaymentStrictReceiveOpDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PathPaymentStrictReceiveOpDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PathPaymentStrictReceiveOpDecodeResponse</summary>
        public static readonly Marshaller<Stellar.PathPaymentStrictReceiveOpDecodeResponse> PathPaymentStrictReceiveOpDecodeResponseMarshaller = Marshallers.Create<Stellar.PathPaymentStrictReceiveOpDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PathPaymentStrictReceiveOpDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PathPaymentStrictSendOpEncodeRequest</summary>
        public static readonly Marshaller<Stellar.PathPaymentStrictSendOpEncodeRequest> PathPaymentStrictSendOpEncodeRequestMarshaller = Marshallers.Create<Stellar.PathPaymentStrictSendOpEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PathPaymentStrictSendOpEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PathPaymentStrictSendOpEncodeResponse</summary>
        public static readonly Marshaller<Stellar.PathPaymentStrictSendOpEncodeResponse> PathPaymentStrictSendOpEncodeResponseMarshaller = Marshallers.Create<Stellar.PathPaymentStrictSendOpEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PathPaymentStrictSendOpEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PathPaymentStrictSendOpDecodeRequest</summary>
        public static readonly Marshaller<Stellar.PathPaymentStrictSendOpDecodeRequest> PathPaymentStrictSendOpDecodeRequestMarshaller = Marshallers.Create<Stellar.PathPaymentStrictSendOpDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PathPaymentStrictSendOpDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PathPaymentStrictSendOpDecodeResponse</summary>
        public static readonly Marshaller<Stellar.PathPaymentStrictSendOpDecodeResponse> PathPaymentStrictSendOpDecodeResponseMarshaller = Marshallers.Create<Stellar.PathPaymentStrictSendOpDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PathPaymentStrictSendOpDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageSellOfferOpEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ManageSellOfferOpEncodeRequest> ManageSellOfferOpEncodeRequestMarshaller = Marshallers.Create<Stellar.ManageSellOfferOpEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageSellOfferOpEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageSellOfferOpEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ManageSellOfferOpEncodeResponse> ManageSellOfferOpEncodeResponseMarshaller = Marshallers.Create<Stellar.ManageSellOfferOpEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageSellOfferOpEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageSellOfferOpDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ManageSellOfferOpDecodeRequest> ManageSellOfferOpDecodeRequestMarshaller = Marshallers.Create<Stellar.ManageSellOfferOpDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageSellOfferOpDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageSellOfferOpDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ManageSellOfferOpDecodeResponse> ManageSellOfferOpDecodeResponseMarshaller = Marshallers.Create<Stellar.ManageSellOfferOpDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageSellOfferOpDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageBuyOfferOpEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ManageBuyOfferOpEncodeRequest> ManageBuyOfferOpEncodeRequestMarshaller = Marshallers.Create<Stellar.ManageBuyOfferOpEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageBuyOfferOpEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageBuyOfferOpEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ManageBuyOfferOpEncodeResponse> ManageBuyOfferOpEncodeResponseMarshaller = Marshallers.Create<Stellar.ManageBuyOfferOpEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageBuyOfferOpEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageBuyOfferOpDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ManageBuyOfferOpDecodeRequest> ManageBuyOfferOpDecodeRequestMarshaller = Marshallers.Create<Stellar.ManageBuyOfferOpDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageBuyOfferOpDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageBuyOfferOpDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ManageBuyOfferOpDecodeResponse> ManageBuyOfferOpDecodeResponseMarshaller = Marshallers.Create<Stellar.ManageBuyOfferOpDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageBuyOfferOpDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreatePassiveSellOfferOpEncodeRequest</summary>
        public static readonly Marshaller<Stellar.CreatePassiveSellOfferOpEncodeRequest> CreatePassiveSellOfferOpEncodeRequestMarshaller = Marshallers.Create<Stellar.CreatePassiveSellOfferOpEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreatePassiveSellOfferOpEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreatePassiveSellOfferOpEncodeResponse</summary>
        public static readonly Marshaller<Stellar.CreatePassiveSellOfferOpEncodeResponse> CreatePassiveSellOfferOpEncodeResponseMarshaller = Marshallers.Create<Stellar.CreatePassiveSellOfferOpEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreatePassiveSellOfferOpEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreatePassiveSellOfferOpDecodeRequest</summary>
        public static readonly Marshaller<Stellar.CreatePassiveSellOfferOpDecodeRequest> CreatePassiveSellOfferOpDecodeRequestMarshaller = Marshallers.Create<Stellar.CreatePassiveSellOfferOpDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreatePassiveSellOfferOpDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreatePassiveSellOfferOpDecodeResponse</summary>
        public static readonly Marshaller<Stellar.CreatePassiveSellOfferOpDecodeResponse> CreatePassiveSellOfferOpDecodeResponseMarshaller = Marshallers.Create<Stellar.CreatePassiveSellOfferOpDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreatePassiveSellOfferOpDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SetOptionsOpEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SetOptionsOpEncodeRequest> SetOptionsOpEncodeRequestMarshaller = Marshallers.Create<Stellar.SetOptionsOpEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SetOptionsOpEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SetOptionsOpEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SetOptionsOpEncodeResponse> SetOptionsOpEncodeResponseMarshaller = Marshallers.Create<Stellar.SetOptionsOpEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SetOptionsOpEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SetOptionsOpDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SetOptionsOpDecodeRequest> SetOptionsOpDecodeRequestMarshaller = Marshallers.Create<Stellar.SetOptionsOpDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SetOptionsOpDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SetOptionsOpDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SetOptionsOpDecodeResponse> SetOptionsOpDecodeResponseMarshaller = Marshallers.Create<Stellar.SetOptionsOpDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SetOptionsOpDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ChangeTrustAssetEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ChangeTrustAssetEncodeRequest> ChangeTrustAssetEncodeRequestMarshaller = Marshallers.Create<Stellar.ChangeTrustAssetEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ChangeTrustAssetEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ChangeTrustAssetEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ChangeTrustAssetEncodeResponse> ChangeTrustAssetEncodeResponseMarshaller = Marshallers.Create<Stellar.ChangeTrustAssetEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ChangeTrustAssetEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ChangeTrustAssetDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ChangeTrustAssetDecodeRequest> ChangeTrustAssetDecodeRequestMarshaller = Marshallers.Create<Stellar.ChangeTrustAssetDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ChangeTrustAssetDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ChangeTrustAssetDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ChangeTrustAssetDecodeResponse> ChangeTrustAssetDecodeResponseMarshaller = Marshallers.Create<Stellar.ChangeTrustAssetDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ChangeTrustAssetDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ChangeTrustOpEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ChangeTrustOpEncodeRequest> ChangeTrustOpEncodeRequestMarshaller = Marshallers.Create<Stellar.ChangeTrustOpEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ChangeTrustOpEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ChangeTrustOpEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ChangeTrustOpEncodeResponse> ChangeTrustOpEncodeResponseMarshaller = Marshallers.Create<Stellar.ChangeTrustOpEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ChangeTrustOpEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ChangeTrustOpDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ChangeTrustOpDecodeRequest> ChangeTrustOpDecodeRequestMarshaller = Marshallers.Create<Stellar.ChangeTrustOpDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ChangeTrustOpDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ChangeTrustOpDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ChangeTrustOpDecodeResponse> ChangeTrustOpDecodeResponseMarshaller = Marshallers.Create<Stellar.ChangeTrustOpDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ChangeTrustOpDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AllowTrustOpEncodeRequest</summary>
        public static readonly Marshaller<Stellar.AllowTrustOpEncodeRequest> AllowTrustOpEncodeRequestMarshaller = Marshallers.Create<Stellar.AllowTrustOpEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AllowTrustOpEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AllowTrustOpEncodeResponse</summary>
        public static readonly Marshaller<Stellar.AllowTrustOpEncodeResponse> AllowTrustOpEncodeResponseMarshaller = Marshallers.Create<Stellar.AllowTrustOpEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AllowTrustOpEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AllowTrustOpDecodeRequest</summary>
        public static readonly Marshaller<Stellar.AllowTrustOpDecodeRequest> AllowTrustOpDecodeRequestMarshaller = Marshallers.Create<Stellar.AllowTrustOpDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AllowTrustOpDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AllowTrustOpDecodeResponse</summary>
        public static readonly Marshaller<Stellar.AllowTrustOpDecodeResponse> AllowTrustOpDecodeResponseMarshaller = Marshallers.Create<Stellar.AllowTrustOpDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AllowTrustOpDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageDataOpEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ManageDataOpEncodeRequest> ManageDataOpEncodeRequestMarshaller = Marshallers.Create<Stellar.ManageDataOpEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageDataOpEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageDataOpEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ManageDataOpEncodeResponse> ManageDataOpEncodeResponseMarshaller = Marshallers.Create<Stellar.ManageDataOpEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageDataOpEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageDataOpDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ManageDataOpDecodeRequest> ManageDataOpDecodeRequestMarshaller = Marshallers.Create<Stellar.ManageDataOpDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageDataOpDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageDataOpDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ManageDataOpDecodeResponse> ManageDataOpDecodeResponseMarshaller = Marshallers.Create<Stellar.ManageDataOpDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageDataOpDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BumpSequenceOpEncodeRequest</summary>
        public static readonly Marshaller<Stellar.BumpSequenceOpEncodeRequest> BumpSequenceOpEncodeRequestMarshaller = Marshallers.Create<Stellar.BumpSequenceOpEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BumpSequenceOpEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BumpSequenceOpEncodeResponse</summary>
        public static readonly Marshaller<Stellar.BumpSequenceOpEncodeResponse> BumpSequenceOpEncodeResponseMarshaller = Marshallers.Create<Stellar.BumpSequenceOpEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BumpSequenceOpEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BumpSequenceOpDecodeRequest</summary>
        public static readonly Marshaller<Stellar.BumpSequenceOpDecodeRequest> BumpSequenceOpDecodeRequestMarshaller = Marshallers.Create<Stellar.BumpSequenceOpDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BumpSequenceOpDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BumpSequenceOpDecodeResponse</summary>
        public static readonly Marshaller<Stellar.BumpSequenceOpDecodeResponse> BumpSequenceOpDecodeResponseMarshaller = Marshallers.Create<Stellar.BumpSequenceOpDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BumpSequenceOpDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateClaimableBalanceOpEncodeRequest</summary>
        public static readonly Marshaller<Stellar.CreateClaimableBalanceOpEncodeRequest> CreateClaimableBalanceOpEncodeRequestMarshaller = Marshallers.Create<Stellar.CreateClaimableBalanceOpEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateClaimableBalanceOpEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateClaimableBalanceOpEncodeResponse</summary>
        public static readonly Marshaller<Stellar.CreateClaimableBalanceOpEncodeResponse> CreateClaimableBalanceOpEncodeResponseMarshaller = Marshallers.Create<Stellar.CreateClaimableBalanceOpEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateClaimableBalanceOpEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateClaimableBalanceOpDecodeRequest</summary>
        public static readonly Marshaller<Stellar.CreateClaimableBalanceOpDecodeRequest> CreateClaimableBalanceOpDecodeRequestMarshaller = Marshallers.Create<Stellar.CreateClaimableBalanceOpDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateClaimableBalanceOpDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateClaimableBalanceOpDecodeResponse</summary>
        public static readonly Marshaller<Stellar.CreateClaimableBalanceOpDecodeResponse> CreateClaimableBalanceOpDecodeResponseMarshaller = Marshallers.Create<Stellar.CreateClaimableBalanceOpDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateClaimableBalanceOpDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimClaimableBalanceOpEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimClaimableBalanceOpEncodeRequest> ClaimClaimableBalanceOpEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimClaimableBalanceOpEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimClaimableBalanceOpEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimClaimableBalanceOpEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimClaimableBalanceOpEncodeResponse> ClaimClaimableBalanceOpEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimClaimableBalanceOpEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimClaimableBalanceOpEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimClaimableBalanceOpDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimClaimableBalanceOpDecodeRequest> ClaimClaimableBalanceOpDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimClaimableBalanceOpDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimClaimableBalanceOpDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimClaimableBalanceOpDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimClaimableBalanceOpDecodeResponse> ClaimClaimableBalanceOpDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimClaimableBalanceOpDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimClaimableBalanceOpDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BeginSponsoringFutureReservesOpEncodeRequest</summary>
        public static readonly Marshaller<Stellar.BeginSponsoringFutureReservesOpEncodeRequest> BeginSponsoringFutureReservesOpEncodeRequestMarshaller = Marshallers.Create<Stellar.BeginSponsoringFutureReservesOpEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesOpEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BeginSponsoringFutureReservesOpEncodeResponse</summary>
        public static readonly Marshaller<Stellar.BeginSponsoringFutureReservesOpEncodeResponse> BeginSponsoringFutureReservesOpEncodeResponseMarshaller = Marshallers.Create<Stellar.BeginSponsoringFutureReservesOpEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesOpEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BeginSponsoringFutureReservesOpDecodeRequest</summary>
        public static readonly Marshaller<Stellar.BeginSponsoringFutureReservesOpDecodeRequest> BeginSponsoringFutureReservesOpDecodeRequestMarshaller = Marshallers.Create<Stellar.BeginSponsoringFutureReservesOpDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesOpDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BeginSponsoringFutureReservesOpDecodeResponse</summary>
        public static readonly Marshaller<Stellar.BeginSponsoringFutureReservesOpDecodeResponse> BeginSponsoringFutureReservesOpDecodeResponseMarshaller = Marshallers.Create<Stellar.BeginSponsoringFutureReservesOpDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesOpDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RevokeSponsorshipTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.RevokeSponsorshipTypeEncodeRequest> RevokeSponsorshipTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RevokeSponsorshipTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RevokeSponsorshipTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.RevokeSponsorshipTypeEncodeResponse> RevokeSponsorshipTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RevokeSponsorshipTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RevokeSponsorshipTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.RevokeSponsorshipTypeDecodeRequest> RevokeSponsorshipTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RevokeSponsorshipTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RevokeSponsorshipTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.RevokeSponsorshipTypeDecodeResponse> RevokeSponsorshipTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RevokeSponsorshipTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RevokeSponsorshipOpEncodeRequest</summary>
        public static readonly Marshaller<Stellar.RevokeSponsorshipOpEncodeRequest> RevokeSponsorshipOpEncodeRequestMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipOpEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RevokeSponsorshipOpEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RevokeSponsorshipOpEncodeResponse</summary>
        public static readonly Marshaller<Stellar.RevokeSponsorshipOpEncodeResponse> RevokeSponsorshipOpEncodeResponseMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipOpEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RevokeSponsorshipOpEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RevokeSponsorshipOpDecodeRequest</summary>
        public static readonly Marshaller<Stellar.RevokeSponsorshipOpDecodeRequest> RevokeSponsorshipOpDecodeRequestMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipOpDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RevokeSponsorshipOpDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RevokeSponsorshipOpDecodeResponse</summary>
        public static readonly Marshaller<Stellar.RevokeSponsorshipOpDecodeResponse> RevokeSponsorshipOpDecodeResponseMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipOpDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RevokeSponsorshipOpDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClawbackOpEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ClawbackOpEncodeRequest> ClawbackOpEncodeRequestMarshaller = Marshallers.Create<Stellar.ClawbackOpEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClawbackOpEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClawbackOpEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ClawbackOpEncodeResponse> ClawbackOpEncodeResponseMarshaller = Marshallers.Create<Stellar.ClawbackOpEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClawbackOpEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClawbackOpDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ClawbackOpDecodeRequest> ClawbackOpDecodeRequestMarshaller = Marshallers.Create<Stellar.ClawbackOpDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClawbackOpDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClawbackOpDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ClawbackOpDecodeResponse> ClawbackOpDecodeResponseMarshaller = Marshallers.Create<Stellar.ClawbackOpDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClawbackOpDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClawbackClaimableBalanceOpEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ClawbackClaimableBalanceOpEncodeRequest> ClawbackClaimableBalanceOpEncodeRequestMarshaller = Marshallers.Create<Stellar.ClawbackClaimableBalanceOpEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClawbackClaimableBalanceOpEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClawbackClaimableBalanceOpEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ClawbackClaimableBalanceOpEncodeResponse> ClawbackClaimableBalanceOpEncodeResponseMarshaller = Marshallers.Create<Stellar.ClawbackClaimableBalanceOpEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClawbackClaimableBalanceOpEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClawbackClaimableBalanceOpDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ClawbackClaimableBalanceOpDecodeRequest> ClawbackClaimableBalanceOpDecodeRequestMarshaller = Marshallers.Create<Stellar.ClawbackClaimableBalanceOpDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClawbackClaimableBalanceOpDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClawbackClaimableBalanceOpDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ClawbackClaimableBalanceOpDecodeResponse> ClawbackClaimableBalanceOpDecodeResponseMarshaller = Marshallers.Create<Stellar.ClawbackClaimableBalanceOpDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClawbackClaimableBalanceOpDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SetTrustLineFlagsOpEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SetTrustLineFlagsOpEncodeRequest> SetTrustLineFlagsOpEncodeRequestMarshaller = Marshallers.Create<Stellar.SetTrustLineFlagsOpEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SetTrustLineFlagsOpEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SetTrustLineFlagsOpEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SetTrustLineFlagsOpEncodeResponse> SetTrustLineFlagsOpEncodeResponseMarshaller = Marshallers.Create<Stellar.SetTrustLineFlagsOpEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SetTrustLineFlagsOpEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SetTrustLineFlagsOpDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SetTrustLineFlagsOpDecodeRequest> SetTrustLineFlagsOpDecodeRequestMarshaller = Marshallers.Create<Stellar.SetTrustLineFlagsOpDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SetTrustLineFlagsOpDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SetTrustLineFlagsOpDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SetTrustLineFlagsOpDecodeResponse> SetTrustLineFlagsOpDecodeResponseMarshaller = Marshallers.Create<Stellar.SetTrustLineFlagsOpDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SetTrustLineFlagsOpDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolDepositOpEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolDepositOpEncodeRequest> LiquidityPoolDepositOpEncodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolDepositOpEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolDepositOpEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolDepositOpEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolDepositOpEncodeResponse> LiquidityPoolDepositOpEncodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolDepositOpEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolDepositOpEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolDepositOpDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolDepositOpDecodeRequest> LiquidityPoolDepositOpDecodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolDepositOpDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolDepositOpDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolDepositOpDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolDepositOpDecodeResponse> LiquidityPoolDepositOpDecodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolDepositOpDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolDepositOpDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolWithdrawOpEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolWithdrawOpEncodeRequest> LiquidityPoolWithdrawOpEncodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolWithdrawOpEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolWithdrawOpEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolWithdrawOpEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolWithdrawOpEncodeResponse> LiquidityPoolWithdrawOpEncodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolWithdrawOpEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolWithdrawOpEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolWithdrawOpDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolWithdrawOpDecodeRequest> LiquidityPoolWithdrawOpDecodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolWithdrawOpDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolWithdrawOpDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolWithdrawOpDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolWithdrawOpDecodeResponse> LiquidityPoolWithdrawOpDecodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolWithdrawOpDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolWithdrawOpDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HostFunctionTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.HostFunctionTypeEncodeRequest> HostFunctionTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.HostFunctionTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HostFunctionTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HostFunctionTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.HostFunctionTypeEncodeResponse> HostFunctionTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.HostFunctionTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HostFunctionTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HostFunctionTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.HostFunctionTypeDecodeRequest> HostFunctionTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.HostFunctionTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HostFunctionTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HostFunctionTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.HostFunctionTypeDecodeResponse> HostFunctionTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.HostFunctionTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HostFunctionTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractIDPreimageTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ContractIDPreimageTypeEncodeRequest> ContractIDPreimageTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.ContractIDPreimageTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractIDPreimageTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractIDPreimageTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ContractIDPreimageTypeEncodeResponse> ContractIDPreimageTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.ContractIDPreimageTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractIDPreimageTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractIDPreimageTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ContractIDPreimageTypeDecodeRequest> ContractIDPreimageTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.ContractIDPreimageTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractIDPreimageTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractIDPreimageTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ContractIDPreimageTypeDecodeResponse> ContractIDPreimageTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.ContractIDPreimageTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractIDPreimageTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractIDPreimageEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ContractIDPreimageEncodeRequest> ContractIDPreimageEncodeRequestMarshaller = Marshallers.Create<Stellar.ContractIDPreimageEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractIDPreimageEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractIDPreimageEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ContractIDPreimageEncodeResponse> ContractIDPreimageEncodeResponseMarshaller = Marshallers.Create<Stellar.ContractIDPreimageEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractIDPreimageEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractIDPreimageDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ContractIDPreimageDecodeRequest> ContractIDPreimageDecodeRequestMarshaller = Marshallers.Create<Stellar.ContractIDPreimageDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractIDPreimageDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ContractIDPreimageDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ContractIDPreimageDecodeResponse> ContractIDPreimageDecodeResponseMarshaller = Marshallers.Create<Stellar.ContractIDPreimageDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ContractIDPreimageDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateContractArgsEncodeRequest</summary>
        public static readonly Marshaller<Stellar.CreateContractArgsEncodeRequest> CreateContractArgsEncodeRequestMarshaller = Marshallers.Create<Stellar.CreateContractArgsEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateContractArgsEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateContractArgsEncodeResponse</summary>
        public static readonly Marshaller<Stellar.CreateContractArgsEncodeResponse> CreateContractArgsEncodeResponseMarshaller = Marshallers.Create<Stellar.CreateContractArgsEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateContractArgsEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateContractArgsDecodeRequest</summary>
        public static readonly Marshaller<Stellar.CreateContractArgsDecodeRequest> CreateContractArgsDecodeRequestMarshaller = Marshallers.Create<Stellar.CreateContractArgsDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateContractArgsDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateContractArgsDecodeResponse</summary>
        public static readonly Marshaller<Stellar.CreateContractArgsDecodeResponse> CreateContractArgsDecodeResponseMarshaller = Marshallers.Create<Stellar.CreateContractArgsDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateContractArgsDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateContractArgsV2EncodeRequest</summary>
        public static readonly Marshaller<Stellar.CreateContractArgsV2EncodeRequest> CreateContractArgsV2EncodeRequestMarshaller = Marshallers.Create<Stellar.CreateContractArgsV2EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateContractArgsV2EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateContractArgsV2EncodeResponse</summary>
        public static readonly Marshaller<Stellar.CreateContractArgsV2EncodeResponse> CreateContractArgsV2EncodeResponseMarshaller = Marshallers.Create<Stellar.CreateContractArgsV2EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateContractArgsV2EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateContractArgsV2DecodeRequest</summary>
        public static readonly Marshaller<Stellar.CreateContractArgsV2DecodeRequest> CreateContractArgsV2DecodeRequestMarshaller = Marshallers.Create<Stellar.CreateContractArgsV2DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateContractArgsV2DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateContractArgsV2DecodeResponse</summary>
        public static readonly Marshaller<Stellar.CreateContractArgsV2DecodeResponse> CreateContractArgsV2DecodeResponseMarshaller = Marshallers.Create<Stellar.CreateContractArgsV2DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateContractArgsV2DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InvokeContractArgsEncodeRequest</summary>
        public static readonly Marshaller<Stellar.InvokeContractArgsEncodeRequest> InvokeContractArgsEncodeRequestMarshaller = Marshallers.Create<Stellar.InvokeContractArgsEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InvokeContractArgsEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InvokeContractArgsEncodeResponse</summary>
        public static readonly Marshaller<Stellar.InvokeContractArgsEncodeResponse> InvokeContractArgsEncodeResponseMarshaller = Marshallers.Create<Stellar.InvokeContractArgsEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InvokeContractArgsEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InvokeContractArgsDecodeRequest</summary>
        public static readonly Marshaller<Stellar.InvokeContractArgsDecodeRequest> InvokeContractArgsDecodeRequestMarshaller = Marshallers.Create<Stellar.InvokeContractArgsDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InvokeContractArgsDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InvokeContractArgsDecodeResponse</summary>
        public static readonly Marshaller<Stellar.InvokeContractArgsDecodeResponse> InvokeContractArgsDecodeResponseMarshaller = Marshallers.Create<Stellar.InvokeContractArgsDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InvokeContractArgsDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HostFunctionEncodeRequest</summary>
        public static readonly Marshaller<Stellar.HostFunctionEncodeRequest> HostFunctionEncodeRequestMarshaller = Marshallers.Create<Stellar.HostFunctionEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HostFunctionEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HostFunctionEncodeResponse</summary>
        public static readonly Marshaller<Stellar.HostFunctionEncodeResponse> HostFunctionEncodeResponseMarshaller = Marshallers.Create<Stellar.HostFunctionEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HostFunctionEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HostFunctionDecodeRequest</summary>
        public static readonly Marshaller<Stellar.HostFunctionDecodeRequest> HostFunctionDecodeRequestMarshaller = Marshallers.Create<Stellar.HostFunctionDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HostFunctionDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HostFunctionDecodeResponse</summary>
        public static readonly Marshaller<Stellar.HostFunctionDecodeResponse> HostFunctionDecodeResponseMarshaller = Marshallers.Create<Stellar.HostFunctionDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HostFunctionDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanAuthorizedFunctionTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SorobanAuthorizedFunctionTypeEncodeRequest> SorobanAuthorizedFunctionTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.SorobanAuthorizedFunctionTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanAuthorizedFunctionTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanAuthorizedFunctionTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SorobanAuthorizedFunctionTypeEncodeResponse> SorobanAuthorizedFunctionTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.SorobanAuthorizedFunctionTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanAuthorizedFunctionTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanAuthorizedFunctionTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SorobanAuthorizedFunctionTypeDecodeRequest> SorobanAuthorizedFunctionTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.SorobanAuthorizedFunctionTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanAuthorizedFunctionTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanAuthorizedFunctionTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SorobanAuthorizedFunctionTypeDecodeResponse> SorobanAuthorizedFunctionTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.SorobanAuthorizedFunctionTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanAuthorizedFunctionTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanAuthorizedFunctionEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SorobanAuthorizedFunctionEncodeRequest> SorobanAuthorizedFunctionEncodeRequestMarshaller = Marshallers.Create<Stellar.SorobanAuthorizedFunctionEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanAuthorizedFunctionEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanAuthorizedFunctionEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SorobanAuthorizedFunctionEncodeResponse> SorobanAuthorizedFunctionEncodeResponseMarshaller = Marshallers.Create<Stellar.SorobanAuthorizedFunctionEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanAuthorizedFunctionEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanAuthorizedFunctionDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SorobanAuthorizedFunctionDecodeRequest> SorobanAuthorizedFunctionDecodeRequestMarshaller = Marshallers.Create<Stellar.SorobanAuthorizedFunctionDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanAuthorizedFunctionDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanAuthorizedFunctionDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SorobanAuthorizedFunctionDecodeResponse> SorobanAuthorizedFunctionDecodeResponseMarshaller = Marshallers.Create<Stellar.SorobanAuthorizedFunctionDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanAuthorizedFunctionDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanAuthorizedInvocationEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SorobanAuthorizedInvocationEncodeRequest> SorobanAuthorizedInvocationEncodeRequestMarshaller = Marshallers.Create<Stellar.SorobanAuthorizedInvocationEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanAuthorizedInvocationEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanAuthorizedInvocationEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SorobanAuthorizedInvocationEncodeResponse> SorobanAuthorizedInvocationEncodeResponseMarshaller = Marshallers.Create<Stellar.SorobanAuthorizedInvocationEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanAuthorizedInvocationEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanAuthorizedInvocationDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SorobanAuthorizedInvocationDecodeRequest> SorobanAuthorizedInvocationDecodeRequestMarshaller = Marshallers.Create<Stellar.SorobanAuthorizedInvocationDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanAuthorizedInvocationDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanAuthorizedInvocationDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SorobanAuthorizedInvocationDecodeResponse> SorobanAuthorizedInvocationDecodeResponseMarshaller = Marshallers.Create<Stellar.SorobanAuthorizedInvocationDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanAuthorizedInvocationDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanAddressCredentialsEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SorobanAddressCredentialsEncodeRequest> SorobanAddressCredentialsEncodeRequestMarshaller = Marshallers.Create<Stellar.SorobanAddressCredentialsEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanAddressCredentialsEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanAddressCredentialsEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SorobanAddressCredentialsEncodeResponse> SorobanAddressCredentialsEncodeResponseMarshaller = Marshallers.Create<Stellar.SorobanAddressCredentialsEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanAddressCredentialsEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanAddressCredentialsDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SorobanAddressCredentialsDecodeRequest> SorobanAddressCredentialsDecodeRequestMarshaller = Marshallers.Create<Stellar.SorobanAddressCredentialsDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanAddressCredentialsDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanAddressCredentialsDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SorobanAddressCredentialsDecodeResponse> SorobanAddressCredentialsDecodeResponseMarshaller = Marshallers.Create<Stellar.SorobanAddressCredentialsDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanAddressCredentialsDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanCredentialsTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SorobanCredentialsTypeEncodeRequest> SorobanCredentialsTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.SorobanCredentialsTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanCredentialsTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanCredentialsTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SorobanCredentialsTypeEncodeResponse> SorobanCredentialsTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.SorobanCredentialsTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanCredentialsTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanCredentialsTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SorobanCredentialsTypeDecodeRequest> SorobanCredentialsTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.SorobanCredentialsTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanCredentialsTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanCredentialsTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SorobanCredentialsTypeDecodeResponse> SorobanCredentialsTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.SorobanCredentialsTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanCredentialsTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanCredentialsEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SorobanCredentialsEncodeRequest> SorobanCredentialsEncodeRequestMarshaller = Marshallers.Create<Stellar.SorobanCredentialsEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanCredentialsEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanCredentialsEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SorobanCredentialsEncodeResponse> SorobanCredentialsEncodeResponseMarshaller = Marshallers.Create<Stellar.SorobanCredentialsEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanCredentialsEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanCredentialsDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SorobanCredentialsDecodeRequest> SorobanCredentialsDecodeRequestMarshaller = Marshallers.Create<Stellar.SorobanCredentialsDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanCredentialsDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanCredentialsDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SorobanCredentialsDecodeResponse> SorobanCredentialsDecodeResponseMarshaller = Marshallers.Create<Stellar.SorobanCredentialsDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanCredentialsDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanAuthorizationEntryEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SorobanAuthorizationEntryEncodeRequest> SorobanAuthorizationEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.SorobanAuthorizationEntryEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanAuthorizationEntryEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanAuthorizationEntryEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SorobanAuthorizationEntryEncodeResponse> SorobanAuthorizationEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.SorobanAuthorizationEntryEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanAuthorizationEntryEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanAuthorizationEntryDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SorobanAuthorizationEntryDecodeRequest> SorobanAuthorizationEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.SorobanAuthorizationEntryDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanAuthorizationEntryDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanAuthorizationEntryDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SorobanAuthorizationEntryDecodeResponse> SorobanAuthorizationEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.SorobanAuthorizationEntryDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanAuthorizationEntryDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InvokeHostFunctionOpEncodeRequest</summary>
        public static readonly Marshaller<Stellar.InvokeHostFunctionOpEncodeRequest> InvokeHostFunctionOpEncodeRequestMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionOpEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InvokeHostFunctionOpEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InvokeHostFunctionOpEncodeResponse</summary>
        public static readonly Marshaller<Stellar.InvokeHostFunctionOpEncodeResponse> InvokeHostFunctionOpEncodeResponseMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionOpEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InvokeHostFunctionOpEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InvokeHostFunctionOpDecodeRequest</summary>
        public static readonly Marshaller<Stellar.InvokeHostFunctionOpDecodeRequest> InvokeHostFunctionOpDecodeRequestMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionOpDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InvokeHostFunctionOpDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InvokeHostFunctionOpDecodeResponse</summary>
        public static readonly Marshaller<Stellar.InvokeHostFunctionOpDecodeResponse> InvokeHostFunctionOpDecodeResponseMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionOpDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InvokeHostFunctionOpDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ExtendFootprintTTLOpEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ExtendFootprintTTLOpEncodeRequest> ExtendFootprintTTLOpEncodeRequestMarshaller = Marshallers.Create<Stellar.ExtendFootprintTTLOpEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ExtendFootprintTTLOpEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ExtendFootprintTTLOpEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ExtendFootprintTTLOpEncodeResponse> ExtendFootprintTTLOpEncodeResponseMarshaller = Marshallers.Create<Stellar.ExtendFootprintTTLOpEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ExtendFootprintTTLOpEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ExtendFootprintTTLOpDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ExtendFootprintTTLOpDecodeRequest> ExtendFootprintTTLOpDecodeRequestMarshaller = Marshallers.Create<Stellar.ExtendFootprintTTLOpDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ExtendFootprintTTLOpDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ExtendFootprintTTLOpDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ExtendFootprintTTLOpDecodeResponse> ExtendFootprintTTLOpDecodeResponseMarshaller = Marshallers.Create<Stellar.ExtendFootprintTTLOpDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ExtendFootprintTTLOpDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RestoreFootprintOpEncodeRequest</summary>
        public static readonly Marshaller<Stellar.RestoreFootprintOpEncodeRequest> RestoreFootprintOpEncodeRequestMarshaller = Marshallers.Create<Stellar.RestoreFootprintOpEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RestoreFootprintOpEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RestoreFootprintOpEncodeResponse</summary>
        public static readonly Marshaller<Stellar.RestoreFootprintOpEncodeResponse> RestoreFootprintOpEncodeResponseMarshaller = Marshallers.Create<Stellar.RestoreFootprintOpEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RestoreFootprintOpEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RestoreFootprintOpDecodeRequest</summary>
        public static readonly Marshaller<Stellar.RestoreFootprintOpDecodeRequest> RestoreFootprintOpDecodeRequestMarshaller = Marshallers.Create<Stellar.RestoreFootprintOpDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RestoreFootprintOpDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RestoreFootprintOpDecodeResponse</summary>
        public static readonly Marshaller<Stellar.RestoreFootprintOpDecodeResponse> RestoreFootprintOpDecodeResponseMarshaller = Marshallers.Create<Stellar.RestoreFootprintOpDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RestoreFootprintOpDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OperationEncodeRequest</summary>
        public static readonly Marshaller<Stellar.OperationEncodeRequest> OperationEncodeRequestMarshaller = Marshallers.Create<Stellar.OperationEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OperationEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OperationEncodeResponse</summary>
        public static readonly Marshaller<Stellar.OperationEncodeResponse> OperationEncodeResponseMarshaller = Marshallers.Create<Stellar.OperationEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OperationEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OperationDecodeRequest</summary>
        public static readonly Marshaller<Stellar.OperationDecodeRequest> OperationDecodeRequestMarshaller = Marshallers.Create<Stellar.OperationDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OperationDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OperationDecodeResponse</summary>
        public static readonly Marshaller<Stellar.OperationDecodeResponse> OperationDecodeResponseMarshaller = Marshallers.Create<Stellar.OperationDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OperationDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HashIDPreimageEncodeRequest</summary>
        public static readonly Marshaller<Stellar.HashIDPreimageEncodeRequest> HashIDPreimageEncodeRequestMarshaller = Marshallers.Create<Stellar.HashIDPreimageEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HashIDPreimageEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HashIDPreimageEncodeResponse</summary>
        public static readonly Marshaller<Stellar.HashIDPreimageEncodeResponse> HashIDPreimageEncodeResponseMarshaller = Marshallers.Create<Stellar.HashIDPreimageEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HashIDPreimageEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HashIDPreimageDecodeRequest</summary>
        public static readonly Marshaller<Stellar.HashIDPreimageDecodeRequest> HashIDPreimageDecodeRequestMarshaller = Marshallers.Create<Stellar.HashIDPreimageDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HashIDPreimageDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HashIDPreimageDecodeResponse</summary>
        public static readonly Marshaller<Stellar.HashIDPreimageDecodeResponse> HashIDPreimageDecodeResponseMarshaller = Marshallers.Create<Stellar.HashIDPreimageDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HashIDPreimageDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for MemoTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.MemoTypeEncodeRequest> MemoTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.MemoTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.MemoTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for MemoTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.MemoTypeEncodeResponse> MemoTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.MemoTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.MemoTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for MemoTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.MemoTypeDecodeRequest> MemoTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.MemoTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.MemoTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for MemoTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.MemoTypeDecodeResponse> MemoTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.MemoTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.MemoTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for MemoEncodeRequest</summary>
        public static readonly Marshaller<Stellar.MemoEncodeRequest> MemoEncodeRequestMarshaller = Marshallers.Create<Stellar.MemoEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.MemoEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for MemoEncodeResponse</summary>
        public static readonly Marshaller<Stellar.MemoEncodeResponse> MemoEncodeResponseMarshaller = Marshallers.Create<Stellar.MemoEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.MemoEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for MemoDecodeRequest</summary>
        public static readonly Marshaller<Stellar.MemoDecodeRequest> MemoDecodeRequestMarshaller = Marshallers.Create<Stellar.MemoDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.MemoDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for MemoDecodeResponse</summary>
        public static readonly Marshaller<Stellar.MemoDecodeResponse> MemoDecodeResponseMarshaller = Marshallers.Create<Stellar.MemoDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.MemoDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeBoundsEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TimeBoundsEncodeRequest> TimeBoundsEncodeRequestMarshaller = Marshallers.Create<Stellar.TimeBoundsEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeBoundsEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeBoundsEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TimeBoundsEncodeResponse> TimeBoundsEncodeResponseMarshaller = Marshallers.Create<Stellar.TimeBoundsEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeBoundsEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeBoundsDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TimeBoundsDecodeRequest> TimeBoundsDecodeRequestMarshaller = Marshallers.Create<Stellar.TimeBoundsDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeBoundsDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimeBoundsDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TimeBoundsDecodeResponse> TimeBoundsDecodeResponseMarshaller = Marshallers.Create<Stellar.TimeBoundsDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimeBoundsDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerBoundsEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerBoundsEncodeRequest> LedgerBoundsEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerBoundsEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerBoundsEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerBoundsEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerBoundsEncodeResponse> LedgerBoundsEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerBoundsEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerBoundsEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerBoundsDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerBoundsDecodeRequest> LedgerBoundsDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerBoundsDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerBoundsDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerBoundsDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerBoundsDecodeResponse> LedgerBoundsDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerBoundsDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerBoundsDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PreconditionsV2EncodeRequest</summary>
        public static readonly Marshaller<Stellar.PreconditionsV2EncodeRequest> PreconditionsV2EncodeRequestMarshaller = Marshallers.Create<Stellar.PreconditionsV2EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PreconditionsV2EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PreconditionsV2EncodeResponse</summary>
        public static readonly Marshaller<Stellar.PreconditionsV2EncodeResponse> PreconditionsV2EncodeResponseMarshaller = Marshallers.Create<Stellar.PreconditionsV2EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PreconditionsV2EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PreconditionsV2DecodeRequest</summary>
        public static readonly Marshaller<Stellar.PreconditionsV2DecodeRequest> PreconditionsV2DecodeRequestMarshaller = Marshallers.Create<Stellar.PreconditionsV2DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PreconditionsV2DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PreconditionsV2DecodeResponse</summary>
        public static readonly Marshaller<Stellar.PreconditionsV2DecodeResponse> PreconditionsV2DecodeResponseMarshaller = Marshallers.Create<Stellar.PreconditionsV2DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PreconditionsV2DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PreconditionTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.PreconditionTypeEncodeRequest> PreconditionTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.PreconditionTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PreconditionTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PreconditionTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.PreconditionTypeEncodeResponse> PreconditionTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.PreconditionTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PreconditionTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PreconditionTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.PreconditionTypeDecodeRequest> PreconditionTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.PreconditionTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PreconditionTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PreconditionTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.PreconditionTypeDecodeResponse> PreconditionTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.PreconditionTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PreconditionTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PreconditionsEncodeRequest</summary>
        public static readonly Marshaller<Stellar.PreconditionsEncodeRequest> PreconditionsEncodeRequestMarshaller = Marshallers.Create<Stellar.PreconditionsEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PreconditionsEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PreconditionsEncodeResponse</summary>
        public static readonly Marshaller<Stellar.PreconditionsEncodeResponse> PreconditionsEncodeResponseMarshaller = Marshallers.Create<Stellar.PreconditionsEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PreconditionsEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PreconditionsDecodeRequest</summary>
        public static readonly Marshaller<Stellar.PreconditionsDecodeRequest> PreconditionsDecodeRequestMarshaller = Marshallers.Create<Stellar.PreconditionsDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PreconditionsDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PreconditionsDecodeResponse</summary>
        public static readonly Marshaller<Stellar.PreconditionsDecodeResponse> PreconditionsDecodeResponseMarshaller = Marshallers.Create<Stellar.PreconditionsDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PreconditionsDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerFootprintEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerFootprintEncodeRequest> LedgerFootprintEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerFootprintEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerFootprintEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerFootprintEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerFootprintEncodeResponse> LedgerFootprintEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerFootprintEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerFootprintEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerFootprintDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LedgerFootprintDecodeRequest> LedgerFootprintDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerFootprintDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerFootprintDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LedgerFootprintDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LedgerFootprintDecodeResponse> LedgerFootprintDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerFootprintDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LedgerFootprintDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ArchivalProofTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ArchivalProofTypeEncodeRequest> ArchivalProofTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.ArchivalProofTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ArchivalProofTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ArchivalProofTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ArchivalProofTypeEncodeResponse> ArchivalProofTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.ArchivalProofTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ArchivalProofTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ArchivalProofTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ArchivalProofTypeDecodeRequest> ArchivalProofTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.ArchivalProofTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ArchivalProofTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ArchivalProofTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ArchivalProofTypeDecodeResponse> ArchivalProofTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.ArchivalProofTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ArchivalProofTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ArchivalProofNodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ArchivalProofNodeEncodeRequest> ArchivalProofNodeEncodeRequestMarshaller = Marshallers.Create<Stellar.ArchivalProofNodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ArchivalProofNodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ArchivalProofNodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ArchivalProofNodeEncodeResponse> ArchivalProofNodeEncodeResponseMarshaller = Marshallers.Create<Stellar.ArchivalProofNodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ArchivalProofNodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ArchivalProofNodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ArchivalProofNodeDecodeRequest> ArchivalProofNodeDecodeRequestMarshaller = Marshallers.Create<Stellar.ArchivalProofNodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ArchivalProofNodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ArchivalProofNodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ArchivalProofNodeDecodeResponse> ArchivalProofNodeDecodeResponseMarshaller = Marshallers.Create<Stellar.ArchivalProofNodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ArchivalProofNodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ProofLevelEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ProofLevelEncodeRequest> ProofLevelEncodeRequestMarshaller = Marshallers.Create<Stellar.ProofLevelEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ProofLevelEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ProofLevelEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ProofLevelEncodeResponse> ProofLevelEncodeResponseMarshaller = Marshallers.Create<Stellar.ProofLevelEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ProofLevelEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ProofLevelDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ProofLevelDecodeRequest> ProofLevelDecodeRequestMarshaller = Marshallers.Create<Stellar.ProofLevelDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ProofLevelDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ProofLevelDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ProofLevelDecodeResponse> ProofLevelDecodeResponseMarshaller = Marshallers.Create<Stellar.ProofLevelDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ProofLevelDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for NonexistenceProofBodyEncodeRequest</summary>
        public static readonly Marshaller<Stellar.NonexistenceProofBodyEncodeRequest> NonexistenceProofBodyEncodeRequestMarshaller = Marshallers.Create<Stellar.NonexistenceProofBodyEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.NonexistenceProofBodyEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for NonexistenceProofBodyEncodeResponse</summary>
        public static readonly Marshaller<Stellar.NonexistenceProofBodyEncodeResponse> NonexistenceProofBodyEncodeResponseMarshaller = Marshallers.Create<Stellar.NonexistenceProofBodyEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.NonexistenceProofBodyEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for NonexistenceProofBodyDecodeRequest</summary>
        public static readonly Marshaller<Stellar.NonexistenceProofBodyDecodeRequest> NonexistenceProofBodyDecodeRequestMarshaller = Marshallers.Create<Stellar.NonexistenceProofBodyDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.NonexistenceProofBodyDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for NonexistenceProofBodyDecodeResponse</summary>
        public static readonly Marshaller<Stellar.NonexistenceProofBodyDecodeResponse> NonexistenceProofBodyDecodeResponseMarshaller = Marshallers.Create<Stellar.NonexistenceProofBodyDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.NonexistenceProofBodyDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ExistenceProofBodyEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ExistenceProofBodyEncodeRequest> ExistenceProofBodyEncodeRequestMarshaller = Marshallers.Create<Stellar.ExistenceProofBodyEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ExistenceProofBodyEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ExistenceProofBodyEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ExistenceProofBodyEncodeResponse> ExistenceProofBodyEncodeResponseMarshaller = Marshallers.Create<Stellar.ExistenceProofBodyEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ExistenceProofBodyEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ExistenceProofBodyDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ExistenceProofBodyDecodeRequest> ExistenceProofBodyDecodeRequestMarshaller = Marshallers.Create<Stellar.ExistenceProofBodyDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ExistenceProofBodyDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ExistenceProofBodyDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ExistenceProofBodyDecodeResponse> ExistenceProofBodyDecodeResponseMarshaller = Marshallers.Create<Stellar.ExistenceProofBodyDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ExistenceProofBodyDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ArchivalProofEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ArchivalProofEncodeRequest> ArchivalProofEncodeRequestMarshaller = Marshallers.Create<Stellar.ArchivalProofEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ArchivalProofEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ArchivalProofEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ArchivalProofEncodeResponse> ArchivalProofEncodeResponseMarshaller = Marshallers.Create<Stellar.ArchivalProofEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ArchivalProofEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ArchivalProofDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ArchivalProofDecodeRequest> ArchivalProofDecodeRequestMarshaller = Marshallers.Create<Stellar.ArchivalProofDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ArchivalProofDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ArchivalProofDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ArchivalProofDecodeResponse> ArchivalProofDecodeResponseMarshaller = Marshallers.Create<Stellar.ArchivalProofDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ArchivalProofDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanResourcesEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SorobanResourcesEncodeRequest> SorobanResourcesEncodeRequestMarshaller = Marshallers.Create<Stellar.SorobanResourcesEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanResourcesEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanResourcesEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SorobanResourcesEncodeResponse> SorobanResourcesEncodeResponseMarshaller = Marshallers.Create<Stellar.SorobanResourcesEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanResourcesEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanResourcesDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SorobanResourcesDecodeRequest> SorobanResourcesDecodeRequestMarshaller = Marshallers.Create<Stellar.SorobanResourcesDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanResourcesDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanResourcesDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SorobanResourcesDecodeResponse> SorobanResourcesDecodeResponseMarshaller = Marshallers.Create<Stellar.SorobanResourcesDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanResourcesDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanTransactionDataEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SorobanTransactionDataEncodeRequest> SorobanTransactionDataEncodeRequestMarshaller = Marshallers.Create<Stellar.SorobanTransactionDataEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanTransactionDataEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanTransactionDataEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SorobanTransactionDataEncodeResponse> SorobanTransactionDataEncodeResponseMarshaller = Marshallers.Create<Stellar.SorobanTransactionDataEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanTransactionDataEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanTransactionDataDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SorobanTransactionDataDecodeRequest> SorobanTransactionDataDecodeRequestMarshaller = Marshallers.Create<Stellar.SorobanTransactionDataDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanTransactionDataDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SorobanTransactionDataDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SorobanTransactionDataDecodeResponse> SorobanTransactionDataDecodeResponseMarshaller = Marshallers.Create<Stellar.SorobanTransactionDataDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SorobanTransactionDataDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionV0EncodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionV0EncodeRequest> TransactionV0EncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionV0EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionV0EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionV0EncodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionV0EncodeResponse> TransactionV0EncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionV0EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionV0EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionV0DecodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionV0DecodeRequest> TransactionV0DecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionV0DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionV0DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionV0DecodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionV0DecodeResponse> TransactionV0DecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionV0DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionV0DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionV0EnvelopeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionV0EnvelopeEncodeRequest> TransactionV0EnvelopeEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionV0EnvelopeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionV0EnvelopeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionV0EnvelopeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionV0EnvelopeEncodeResponse> TransactionV0EnvelopeEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionV0EnvelopeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionV0EnvelopeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionV0EnvelopeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionV0EnvelopeDecodeRequest> TransactionV0EnvelopeDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionV0EnvelopeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionV0EnvelopeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionV0EnvelopeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionV0EnvelopeDecodeResponse> TransactionV0EnvelopeDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionV0EnvelopeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionV0EnvelopeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionEncodeRequest> TransactionEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionEncodeResponse> TransactionEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionDecodeRequest> TransactionDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionDecodeResponse> TransactionDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionV1EnvelopeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionV1EnvelopeEncodeRequest> TransactionV1EnvelopeEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionV1EnvelopeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionV1EnvelopeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionV1EnvelopeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionV1EnvelopeEncodeResponse> TransactionV1EnvelopeEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionV1EnvelopeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionV1EnvelopeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionV1EnvelopeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionV1EnvelopeDecodeRequest> TransactionV1EnvelopeDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionV1EnvelopeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionV1EnvelopeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionV1EnvelopeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionV1EnvelopeDecodeResponse> TransactionV1EnvelopeDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionV1EnvelopeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionV1EnvelopeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for FeeBumpTransactionEncodeRequest</summary>
        public static readonly Marshaller<Stellar.FeeBumpTransactionEncodeRequest> FeeBumpTransactionEncodeRequestMarshaller = Marshallers.Create<Stellar.FeeBumpTransactionEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.FeeBumpTransactionEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for FeeBumpTransactionEncodeResponse</summary>
        public static readonly Marshaller<Stellar.FeeBumpTransactionEncodeResponse> FeeBumpTransactionEncodeResponseMarshaller = Marshallers.Create<Stellar.FeeBumpTransactionEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.FeeBumpTransactionEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for FeeBumpTransactionDecodeRequest</summary>
        public static readonly Marshaller<Stellar.FeeBumpTransactionDecodeRequest> FeeBumpTransactionDecodeRequestMarshaller = Marshallers.Create<Stellar.FeeBumpTransactionDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.FeeBumpTransactionDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for FeeBumpTransactionDecodeResponse</summary>
        public static readonly Marshaller<Stellar.FeeBumpTransactionDecodeResponse> FeeBumpTransactionDecodeResponseMarshaller = Marshallers.Create<Stellar.FeeBumpTransactionDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.FeeBumpTransactionDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for FeeBumpTransactionEnvelopeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.FeeBumpTransactionEnvelopeEncodeRequest> FeeBumpTransactionEnvelopeEncodeRequestMarshaller = Marshallers.Create<Stellar.FeeBumpTransactionEnvelopeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.FeeBumpTransactionEnvelopeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for FeeBumpTransactionEnvelopeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.FeeBumpTransactionEnvelopeEncodeResponse> FeeBumpTransactionEnvelopeEncodeResponseMarshaller = Marshallers.Create<Stellar.FeeBumpTransactionEnvelopeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.FeeBumpTransactionEnvelopeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for FeeBumpTransactionEnvelopeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.FeeBumpTransactionEnvelopeDecodeRequest> FeeBumpTransactionEnvelopeDecodeRequestMarshaller = Marshallers.Create<Stellar.FeeBumpTransactionEnvelopeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.FeeBumpTransactionEnvelopeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for FeeBumpTransactionEnvelopeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.FeeBumpTransactionEnvelopeDecodeResponse> FeeBumpTransactionEnvelopeDecodeResponseMarshaller = Marshallers.Create<Stellar.FeeBumpTransactionEnvelopeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.FeeBumpTransactionEnvelopeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionEnvelopeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionEnvelopeEncodeRequest> TransactionEnvelopeEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionEnvelopeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionEnvelopeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionEnvelopeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionEnvelopeEncodeResponse> TransactionEnvelopeEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionEnvelopeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionEnvelopeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionEnvelopeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionEnvelopeDecodeRequest> TransactionEnvelopeDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionEnvelopeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionEnvelopeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionEnvelopeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionEnvelopeDecodeResponse> TransactionEnvelopeDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionEnvelopeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionEnvelopeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionSignaturePayloadEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionSignaturePayloadEncodeRequest> TransactionSignaturePayloadEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionSignaturePayloadEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionSignaturePayloadEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionSignaturePayloadEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionSignaturePayloadEncodeResponse> TransactionSignaturePayloadEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionSignaturePayloadEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionSignaturePayloadEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionSignaturePayloadDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionSignaturePayloadDecodeRequest> TransactionSignaturePayloadDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionSignaturePayloadDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionSignaturePayloadDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionSignaturePayloadDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionSignaturePayloadDecodeResponse> TransactionSignaturePayloadDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionSignaturePayloadDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionSignaturePayloadDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimAtomTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimAtomTypeEncodeRequest> ClaimAtomTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimAtomTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimAtomTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimAtomTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimAtomTypeEncodeResponse> ClaimAtomTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimAtomTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimAtomTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimAtomTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimAtomTypeDecodeRequest> ClaimAtomTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimAtomTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimAtomTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimAtomTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimAtomTypeDecodeResponse> ClaimAtomTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimAtomTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimAtomTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimOfferAtomV0EncodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimOfferAtomV0EncodeRequest> ClaimOfferAtomV0EncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimOfferAtomV0EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimOfferAtomV0EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimOfferAtomV0EncodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimOfferAtomV0EncodeResponse> ClaimOfferAtomV0EncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimOfferAtomV0EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimOfferAtomV0EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimOfferAtomV0DecodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimOfferAtomV0DecodeRequest> ClaimOfferAtomV0DecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimOfferAtomV0DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimOfferAtomV0DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimOfferAtomV0DecodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimOfferAtomV0DecodeResponse> ClaimOfferAtomV0DecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimOfferAtomV0DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimOfferAtomV0DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimOfferAtomEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimOfferAtomEncodeRequest> ClaimOfferAtomEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimOfferAtomEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimOfferAtomEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimOfferAtomEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimOfferAtomEncodeResponse> ClaimOfferAtomEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimOfferAtomEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimOfferAtomEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimOfferAtomDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimOfferAtomDecodeRequest> ClaimOfferAtomDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimOfferAtomDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimOfferAtomDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimOfferAtomDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimOfferAtomDecodeResponse> ClaimOfferAtomDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimOfferAtomDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimOfferAtomDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimLiquidityAtomEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimLiquidityAtomEncodeRequest> ClaimLiquidityAtomEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimLiquidityAtomEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimLiquidityAtomEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimLiquidityAtomEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimLiquidityAtomEncodeResponse> ClaimLiquidityAtomEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimLiquidityAtomEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimLiquidityAtomEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimLiquidityAtomDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimLiquidityAtomDecodeRequest> ClaimLiquidityAtomDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimLiquidityAtomDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimLiquidityAtomDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimLiquidityAtomDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimLiquidityAtomDecodeResponse> ClaimLiquidityAtomDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimLiquidityAtomDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimLiquidityAtomDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimAtomEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimAtomEncodeRequest> ClaimAtomEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimAtomEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimAtomEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimAtomEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimAtomEncodeResponse> ClaimAtomEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimAtomEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimAtomEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimAtomDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimAtomDecodeRequest> ClaimAtomDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimAtomDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimAtomDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimAtomDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimAtomDecodeResponse> ClaimAtomDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimAtomDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimAtomDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateAccountResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.CreateAccountResultCodeEncodeRequest> CreateAccountResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.CreateAccountResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateAccountResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateAccountResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.CreateAccountResultCodeEncodeResponse> CreateAccountResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.CreateAccountResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateAccountResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateAccountResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.CreateAccountResultCodeDecodeRequest> CreateAccountResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.CreateAccountResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateAccountResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateAccountResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.CreateAccountResultCodeDecodeResponse> CreateAccountResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.CreateAccountResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateAccountResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateAccountResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.CreateAccountResultEncodeRequest> CreateAccountResultEncodeRequestMarshaller = Marshallers.Create<Stellar.CreateAccountResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateAccountResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateAccountResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.CreateAccountResultEncodeResponse> CreateAccountResultEncodeResponseMarshaller = Marshallers.Create<Stellar.CreateAccountResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateAccountResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateAccountResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.CreateAccountResultDecodeRequest> CreateAccountResultDecodeRequestMarshaller = Marshallers.Create<Stellar.CreateAccountResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateAccountResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateAccountResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.CreateAccountResultDecodeResponse> CreateAccountResultDecodeResponseMarshaller = Marshallers.Create<Stellar.CreateAccountResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateAccountResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PaymentResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.PaymentResultCodeEncodeRequest> PaymentResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.PaymentResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PaymentResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PaymentResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.PaymentResultCodeEncodeResponse> PaymentResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.PaymentResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PaymentResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PaymentResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.PaymentResultCodeDecodeRequest> PaymentResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.PaymentResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PaymentResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PaymentResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.PaymentResultCodeDecodeResponse> PaymentResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.PaymentResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PaymentResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PaymentResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.PaymentResultEncodeRequest> PaymentResultEncodeRequestMarshaller = Marshallers.Create<Stellar.PaymentResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PaymentResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PaymentResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.PaymentResultEncodeResponse> PaymentResultEncodeResponseMarshaller = Marshallers.Create<Stellar.PaymentResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PaymentResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PaymentResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.PaymentResultDecodeRequest> PaymentResultDecodeRequestMarshaller = Marshallers.Create<Stellar.PaymentResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PaymentResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PaymentResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.PaymentResultDecodeResponse> PaymentResultDecodeResponseMarshaller = Marshallers.Create<Stellar.PaymentResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PaymentResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PathPaymentStrictReceiveResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.PathPaymentStrictReceiveResultCodeEncodeRequest> PathPaymentStrictReceiveResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.PathPaymentStrictReceiveResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PathPaymentStrictReceiveResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PathPaymentStrictReceiveResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.PathPaymentStrictReceiveResultCodeEncodeResponse> PathPaymentStrictReceiveResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.PathPaymentStrictReceiveResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PathPaymentStrictReceiveResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PathPaymentStrictReceiveResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.PathPaymentStrictReceiveResultCodeDecodeRequest> PathPaymentStrictReceiveResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.PathPaymentStrictReceiveResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PathPaymentStrictReceiveResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PathPaymentStrictReceiveResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.PathPaymentStrictReceiveResultCodeDecodeResponse> PathPaymentStrictReceiveResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.PathPaymentStrictReceiveResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PathPaymentStrictReceiveResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SimplePaymentResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SimplePaymentResultEncodeRequest> SimplePaymentResultEncodeRequestMarshaller = Marshallers.Create<Stellar.SimplePaymentResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SimplePaymentResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SimplePaymentResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SimplePaymentResultEncodeResponse> SimplePaymentResultEncodeResponseMarshaller = Marshallers.Create<Stellar.SimplePaymentResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SimplePaymentResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SimplePaymentResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SimplePaymentResultDecodeRequest> SimplePaymentResultDecodeRequestMarshaller = Marshallers.Create<Stellar.SimplePaymentResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SimplePaymentResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SimplePaymentResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SimplePaymentResultDecodeResponse> SimplePaymentResultDecodeResponseMarshaller = Marshallers.Create<Stellar.SimplePaymentResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SimplePaymentResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PathPaymentStrictReceiveResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.PathPaymentStrictReceiveResultEncodeRequest> PathPaymentStrictReceiveResultEncodeRequestMarshaller = Marshallers.Create<Stellar.PathPaymentStrictReceiveResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PathPaymentStrictReceiveResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PathPaymentStrictReceiveResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.PathPaymentStrictReceiveResultEncodeResponse> PathPaymentStrictReceiveResultEncodeResponseMarshaller = Marshallers.Create<Stellar.PathPaymentStrictReceiveResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PathPaymentStrictReceiveResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PathPaymentStrictReceiveResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.PathPaymentStrictReceiveResultDecodeRequest> PathPaymentStrictReceiveResultDecodeRequestMarshaller = Marshallers.Create<Stellar.PathPaymentStrictReceiveResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PathPaymentStrictReceiveResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PathPaymentStrictReceiveResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.PathPaymentStrictReceiveResultDecodeResponse> PathPaymentStrictReceiveResultDecodeResponseMarshaller = Marshallers.Create<Stellar.PathPaymentStrictReceiveResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PathPaymentStrictReceiveResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PathPaymentStrictSendResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.PathPaymentStrictSendResultCodeEncodeRequest> PathPaymentStrictSendResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.PathPaymentStrictSendResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PathPaymentStrictSendResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PathPaymentStrictSendResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.PathPaymentStrictSendResultCodeEncodeResponse> PathPaymentStrictSendResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.PathPaymentStrictSendResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PathPaymentStrictSendResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PathPaymentStrictSendResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.PathPaymentStrictSendResultCodeDecodeRequest> PathPaymentStrictSendResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.PathPaymentStrictSendResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PathPaymentStrictSendResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PathPaymentStrictSendResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.PathPaymentStrictSendResultCodeDecodeResponse> PathPaymentStrictSendResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.PathPaymentStrictSendResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PathPaymentStrictSendResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PathPaymentStrictSendResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.PathPaymentStrictSendResultEncodeRequest> PathPaymentStrictSendResultEncodeRequestMarshaller = Marshallers.Create<Stellar.PathPaymentStrictSendResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PathPaymentStrictSendResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PathPaymentStrictSendResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.PathPaymentStrictSendResultEncodeResponse> PathPaymentStrictSendResultEncodeResponseMarshaller = Marshallers.Create<Stellar.PathPaymentStrictSendResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PathPaymentStrictSendResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PathPaymentStrictSendResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.PathPaymentStrictSendResultDecodeRequest> PathPaymentStrictSendResultDecodeRequestMarshaller = Marshallers.Create<Stellar.PathPaymentStrictSendResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PathPaymentStrictSendResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PathPaymentStrictSendResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.PathPaymentStrictSendResultDecodeResponse> PathPaymentStrictSendResultDecodeResponseMarshaller = Marshallers.Create<Stellar.PathPaymentStrictSendResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PathPaymentStrictSendResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageSellOfferResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ManageSellOfferResultCodeEncodeRequest> ManageSellOfferResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.ManageSellOfferResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageSellOfferResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageSellOfferResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ManageSellOfferResultCodeEncodeResponse> ManageSellOfferResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.ManageSellOfferResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageSellOfferResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageSellOfferResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ManageSellOfferResultCodeDecodeRequest> ManageSellOfferResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.ManageSellOfferResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageSellOfferResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageSellOfferResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ManageSellOfferResultCodeDecodeResponse> ManageSellOfferResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.ManageSellOfferResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageSellOfferResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageOfferEffectEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ManageOfferEffectEncodeRequest> ManageOfferEffectEncodeRequestMarshaller = Marshallers.Create<Stellar.ManageOfferEffectEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageOfferEffectEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageOfferEffectEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ManageOfferEffectEncodeResponse> ManageOfferEffectEncodeResponseMarshaller = Marshallers.Create<Stellar.ManageOfferEffectEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageOfferEffectEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageOfferEffectDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ManageOfferEffectDecodeRequest> ManageOfferEffectDecodeRequestMarshaller = Marshallers.Create<Stellar.ManageOfferEffectDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageOfferEffectDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageOfferEffectDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ManageOfferEffectDecodeResponse> ManageOfferEffectDecodeResponseMarshaller = Marshallers.Create<Stellar.ManageOfferEffectDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageOfferEffectDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageOfferSuccessResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ManageOfferSuccessResultEncodeRequest> ManageOfferSuccessResultEncodeRequestMarshaller = Marshallers.Create<Stellar.ManageOfferSuccessResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageOfferSuccessResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageOfferSuccessResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ManageOfferSuccessResultEncodeResponse> ManageOfferSuccessResultEncodeResponseMarshaller = Marshallers.Create<Stellar.ManageOfferSuccessResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageOfferSuccessResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageOfferSuccessResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ManageOfferSuccessResultDecodeRequest> ManageOfferSuccessResultDecodeRequestMarshaller = Marshallers.Create<Stellar.ManageOfferSuccessResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageOfferSuccessResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageOfferSuccessResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ManageOfferSuccessResultDecodeResponse> ManageOfferSuccessResultDecodeResponseMarshaller = Marshallers.Create<Stellar.ManageOfferSuccessResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageOfferSuccessResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageSellOfferResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ManageSellOfferResultEncodeRequest> ManageSellOfferResultEncodeRequestMarshaller = Marshallers.Create<Stellar.ManageSellOfferResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageSellOfferResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageSellOfferResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ManageSellOfferResultEncodeResponse> ManageSellOfferResultEncodeResponseMarshaller = Marshallers.Create<Stellar.ManageSellOfferResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageSellOfferResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageSellOfferResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ManageSellOfferResultDecodeRequest> ManageSellOfferResultDecodeRequestMarshaller = Marshallers.Create<Stellar.ManageSellOfferResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageSellOfferResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageSellOfferResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ManageSellOfferResultDecodeResponse> ManageSellOfferResultDecodeResponseMarshaller = Marshallers.Create<Stellar.ManageSellOfferResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageSellOfferResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageBuyOfferResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ManageBuyOfferResultCodeEncodeRequest> ManageBuyOfferResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.ManageBuyOfferResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageBuyOfferResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageBuyOfferResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ManageBuyOfferResultCodeEncodeResponse> ManageBuyOfferResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.ManageBuyOfferResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageBuyOfferResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageBuyOfferResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ManageBuyOfferResultCodeDecodeRequest> ManageBuyOfferResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.ManageBuyOfferResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageBuyOfferResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageBuyOfferResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ManageBuyOfferResultCodeDecodeResponse> ManageBuyOfferResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.ManageBuyOfferResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageBuyOfferResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageBuyOfferResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ManageBuyOfferResultEncodeRequest> ManageBuyOfferResultEncodeRequestMarshaller = Marshallers.Create<Stellar.ManageBuyOfferResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageBuyOfferResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageBuyOfferResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ManageBuyOfferResultEncodeResponse> ManageBuyOfferResultEncodeResponseMarshaller = Marshallers.Create<Stellar.ManageBuyOfferResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageBuyOfferResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageBuyOfferResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ManageBuyOfferResultDecodeRequest> ManageBuyOfferResultDecodeRequestMarshaller = Marshallers.Create<Stellar.ManageBuyOfferResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageBuyOfferResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageBuyOfferResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ManageBuyOfferResultDecodeResponse> ManageBuyOfferResultDecodeResponseMarshaller = Marshallers.Create<Stellar.ManageBuyOfferResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageBuyOfferResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SetOptionsResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SetOptionsResultCodeEncodeRequest> SetOptionsResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.SetOptionsResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SetOptionsResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SetOptionsResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SetOptionsResultCodeEncodeResponse> SetOptionsResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.SetOptionsResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SetOptionsResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SetOptionsResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SetOptionsResultCodeDecodeRequest> SetOptionsResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.SetOptionsResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SetOptionsResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SetOptionsResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SetOptionsResultCodeDecodeResponse> SetOptionsResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.SetOptionsResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SetOptionsResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SetOptionsResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SetOptionsResultEncodeRequest> SetOptionsResultEncodeRequestMarshaller = Marshallers.Create<Stellar.SetOptionsResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SetOptionsResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SetOptionsResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SetOptionsResultEncodeResponse> SetOptionsResultEncodeResponseMarshaller = Marshallers.Create<Stellar.SetOptionsResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SetOptionsResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SetOptionsResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SetOptionsResultDecodeRequest> SetOptionsResultDecodeRequestMarshaller = Marshallers.Create<Stellar.SetOptionsResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SetOptionsResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SetOptionsResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SetOptionsResultDecodeResponse> SetOptionsResultDecodeResponseMarshaller = Marshallers.Create<Stellar.SetOptionsResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SetOptionsResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ChangeTrustResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ChangeTrustResultCodeEncodeRequest> ChangeTrustResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.ChangeTrustResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ChangeTrustResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ChangeTrustResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ChangeTrustResultCodeEncodeResponse> ChangeTrustResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.ChangeTrustResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ChangeTrustResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ChangeTrustResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ChangeTrustResultCodeDecodeRequest> ChangeTrustResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.ChangeTrustResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ChangeTrustResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ChangeTrustResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ChangeTrustResultCodeDecodeResponse> ChangeTrustResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.ChangeTrustResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ChangeTrustResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ChangeTrustResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ChangeTrustResultEncodeRequest> ChangeTrustResultEncodeRequestMarshaller = Marshallers.Create<Stellar.ChangeTrustResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ChangeTrustResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ChangeTrustResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ChangeTrustResultEncodeResponse> ChangeTrustResultEncodeResponseMarshaller = Marshallers.Create<Stellar.ChangeTrustResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ChangeTrustResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ChangeTrustResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ChangeTrustResultDecodeRequest> ChangeTrustResultDecodeRequestMarshaller = Marshallers.Create<Stellar.ChangeTrustResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ChangeTrustResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ChangeTrustResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ChangeTrustResultDecodeResponse> ChangeTrustResultDecodeResponseMarshaller = Marshallers.Create<Stellar.ChangeTrustResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ChangeTrustResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AllowTrustResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.AllowTrustResultCodeEncodeRequest> AllowTrustResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.AllowTrustResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AllowTrustResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AllowTrustResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.AllowTrustResultCodeEncodeResponse> AllowTrustResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.AllowTrustResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AllowTrustResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AllowTrustResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.AllowTrustResultCodeDecodeRequest> AllowTrustResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.AllowTrustResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AllowTrustResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AllowTrustResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.AllowTrustResultCodeDecodeResponse> AllowTrustResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.AllowTrustResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AllowTrustResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AllowTrustResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.AllowTrustResultEncodeRequest> AllowTrustResultEncodeRequestMarshaller = Marshallers.Create<Stellar.AllowTrustResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AllowTrustResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AllowTrustResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.AllowTrustResultEncodeResponse> AllowTrustResultEncodeResponseMarshaller = Marshallers.Create<Stellar.AllowTrustResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AllowTrustResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AllowTrustResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.AllowTrustResultDecodeRequest> AllowTrustResultDecodeRequestMarshaller = Marshallers.Create<Stellar.AllowTrustResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AllowTrustResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AllowTrustResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.AllowTrustResultDecodeResponse> AllowTrustResultDecodeResponseMarshaller = Marshallers.Create<Stellar.AllowTrustResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AllowTrustResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountMergeResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.AccountMergeResultCodeEncodeRequest> AccountMergeResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.AccountMergeResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountMergeResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountMergeResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.AccountMergeResultCodeEncodeResponse> AccountMergeResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.AccountMergeResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountMergeResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountMergeResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.AccountMergeResultCodeDecodeRequest> AccountMergeResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.AccountMergeResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountMergeResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountMergeResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.AccountMergeResultCodeDecodeResponse> AccountMergeResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.AccountMergeResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountMergeResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountMergeResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.AccountMergeResultEncodeRequest> AccountMergeResultEncodeRequestMarshaller = Marshallers.Create<Stellar.AccountMergeResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountMergeResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountMergeResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.AccountMergeResultEncodeResponse> AccountMergeResultEncodeResponseMarshaller = Marshallers.Create<Stellar.AccountMergeResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountMergeResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountMergeResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.AccountMergeResultDecodeRequest> AccountMergeResultDecodeRequestMarshaller = Marshallers.Create<Stellar.AccountMergeResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountMergeResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountMergeResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.AccountMergeResultDecodeResponse> AccountMergeResultDecodeResponseMarshaller = Marshallers.Create<Stellar.AccountMergeResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountMergeResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InflationResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.InflationResultCodeEncodeRequest> InflationResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.InflationResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InflationResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InflationResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.InflationResultCodeEncodeResponse> InflationResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.InflationResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InflationResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InflationResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.InflationResultCodeDecodeRequest> InflationResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.InflationResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InflationResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InflationResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.InflationResultCodeDecodeResponse> InflationResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.InflationResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InflationResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InflationPayoutEncodeRequest</summary>
        public static readonly Marshaller<Stellar.InflationPayoutEncodeRequest> InflationPayoutEncodeRequestMarshaller = Marshallers.Create<Stellar.InflationPayoutEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InflationPayoutEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InflationPayoutEncodeResponse</summary>
        public static readonly Marshaller<Stellar.InflationPayoutEncodeResponse> InflationPayoutEncodeResponseMarshaller = Marshallers.Create<Stellar.InflationPayoutEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InflationPayoutEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InflationPayoutDecodeRequest</summary>
        public static readonly Marshaller<Stellar.InflationPayoutDecodeRequest> InflationPayoutDecodeRequestMarshaller = Marshallers.Create<Stellar.InflationPayoutDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InflationPayoutDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InflationPayoutDecodeResponse</summary>
        public static readonly Marshaller<Stellar.InflationPayoutDecodeResponse> InflationPayoutDecodeResponseMarshaller = Marshallers.Create<Stellar.InflationPayoutDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InflationPayoutDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InflationResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.InflationResultEncodeRequest> InflationResultEncodeRequestMarshaller = Marshallers.Create<Stellar.InflationResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InflationResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InflationResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.InflationResultEncodeResponse> InflationResultEncodeResponseMarshaller = Marshallers.Create<Stellar.InflationResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InflationResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InflationResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.InflationResultDecodeRequest> InflationResultDecodeRequestMarshaller = Marshallers.Create<Stellar.InflationResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InflationResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InflationResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.InflationResultDecodeResponse> InflationResultDecodeResponseMarshaller = Marshallers.Create<Stellar.InflationResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InflationResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageDataResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ManageDataResultCodeEncodeRequest> ManageDataResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.ManageDataResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageDataResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageDataResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ManageDataResultCodeEncodeResponse> ManageDataResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.ManageDataResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageDataResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageDataResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ManageDataResultCodeDecodeRequest> ManageDataResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.ManageDataResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageDataResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageDataResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ManageDataResultCodeDecodeResponse> ManageDataResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.ManageDataResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageDataResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageDataResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ManageDataResultEncodeRequest> ManageDataResultEncodeRequestMarshaller = Marshallers.Create<Stellar.ManageDataResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageDataResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageDataResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ManageDataResultEncodeResponse> ManageDataResultEncodeResponseMarshaller = Marshallers.Create<Stellar.ManageDataResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageDataResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageDataResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ManageDataResultDecodeRequest> ManageDataResultDecodeRequestMarshaller = Marshallers.Create<Stellar.ManageDataResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageDataResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ManageDataResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ManageDataResultDecodeResponse> ManageDataResultDecodeResponseMarshaller = Marshallers.Create<Stellar.ManageDataResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ManageDataResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BumpSequenceResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.BumpSequenceResultCodeEncodeRequest> BumpSequenceResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.BumpSequenceResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BumpSequenceResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BumpSequenceResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.BumpSequenceResultCodeEncodeResponse> BumpSequenceResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.BumpSequenceResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BumpSequenceResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BumpSequenceResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.BumpSequenceResultCodeDecodeRequest> BumpSequenceResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.BumpSequenceResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BumpSequenceResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BumpSequenceResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.BumpSequenceResultCodeDecodeResponse> BumpSequenceResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.BumpSequenceResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BumpSequenceResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BumpSequenceResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.BumpSequenceResultEncodeRequest> BumpSequenceResultEncodeRequestMarshaller = Marshallers.Create<Stellar.BumpSequenceResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BumpSequenceResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BumpSequenceResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.BumpSequenceResultEncodeResponse> BumpSequenceResultEncodeResponseMarshaller = Marshallers.Create<Stellar.BumpSequenceResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BumpSequenceResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BumpSequenceResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.BumpSequenceResultDecodeRequest> BumpSequenceResultDecodeRequestMarshaller = Marshallers.Create<Stellar.BumpSequenceResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BumpSequenceResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BumpSequenceResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.BumpSequenceResultDecodeResponse> BumpSequenceResultDecodeResponseMarshaller = Marshallers.Create<Stellar.BumpSequenceResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BumpSequenceResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateClaimableBalanceResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.CreateClaimableBalanceResultCodeEncodeRequest> CreateClaimableBalanceResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.CreateClaimableBalanceResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateClaimableBalanceResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateClaimableBalanceResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.CreateClaimableBalanceResultCodeEncodeResponse> CreateClaimableBalanceResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.CreateClaimableBalanceResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateClaimableBalanceResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateClaimableBalanceResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.CreateClaimableBalanceResultCodeDecodeRequest> CreateClaimableBalanceResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.CreateClaimableBalanceResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateClaimableBalanceResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateClaimableBalanceResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.CreateClaimableBalanceResultCodeDecodeResponse> CreateClaimableBalanceResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.CreateClaimableBalanceResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateClaimableBalanceResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateClaimableBalanceResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.CreateClaimableBalanceResultEncodeRequest> CreateClaimableBalanceResultEncodeRequestMarshaller = Marshallers.Create<Stellar.CreateClaimableBalanceResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateClaimableBalanceResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateClaimableBalanceResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.CreateClaimableBalanceResultEncodeResponse> CreateClaimableBalanceResultEncodeResponseMarshaller = Marshallers.Create<Stellar.CreateClaimableBalanceResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateClaimableBalanceResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateClaimableBalanceResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.CreateClaimableBalanceResultDecodeRequest> CreateClaimableBalanceResultDecodeRequestMarshaller = Marshallers.Create<Stellar.CreateClaimableBalanceResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateClaimableBalanceResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CreateClaimableBalanceResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.CreateClaimableBalanceResultDecodeResponse> CreateClaimableBalanceResultDecodeResponseMarshaller = Marshallers.Create<Stellar.CreateClaimableBalanceResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CreateClaimableBalanceResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimClaimableBalanceResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimClaimableBalanceResultCodeEncodeRequest> ClaimClaimableBalanceResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimClaimableBalanceResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimClaimableBalanceResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimClaimableBalanceResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimClaimableBalanceResultCodeEncodeResponse> ClaimClaimableBalanceResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimClaimableBalanceResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimClaimableBalanceResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimClaimableBalanceResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimClaimableBalanceResultCodeDecodeRequest> ClaimClaimableBalanceResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimClaimableBalanceResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimClaimableBalanceResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimClaimableBalanceResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimClaimableBalanceResultCodeDecodeResponse> ClaimClaimableBalanceResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimClaimableBalanceResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimClaimableBalanceResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimClaimableBalanceResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimClaimableBalanceResultEncodeRequest> ClaimClaimableBalanceResultEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimClaimableBalanceResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimClaimableBalanceResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimClaimableBalanceResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimClaimableBalanceResultEncodeResponse> ClaimClaimableBalanceResultEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimClaimableBalanceResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimClaimableBalanceResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimClaimableBalanceResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ClaimClaimableBalanceResultDecodeRequest> ClaimClaimableBalanceResultDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimClaimableBalanceResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimClaimableBalanceResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClaimClaimableBalanceResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ClaimClaimableBalanceResultDecodeResponse> ClaimClaimableBalanceResultDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimClaimableBalanceResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClaimClaimableBalanceResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BeginSponsoringFutureReservesResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.BeginSponsoringFutureReservesResultCodeEncodeRequest> BeginSponsoringFutureReservesResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.BeginSponsoringFutureReservesResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BeginSponsoringFutureReservesResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.BeginSponsoringFutureReservesResultCodeEncodeResponse> BeginSponsoringFutureReservesResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.BeginSponsoringFutureReservesResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BeginSponsoringFutureReservesResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.BeginSponsoringFutureReservesResultCodeDecodeRequest> BeginSponsoringFutureReservesResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.BeginSponsoringFutureReservesResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BeginSponsoringFutureReservesResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.BeginSponsoringFutureReservesResultCodeDecodeResponse> BeginSponsoringFutureReservesResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.BeginSponsoringFutureReservesResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BeginSponsoringFutureReservesResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.BeginSponsoringFutureReservesResultEncodeRequest> BeginSponsoringFutureReservesResultEncodeRequestMarshaller = Marshallers.Create<Stellar.BeginSponsoringFutureReservesResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BeginSponsoringFutureReservesResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.BeginSponsoringFutureReservesResultEncodeResponse> BeginSponsoringFutureReservesResultEncodeResponseMarshaller = Marshallers.Create<Stellar.BeginSponsoringFutureReservesResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BeginSponsoringFutureReservesResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.BeginSponsoringFutureReservesResultDecodeRequest> BeginSponsoringFutureReservesResultDecodeRequestMarshaller = Marshallers.Create<Stellar.BeginSponsoringFutureReservesResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BeginSponsoringFutureReservesResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.BeginSponsoringFutureReservesResultDecodeResponse> BeginSponsoringFutureReservesResultDecodeResponseMarshaller = Marshallers.Create<Stellar.BeginSponsoringFutureReservesResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for EndSponsoringFutureReservesResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.EndSponsoringFutureReservesResultCodeEncodeRequest> EndSponsoringFutureReservesResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.EndSponsoringFutureReservesResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.EndSponsoringFutureReservesResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for EndSponsoringFutureReservesResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.EndSponsoringFutureReservesResultCodeEncodeResponse> EndSponsoringFutureReservesResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.EndSponsoringFutureReservesResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.EndSponsoringFutureReservesResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for EndSponsoringFutureReservesResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.EndSponsoringFutureReservesResultCodeDecodeRequest> EndSponsoringFutureReservesResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.EndSponsoringFutureReservesResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.EndSponsoringFutureReservesResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for EndSponsoringFutureReservesResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.EndSponsoringFutureReservesResultCodeDecodeResponse> EndSponsoringFutureReservesResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.EndSponsoringFutureReservesResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.EndSponsoringFutureReservesResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for EndSponsoringFutureReservesResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.EndSponsoringFutureReservesResultEncodeRequest> EndSponsoringFutureReservesResultEncodeRequestMarshaller = Marshallers.Create<Stellar.EndSponsoringFutureReservesResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.EndSponsoringFutureReservesResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for EndSponsoringFutureReservesResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.EndSponsoringFutureReservesResultEncodeResponse> EndSponsoringFutureReservesResultEncodeResponseMarshaller = Marshallers.Create<Stellar.EndSponsoringFutureReservesResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.EndSponsoringFutureReservesResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for EndSponsoringFutureReservesResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.EndSponsoringFutureReservesResultDecodeRequest> EndSponsoringFutureReservesResultDecodeRequestMarshaller = Marshallers.Create<Stellar.EndSponsoringFutureReservesResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.EndSponsoringFutureReservesResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for EndSponsoringFutureReservesResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.EndSponsoringFutureReservesResultDecodeResponse> EndSponsoringFutureReservesResultDecodeResponseMarshaller = Marshallers.Create<Stellar.EndSponsoringFutureReservesResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.EndSponsoringFutureReservesResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RevokeSponsorshipResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.RevokeSponsorshipResultCodeEncodeRequest> RevokeSponsorshipResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RevokeSponsorshipResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RevokeSponsorshipResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.RevokeSponsorshipResultCodeEncodeResponse> RevokeSponsorshipResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RevokeSponsorshipResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RevokeSponsorshipResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.RevokeSponsorshipResultCodeDecodeRequest> RevokeSponsorshipResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RevokeSponsorshipResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RevokeSponsorshipResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.RevokeSponsorshipResultCodeDecodeResponse> RevokeSponsorshipResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RevokeSponsorshipResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RevokeSponsorshipResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.RevokeSponsorshipResultEncodeRequest> RevokeSponsorshipResultEncodeRequestMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RevokeSponsorshipResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RevokeSponsorshipResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.RevokeSponsorshipResultEncodeResponse> RevokeSponsorshipResultEncodeResponseMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RevokeSponsorshipResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RevokeSponsorshipResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.RevokeSponsorshipResultDecodeRequest> RevokeSponsorshipResultDecodeRequestMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RevokeSponsorshipResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RevokeSponsorshipResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.RevokeSponsorshipResultDecodeResponse> RevokeSponsorshipResultDecodeResponseMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RevokeSponsorshipResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClawbackResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ClawbackResultCodeEncodeRequest> ClawbackResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.ClawbackResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClawbackResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClawbackResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ClawbackResultCodeEncodeResponse> ClawbackResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.ClawbackResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClawbackResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClawbackResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ClawbackResultCodeDecodeRequest> ClawbackResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.ClawbackResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClawbackResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClawbackResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ClawbackResultCodeDecodeResponse> ClawbackResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.ClawbackResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClawbackResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClawbackResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ClawbackResultEncodeRequest> ClawbackResultEncodeRequestMarshaller = Marshallers.Create<Stellar.ClawbackResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClawbackResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClawbackResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ClawbackResultEncodeResponse> ClawbackResultEncodeResponseMarshaller = Marshallers.Create<Stellar.ClawbackResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClawbackResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClawbackResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ClawbackResultDecodeRequest> ClawbackResultDecodeRequestMarshaller = Marshallers.Create<Stellar.ClawbackResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClawbackResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClawbackResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ClawbackResultDecodeResponse> ClawbackResultDecodeResponseMarshaller = Marshallers.Create<Stellar.ClawbackResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClawbackResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClawbackClaimableBalanceResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ClawbackClaimableBalanceResultCodeEncodeRequest> ClawbackClaimableBalanceResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.ClawbackClaimableBalanceResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClawbackClaimableBalanceResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClawbackClaimableBalanceResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ClawbackClaimableBalanceResultCodeEncodeResponse> ClawbackClaimableBalanceResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.ClawbackClaimableBalanceResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClawbackClaimableBalanceResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClawbackClaimableBalanceResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ClawbackClaimableBalanceResultCodeDecodeRequest> ClawbackClaimableBalanceResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.ClawbackClaimableBalanceResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClawbackClaimableBalanceResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClawbackClaimableBalanceResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ClawbackClaimableBalanceResultCodeDecodeResponse> ClawbackClaimableBalanceResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.ClawbackClaimableBalanceResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClawbackClaimableBalanceResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClawbackClaimableBalanceResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ClawbackClaimableBalanceResultEncodeRequest> ClawbackClaimableBalanceResultEncodeRequestMarshaller = Marshallers.Create<Stellar.ClawbackClaimableBalanceResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClawbackClaimableBalanceResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClawbackClaimableBalanceResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ClawbackClaimableBalanceResultEncodeResponse> ClawbackClaimableBalanceResultEncodeResponseMarshaller = Marshallers.Create<Stellar.ClawbackClaimableBalanceResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClawbackClaimableBalanceResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClawbackClaimableBalanceResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ClawbackClaimableBalanceResultDecodeRequest> ClawbackClaimableBalanceResultDecodeRequestMarshaller = Marshallers.Create<Stellar.ClawbackClaimableBalanceResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClawbackClaimableBalanceResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ClawbackClaimableBalanceResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ClawbackClaimableBalanceResultDecodeResponse> ClawbackClaimableBalanceResultDecodeResponseMarshaller = Marshallers.Create<Stellar.ClawbackClaimableBalanceResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ClawbackClaimableBalanceResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SetTrustLineFlagsResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SetTrustLineFlagsResultCodeEncodeRequest> SetTrustLineFlagsResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.SetTrustLineFlagsResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SetTrustLineFlagsResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SetTrustLineFlagsResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SetTrustLineFlagsResultCodeEncodeResponse> SetTrustLineFlagsResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.SetTrustLineFlagsResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SetTrustLineFlagsResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SetTrustLineFlagsResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SetTrustLineFlagsResultCodeDecodeRequest> SetTrustLineFlagsResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.SetTrustLineFlagsResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SetTrustLineFlagsResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SetTrustLineFlagsResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SetTrustLineFlagsResultCodeDecodeResponse> SetTrustLineFlagsResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.SetTrustLineFlagsResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SetTrustLineFlagsResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SetTrustLineFlagsResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SetTrustLineFlagsResultEncodeRequest> SetTrustLineFlagsResultEncodeRequestMarshaller = Marshallers.Create<Stellar.SetTrustLineFlagsResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SetTrustLineFlagsResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SetTrustLineFlagsResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SetTrustLineFlagsResultEncodeResponse> SetTrustLineFlagsResultEncodeResponseMarshaller = Marshallers.Create<Stellar.SetTrustLineFlagsResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SetTrustLineFlagsResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SetTrustLineFlagsResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SetTrustLineFlagsResultDecodeRequest> SetTrustLineFlagsResultDecodeRequestMarshaller = Marshallers.Create<Stellar.SetTrustLineFlagsResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SetTrustLineFlagsResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SetTrustLineFlagsResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SetTrustLineFlagsResultDecodeResponse> SetTrustLineFlagsResultDecodeResponseMarshaller = Marshallers.Create<Stellar.SetTrustLineFlagsResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SetTrustLineFlagsResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolDepositResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolDepositResultCodeEncodeRequest> LiquidityPoolDepositResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolDepositResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolDepositResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolDepositResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolDepositResultCodeEncodeResponse> LiquidityPoolDepositResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolDepositResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolDepositResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolDepositResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolDepositResultCodeDecodeRequest> LiquidityPoolDepositResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolDepositResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolDepositResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolDepositResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolDepositResultCodeDecodeResponse> LiquidityPoolDepositResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolDepositResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolDepositResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolDepositResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolDepositResultEncodeRequest> LiquidityPoolDepositResultEncodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolDepositResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolDepositResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolDepositResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolDepositResultEncodeResponse> LiquidityPoolDepositResultEncodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolDepositResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolDepositResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolDepositResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolDepositResultDecodeRequest> LiquidityPoolDepositResultDecodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolDepositResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolDepositResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolDepositResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolDepositResultDecodeResponse> LiquidityPoolDepositResultDecodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolDepositResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolDepositResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolWithdrawResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolWithdrawResultCodeEncodeRequest> LiquidityPoolWithdrawResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolWithdrawResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolWithdrawResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolWithdrawResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolWithdrawResultCodeEncodeResponse> LiquidityPoolWithdrawResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolWithdrawResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolWithdrawResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolWithdrawResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolWithdrawResultCodeDecodeRequest> LiquidityPoolWithdrawResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolWithdrawResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolWithdrawResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolWithdrawResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolWithdrawResultCodeDecodeResponse> LiquidityPoolWithdrawResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolWithdrawResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolWithdrawResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolWithdrawResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolWithdrawResultEncodeRequest> LiquidityPoolWithdrawResultEncodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolWithdrawResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolWithdrawResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolWithdrawResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolWithdrawResultEncodeResponse> LiquidityPoolWithdrawResultEncodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolWithdrawResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolWithdrawResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolWithdrawResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolWithdrawResultDecodeRequest> LiquidityPoolWithdrawResultDecodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolWithdrawResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolWithdrawResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for LiquidityPoolWithdrawResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.LiquidityPoolWithdrawResultDecodeResponse> LiquidityPoolWithdrawResultDecodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolWithdrawResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.LiquidityPoolWithdrawResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InvokeHostFunctionResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.InvokeHostFunctionResultCodeEncodeRequest> InvokeHostFunctionResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InvokeHostFunctionResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InvokeHostFunctionResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.InvokeHostFunctionResultCodeEncodeResponse> InvokeHostFunctionResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InvokeHostFunctionResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InvokeHostFunctionResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.InvokeHostFunctionResultCodeDecodeRequest> InvokeHostFunctionResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InvokeHostFunctionResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InvokeHostFunctionResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.InvokeHostFunctionResultCodeDecodeResponse> InvokeHostFunctionResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InvokeHostFunctionResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InvokeHostFunctionResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.InvokeHostFunctionResultEncodeRequest> InvokeHostFunctionResultEncodeRequestMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InvokeHostFunctionResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InvokeHostFunctionResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.InvokeHostFunctionResultEncodeResponse> InvokeHostFunctionResultEncodeResponseMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InvokeHostFunctionResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InvokeHostFunctionResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.InvokeHostFunctionResultDecodeRequest> InvokeHostFunctionResultDecodeRequestMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InvokeHostFunctionResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InvokeHostFunctionResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.InvokeHostFunctionResultDecodeResponse> InvokeHostFunctionResultDecodeResponseMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InvokeHostFunctionResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ExtendFootprintTTLResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ExtendFootprintTTLResultCodeEncodeRequest> ExtendFootprintTTLResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.ExtendFootprintTTLResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ExtendFootprintTTLResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ExtendFootprintTTLResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ExtendFootprintTTLResultCodeEncodeResponse> ExtendFootprintTTLResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.ExtendFootprintTTLResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ExtendFootprintTTLResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ExtendFootprintTTLResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ExtendFootprintTTLResultCodeDecodeRequest> ExtendFootprintTTLResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.ExtendFootprintTTLResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ExtendFootprintTTLResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ExtendFootprintTTLResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ExtendFootprintTTLResultCodeDecodeResponse> ExtendFootprintTTLResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.ExtendFootprintTTLResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ExtendFootprintTTLResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ExtendFootprintTTLResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ExtendFootprintTTLResultEncodeRequest> ExtendFootprintTTLResultEncodeRequestMarshaller = Marshallers.Create<Stellar.ExtendFootprintTTLResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ExtendFootprintTTLResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ExtendFootprintTTLResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ExtendFootprintTTLResultEncodeResponse> ExtendFootprintTTLResultEncodeResponseMarshaller = Marshallers.Create<Stellar.ExtendFootprintTTLResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ExtendFootprintTTLResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ExtendFootprintTTLResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ExtendFootprintTTLResultDecodeRequest> ExtendFootprintTTLResultDecodeRequestMarshaller = Marshallers.Create<Stellar.ExtendFootprintTTLResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ExtendFootprintTTLResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ExtendFootprintTTLResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ExtendFootprintTTLResultDecodeResponse> ExtendFootprintTTLResultDecodeResponseMarshaller = Marshallers.Create<Stellar.ExtendFootprintTTLResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ExtendFootprintTTLResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RestoreFootprintResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.RestoreFootprintResultCodeEncodeRequest> RestoreFootprintResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.RestoreFootprintResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RestoreFootprintResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RestoreFootprintResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.RestoreFootprintResultCodeEncodeResponse> RestoreFootprintResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.RestoreFootprintResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RestoreFootprintResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RestoreFootprintResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.RestoreFootprintResultCodeDecodeRequest> RestoreFootprintResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.RestoreFootprintResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RestoreFootprintResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RestoreFootprintResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.RestoreFootprintResultCodeDecodeResponse> RestoreFootprintResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.RestoreFootprintResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RestoreFootprintResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RestoreFootprintResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.RestoreFootprintResultEncodeRequest> RestoreFootprintResultEncodeRequestMarshaller = Marshallers.Create<Stellar.RestoreFootprintResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RestoreFootprintResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RestoreFootprintResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.RestoreFootprintResultEncodeResponse> RestoreFootprintResultEncodeResponseMarshaller = Marshallers.Create<Stellar.RestoreFootprintResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RestoreFootprintResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RestoreFootprintResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.RestoreFootprintResultDecodeRequest> RestoreFootprintResultDecodeRequestMarshaller = Marshallers.Create<Stellar.RestoreFootprintResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RestoreFootprintResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for RestoreFootprintResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.RestoreFootprintResultDecodeResponse> RestoreFootprintResultDecodeResponseMarshaller = Marshallers.Create<Stellar.RestoreFootprintResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.RestoreFootprintResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OperationResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.OperationResultCodeEncodeRequest> OperationResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.OperationResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OperationResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OperationResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.OperationResultCodeEncodeResponse> OperationResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.OperationResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OperationResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OperationResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.OperationResultCodeDecodeRequest> OperationResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.OperationResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OperationResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OperationResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.OperationResultCodeDecodeResponse> OperationResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.OperationResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OperationResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OperationResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.OperationResultEncodeRequest> OperationResultEncodeRequestMarshaller = Marshallers.Create<Stellar.OperationResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OperationResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OperationResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.OperationResultEncodeResponse> OperationResultEncodeResponseMarshaller = Marshallers.Create<Stellar.OperationResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OperationResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OperationResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.OperationResultDecodeRequest> OperationResultDecodeRequestMarshaller = Marshallers.Create<Stellar.OperationResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OperationResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for OperationResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.OperationResultDecodeResponse> OperationResultDecodeResponseMarshaller = Marshallers.Create<Stellar.OperationResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.OperationResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionResultCodeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionResultCodeEncodeRequest> TransactionResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionResultCodeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionResultCodeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionResultCodeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionResultCodeEncodeResponse> TransactionResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionResultCodeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionResultCodeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionResultCodeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionResultCodeDecodeRequest> TransactionResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionResultCodeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionResultCodeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionResultCodeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionResultCodeDecodeResponse> TransactionResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionResultCodeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionResultCodeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InnerTransactionResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.InnerTransactionResultEncodeRequest> InnerTransactionResultEncodeRequestMarshaller = Marshallers.Create<Stellar.InnerTransactionResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InnerTransactionResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InnerTransactionResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.InnerTransactionResultEncodeResponse> InnerTransactionResultEncodeResponseMarshaller = Marshallers.Create<Stellar.InnerTransactionResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InnerTransactionResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InnerTransactionResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.InnerTransactionResultDecodeRequest> InnerTransactionResultDecodeRequestMarshaller = Marshallers.Create<Stellar.InnerTransactionResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InnerTransactionResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InnerTransactionResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.InnerTransactionResultDecodeResponse> InnerTransactionResultDecodeResponseMarshaller = Marshallers.Create<Stellar.InnerTransactionResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InnerTransactionResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InnerTransactionResultPairEncodeRequest</summary>
        public static readonly Marshaller<Stellar.InnerTransactionResultPairEncodeRequest> InnerTransactionResultPairEncodeRequestMarshaller = Marshallers.Create<Stellar.InnerTransactionResultPairEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InnerTransactionResultPairEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InnerTransactionResultPairEncodeResponse</summary>
        public static readonly Marshaller<Stellar.InnerTransactionResultPairEncodeResponse> InnerTransactionResultPairEncodeResponseMarshaller = Marshallers.Create<Stellar.InnerTransactionResultPairEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InnerTransactionResultPairEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InnerTransactionResultPairDecodeRequest</summary>
        public static readonly Marshaller<Stellar.InnerTransactionResultPairDecodeRequest> InnerTransactionResultPairDecodeRequestMarshaller = Marshallers.Create<Stellar.InnerTransactionResultPairDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InnerTransactionResultPairDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for InnerTransactionResultPairDecodeResponse</summary>
        public static readonly Marshaller<Stellar.InnerTransactionResultPairDecodeResponse> InnerTransactionResultPairDecodeResponseMarshaller = Marshallers.Create<Stellar.InnerTransactionResultPairDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.InnerTransactionResultPairDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionResultEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionResultEncodeRequest> TransactionResultEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionResultEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionResultEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionResultEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionResultEncodeResponse> TransactionResultEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionResultEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionResultEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionResultDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TransactionResultDecodeRequest> TransactionResultDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionResultDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionResultDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TransactionResultDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TransactionResultDecodeResponse> TransactionResultDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionResultDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TransactionResultDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HashEncodeRequest</summary>
        public static readonly Marshaller<Stellar.HashEncodeRequest> HashEncodeRequestMarshaller = Marshallers.Create<Stellar.HashEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HashEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HashEncodeResponse</summary>
        public static readonly Marshaller<Stellar.HashEncodeResponse> HashEncodeResponseMarshaller = Marshallers.Create<Stellar.HashEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HashEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HashDecodeRequest</summary>
        public static readonly Marshaller<Stellar.HashDecodeRequest> HashDecodeRequestMarshaller = Marshallers.Create<Stellar.HashDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HashDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HashDecodeResponse</summary>
        public static readonly Marshaller<Stellar.HashDecodeResponse> HashDecodeResponseMarshaller = Marshallers.Create<Stellar.HashDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HashDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for uint256EncodeRequest</summary>
        public static readonly Marshaller<Stellar.uint256EncodeRequest> uint256EncodeRequestMarshaller = Marshallers.Create<Stellar.uint256EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.uint256EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for uint256EncodeResponse</summary>
        public static readonly Marshaller<Stellar.uint256EncodeResponse> uint256EncodeResponseMarshaller = Marshallers.Create<Stellar.uint256EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.uint256EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for uint256DecodeRequest</summary>
        public static readonly Marshaller<Stellar.uint256DecodeRequest> uint256DecodeRequestMarshaller = Marshallers.Create<Stellar.uint256DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.uint256DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for uint256DecodeResponse</summary>
        public static readonly Marshaller<Stellar.uint256DecodeResponse> uint256DecodeResponseMarshaller = Marshallers.Create<Stellar.uint256DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.uint256DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for uint32EncodeRequest</summary>
        public static readonly Marshaller<Stellar.uint32EncodeRequest> uint32EncodeRequestMarshaller = Marshallers.Create<Stellar.uint32EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.uint32EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for uint32EncodeResponse</summary>
        public static readonly Marshaller<Stellar.uint32EncodeResponse> uint32EncodeResponseMarshaller = Marshallers.Create<Stellar.uint32EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.uint32EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for uint32DecodeRequest</summary>
        public static readonly Marshaller<Stellar.uint32DecodeRequest> uint32DecodeRequestMarshaller = Marshallers.Create<Stellar.uint32DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.uint32DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for uint32DecodeResponse</summary>
        public static readonly Marshaller<Stellar.uint32DecodeResponse> uint32DecodeResponseMarshaller = Marshallers.Create<Stellar.uint32DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.uint32DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for int32EncodeRequest</summary>
        public static readonly Marshaller<Stellar.int32EncodeRequest> int32EncodeRequestMarshaller = Marshallers.Create<Stellar.int32EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.int32EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for int32EncodeResponse</summary>
        public static readonly Marshaller<Stellar.int32EncodeResponse> int32EncodeResponseMarshaller = Marshallers.Create<Stellar.int32EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.int32EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for int32DecodeRequest</summary>
        public static readonly Marshaller<Stellar.int32DecodeRequest> int32DecodeRequestMarshaller = Marshallers.Create<Stellar.int32DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.int32DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for int32DecodeResponse</summary>
        public static readonly Marshaller<Stellar.int32DecodeResponse> int32DecodeResponseMarshaller = Marshallers.Create<Stellar.int32DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.int32DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for uint64EncodeRequest</summary>
        public static readonly Marshaller<Stellar.uint64EncodeRequest> uint64EncodeRequestMarshaller = Marshallers.Create<Stellar.uint64EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.uint64EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for uint64EncodeResponse</summary>
        public static readonly Marshaller<Stellar.uint64EncodeResponse> uint64EncodeResponseMarshaller = Marshallers.Create<Stellar.uint64EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.uint64EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for uint64DecodeRequest</summary>
        public static readonly Marshaller<Stellar.uint64DecodeRequest> uint64DecodeRequestMarshaller = Marshallers.Create<Stellar.uint64DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.uint64DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for uint64DecodeResponse</summary>
        public static readonly Marshaller<Stellar.uint64DecodeResponse> uint64DecodeResponseMarshaller = Marshallers.Create<Stellar.uint64DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.uint64DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for int64EncodeRequest</summary>
        public static readonly Marshaller<Stellar.int64EncodeRequest> int64EncodeRequestMarshaller = Marshallers.Create<Stellar.int64EncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.int64EncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for int64EncodeResponse</summary>
        public static readonly Marshaller<Stellar.int64EncodeResponse> int64EncodeResponseMarshaller = Marshallers.Create<Stellar.int64EncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.int64EncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for int64DecodeRequest</summary>
        public static readonly Marshaller<Stellar.int64DecodeRequest> int64DecodeRequestMarshaller = Marshallers.Create<Stellar.int64DecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.int64DecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for int64DecodeResponse</summary>
        public static readonly Marshaller<Stellar.int64DecodeResponse> int64DecodeResponseMarshaller = Marshallers.Create<Stellar.int64DecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.int64DecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimePointEncodeRequest</summary>
        public static readonly Marshaller<Stellar.TimePointEncodeRequest> TimePointEncodeRequestMarshaller = Marshallers.Create<Stellar.TimePointEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimePointEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimePointEncodeResponse</summary>
        public static readonly Marshaller<Stellar.TimePointEncodeResponse> TimePointEncodeResponseMarshaller = Marshallers.Create<Stellar.TimePointEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimePointEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimePointDecodeRequest</summary>
        public static readonly Marshaller<Stellar.TimePointDecodeRequest> TimePointDecodeRequestMarshaller = Marshallers.Create<Stellar.TimePointDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimePointDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for TimePointDecodeResponse</summary>
        public static readonly Marshaller<Stellar.TimePointDecodeResponse> TimePointDecodeResponseMarshaller = Marshallers.Create<Stellar.TimePointDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.TimePointDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DurationEncodeRequest</summary>
        public static readonly Marshaller<Stellar.DurationEncodeRequest> DurationEncodeRequestMarshaller = Marshallers.Create<Stellar.DurationEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DurationEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DurationEncodeResponse</summary>
        public static readonly Marshaller<Stellar.DurationEncodeResponse> DurationEncodeResponseMarshaller = Marshallers.Create<Stellar.DurationEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DurationEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DurationDecodeRequest</summary>
        public static readonly Marshaller<Stellar.DurationDecodeRequest> DurationDecodeRequestMarshaller = Marshallers.Create<Stellar.DurationDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DurationDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for DurationDecodeResponse</summary>
        public static readonly Marshaller<Stellar.DurationDecodeResponse> DurationDecodeResponseMarshaller = Marshallers.Create<Stellar.DurationDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.DurationDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ExtensionPointEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ExtensionPointEncodeRequest> ExtensionPointEncodeRequestMarshaller = Marshallers.Create<Stellar.ExtensionPointEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ExtensionPointEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ExtensionPointEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ExtensionPointEncodeResponse> ExtensionPointEncodeResponseMarshaller = Marshallers.Create<Stellar.ExtensionPointEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ExtensionPointEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ExtensionPointDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ExtensionPointDecodeRequest> ExtensionPointDecodeRequestMarshaller = Marshallers.Create<Stellar.ExtensionPointDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ExtensionPointDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ExtensionPointDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ExtensionPointDecodeResponse> ExtensionPointDecodeResponseMarshaller = Marshallers.Create<Stellar.ExtensionPointDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ExtensionPointDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CryptoKeyTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.CryptoKeyTypeEncodeRequest> CryptoKeyTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.CryptoKeyTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CryptoKeyTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CryptoKeyTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.CryptoKeyTypeEncodeResponse> CryptoKeyTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.CryptoKeyTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CryptoKeyTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CryptoKeyTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.CryptoKeyTypeDecodeRequest> CryptoKeyTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.CryptoKeyTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CryptoKeyTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for CryptoKeyTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.CryptoKeyTypeDecodeResponse> CryptoKeyTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.CryptoKeyTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.CryptoKeyTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PublicKeyTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.PublicKeyTypeEncodeRequest> PublicKeyTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.PublicKeyTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PublicKeyTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PublicKeyTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.PublicKeyTypeEncodeResponse> PublicKeyTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.PublicKeyTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PublicKeyTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PublicKeyTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.PublicKeyTypeDecodeRequest> PublicKeyTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.PublicKeyTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PublicKeyTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PublicKeyTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.PublicKeyTypeDecodeResponse> PublicKeyTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.PublicKeyTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PublicKeyTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignerKeyTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SignerKeyTypeEncodeRequest> SignerKeyTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.SignerKeyTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignerKeyTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignerKeyTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SignerKeyTypeEncodeResponse> SignerKeyTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.SignerKeyTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignerKeyTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignerKeyTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SignerKeyTypeDecodeRequest> SignerKeyTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.SignerKeyTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignerKeyTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignerKeyTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SignerKeyTypeDecodeResponse> SignerKeyTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.SignerKeyTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignerKeyTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PublicKeyEncodeRequest</summary>
        public static readonly Marshaller<Stellar.PublicKeyEncodeRequest> PublicKeyEncodeRequestMarshaller = Marshallers.Create<Stellar.PublicKeyEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PublicKeyEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PublicKeyEncodeResponse</summary>
        public static readonly Marshaller<Stellar.PublicKeyEncodeResponse> PublicKeyEncodeResponseMarshaller = Marshallers.Create<Stellar.PublicKeyEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PublicKeyEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PublicKeyDecodeRequest</summary>
        public static readonly Marshaller<Stellar.PublicKeyDecodeRequest> PublicKeyDecodeRequestMarshaller = Marshallers.Create<Stellar.PublicKeyDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PublicKeyDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for PublicKeyDecodeResponse</summary>
        public static readonly Marshaller<Stellar.PublicKeyDecodeResponse> PublicKeyDecodeResponseMarshaller = Marshallers.Create<Stellar.PublicKeyDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.PublicKeyDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignerKeyEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SignerKeyEncodeRequest> SignerKeyEncodeRequestMarshaller = Marshallers.Create<Stellar.SignerKeyEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignerKeyEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignerKeyEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SignerKeyEncodeResponse> SignerKeyEncodeResponseMarshaller = Marshallers.Create<Stellar.SignerKeyEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignerKeyEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignerKeyDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SignerKeyDecodeRequest> SignerKeyDecodeRequestMarshaller = Marshallers.Create<Stellar.SignerKeyDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignerKeyDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignerKeyDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SignerKeyDecodeResponse> SignerKeyDecodeResponseMarshaller = Marshallers.Create<Stellar.SignerKeyDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignerKeyDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignatureEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SignatureEncodeRequest> SignatureEncodeRequestMarshaller = Marshallers.Create<Stellar.SignatureEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignatureEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignatureEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SignatureEncodeResponse> SignatureEncodeResponseMarshaller = Marshallers.Create<Stellar.SignatureEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignatureEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignatureDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SignatureDecodeRequest> SignatureDecodeRequestMarshaller = Marshallers.Create<Stellar.SignatureDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignatureDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignatureDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SignatureDecodeResponse> SignatureDecodeResponseMarshaller = Marshallers.Create<Stellar.SignatureDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignatureDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignatureHintEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SignatureHintEncodeRequest> SignatureHintEncodeRequestMarshaller = Marshallers.Create<Stellar.SignatureHintEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignatureHintEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignatureHintEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SignatureHintEncodeResponse> SignatureHintEncodeResponseMarshaller = Marshallers.Create<Stellar.SignatureHintEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignatureHintEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignatureHintDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SignatureHintDecodeRequest> SignatureHintDecodeRequestMarshaller = Marshallers.Create<Stellar.SignatureHintDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignatureHintDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SignatureHintDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SignatureHintDecodeResponse> SignatureHintDecodeResponseMarshaller = Marshallers.Create<Stellar.SignatureHintDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SignatureHintDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for NodeIDEncodeRequest</summary>
        public static readonly Marshaller<Stellar.NodeIDEncodeRequest> NodeIDEncodeRequestMarshaller = Marshallers.Create<Stellar.NodeIDEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.NodeIDEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for NodeIDEncodeResponse</summary>
        public static readonly Marshaller<Stellar.NodeIDEncodeResponse> NodeIDEncodeResponseMarshaller = Marshallers.Create<Stellar.NodeIDEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.NodeIDEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for NodeIDDecodeRequest</summary>
        public static readonly Marshaller<Stellar.NodeIDDecodeRequest> NodeIDDecodeRequestMarshaller = Marshallers.Create<Stellar.NodeIDDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.NodeIDDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for NodeIDDecodeResponse</summary>
        public static readonly Marshaller<Stellar.NodeIDDecodeResponse> NodeIDDecodeResponseMarshaller = Marshallers.Create<Stellar.NodeIDDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.NodeIDDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountIDEncodeRequest</summary>
        public static readonly Marshaller<Stellar.AccountIDEncodeRequest> AccountIDEncodeRequestMarshaller = Marshallers.Create<Stellar.AccountIDEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountIDEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountIDEncodeResponse</summary>
        public static readonly Marshaller<Stellar.AccountIDEncodeResponse> AccountIDEncodeResponseMarshaller = Marshallers.Create<Stellar.AccountIDEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountIDEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountIDDecodeRequest</summary>
        public static readonly Marshaller<Stellar.AccountIDDecodeRequest> AccountIDDecodeRequestMarshaller = Marshallers.Create<Stellar.AccountIDDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountIDDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for AccountIDDecodeResponse</summary>
        public static readonly Marshaller<Stellar.AccountIDDecodeResponse> AccountIDDecodeResponseMarshaller = Marshallers.Create<Stellar.AccountIDDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.AccountIDDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for Curve25519SecretEncodeRequest</summary>
        public static readonly Marshaller<Stellar.Curve25519SecretEncodeRequest> Curve25519SecretEncodeRequestMarshaller = Marshallers.Create<Stellar.Curve25519SecretEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.Curve25519SecretEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for Curve25519SecretEncodeResponse</summary>
        public static readonly Marshaller<Stellar.Curve25519SecretEncodeResponse> Curve25519SecretEncodeResponseMarshaller = Marshallers.Create<Stellar.Curve25519SecretEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.Curve25519SecretEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for Curve25519SecretDecodeRequest</summary>
        public static readonly Marshaller<Stellar.Curve25519SecretDecodeRequest> Curve25519SecretDecodeRequestMarshaller = Marshallers.Create<Stellar.Curve25519SecretDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.Curve25519SecretDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for Curve25519SecretDecodeResponse</summary>
        public static readonly Marshaller<Stellar.Curve25519SecretDecodeResponse> Curve25519SecretDecodeResponseMarshaller = Marshallers.Create<Stellar.Curve25519SecretDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.Curve25519SecretDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for Curve25519PublicEncodeRequest</summary>
        public static readonly Marshaller<Stellar.Curve25519PublicEncodeRequest> Curve25519PublicEncodeRequestMarshaller = Marshallers.Create<Stellar.Curve25519PublicEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.Curve25519PublicEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for Curve25519PublicEncodeResponse</summary>
        public static readonly Marshaller<Stellar.Curve25519PublicEncodeResponse> Curve25519PublicEncodeResponseMarshaller = Marshallers.Create<Stellar.Curve25519PublicEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.Curve25519PublicEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for Curve25519PublicDecodeRequest</summary>
        public static readonly Marshaller<Stellar.Curve25519PublicDecodeRequest> Curve25519PublicDecodeRequestMarshaller = Marshallers.Create<Stellar.Curve25519PublicDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.Curve25519PublicDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for Curve25519PublicDecodeResponse</summary>
        public static readonly Marshaller<Stellar.Curve25519PublicDecodeResponse> Curve25519PublicDecodeResponseMarshaller = Marshallers.Create<Stellar.Curve25519PublicDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.Curve25519PublicDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HmacSha256KeyEncodeRequest</summary>
        public static readonly Marshaller<Stellar.HmacSha256KeyEncodeRequest> HmacSha256KeyEncodeRequestMarshaller = Marshallers.Create<Stellar.HmacSha256KeyEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HmacSha256KeyEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HmacSha256KeyEncodeResponse</summary>
        public static readonly Marshaller<Stellar.HmacSha256KeyEncodeResponse> HmacSha256KeyEncodeResponseMarshaller = Marshallers.Create<Stellar.HmacSha256KeyEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HmacSha256KeyEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HmacSha256KeyDecodeRequest</summary>
        public static readonly Marshaller<Stellar.HmacSha256KeyDecodeRequest> HmacSha256KeyDecodeRequestMarshaller = Marshallers.Create<Stellar.HmacSha256KeyDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HmacSha256KeyDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HmacSha256KeyDecodeResponse</summary>
        public static readonly Marshaller<Stellar.HmacSha256KeyDecodeResponse> HmacSha256KeyDecodeResponseMarshaller = Marshallers.Create<Stellar.HmacSha256KeyDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HmacSha256KeyDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HmacSha256MacEncodeRequest</summary>
        public static readonly Marshaller<Stellar.HmacSha256MacEncodeRequest> HmacSha256MacEncodeRequestMarshaller = Marshallers.Create<Stellar.HmacSha256MacEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HmacSha256MacEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HmacSha256MacEncodeResponse</summary>
        public static readonly Marshaller<Stellar.HmacSha256MacEncodeResponse> HmacSha256MacEncodeResponseMarshaller = Marshallers.Create<Stellar.HmacSha256MacEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HmacSha256MacEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HmacSha256MacDecodeRequest</summary>
        public static readonly Marshaller<Stellar.HmacSha256MacDecodeRequest> HmacSha256MacDecodeRequestMarshaller = Marshallers.Create<Stellar.HmacSha256MacDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HmacSha256MacDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for HmacSha256MacDecodeResponse</summary>
        public static readonly Marshaller<Stellar.HmacSha256MacDecodeResponse> HmacSha256MacDecodeResponseMarshaller = Marshallers.Create<Stellar.HmacSha256MacDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.HmacSha256MacDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ShortHashSeedEncodeRequest</summary>
        public static readonly Marshaller<Stellar.ShortHashSeedEncodeRequest> ShortHashSeedEncodeRequestMarshaller = Marshallers.Create<Stellar.ShortHashSeedEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ShortHashSeedEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ShortHashSeedEncodeResponse</summary>
        public static readonly Marshaller<Stellar.ShortHashSeedEncodeResponse> ShortHashSeedEncodeResponseMarshaller = Marshallers.Create<Stellar.ShortHashSeedEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ShortHashSeedEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ShortHashSeedDecodeRequest</summary>
        public static readonly Marshaller<Stellar.ShortHashSeedDecodeRequest> ShortHashSeedDecodeRequestMarshaller = Marshallers.Create<Stellar.ShortHashSeedDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ShortHashSeedDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for ShortHashSeedDecodeResponse</summary>
        public static readonly Marshaller<Stellar.ShortHashSeedDecodeResponse> ShortHashSeedDecodeResponseMarshaller = Marshallers.Create<Stellar.ShortHashSeedDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.ShortHashSeedDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BinaryFuseFilterTypeEncodeRequest</summary>
        public static readonly Marshaller<Stellar.BinaryFuseFilterTypeEncodeRequest> BinaryFuseFilterTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.BinaryFuseFilterTypeEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BinaryFuseFilterTypeEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BinaryFuseFilterTypeEncodeResponse</summary>
        public static readonly Marshaller<Stellar.BinaryFuseFilterTypeEncodeResponse> BinaryFuseFilterTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.BinaryFuseFilterTypeEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BinaryFuseFilterTypeEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BinaryFuseFilterTypeDecodeRequest</summary>
        public static readonly Marshaller<Stellar.BinaryFuseFilterTypeDecodeRequest> BinaryFuseFilterTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.BinaryFuseFilterTypeDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BinaryFuseFilterTypeDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for BinaryFuseFilterTypeDecodeResponse</summary>
        public static readonly Marshaller<Stellar.BinaryFuseFilterTypeDecodeResponse> BinaryFuseFilterTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.BinaryFuseFilterTypeDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.BinaryFuseFilterTypeDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SerializedBinaryFuseFilterEncodeRequest</summary>
        public static readonly Marshaller<Stellar.SerializedBinaryFuseFilterEncodeRequest> SerializedBinaryFuseFilterEncodeRequestMarshaller = Marshallers.Create<Stellar.SerializedBinaryFuseFilterEncodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SerializedBinaryFuseFilterEncodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SerializedBinaryFuseFilterEncodeResponse</summary>
        public static readonly Marshaller<Stellar.SerializedBinaryFuseFilterEncodeResponse> SerializedBinaryFuseFilterEncodeResponseMarshaller = Marshallers.Create<Stellar.SerializedBinaryFuseFilterEncodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SerializedBinaryFuseFilterEncodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SerializedBinaryFuseFilterDecodeRequest</summary>
        public static readonly Marshaller<Stellar.SerializedBinaryFuseFilterDecodeRequest> SerializedBinaryFuseFilterDecodeRequestMarshaller = Marshallers.Create<Stellar.SerializedBinaryFuseFilterDecodeRequest>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SerializedBinaryFuseFilterDecodeRequest>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

        /// <summary>Marshaller for SerializedBinaryFuseFilterDecodeResponse</summary>
        public static readonly Marshaller<Stellar.SerializedBinaryFuseFilterDecodeResponse> SerializedBinaryFuseFilterDecodeResponseMarshaller = Marshallers.Create<Stellar.SerializedBinaryFuseFilterDecodeResponse>(
            (message, serializationContext) =>
            {
                try
                {
                    var ms = new MemoryStream();
                    Serializer.Serialize(ms, message);
                    var buffer = ms.ToArray();
                    serializationContext.Complete(buffer);
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Serialization error: {ex.Message}"));
                }
            },
            (deserializationContext) =>
            {
                try
                {
                    var buffer = deserializationContext.PayloadAsReadOnlySequence().ToArray();
                    using (var ms = new MemoryStream(buffer))
                    {
                        return Serializer.Deserialize<Stellar.SerializedBinaryFuseFilterDecodeResponse>(ms);
                    }
                }
                catch (Exception ex)
                {
                    throw new RpcException(new Status(StatusCode.Internal, $"Deserialization error: {ex.Message}"));
                }
            });

    }

    /// <summary>gRPC service implementation for IXdrProtoService</summary>
    public class XdrProtoServiceGrpcService
    {
        private readonly IXdrProtoService _service;
        private readonly ILogger _logger;

        public XdrProtoServiceGrpcService(IXdrProtoService service, ILogger<XdrProtoServiceGrpcService> logger)
        {
            _service = service;
            _logger = logger;
        }

        /// <summary>Handler for EncodeConfigSettingContractExecutionLanesV0 method</summary>
        public async Task<Stellar.ConfigSettingContractExecutionLanesV0EncodeResponse> EncodeConfigSettingContractExecutionLanesV0(Stellar.ConfigSettingContractExecutionLanesV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeConfigSettingContractExecutionLanesV0 request");
                return _service.EncodeConfigSettingContractExecutionLanesV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeConfigSettingContractExecutionLanesV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeConfigSettingContractExecutionLanesV0 method</summary>
        public async Task<Stellar.ConfigSettingContractExecutionLanesV0DecodeResponse> DecodeConfigSettingContractExecutionLanesV0(Stellar.ConfigSettingContractExecutionLanesV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeConfigSettingContractExecutionLanesV0 request");
                return _service.DecodeConfigSettingContractExecutionLanesV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeConfigSettingContractExecutionLanesV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeConfigSettingContractComputeV0 method</summary>
        public async Task<Stellar.ConfigSettingContractComputeV0EncodeResponse> EncodeConfigSettingContractComputeV0(Stellar.ConfigSettingContractComputeV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeConfigSettingContractComputeV0 request");
                return _service.EncodeConfigSettingContractComputeV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeConfigSettingContractComputeV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeConfigSettingContractComputeV0 method</summary>
        public async Task<Stellar.ConfigSettingContractComputeV0DecodeResponse> DecodeConfigSettingContractComputeV0(Stellar.ConfigSettingContractComputeV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeConfigSettingContractComputeV0 request");
                return _service.DecodeConfigSettingContractComputeV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeConfigSettingContractComputeV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeConfigSettingContractLedgerCostV0 method</summary>
        public async Task<Stellar.ConfigSettingContractLedgerCostV0EncodeResponse> EncodeConfigSettingContractLedgerCostV0(Stellar.ConfigSettingContractLedgerCostV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeConfigSettingContractLedgerCostV0 request");
                return _service.EncodeConfigSettingContractLedgerCostV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeConfigSettingContractLedgerCostV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeConfigSettingContractLedgerCostV0 method</summary>
        public async Task<Stellar.ConfigSettingContractLedgerCostV0DecodeResponse> DecodeConfigSettingContractLedgerCostV0(Stellar.ConfigSettingContractLedgerCostV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeConfigSettingContractLedgerCostV0 request");
                return _service.DecodeConfigSettingContractLedgerCostV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeConfigSettingContractLedgerCostV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeConfigSettingContractHistoricalDataV0 method</summary>
        public async Task<Stellar.ConfigSettingContractHistoricalDataV0EncodeResponse> EncodeConfigSettingContractHistoricalDataV0(Stellar.ConfigSettingContractHistoricalDataV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeConfigSettingContractHistoricalDataV0 request");
                return _service.EncodeConfigSettingContractHistoricalDataV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeConfigSettingContractHistoricalDataV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeConfigSettingContractHistoricalDataV0 method</summary>
        public async Task<Stellar.ConfigSettingContractHistoricalDataV0DecodeResponse> DecodeConfigSettingContractHistoricalDataV0(Stellar.ConfigSettingContractHistoricalDataV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeConfigSettingContractHistoricalDataV0 request");
                return _service.DecodeConfigSettingContractHistoricalDataV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeConfigSettingContractHistoricalDataV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeConfigSettingContractEventsV0 method</summary>
        public async Task<Stellar.ConfigSettingContractEventsV0EncodeResponse> EncodeConfigSettingContractEventsV0(Stellar.ConfigSettingContractEventsV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeConfigSettingContractEventsV0 request");
                return _service.EncodeConfigSettingContractEventsV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeConfigSettingContractEventsV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeConfigSettingContractEventsV0 method</summary>
        public async Task<Stellar.ConfigSettingContractEventsV0DecodeResponse> DecodeConfigSettingContractEventsV0(Stellar.ConfigSettingContractEventsV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeConfigSettingContractEventsV0 request");
                return _service.DecodeConfigSettingContractEventsV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeConfigSettingContractEventsV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeConfigSettingContractBandwidthV0 method</summary>
        public async Task<Stellar.ConfigSettingContractBandwidthV0EncodeResponse> EncodeConfigSettingContractBandwidthV0(Stellar.ConfigSettingContractBandwidthV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeConfigSettingContractBandwidthV0 request");
                return _service.EncodeConfigSettingContractBandwidthV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeConfigSettingContractBandwidthV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeConfigSettingContractBandwidthV0 method</summary>
        public async Task<Stellar.ConfigSettingContractBandwidthV0DecodeResponse> DecodeConfigSettingContractBandwidthV0(Stellar.ConfigSettingContractBandwidthV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeConfigSettingContractBandwidthV0 request");
                return _service.DecodeConfigSettingContractBandwidthV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeConfigSettingContractBandwidthV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeContractCostType method</summary>
        public async Task<Stellar.ContractCostTypeEncodeResponse> EncodeContractCostType(Stellar.ContractCostTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeContractCostType request");
                return _service.EncodeContractCostType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeContractCostType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeContractCostType method</summary>
        public async Task<Stellar.ContractCostTypeDecodeResponse> DecodeContractCostType(Stellar.ContractCostTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeContractCostType request");
                return _service.DecodeContractCostType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeContractCostType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeContractCostParamEntry method</summary>
        public async Task<Stellar.ContractCostParamEntryEncodeResponse> EncodeContractCostParamEntry(Stellar.ContractCostParamEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeContractCostParamEntry request");
                return _service.EncodeContractCostParamEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeContractCostParamEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeContractCostParamEntry method</summary>
        public async Task<Stellar.ContractCostParamEntryDecodeResponse> DecodeContractCostParamEntry(Stellar.ContractCostParamEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeContractCostParamEntry request");
                return _service.DecodeContractCostParamEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeContractCostParamEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeStateArchivalSettings method</summary>
        public async Task<Stellar.StateArchivalSettingsEncodeResponse> EncodeStateArchivalSettings(Stellar.StateArchivalSettingsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeStateArchivalSettings request");
                return _service.EncodeStateArchivalSettings(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeStateArchivalSettings");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeStateArchivalSettings method</summary>
        public async Task<Stellar.StateArchivalSettingsDecodeResponse> DecodeStateArchivalSettings(Stellar.StateArchivalSettingsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeStateArchivalSettings request");
                return _service.DecodeStateArchivalSettings(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeStateArchivalSettings");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeEvictionIterator method</summary>
        public async Task<Stellar.EvictionIteratorEncodeResponse> EncodeEvictionIterator(Stellar.EvictionIteratorEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeEvictionIterator request");
                return _service.EncodeEvictionIterator(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeEvictionIterator");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeEvictionIterator method</summary>
        public async Task<Stellar.EvictionIteratorDecodeResponse> DecodeEvictionIterator(Stellar.EvictionIteratorDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeEvictionIterator request");
                return _service.DecodeEvictionIterator(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeEvictionIterator");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeContractCostParams method</summary>
        public async Task<Stellar.ContractCostParamsEncodeResponse> EncodeContractCostParams(Stellar.ContractCostParamsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeContractCostParams request");
                return _service.EncodeContractCostParams(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeContractCostParams");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeContractCostParams method</summary>
        public async Task<Stellar.ContractCostParamsDecodeResponse> DecodeContractCostParams(Stellar.ContractCostParamsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeContractCostParams request");
                return _service.DecodeContractCostParams(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeContractCostParams");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeConfigSettingID method</summary>
        public async Task<Stellar.ConfigSettingIDEncodeResponse> EncodeConfigSettingID(Stellar.ConfigSettingIDEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeConfigSettingID request");
                return _service.EncodeConfigSettingID(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeConfigSettingID");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeConfigSettingID method</summary>
        public async Task<Stellar.ConfigSettingIDDecodeResponse> DecodeConfigSettingID(Stellar.ConfigSettingIDDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeConfigSettingID request");
                return _service.DecodeConfigSettingID(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeConfigSettingID");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeConfigSettingEntry method</summary>
        public async Task<Stellar.ConfigSettingEntryEncodeResponse> EncodeConfigSettingEntry(Stellar.ConfigSettingEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeConfigSettingEntry request");
                return _service.EncodeConfigSettingEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeConfigSettingEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeConfigSettingEntry method</summary>
        public async Task<Stellar.ConfigSettingEntryDecodeResponse> DecodeConfigSettingEntry(Stellar.ConfigSettingEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeConfigSettingEntry request");
                return _service.DecodeConfigSettingEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeConfigSettingEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCEnvMetaKind method</summary>
        public async Task<Stellar.SCEnvMetaKindEncodeResponse> EncodeSCEnvMetaKind(Stellar.SCEnvMetaKindEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCEnvMetaKind request");
                return _service.EncodeSCEnvMetaKind(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCEnvMetaKind");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCEnvMetaKind method</summary>
        public async Task<Stellar.SCEnvMetaKindDecodeResponse> DecodeSCEnvMetaKind(Stellar.SCEnvMetaKindDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCEnvMetaKind request");
                return _service.DecodeSCEnvMetaKind(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCEnvMetaKind");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCEnvMetaEntry method</summary>
        public async Task<Stellar.SCEnvMetaEntryEncodeResponse> EncodeSCEnvMetaEntry(Stellar.SCEnvMetaEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCEnvMetaEntry request");
                return _service.EncodeSCEnvMetaEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCEnvMetaEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCEnvMetaEntry method</summary>
        public async Task<Stellar.SCEnvMetaEntryDecodeResponse> DecodeSCEnvMetaEntry(Stellar.SCEnvMetaEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCEnvMetaEntry request");
                return _service.DecodeSCEnvMetaEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCEnvMetaEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCMetaV0 method</summary>
        public async Task<Stellar.SCMetaV0EncodeResponse> EncodeSCMetaV0(Stellar.SCMetaV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCMetaV0 request");
                return _service.EncodeSCMetaV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCMetaV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCMetaV0 method</summary>
        public async Task<Stellar.SCMetaV0DecodeResponse> DecodeSCMetaV0(Stellar.SCMetaV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCMetaV0 request");
                return _service.DecodeSCMetaV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCMetaV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCMetaKind method</summary>
        public async Task<Stellar.SCMetaKindEncodeResponse> EncodeSCMetaKind(Stellar.SCMetaKindEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCMetaKind request");
                return _service.EncodeSCMetaKind(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCMetaKind");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCMetaKind method</summary>
        public async Task<Stellar.SCMetaKindDecodeResponse> DecodeSCMetaKind(Stellar.SCMetaKindDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCMetaKind request");
                return _service.DecodeSCMetaKind(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCMetaKind");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCMetaEntry method</summary>
        public async Task<Stellar.SCMetaEntryEncodeResponse> EncodeSCMetaEntry(Stellar.SCMetaEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCMetaEntry request");
                return _service.EncodeSCMetaEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCMetaEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCMetaEntry method</summary>
        public async Task<Stellar.SCMetaEntryDecodeResponse> DecodeSCMetaEntry(Stellar.SCMetaEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCMetaEntry request");
                return _service.DecodeSCMetaEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCMetaEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecType method</summary>
        public async Task<Stellar.SCSpecTypeEncodeResponse> EncodeSCSpecType(Stellar.SCSpecTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecType request");
                return _service.EncodeSCSpecType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecType method</summary>
        public async Task<Stellar.SCSpecTypeDecodeResponse> DecodeSCSpecType(Stellar.SCSpecTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecType request");
                return _service.DecodeSCSpecType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecTypeOption method</summary>
        public async Task<Stellar.SCSpecTypeOptionEncodeResponse> EncodeSCSpecTypeOption(Stellar.SCSpecTypeOptionEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecTypeOption request");
                return _service.EncodeSCSpecTypeOption(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecTypeOption");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecTypeOption method</summary>
        public async Task<Stellar.SCSpecTypeOptionDecodeResponse> DecodeSCSpecTypeOption(Stellar.SCSpecTypeOptionDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecTypeOption request");
                return _service.DecodeSCSpecTypeOption(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecTypeOption");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecTypeResult method</summary>
        public async Task<Stellar.SCSpecTypeResultEncodeResponse> EncodeSCSpecTypeResult(Stellar.SCSpecTypeResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecTypeResult request");
                return _service.EncodeSCSpecTypeResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecTypeResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecTypeResult method</summary>
        public async Task<Stellar.SCSpecTypeResultDecodeResponse> DecodeSCSpecTypeResult(Stellar.SCSpecTypeResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecTypeResult request");
                return _service.DecodeSCSpecTypeResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecTypeResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecTypeVec method</summary>
        public async Task<Stellar.SCSpecTypeVecEncodeResponse> EncodeSCSpecTypeVec(Stellar.SCSpecTypeVecEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecTypeVec request");
                return _service.EncodeSCSpecTypeVec(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecTypeVec");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecTypeVec method</summary>
        public async Task<Stellar.SCSpecTypeVecDecodeResponse> DecodeSCSpecTypeVec(Stellar.SCSpecTypeVecDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecTypeVec request");
                return _service.DecodeSCSpecTypeVec(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecTypeVec");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecTypeMap method</summary>
        public async Task<Stellar.SCSpecTypeMapEncodeResponse> EncodeSCSpecTypeMap(Stellar.SCSpecTypeMapEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecTypeMap request");
                return _service.EncodeSCSpecTypeMap(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecTypeMap");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecTypeMap method</summary>
        public async Task<Stellar.SCSpecTypeMapDecodeResponse> DecodeSCSpecTypeMap(Stellar.SCSpecTypeMapDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecTypeMap request");
                return _service.DecodeSCSpecTypeMap(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecTypeMap");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecTypeTuple method</summary>
        public async Task<Stellar.SCSpecTypeTupleEncodeResponse> EncodeSCSpecTypeTuple(Stellar.SCSpecTypeTupleEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecTypeTuple request");
                return _service.EncodeSCSpecTypeTuple(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecTypeTuple");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecTypeTuple method</summary>
        public async Task<Stellar.SCSpecTypeTupleDecodeResponse> DecodeSCSpecTypeTuple(Stellar.SCSpecTypeTupleDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecTypeTuple request");
                return _service.DecodeSCSpecTypeTuple(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecTypeTuple");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecTypeBytesN method</summary>
        public async Task<Stellar.SCSpecTypeBytesNEncodeResponse> EncodeSCSpecTypeBytesN(Stellar.SCSpecTypeBytesNEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecTypeBytesN request");
                return _service.EncodeSCSpecTypeBytesN(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecTypeBytesN");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecTypeBytesN method</summary>
        public async Task<Stellar.SCSpecTypeBytesNDecodeResponse> DecodeSCSpecTypeBytesN(Stellar.SCSpecTypeBytesNDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecTypeBytesN request");
                return _service.DecodeSCSpecTypeBytesN(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecTypeBytesN");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecTypeUDT method</summary>
        public async Task<Stellar.SCSpecTypeUDTEncodeResponse> EncodeSCSpecTypeUDT(Stellar.SCSpecTypeUDTEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecTypeUDT request");
                return _service.EncodeSCSpecTypeUDT(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecTypeUDT");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecTypeUDT method</summary>
        public async Task<Stellar.SCSpecTypeUDTDecodeResponse> DecodeSCSpecTypeUDT(Stellar.SCSpecTypeUDTDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecTypeUDT request");
                return _service.DecodeSCSpecTypeUDT(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecTypeUDT");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecTypeDef method</summary>
        public async Task<Stellar.SCSpecTypeDefEncodeResponse> EncodeSCSpecTypeDef(Stellar.SCSpecTypeDefEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecTypeDef request");
                return _service.EncodeSCSpecTypeDef(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecTypeDef");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecTypeDef method</summary>
        public async Task<Stellar.SCSpecTypeDefDecodeResponse> DecodeSCSpecTypeDef(Stellar.SCSpecTypeDefDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecTypeDef request");
                return _service.DecodeSCSpecTypeDef(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecTypeDef");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecUDTStructFieldV0 method</summary>
        public async Task<Stellar.SCSpecUDTStructFieldV0EncodeResponse> EncodeSCSpecUDTStructFieldV0(Stellar.SCSpecUDTStructFieldV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecUDTStructFieldV0 request");
                return _service.EncodeSCSpecUDTStructFieldV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecUDTStructFieldV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecUDTStructFieldV0 method</summary>
        public async Task<Stellar.SCSpecUDTStructFieldV0DecodeResponse> DecodeSCSpecUDTStructFieldV0(Stellar.SCSpecUDTStructFieldV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecUDTStructFieldV0 request");
                return _service.DecodeSCSpecUDTStructFieldV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecUDTStructFieldV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecUDTStructV0 method</summary>
        public async Task<Stellar.SCSpecUDTStructV0EncodeResponse> EncodeSCSpecUDTStructV0(Stellar.SCSpecUDTStructV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecUDTStructV0 request");
                return _service.EncodeSCSpecUDTStructV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecUDTStructV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecUDTStructV0 method</summary>
        public async Task<Stellar.SCSpecUDTStructV0DecodeResponse> DecodeSCSpecUDTStructV0(Stellar.SCSpecUDTStructV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecUDTStructV0 request");
                return _service.DecodeSCSpecUDTStructV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecUDTStructV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecUDTUnionCaseVoidV0 method</summary>
        public async Task<Stellar.SCSpecUDTUnionCaseVoidV0EncodeResponse> EncodeSCSpecUDTUnionCaseVoidV0(Stellar.SCSpecUDTUnionCaseVoidV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecUDTUnionCaseVoidV0 request");
                return _service.EncodeSCSpecUDTUnionCaseVoidV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecUDTUnionCaseVoidV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecUDTUnionCaseVoidV0 method</summary>
        public async Task<Stellar.SCSpecUDTUnionCaseVoidV0DecodeResponse> DecodeSCSpecUDTUnionCaseVoidV0(Stellar.SCSpecUDTUnionCaseVoidV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecUDTUnionCaseVoidV0 request");
                return _service.DecodeSCSpecUDTUnionCaseVoidV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecUDTUnionCaseVoidV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecUDTUnionCaseTupleV0 method</summary>
        public async Task<Stellar.SCSpecUDTUnionCaseTupleV0EncodeResponse> EncodeSCSpecUDTUnionCaseTupleV0(Stellar.SCSpecUDTUnionCaseTupleV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecUDTUnionCaseTupleV0 request");
                return _service.EncodeSCSpecUDTUnionCaseTupleV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecUDTUnionCaseTupleV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecUDTUnionCaseTupleV0 method</summary>
        public async Task<Stellar.SCSpecUDTUnionCaseTupleV0DecodeResponse> DecodeSCSpecUDTUnionCaseTupleV0(Stellar.SCSpecUDTUnionCaseTupleV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecUDTUnionCaseTupleV0 request");
                return _service.DecodeSCSpecUDTUnionCaseTupleV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecUDTUnionCaseTupleV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecUDTUnionCaseV0Kind method</summary>
        public async Task<Stellar.SCSpecUDTUnionCaseV0KindEncodeResponse> EncodeSCSpecUDTUnionCaseV0Kind(Stellar.SCSpecUDTUnionCaseV0KindEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecUDTUnionCaseV0Kind request");
                return _service.EncodeSCSpecUDTUnionCaseV0Kind(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecUDTUnionCaseV0Kind");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecUDTUnionCaseV0Kind method</summary>
        public async Task<Stellar.SCSpecUDTUnionCaseV0KindDecodeResponse> DecodeSCSpecUDTUnionCaseV0Kind(Stellar.SCSpecUDTUnionCaseV0KindDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecUDTUnionCaseV0Kind request");
                return _service.DecodeSCSpecUDTUnionCaseV0Kind(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecUDTUnionCaseV0Kind");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecUDTUnionCaseV0 method</summary>
        public async Task<Stellar.SCSpecUDTUnionCaseV0EncodeResponse> EncodeSCSpecUDTUnionCaseV0(Stellar.SCSpecUDTUnionCaseV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecUDTUnionCaseV0 request");
                return _service.EncodeSCSpecUDTUnionCaseV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecUDTUnionCaseV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecUDTUnionCaseV0 method</summary>
        public async Task<Stellar.SCSpecUDTUnionCaseV0DecodeResponse> DecodeSCSpecUDTUnionCaseV0(Stellar.SCSpecUDTUnionCaseV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecUDTUnionCaseV0 request");
                return _service.DecodeSCSpecUDTUnionCaseV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecUDTUnionCaseV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecUDTUnionV0 method</summary>
        public async Task<Stellar.SCSpecUDTUnionV0EncodeResponse> EncodeSCSpecUDTUnionV0(Stellar.SCSpecUDTUnionV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecUDTUnionV0 request");
                return _service.EncodeSCSpecUDTUnionV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecUDTUnionV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecUDTUnionV0 method</summary>
        public async Task<Stellar.SCSpecUDTUnionV0DecodeResponse> DecodeSCSpecUDTUnionV0(Stellar.SCSpecUDTUnionV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecUDTUnionV0 request");
                return _service.DecodeSCSpecUDTUnionV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecUDTUnionV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecUDTEnumCaseV0 method</summary>
        public async Task<Stellar.SCSpecUDTEnumCaseV0EncodeResponse> EncodeSCSpecUDTEnumCaseV0(Stellar.SCSpecUDTEnumCaseV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecUDTEnumCaseV0 request");
                return _service.EncodeSCSpecUDTEnumCaseV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecUDTEnumCaseV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecUDTEnumCaseV0 method</summary>
        public async Task<Stellar.SCSpecUDTEnumCaseV0DecodeResponse> DecodeSCSpecUDTEnumCaseV0(Stellar.SCSpecUDTEnumCaseV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecUDTEnumCaseV0 request");
                return _service.DecodeSCSpecUDTEnumCaseV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecUDTEnumCaseV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecUDTEnumV0 method</summary>
        public async Task<Stellar.SCSpecUDTEnumV0EncodeResponse> EncodeSCSpecUDTEnumV0(Stellar.SCSpecUDTEnumV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecUDTEnumV0 request");
                return _service.EncodeSCSpecUDTEnumV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecUDTEnumV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecUDTEnumV0 method</summary>
        public async Task<Stellar.SCSpecUDTEnumV0DecodeResponse> DecodeSCSpecUDTEnumV0(Stellar.SCSpecUDTEnumV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecUDTEnumV0 request");
                return _service.DecodeSCSpecUDTEnumV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecUDTEnumV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecUDTErrorEnumCaseV0 method</summary>
        public async Task<Stellar.SCSpecUDTErrorEnumCaseV0EncodeResponse> EncodeSCSpecUDTErrorEnumCaseV0(Stellar.SCSpecUDTErrorEnumCaseV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecUDTErrorEnumCaseV0 request");
                return _service.EncodeSCSpecUDTErrorEnumCaseV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecUDTErrorEnumCaseV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecUDTErrorEnumCaseV0 method</summary>
        public async Task<Stellar.SCSpecUDTErrorEnumCaseV0DecodeResponse> DecodeSCSpecUDTErrorEnumCaseV0(Stellar.SCSpecUDTErrorEnumCaseV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecUDTErrorEnumCaseV0 request");
                return _service.DecodeSCSpecUDTErrorEnumCaseV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecUDTErrorEnumCaseV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecUDTErrorEnumV0 method</summary>
        public async Task<Stellar.SCSpecUDTErrorEnumV0EncodeResponse> EncodeSCSpecUDTErrorEnumV0(Stellar.SCSpecUDTErrorEnumV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecUDTErrorEnumV0 request");
                return _service.EncodeSCSpecUDTErrorEnumV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecUDTErrorEnumV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecUDTErrorEnumV0 method</summary>
        public async Task<Stellar.SCSpecUDTErrorEnumV0DecodeResponse> DecodeSCSpecUDTErrorEnumV0(Stellar.SCSpecUDTErrorEnumV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecUDTErrorEnumV0 request");
                return _service.DecodeSCSpecUDTErrorEnumV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecUDTErrorEnumV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecFunctionInputV0 method</summary>
        public async Task<Stellar.SCSpecFunctionInputV0EncodeResponse> EncodeSCSpecFunctionInputV0(Stellar.SCSpecFunctionInputV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecFunctionInputV0 request");
                return _service.EncodeSCSpecFunctionInputV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecFunctionInputV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecFunctionInputV0 method</summary>
        public async Task<Stellar.SCSpecFunctionInputV0DecodeResponse> DecodeSCSpecFunctionInputV0(Stellar.SCSpecFunctionInputV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecFunctionInputV0 request");
                return _service.DecodeSCSpecFunctionInputV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecFunctionInputV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecFunctionV0 method</summary>
        public async Task<Stellar.SCSpecFunctionV0EncodeResponse> EncodeSCSpecFunctionV0(Stellar.SCSpecFunctionV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecFunctionV0 request");
                return _service.EncodeSCSpecFunctionV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecFunctionV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecFunctionV0 method</summary>
        public async Task<Stellar.SCSpecFunctionV0DecodeResponse> DecodeSCSpecFunctionV0(Stellar.SCSpecFunctionV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecFunctionV0 request");
                return _service.DecodeSCSpecFunctionV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecFunctionV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecEntryKind method</summary>
        public async Task<Stellar.SCSpecEntryKindEncodeResponse> EncodeSCSpecEntryKind(Stellar.SCSpecEntryKindEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecEntryKind request");
                return _service.EncodeSCSpecEntryKind(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecEntryKind");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecEntryKind method</summary>
        public async Task<Stellar.SCSpecEntryKindDecodeResponse> DecodeSCSpecEntryKind(Stellar.SCSpecEntryKindDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecEntryKind request");
                return _service.DecodeSCSpecEntryKind(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecEntryKind");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecEntry method</summary>
        public async Task<Stellar.SCSpecEntryEncodeResponse> EncodeSCSpecEntry(Stellar.SCSpecEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecEntry request");
                return _service.EncodeSCSpecEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecEntry method</summary>
        public async Task<Stellar.SCSpecEntryDecodeResponse> DecodeSCSpecEntry(Stellar.SCSpecEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecEntry request");
                return _service.DecodeSCSpecEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCValType method</summary>
        public async Task<Stellar.SCValTypeEncodeResponse> EncodeSCValType(Stellar.SCValTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCValType request");
                return _service.EncodeSCValType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCValType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCValType method</summary>
        public async Task<Stellar.SCValTypeDecodeResponse> DecodeSCValType(Stellar.SCValTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCValType request");
                return _service.DecodeSCValType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCValType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCErrorType method</summary>
        public async Task<Stellar.SCErrorTypeEncodeResponse> EncodeSCErrorType(Stellar.SCErrorTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCErrorType request");
                return _service.EncodeSCErrorType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCErrorType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCErrorType method</summary>
        public async Task<Stellar.SCErrorTypeDecodeResponse> DecodeSCErrorType(Stellar.SCErrorTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCErrorType request");
                return _service.DecodeSCErrorType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCErrorType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCErrorCode method</summary>
        public async Task<Stellar.SCErrorCodeEncodeResponse> EncodeSCErrorCode(Stellar.SCErrorCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCErrorCode request");
                return _service.EncodeSCErrorCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCErrorCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCErrorCode method</summary>
        public async Task<Stellar.SCErrorCodeDecodeResponse> DecodeSCErrorCode(Stellar.SCErrorCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCErrorCode request");
                return _service.DecodeSCErrorCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCErrorCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCError method</summary>
        public async Task<Stellar.SCErrorEncodeResponse> EncodeSCError(Stellar.SCErrorEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCError request");
                return _service.EncodeSCError(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCError");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCError method</summary>
        public async Task<Stellar.SCErrorDecodeResponse> DecodeSCError(Stellar.SCErrorDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCError request");
                return _service.DecodeSCError(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCError");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeUInt128Parts method</summary>
        public async Task<Stellar.UInt128PartsEncodeResponse> EncodeUInt128Parts(Stellar.UInt128PartsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeUInt128Parts request");
                return _service.EncodeUInt128Parts(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeUInt128Parts");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeUInt128Parts method</summary>
        public async Task<Stellar.UInt128PartsDecodeResponse> DecodeUInt128Parts(Stellar.UInt128PartsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeUInt128Parts request");
                return _service.DecodeUInt128Parts(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeUInt128Parts");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeInt128Parts method</summary>
        public async Task<Stellar.Int128PartsEncodeResponse> EncodeInt128Parts(Stellar.Int128PartsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeInt128Parts request");
                return _service.EncodeInt128Parts(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeInt128Parts");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeInt128Parts method</summary>
        public async Task<Stellar.Int128PartsDecodeResponse> DecodeInt128Parts(Stellar.Int128PartsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeInt128Parts request");
                return _service.DecodeInt128Parts(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeInt128Parts");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeUInt256Parts method</summary>
        public async Task<Stellar.UInt256PartsEncodeResponse> EncodeUInt256Parts(Stellar.UInt256PartsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeUInt256Parts request");
                return _service.EncodeUInt256Parts(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeUInt256Parts");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeUInt256Parts method</summary>
        public async Task<Stellar.UInt256PartsDecodeResponse> DecodeUInt256Parts(Stellar.UInt256PartsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeUInt256Parts request");
                return _service.DecodeUInt256Parts(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeUInt256Parts");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeInt256Parts method</summary>
        public async Task<Stellar.Int256PartsEncodeResponse> EncodeInt256Parts(Stellar.Int256PartsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeInt256Parts request");
                return _service.EncodeInt256Parts(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeInt256Parts");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeInt256Parts method</summary>
        public async Task<Stellar.Int256PartsDecodeResponse> DecodeInt256Parts(Stellar.Int256PartsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeInt256Parts request");
                return _service.DecodeInt256Parts(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeInt256Parts");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeContractExecutableType method</summary>
        public async Task<Stellar.ContractExecutableTypeEncodeResponse> EncodeContractExecutableType(Stellar.ContractExecutableTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeContractExecutableType request");
                return _service.EncodeContractExecutableType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeContractExecutableType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeContractExecutableType method</summary>
        public async Task<Stellar.ContractExecutableTypeDecodeResponse> DecodeContractExecutableType(Stellar.ContractExecutableTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeContractExecutableType request");
                return _service.DecodeContractExecutableType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeContractExecutableType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeContractExecutable method</summary>
        public async Task<Stellar.ContractExecutableEncodeResponse> EncodeContractExecutable(Stellar.ContractExecutableEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeContractExecutable request");
                return _service.EncodeContractExecutable(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeContractExecutable");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeContractExecutable method</summary>
        public async Task<Stellar.ContractExecutableDecodeResponse> DecodeContractExecutable(Stellar.ContractExecutableDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeContractExecutable request");
                return _service.DecodeContractExecutable(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeContractExecutable");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCAddressType method</summary>
        public async Task<Stellar.SCAddressTypeEncodeResponse> EncodeSCAddressType(Stellar.SCAddressTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCAddressType request");
                return _service.EncodeSCAddressType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCAddressType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCAddressType method</summary>
        public async Task<Stellar.SCAddressTypeDecodeResponse> DecodeSCAddressType(Stellar.SCAddressTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCAddressType request");
                return _service.DecodeSCAddressType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCAddressType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCAddress method</summary>
        public async Task<Stellar.SCAddressEncodeResponse> EncodeSCAddress(Stellar.SCAddressEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCAddress request");
                return _service.EncodeSCAddress(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCAddress");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCAddress method</summary>
        public async Task<Stellar.SCAddressDecodeResponse> DecodeSCAddress(Stellar.SCAddressDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCAddress request");
                return _service.DecodeSCAddress(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCAddress");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCVec method</summary>
        public async Task<Stellar.SCVecEncodeResponse> EncodeSCVec(Stellar.SCVecEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCVec request");
                return _service.EncodeSCVec(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCVec");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCVec method</summary>
        public async Task<Stellar.SCVecDecodeResponse> DecodeSCVec(Stellar.SCVecDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCVec request");
                return _service.DecodeSCVec(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCVec");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCMap method</summary>
        public async Task<Stellar.SCMapEncodeResponse> EncodeSCMap(Stellar.SCMapEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCMap request");
                return _service.EncodeSCMap(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCMap");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCMap method</summary>
        public async Task<Stellar.SCMapDecodeResponse> DecodeSCMap(Stellar.SCMapDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCMap request");
                return _service.DecodeSCMap(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCMap");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCBytes method</summary>
        public async Task<Stellar.SCBytesEncodeResponse> EncodeSCBytes(Stellar.SCBytesEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCBytes request");
                return _service.EncodeSCBytes(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCBytes");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCBytes method</summary>
        public async Task<Stellar.SCBytesDecodeResponse> DecodeSCBytes(Stellar.SCBytesDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCBytes request");
                return _service.DecodeSCBytes(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCBytes");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCString method</summary>
        public async Task<Stellar.SCStringEncodeResponse> EncodeSCString(Stellar.SCStringEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCString request");
                return _service.EncodeSCString(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCString");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCString method</summary>
        public async Task<Stellar.SCStringDecodeResponse> DecodeSCString(Stellar.SCStringDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCString request");
                return _service.DecodeSCString(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCString");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSymbol method</summary>
        public async Task<Stellar.SCSymbolEncodeResponse> EncodeSCSymbol(Stellar.SCSymbolEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSymbol request");
                return _service.EncodeSCSymbol(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSymbol");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSymbol method</summary>
        public async Task<Stellar.SCSymbolDecodeResponse> DecodeSCSymbol(Stellar.SCSymbolDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSymbol request");
                return _service.DecodeSCSymbol(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSymbol");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCNonceKey method</summary>
        public async Task<Stellar.SCNonceKeyEncodeResponse> EncodeSCNonceKey(Stellar.SCNonceKeyEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCNonceKey request");
                return _service.EncodeSCNonceKey(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCNonceKey");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCNonceKey method</summary>
        public async Task<Stellar.SCNonceKeyDecodeResponse> DecodeSCNonceKey(Stellar.SCNonceKeyDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCNonceKey request");
                return _service.DecodeSCNonceKey(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCNonceKey");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCContractInstance method</summary>
        public async Task<Stellar.SCContractInstanceEncodeResponse> EncodeSCContractInstance(Stellar.SCContractInstanceEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCContractInstance request");
                return _service.EncodeSCContractInstance(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCContractInstance");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCContractInstance method</summary>
        public async Task<Stellar.SCContractInstanceDecodeResponse> DecodeSCContractInstance(Stellar.SCContractInstanceDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCContractInstance request");
                return _service.DecodeSCContractInstance(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCContractInstance");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCVal method</summary>
        public async Task<Stellar.SCValEncodeResponse> EncodeSCVal(Stellar.SCValEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCVal request");
                return _service.EncodeSCVal(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCVal");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCVal method</summary>
        public async Task<Stellar.SCValDecodeResponse> DecodeSCVal(Stellar.SCValDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCVal request");
                return _service.DecodeSCVal(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCVal");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCMapEntry method</summary>
        public async Task<Stellar.SCMapEntryEncodeResponse> EncodeSCMapEntry(Stellar.SCMapEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCMapEntry request");
                return _service.EncodeSCMapEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCMapEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCMapEntry method</summary>
        public async Task<Stellar.SCMapEntryDecodeResponse> DecodeSCMapEntry(Stellar.SCMapEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCMapEntry request");
                return _service.DecodeSCMapEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCMapEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeStoredTransactionSet method</summary>
        public async Task<Stellar.StoredTransactionSetEncodeResponse> EncodeStoredTransactionSet(Stellar.StoredTransactionSetEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeStoredTransactionSet request");
                return _service.EncodeStoredTransactionSet(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeStoredTransactionSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeStoredTransactionSet method</summary>
        public async Task<Stellar.StoredTransactionSetDecodeResponse> DecodeStoredTransactionSet(Stellar.StoredTransactionSetDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeStoredTransactionSet request");
                return _service.DecodeStoredTransactionSet(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeStoredTransactionSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeStoredDebugTransactionSet method</summary>
        public async Task<Stellar.StoredDebugTransactionSetEncodeResponse> EncodeStoredDebugTransactionSet(Stellar.StoredDebugTransactionSetEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeStoredDebugTransactionSet request");
                return _service.EncodeStoredDebugTransactionSet(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeStoredDebugTransactionSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeStoredDebugTransactionSet method</summary>
        public async Task<Stellar.StoredDebugTransactionSetDecodeResponse> DecodeStoredDebugTransactionSet(Stellar.StoredDebugTransactionSetDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeStoredDebugTransactionSet request");
                return _service.DecodeStoredDebugTransactionSet(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeStoredDebugTransactionSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePersistedSCPStateV0 method</summary>
        public async Task<Stellar.PersistedSCPStateV0EncodeResponse> EncodePersistedSCPStateV0(Stellar.PersistedSCPStateV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePersistedSCPStateV0 request");
                return _service.EncodePersistedSCPStateV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePersistedSCPStateV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePersistedSCPStateV0 method</summary>
        public async Task<Stellar.PersistedSCPStateV0DecodeResponse> DecodePersistedSCPStateV0(Stellar.PersistedSCPStateV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePersistedSCPStateV0 request");
                return _service.DecodePersistedSCPStateV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePersistedSCPStateV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePersistedSCPStateV1 method</summary>
        public async Task<Stellar.PersistedSCPStateV1EncodeResponse> EncodePersistedSCPStateV1(Stellar.PersistedSCPStateV1EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePersistedSCPStateV1 request");
                return _service.EncodePersistedSCPStateV1(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePersistedSCPStateV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePersistedSCPStateV1 method</summary>
        public async Task<Stellar.PersistedSCPStateV1DecodeResponse> DecodePersistedSCPStateV1(Stellar.PersistedSCPStateV1DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePersistedSCPStateV1 request");
                return _service.DecodePersistedSCPStateV1(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePersistedSCPStateV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePersistedSCPState method</summary>
        public async Task<Stellar.PersistedSCPStateEncodeResponse> EncodePersistedSCPState(Stellar.PersistedSCPStateEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePersistedSCPState request");
                return _service.EncodePersistedSCPState(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePersistedSCPState");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePersistedSCPState method</summary>
        public async Task<Stellar.PersistedSCPStateDecodeResponse> DecodePersistedSCPState(Stellar.PersistedSCPStateDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePersistedSCPState request");
                return _service.DecodePersistedSCPState(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePersistedSCPState");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeThresholds method</summary>
        public async Task<Stellar.ThresholdsEncodeResponse> EncodeThresholds(Stellar.ThresholdsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeThresholds request");
                return _service.EncodeThresholds(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeThresholds");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeThresholds method</summary>
        public async Task<Stellar.ThresholdsDecodeResponse> DecodeThresholds(Stellar.ThresholdsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeThresholds request");
                return _service.DecodeThresholds(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeThresholds");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Encodestring32 method</summary>
        public async Task<Stellar.string32EncodeResponse> Encodestring32(Stellar.string32EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Encodestring32 request");
                return _service.Encodestring32(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Encodestring32");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Decodestring32 method</summary>
        public async Task<Stellar.string32DecodeResponse> Decodestring32(Stellar.string32DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Decodestring32 request");
                return _service.Decodestring32(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Decodestring32");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Encodestring64 method</summary>
        public async Task<Stellar.string64EncodeResponse> Encodestring64(Stellar.string64EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Encodestring64 request");
                return _service.Encodestring64(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Encodestring64");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Decodestring64 method</summary>
        public async Task<Stellar.string64DecodeResponse> Decodestring64(Stellar.string64DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Decodestring64 request");
                return _service.Decodestring64(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Decodestring64");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSequenceNumber method</summary>
        public async Task<Stellar.SequenceNumberEncodeResponse> EncodeSequenceNumber(Stellar.SequenceNumberEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSequenceNumber request");
                return _service.EncodeSequenceNumber(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSequenceNumber");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSequenceNumber method</summary>
        public async Task<Stellar.SequenceNumberDecodeResponse> DecodeSequenceNumber(Stellar.SequenceNumberDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSequenceNumber request");
                return _service.DecodeSequenceNumber(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSequenceNumber");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeDataValue method</summary>
        public async Task<Stellar.DataValueEncodeResponse> EncodeDataValue(Stellar.DataValueEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeDataValue request");
                return _service.EncodeDataValue(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeDataValue");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeDataValue method</summary>
        public async Task<Stellar.DataValueDecodeResponse> DecodeDataValue(Stellar.DataValueDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeDataValue request");
                return _service.DecodeDataValue(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeDataValue");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePoolID method</summary>
        public async Task<Stellar.PoolIDEncodeResponse> EncodePoolID(Stellar.PoolIDEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePoolID request");
                return _service.EncodePoolID(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePoolID");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePoolID method</summary>
        public async Task<Stellar.PoolIDDecodeResponse> DecodePoolID(Stellar.PoolIDDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePoolID request");
                return _service.DecodePoolID(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePoolID");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAssetCode4 method</summary>
        public async Task<Stellar.AssetCode4EncodeResponse> EncodeAssetCode4(Stellar.AssetCode4EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAssetCode4 request");
                return _service.EncodeAssetCode4(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAssetCode4");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAssetCode4 method</summary>
        public async Task<Stellar.AssetCode4DecodeResponse> DecodeAssetCode4(Stellar.AssetCode4DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAssetCode4 request");
                return _service.DecodeAssetCode4(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAssetCode4");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAssetCode12 method</summary>
        public async Task<Stellar.AssetCode12EncodeResponse> EncodeAssetCode12(Stellar.AssetCode12EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAssetCode12 request");
                return _service.EncodeAssetCode12(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAssetCode12");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAssetCode12 method</summary>
        public async Task<Stellar.AssetCode12DecodeResponse> DecodeAssetCode12(Stellar.AssetCode12DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAssetCode12 request");
                return _service.DecodeAssetCode12(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAssetCode12");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAssetType method</summary>
        public async Task<Stellar.AssetTypeEncodeResponse> EncodeAssetType(Stellar.AssetTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAssetType request");
                return _service.EncodeAssetType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAssetType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAssetType method</summary>
        public async Task<Stellar.AssetTypeDecodeResponse> DecodeAssetType(Stellar.AssetTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAssetType request");
                return _service.DecodeAssetType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAssetType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAssetCode method</summary>
        public async Task<Stellar.AssetCodeEncodeResponse> EncodeAssetCode(Stellar.AssetCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAssetCode request");
                return _service.EncodeAssetCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAssetCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAssetCode method</summary>
        public async Task<Stellar.AssetCodeDecodeResponse> DecodeAssetCode(Stellar.AssetCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAssetCode request");
                return _service.DecodeAssetCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAssetCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAlphaNum4 method</summary>
        public async Task<Stellar.AlphaNum4EncodeResponse> EncodeAlphaNum4(Stellar.AlphaNum4EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAlphaNum4 request");
                return _service.EncodeAlphaNum4(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAlphaNum4");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAlphaNum4 method</summary>
        public async Task<Stellar.AlphaNum4DecodeResponse> DecodeAlphaNum4(Stellar.AlphaNum4DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAlphaNum4 request");
                return _service.DecodeAlphaNum4(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAlphaNum4");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAlphaNum12 method</summary>
        public async Task<Stellar.AlphaNum12EncodeResponse> EncodeAlphaNum12(Stellar.AlphaNum12EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAlphaNum12 request");
                return _service.EncodeAlphaNum12(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAlphaNum12");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAlphaNum12 method</summary>
        public async Task<Stellar.AlphaNum12DecodeResponse> DecodeAlphaNum12(Stellar.AlphaNum12DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAlphaNum12 request");
                return _service.DecodeAlphaNum12(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAlphaNum12");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAsset method</summary>
        public async Task<Stellar.AssetEncodeResponse> EncodeAsset(Stellar.AssetEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAsset request");
                return _service.EncodeAsset(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAsset");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAsset method</summary>
        public async Task<Stellar.AssetDecodeResponse> DecodeAsset(Stellar.AssetDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAsset request");
                return _service.DecodeAsset(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAsset");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePrice method</summary>
        public async Task<Stellar.PriceEncodeResponse> EncodePrice(Stellar.PriceEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePrice request");
                return _service.EncodePrice(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePrice");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePrice method</summary>
        public async Task<Stellar.PriceDecodeResponse> DecodePrice(Stellar.PriceDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePrice request");
                return _service.DecodePrice(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePrice");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLiabilities method</summary>
        public async Task<Stellar.LiabilitiesEncodeResponse> EncodeLiabilities(Stellar.LiabilitiesEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLiabilities request");
                return _service.EncodeLiabilities(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLiabilities");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLiabilities method</summary>
        public async Task<Stellar.LiabilitiesDecodeResponse> DecodeLiabilities(Stellar.LiabilitiesDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLiabilities request");
                return _service.DecodeLiabilities(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLiabilities");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeThresholdIndexes method</summary>
        public async Task<Stellar.ThresholdIndexesEncodeResponse> EncodeThresholdIndexes(Stellar.ThresholdIndexesEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeThresholdIndexes request");
                return _service.EncodeThresholdIndexes(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeThresholdIndexes");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeThresholdIndexes method</summary>
        public async Task<Stellar.ThresholdIndexesDecodeResponse> DecodeThresholdIndexes(Stellar.ThresholdIndexesDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeThresholdIndexes request");
                return _service.DecodeThresholdIndexes(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeThresholdIndexes");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerEntryType method</summary>
        public async Task<Stellar.LedgerEntryTypeEncodeResponse> EncodeLedgerEntryType(Stellar.LedgerEntryTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerEntryType request");
                return _service.EncodeLedgerEntryType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerEntryType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerEntryType method</summary>
        public async Task<Stellar.LedgerEntryTypeDecodeResponse> DecodeLedgerEntryType(Stellar.LedgerEntryTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerEntryType request");
                return _service.DecodeLedgerEntryType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerEntryType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSigner method</summary>
        public async Task<Stellar.SignerEncodeResponse> EncodeSigner(Stellar.SignerEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSigner request");
                return _service.EncodeSigner(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSigner");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSigner method</summary>
        public async Task<Stellar.SignerDecodeResponse> DecodeSigner(Stellar.SignerDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSigner request");
                return _service.DecodeSigner(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSigner");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAccountFlags method</summary>
        public async Task<Stellar.AccountFlagsEncodeResponse> EncodeAccountFlags(Stellar.AccountFlagsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAccountFlags request");
                return _service.EncodeAccountFlags(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAccountFlags");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAccountFlags method</summary>
        public async Task<Stellar.AccountFlagsDecodeResponse> DecodeAccountFlags(Stellar.AccountFlagsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAccountFlags request");
                return _service.DecodeAccountFlags(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAccountFlags");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSponsorshipDescriptor method</summary>
        public async Task<Stellar.SponsorshipDescriptorEncodeResponse> EncodeSponsorshipDescriptor(Stellar.SponsorshipDescriptorEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSponsorshipDescriptor request");
                return _service.EncodeSponsorshipDescriptor(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSponsorshipDescriptor");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSponsorshipDescriptor method</summary>
        public async Task<Stellar.SponsorshipDescriptorDecodeResponse> DecodeSponsorshipDescriptor(Stellar.SponsorshipDescriptorDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSponsorshipDescriptor request");
                return _service.DecodeSponsorshipDescriptor(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSponsorshipDescriptor");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAccountEntryExtensionV3 method</summary>
        public async Task<Stellar.AccountEntryExtensionV3EncodeResponse> EncodeAccountEntryExtensionV3(Stellar.AccountEntryExtensionV3EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAccountEntryExtensionV3 request");
                return _service.EncodeAccountEntryExtensionV3(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAccountEntryExtensionV3");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAccountEntryExtensionV3 method</summary>
        public async Task<Stellar.AccountEntryExtensionV3DecodeResponse> DecodeAccountEntryExtensionV3(Stellar.AccountEntryExtensionV3DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAccountEntryExtensionV3 request");
                return _service.DecodeAccountEntryExtensionV3(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAccountEntryExtensionV3");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAccountEntryExtensionV2 method</summary>
        public async Task<Stellar.AccountEntryExtensionV2EncodeResponse> EncodeAccountEntryExtensionV2(Stellar.AccountEntryExtensionV2EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAccountEntryExtensionV2 request");
                return _service.EncodeAccountEntryExtensionV2(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAccountEntryExtensionV2");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAccountEntryExtensionV2 method</summary>
        public async Task<Stellar.AccountEntryExtensionV2DecodeResponse> DecodeAccountEntryExtensionV2(Stellar.AccountEntryExtensionV2DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAccountEntryExtensionV2 request");
                return _service.DecodeAccountEntryExtensionV2(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAccountEntryExtensionV2");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAccountEntryExtensionV1 method</summary>
        public async Task<Stellar.AccountEntryExtensionV1EncodeResponse> EncodeAccountEntryExtensionV1(Stellar.AccountEntryExtensionV1EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAccountEntryExtensionV1 request");
                return _service.EncodeAccountEntryExtensionV1(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAccountEntryExtensionV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAccountEntryExtensionV1 method</summary>
        public async Task<Stellar.AccountEntryExtensionV1DecodeResponse> DecodeAccountEntryExtensionV1(Stellar.AccountEntryExtensionV1DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAccountEntryExtensionV1 request");
                return _service.DecodeAccountEntryExtensionV1(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAccountEntryExtensionV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAccountEntry method</summary>
        public async Task<Stellar.AccountEntryEncodeResponse> EncodeAccountEntry(Stellar.AccountEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAccountEntry request");
                return _service.EncodeAccountEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAccountEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAccountEntry method</summary>
        public async Task<Stellar.AccountEntryDecodeResponse> DecodeAccountEntry(Stellar.AccountEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAccountEntry request");
                return _service.DecodeAccountEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAccountEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTrustLineFlags method</summary>
        public async Task<Stellar.TrustLineFlagsEncodeResponse> EncodeTrustLineFlags(Stellar.TrustLineFlagsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTrustLineFlags request");
                return _service.EncodeTrustLineFlags(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTrustLineFlags");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTrustLineFlags method</summary>
        public async Task<Stellar.TrustLineFlagsDecodeResponse> DecodeTrustLineFlags(Stellar.TrustLineFlagsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTrustLineFlags request");
                return _service.DecodeTrustLineFlags(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTrustLineFlags");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLiquidityPoolType method</summary>
        public async Task<Stellar.LiquidityPoolTypeEncodeResponse> EncodeLiquidityPoolType(Stellar.LiquidityPoolTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLiquidityPoolType request");
                return _service.EncodeLiquidityPoolType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLiquidityPoolType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLiquidityPoolType method</summary>
        public async Task<Stellar.LiquidityPoolTypeDecodeResponse> DecodeLiquidityPoolType(Stellar.LiquidityPoolTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLiquidityPoolType request");
                return _service.DecodeLiquidityPoolType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLiquidityPoolType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTrustLineAsset method</summary>
        public async Task<Stellar.TrustLineAssetEncodeResponse> EncodeTrustLineAsset(Stellar.TrustLineAssetEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTrustLineAsset request");
                return _service.EncodeTrustLineAsset(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTrustLineAsset");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTrustLineAsset method</summary>
        public async Task<Stellar.TrustLineAssetDecodeResponse> DecodeTrustLineAsset(Stellar.TrustLineAssetDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTrustLineAsset request");
                return _service.DecodeTrustLineAsset(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTrustLineAsset");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTrustLineEntryExtensionV2 method</summary>
        public async Task<Stellar.TrustLineEntryExtensionV2EncodeResponse> EncodeTrustLineEntryExtensionV2(Stellar.TrustLineEntryExtensionV2EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTrustLineEntryExtensionV2 request");
                return _service.EncodeTrustLineEntryExtensionV2(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTrustLineEntryExtensionV2");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTrustLineEntryExtensionV2 method</summary>
        public async Task<Stellar.TrustLineEntryExtensionV2DecodeResponse> DecodeTrustLineEntryExtensionV2(Stellar.TrustLineEntryExtensionV2DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTrustLineEntryExtensionV2 request");
                return _service.DecodeTrustLineEntryExtensionV2(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTrustLineEntryExtensionV2");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTrustLineEntry method</summary>
        public async Task<Stellar.TrustLineEntryEncodeResponse> EncodeTrustLineEntry(Stellar.TrustLineEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTrustLineEntry request");
                return _service.EncodeTrustLineEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTrustLineEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTrustLineEntry method</summary>
        public async Task<Stellar.TrustLineEntryDecodeResponse> DecodeTrustLineEntry(Stellar.TrustLineEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTrustLineEntry request");
                return _service.DecodeTrustLineEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTrustLineEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeOfferEntryFlags method</summary>
        public async Task<Stellar.OfferEntryFlagsEncodeResponse> EncodeOfferEntryFlags(Stellar.OfferEntryFlagsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeOfferEntryFlags request");
                return _service.EncodeOfferEntryFlags(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeOfferEntryFlags");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeOfferEntryFlags method</summary>
        public async Task<Stellar.OfferEntryFlagsDecodeResponse> DecodeOfferEntryFlags(Stellar.OfferEntryFlagsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeOfferEntryFlags request");
                return _service.DecodeOfferEntryFlags(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeOfferEntryFlags");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeOfferEntry method</summary>
        public async Task<Stellar.OfferEntryEncodeResponse> EncodeOfferEntry(Stellar.OfferEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeOfferEntry request");
                return _service.EncodeOfferEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeOfferEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeOfferEntry method</summary>
        public async Task<Stellar.OfferEntryDecodeResponse> DecodeOfferEntry(Stellar.OfferEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeOfferEntry request");
                return _service.DecodeOfferEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeOfferEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeDataEntry method</summary>
        public async Task<Stellar.DataEntryEncodeResponse> EncodeDataEntry(Stellar.DataEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeDataEntry request");
                return _service.EncodeDataEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeDataEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeDataEntry method</summary>
        public async Task<Stellar.DataEntryDecodeResponse> DecodeDataEntry(Stellar.DataEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeDataEntry request");
                return _service.DecodeDataEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeDataEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimPredicateType method</summary>
        public async Task<Stellar.ClaimPredicateTypeEncodeResponse> EncodeClaimPredicateType(Stellar.ClaimPredicateTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimPredicateType request");
                return _service.EncodeClaimPredicateType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimPredicateType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimPredicateType method</summary>
        public async Task<Stellar.ClaimPredicateTypeDecodeResponse> DecodeClaimPredicateType(Stellar.ClaimPredicateTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimPredicateType request");
                return _service.DecodeClaimPredicateType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimPredicateType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimPredicate method</summary>
        public async Task<Stellar.ClaimPredicateEncodeResponse> EncodeClaimPredicate(Stellar.ClaimPredicateEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimPredicate request");
                return _service.EncodeClaimPredicate(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimPredicate");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimPredicate method</summary>
        public async Task<Stellar.ClaimPredicateDecodeResponse> DecodeClaimPredicate(Stellar.ClaimPredicateDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimPredicate request");
                return _service.DecodeClaimPredicate(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimPredicate");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimantType method</summary>
        public async Task<Stellar.ClaimantTypeEncodeResponse> EncodeClaimantType(Stellar.ClaimantTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimantType request");
                return _service.EncodeClaimantType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimantType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimantType method</summary>
        public async Task<Stellar.ClaimantTypeDecodeResponse> DecodeClaimantType(Stellar.ClaimantTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimantType request");
                return _service.DecodeClaimantType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimantType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimant method</summary>
        public async Task<Stellar.ClaimantEncodeResponse> EncodeClaimant(Stellar.ClaimantEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimant request");
                return _service.EncodeClaimant(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimant");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimant method</summary>
        public async Task<Stellar.ClaimantDecodeResponse> DecodeClaimant(Stellar.ClaimantDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimant request");
                return _service.DecodeClaimant(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimant");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimableBalanceIDType method</summary>
        public async Task<Stellar.ClaimableBalanceIDTypeEncodeResponse> EncodeClaimableBalanceIDType(Stellar.ClaimableBalanceIDTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimableBalanceIDType request");
                return _service.EncodeClaimableBalanceIDType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimableBalanceIDType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimableBalanceIDType method</summary>
        public async Task<Stellar.ClaimableBalanceIDTypeDecodeResponse> DecodeClaimableBalanceIDType(Stellar.ClaimableBalanceIDTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimableBalanceIDType request");
                return _service.DecodeClaimableBalanceIDType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimableBalanceIDType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimableBalanceID method</summary>
        public async Task<Stellar.ClaimableBalanceIDEncodeResponse> EncodeClaimableBalanceID(Stellar.ClaimableBalanceIDEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimableBalanceID request");
                return _service.EncodeClaimableBalanceID(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimableBalanceID");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimableBalanceID method</summary>
        public async Task<Stellar.ClaimableBalanceIDDecodeResponse> DecodeClaimableBalanceID(Stellar.ClaimableBalanceIDDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimableBalanceID request");
                return _service.DecodeClaimableBalanceID(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimableBalanceID");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimableBalanceFlags method</summary>
        public async Task<Stellar.ClaimableBalanceFlagsEncodeResponse> EncodeClaimableBalanceFlags(Stellar.ClaimableBalanceFlagsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimableBalanceFlags request");
                return _service.EncodeClaimableBalanceFlags(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimableBalanceFlags");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimableBalanceFlags method</summary>
        public async Task<Stellar.ClaimableBalanceFlagsDecodeResponse> DecodeClaimableBalanceFlags(Stellar.ClaimableBalanceFlagsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimableBalanceFlags request");
                return _service.DecodeClaimableBalanceFlags(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimableBalanceFlags");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimableBalanceEntryExtensionV1 method</summary>
        public async Task<Stellar.ClaimableBalanceEntryExtensionV1EncodeResponse> EncodeClaimableBalanceEntryExtensionV1(Stellar.ClaimableBalanceEntryExtensionV1EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimableBalanceEntryExtensionV1 request");
                return _service.EncodeClaimableBalanceEntryExtensionV1(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimableBalanceEntryExtensionV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimableBalanceEntryExtensionV1 method</summary>
        public async Task<Stellar.ClaimableBalanceEntryExtensionV1DecodeResponse> DecodeClaimableBalanceEntryExtensionV1(Stellar.ClaimableBalanceEntryExtensionV1DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimableBalanceEntryExtensionV1 request");
                return _service.DecodeClaimableBalanceEntryExtensionV1(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimableBalanceEntryExtensionV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimableBalanceEntry method</summary>
        public async Task<Stellar.ClaimableBalanceEntryEncodeResponse> EncodeClaimableBalanceEntry(Stellar.ClaimableBalanceEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimableBalanceEntry request");
                return _service.EncodeClaimableBalanceEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimableBalanceEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimableBalanceEntry method</summary>
        public async Task<Stellar.ClaimableBalanceEntryDecodeResponse> DecodeClaimableBalanceEntry(Stellar.ClaimableBalanceEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimableBalanceEntry request");
                return _service.DecodeClaimableBalanceEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimableBalanceEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLiquidityPoolConstantProductParameters method</summary>
        public async Task<Stellar.LiquidityPoolConstantProductParametersEncodeResponse> EncodeLiquidityPoolConstantProductParameters(Stellar.LiquidityPoolConstantProductParametersEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLiquidityPoolConstantProductParameters request");
                return _service.EncodeLiquidityPoolConstantProductParameters(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLiquidityPoolConstantProductParameters");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLiquidityPoolConstantProductParameters method</summary>
        public async Task<Stellar.LiquidityPoolConstantProductParametersDecodeResponse> DecodeLiquidityPoolConstantProductParameters(Stellar.LiquidityPoolConstantProductParametersDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLiquidityPoolConstantProductParameters request");
                return _service.DecodeLiquidityPoolConstantProductParameters(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLiquidityPoolConstantProductParameters");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLiquidityPoolEntry method</summary>
        public async Task<Stellar.LiquidityPoolEntryEncodeResponse> EncodeLiquidityPoolEntry(Stellar.LiquidityPoolEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLiquidityPoolEntry request");
                return _service.EncodeLiquidityPoolEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLiquidityPoolEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLiquidityPoolEntry method</summary>
        public async Task<Stellar.LiquidityPoolEntryDecodeResponse> DecodeLiquidityPoolEntry(Stellar.LiquidityPoolEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLiquidityPoolEntry request");
                return _service.DecodeLiquidityPoolEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLiquidityPoolEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeContractDataDurability method</summary>
        public async Task<Stellar.ContractDataDurabilityEncodeResponse> EncodeContractDataDurability(Stellar.ContractDataDurabilityEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeContractDataDurability request");
                return _service.EncodeContractDataDurability(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeContractDataDurability");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeContractDataDurability method</summary>
        public async Task<Stellar.ContractDataDurabilityDecodeResponse> DecodeContractDataDurability(Stellar.ContractDataDurabilityDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeContractDataDurability request");
                return _service.DecodeContractDataDurability(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeContractDataDurability");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeContractDataEntry method</summary>
        public async Task<Stellar.ContractDataEntryEncodeResponse> EncodeContractDataEntry(Stellar.ContractDataEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeContractDataEntry request");
                return _service.EncodeContractDataEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeContractDataEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeContractDataEntry method</summary>
        public async Task<Stellar.ContractDataEntryDecodeResponse> DecodeContractDataEntry(Stellar.ContractDataEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeContractDataEntry request");
                return _service.DecodeContractDataEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeContractDataEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeContractCodeCostInputs method</summary>
        public async Task<Stellar.ContractCodeCostInputsEncodeResponse> EncodeContractCodeCostInputs(Stellar.ContractCodeCostInputsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeContractCodeCostInputs request");
                return _service.EncodeContractCodeCostInputs(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeContractCodeCostInputs");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeContractCodeCostInputs method</summary>
        public async Task<Stellar.ContractCodeCostInputsDecodeResponse> DecodeContractCodeCostInputs(Stellar.ContractCodeCostInputsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeContractCodeCostInputs request");
                return _service.DecodeContractCodeCostInputs(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeContractCodeCostInputs");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeContractCodeEntry method</summary>
        public async Task<Stellar.ContractCodeEntryEncodeResponse> EncodeContractCodeEntry(Stellar.ContractCodeEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeContractCodeEntry request");
                return _service.EncodeContractCodeEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeContractCodeEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeContractCodeEntry method</summary>
        public async Task<Stellar.ContractCodeEntryDecodeResponse> DecodeContractCodeEntry(Stellar.ContractCodeEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeContractCodeEntry request");
                return _service.DecodeContractCodeEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeContractCodeEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTTLEntry method</summary>
        public async Task<Stellar.TTLEntryEncodeResponse> EncodeTTLEntry(Stellar.TTLEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTTLEntry request");
                return _service.EncodeTTLEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTTLEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTTLEntry method</summary>
        public async Task<Stellar.TTLEntryDecodeResponse> DecodeTTLEntry(Stellar.TTLEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTTLEntry request");
                return _service.DecodeTTLEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTTLEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerEntryExtensionV1 method</summary>
        public async Task<Stellar.LedgerEntryExtensionV1EncodeResponse> EncodeLedgerEntryExtensionV1(Stellar.LedgerEntryExtensionV1EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerEntryExtensionV1 request");
                return _service.EncodeLedgerEntryExtensionV1(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerEntryExtensionV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerEntryExtensionV1 method</summary>
        public async Task<Stellar.LedgerEntryExtensionV1DecodeResponse> DecodeLedgerEntryExtensionV1(Stellar.LedgerEntryExtensionV1DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerEntryExtensionV1 request");
                return _service.DecodeLedgerEntryExtensionV1(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerEntryExtensionV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerEntry method</summary>
        public async Task<Stellar.LedgerEntryEncodeResponse> EncodeLedgerEntry(Stellar.LedgerEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerEntry request");
                return _service.EncodeLedgerEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerEntry method</summary>
        public async Task<Stellar.LedgerEntryDecodeResponse> DecodeLedgerEntry(Stellar.LedgerEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerEntry request");
                return _service.DecodeLedgerEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerKey method</summary>
        public async Task<Stellar.LedgerKeyEncodeResponse> EncodeLedgerKey(Stellar.LedgerKeyEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerKey request");
                return _service.EncodeLedgerKey(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerKey");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerKey method</summary>
        public async Task<Stellar.LedgerKeyDecodeResponse> DecodeLedgerKey(Stellar.LedgerKeyDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerKey request");
                return _service.DecodeLedgerKey(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerKey");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeEnvelopeType method</summary>
        public async Task<Stellar.EnvelopeTypeEncodeResponse> EncodeEnvelopeType(Stellar.EnvelopeTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeEnvelopeType request");
                return _service.EncodeEnvelopeType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeEnvelopeType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeEnvelopeType method</summary>
        public async Task<Stellar.EnvelopeTypeDecodeResponse> DecodeEnvelopeType(Stellar.EnvelopeTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeEnvelopeType request");
                return _service.DecodeEnvelopeType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeEnvelopeType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeBucketListType method</summary>
        public async Task<Stellar.BucketListTypeEncodeResponse> EncodeBucketListType(Stellar.BucketListTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeBucketListType request");
                return _service.EncodeBucketListType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeBucketListType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeBucketListType method</summary>
        public async Task<Stellar.BucketListTypeDecodeResponse> DecodeBucketListType(Stellar.BucketListTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeBucketListType request");
                return _service.DecodeBucketListType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeBucketListType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeBucketEntryType method</summary>
        public async Task<Stellar.BucketEntryTypeEncodeResponse> EncodeBucketEntryType(Stellar.BucketEntryTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeBucketEntryType request");
                return _service.EncodeBucketEntryType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeBucketEntryType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeBucketEntryType method</summary>
        public async Task<Stellar.BucketEntryTypeDecodeResponse> DecodeBucketEntryType(Stellar.BucketEntryTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeBucketEntryType request");
                return _service.DecodeBucketEntryType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeBucketEntryType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeHotArchiveBucketEntryType method</summary>
        public async Task<Stellar.HotArchiveBucketEntryTypeEncodeResponse> EncodeHotArchiveBucketEntryType(Stellar.HotArchiveBucketEntryTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeHotArchiveBucketEntryType request");
                return _service.EncodeHotArchiveBucketEntryType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeHotArchiveBucketEntryType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeHotArchiveBucketEntryType method</summary>
        public async Task<Stellar.HotArchiveBucketEntryTypeDecodeResponse> DecodeHotArchiveBucketEntryType(Stellar.HotArchiveBucketEntryTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeHotArchiveBucketEntryType request");
                return _service.DecodeHotArchiveBucketEntryType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeHotArchiveBucketEntryType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeColdArchiveBucketEntryType method</summary>
        public async Task<Stellar.ColdArchiveBucketEntryTypeEncodeResponse> EncodeColdArchiveBucketEntryType(Stellar.ColdArchiveBucketEntryTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeColdArchiveBucketEntryType request");
                return _service.EncodeColdArchiveBucketEntryType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeColdArchiveBucketEntryType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeColdArchiveBucketEntryType method</summary>
        public async Task<Stellar.ColdArchiveBucketEntryTypeDecodeResponse> DecodeColdArchiveBucketEntryType(Stellar.ColdArchiveBucketEntryTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeColdArchiveBucketEntryType request");
                return _service.DecodeColdArchiveBucketEntryType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeColdArchiveBucketEntryType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeBucketMetadata method</summary>
        public async Task<Stellar.BucketMetadataEncodeResponse> EncodeBucketMetadata(Stellar.BucketMetadataEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeBucketMetadata request");
                return _service.EncodeBucketMetadata(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeBucketMetadata");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeBucketMetadata method</summary>
        public async Task<Stellar.BucketMetadataDecodeResponse> DecodeBucketMetadata(Stellar.BucketMetadataDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeBucketMetadata request");
                return _service.DecodeBucketMetadata(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeBucketMetadata");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeBucketEntry method</summary>
        public async Task<Stellar.BucketEntryEncodeResponse> EncodeBucketEntry(Stellar.BucketEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeBucketEntry request");
                return _service.EncodeBucketEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeBucketEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeBucketEntry method</summary>
        public async Task<Stellar.BucketEntryDecodeResponse> DecodeBucketEntry(Stellar.BucketEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeBucketEntry request");
                return _service.DecodeBucketEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeBucketEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeHotArchiveBucketEntry method</summary>
        public async Task<Stellar.HotArchiveBucketEntryEncodeResponse> EncodeHotArchiveBucketEntry(Stellar.HotArchiveBucketEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeHotArchiveBucketEntry request");
                return _service.EncodeHotArchiveBucketEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeHotArchiveBucketEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeHotArchiveBucketEntry method</summary>
        public async Task<Stellar.HotArchiveBucketEntryDecodeResponse> DecodeHotArchiveBucketEntry(Stellar.HotArchiveBucketEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeHotArchiveBucketEntry request");
                return _service.DecodeHotArchiveBucketEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeHotArchiveBucketEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeColdArchiveArchivedLeaf method</summary>
        public async Task<Stellar.ColdArchiveArchivedLeafEncodeResponse> EncodeColdArchiveArchivedLeaf(Stellar.ColdArchiveArchivedLeafEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeColdArchiveArchivedLeaf request");
                return _service.EncodeColdArchiveArchivedLeaf(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeColdArchiveArchivedLeaf");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeColdArchiveArchivedLeaf method</summary>
        public async Task<Stellar.ColdArchiveArchivedLeafDecodeResponse> DecodeColdArchiveArchivedLeaf(Stellar.ColdArchiveArchivedLeafDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeColdArchiveArchivedLeaf request");
                return _service.DecodeColdArchiveArchivedLeaf(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeColdArchiveArchivedLeaf");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeColdArchiveDeletedLeaf method</summary>
        public async Task<Stellar.ColdArchiveDeletedLeafEncodeResponse> EncodeColdArchiveDeletedLeaf(Stellar.ColdArchiveDeletedLeafEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeColdArchiveDeletedLeaf request");
                return _service.EncodeColdArchiveDeletedLeaf(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeColdArchiveDeletedLeaf");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeColdArchiveDeletedLeaf method</summary>
        public async Task<Stellar.ColdArchiveDeletedLeafDecodeResponse> DecodeColdArchiveDeletedLeaf(Stellar.ColdArchiveDeletedLeafDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeColdArchiveDeletedLeaf request");
                return _service.DecodeColdArchiveDeletedLeaf(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeColdArchiveDeletedLeaf");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeColdArchiveBoundaryLeaf method</summary>
        public async Task<Stellar.ColdArchiveBoundaryLeafEncodeResponse> EncodeColdArchiveBoundaryLeaf(Stellar.ColdArchiveBoundaryLeafEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeColdArchiveBoundaryLeaf request");
                return _service.EncodeColdArchiveBoundaryLeaf(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeColdArchiveBoundaryLeaf");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeColdArchiveBoundaryLeaf method</summary>
        public async Task<Stellar.ColdArchiveBoundaryLeafDecodeResponse> DecodeColdArchiveBoundaryLeaf(Stellar.ColdArchiveBoundaryLeafDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeColdArchiveBoundaryLeaf request");
                return _service.DecodeColdArchiveBoundaryLeaf(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeColdArchiveBoundaryLeaf");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeColdArchiveHashEntry method</summary>
        public async Task<Stellar.ColdArchiveHashEntryEncodeResponse> EncodeColdArchiveHashEntry(Stellar.ColdArchiveHashEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeColdArchiveHashEntry request");
                return _service.EncodeColdArchiveHashEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeColdArchiveHashEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeColdArchiveHashEntry method</summary>
        public async Task<Stellar.ColdArchiveHashEntryDecodeResponse> DecodeColdArchiveHashEntry(Stellar.ColdArchiveHashEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeColdArchiveHashEntry request");
                return _service.DecodeColdArchiveHashEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeColdArchiveHashEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeColdArchiveBucketEntry method</summary>
        public async Task<Stellar.ColdArchiveBucketEntryEncodeResponse> EncodeColdArchiveBucketEntry(Stellar.ColdArchiveBucketEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeColdArchiveBucketEntry request");
                return _service.EncodeColdArchiveBucketEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeColdArchiveBucketEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeColdArchiveBucketEntry method</summary>
        public async Task<Stellar.ColdArchiveBucketEntryDecodeResponse> DecodeColdArchiveBucketEntry(Stellar.ColdArchiveBucketEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeColdArchiveBucketEntry request");
                return _service.DecodeColdArchiveBucketEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeColdArchiveBucketEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeUpgradeType method</summary>
        public async Task<Stellar.UpgradeTypeEncodeResponse> EncodeUpgradeType(Stellar.UpgradeTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeUpgradeType request");
                return _service.EncodeUpgradeType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeUpgradeType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeUpgradeType method</summary>
        public async Task<Stellar.UpgradeTypeDecodeResponse> DecodeUpgradeType(Stellar.UpgradeTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeUpgradeType request");
                return _service.DecodeUpgradeType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeUpgradeType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeStellarValueType method</summary>
        public async Task<Stellar.StellarValueTypeEncodeResponse> EncodeStellarValueType(Stellar.StellarValueTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeStellarValueType request");
                return _service.EncodeStellarValueType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeStellarValueType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeStellarValueType method</summary>
        public async Task<Stellar.StellarValueTypeDecodeResponse> DecodeStellarValueType(Stellar.StellarValueTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeStellarValueType request");
                return _service.DecodeStellarValueType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeStellarValueType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerCloseValueSignature method</summary>
        public async Task<Stellar.LedgerCloseValueSignatureEncodeResponse> EncodeLedgerCloseValueSignature(Stellar.LedgerCloseValueSignatureEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerCloseValueSignature request");
                return _service.EncodeLedgerCloseValueSignature(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerCloseValueSignature");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerCloseValueSignature method</summary>
        public async Task<Stellar.LedgerCloseValueSignatureDecodeResponse> DecodeLedgerCloseValueSignature(Stellar.LedgerCloseValueSignatureDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerCloseValueSignature request");
                return _service.DecodeLedgerCloseValueSignature(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerCloseValueSignature");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeStellarValue method</summary>
        public async Task<Stellar.StellarValueEncodeResponse> EncodeStellarValue(Stellar.StellarValueEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeStellarValue request");
                return _service.EncodeStellarValue(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeStellarValue");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeStellarValue method</summary>
        public async Task<Stellar.StellarValueDecodeResponse> DecodeStellarValue(Stellar.StellarValueDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeStellarValue request");
                return _service.DecodeStellarValue(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeStellarValue");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerHeaderFlags method</summary>
        public async Task<Stellar.LedgerHeaderFlagsEncodeResponse> EncodeLedgerHeaderFlags(Stellar.LedgerHeaderFlagsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerHeaderFlags request");
                return _service.EncodeLedgerHeaderFlags(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerHeaderFlags");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerHeaderFlags method</summary>
        public async Task<Stellar.LedgerHeaderFlagsDecodeResponse> DecodeLedgerHeaderFlags(Stellar.LedgerHeaderFlagsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerHeaderFlags request");
                return _service.DecodeLedgerHeaderFlags(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerHeaderFlags");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerHeaderExtensionV1 method</summary>
        public async Task<Stellar.LedgerHeaderExtensionV1EncodeResponse> EncodeLedgerHeaderExtensionV1(Stellar.LedgerHeaderExtensionV1EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerHeaderExtensionV1 request");
                return _service.EncodeLedgerHeaderExtensionV1(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerHeaderExtensionV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerHeaderExtensionV1 method</summary>
        public async Task<Stellar.LedgerHeaderExtensionV1DecodeResponse> DecodeLedgerHeaderExtensionV1(Stellar.LedgerHeaderExtensionV1DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerHeaderExtensionV1 request");
                return _service.DecodeLedgerHeaderExtensionV1(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerHeaderExtensionV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerHeader method</summary>
        public async Task<Stellar.LedgerHeaderEncodeResponse> EncodeLedgerHeader(Stellar.LedgerHeaderEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerHeader request");
                return _service.EncodeLedgerHeader(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerHeader");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerHeader method</summary>
        public async Task<Stellar.LedgerHeaderDecodeResponse> DecodeLedgerHeader(Stellar.LedgerHeaderDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerHeader request");
                return _service.DecodeLedgerHeader(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerHeader");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerUpgradeType method</summary>
        public async Task<Stellar.LedgerUpgradeTypeEncodeResponse> EncodeLedgerUpgradeType(Stellar.LedgerUpgradeTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerUpgradeType request");
                return _service.EncodeLedgerUpgradeType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerUpgradeType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerUpgradeType method</summary>
        public async Task<Stellar.LedgerUpgradeTypeDecodeResponse> DecodeLedgerUpgradeType(Stellar.LedgerUpgradeTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerUpgradeType request");
                return _service.DecodeLedgerUpgradeType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerUpgradeType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeConfigUpgradeSetKey method</summary>
        public async Task<Stellar.ConfigUpgradeSetKeyEncodeResponse> EncodeConfigUpgradeSetKey(Stellar.ConfigUpgradeSetKeyEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeConfigUpgradeSetKey request");
                return _service.EncodeConfigUpgradeSetKey(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeConfigUpgradeSetKey");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeConfigUpgradeSetKey method</summary>
        public async Task<Stellar.ConfigUpgradeSetKeyDecodeResponse> DecodeConfigUpgradeSetKey(Stellar.ConfigUpgradeSetKeyDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeConfigUpgradeSetKey request");
                return _service.DecodeConfigUpgradeSetKey(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeConfigUpgradeSetKey");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerUpgrade method</summary>
        public async Task<Stellar.LedgerUpgradeEncodeResponse> EncodeLedgerUpgrade(Stellar.LedgerUpgradeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerUpgrade request");
                return _service.EncodeLedgerUpgrade(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerUpgrade");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerUpgrade method</summary>
        public async Task<Stellar.LedgerUpgradeDecodeResponse> DecodeLedgerUpgrade(Stellar.LedgerUpgradeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerUpgrade request");
                return _service.DecodeLedgerUpgrade(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerUpgrade");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeConfigUpgradeSet method</summary>
        public async Task<Stellar.ConfigUpgradeSetEncodeResponse> EncodeConfigUpgradeSet(Stellar.ConfigUpgradeSetEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeConfigUpgradeSet request");
                return _service.EncodeConfigUpgradeSet(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeConfigUpgradeSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeConfigUpgradeSet method</summary>
        public async Task<Stellar.ConfigUpgradeSetDecodeResponse> DecodeConfigUpgradeSet(Stellar.ConfigUpgradeSetDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeConfigUpgradeSet request");
                return _service.DecodeConfigUpgradeSet(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeConfigUpgradeSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTxSetComponentType method</summary>
        public async Task<Stellar.TxSetComponentTypeEncodeResponse> EncodeTxSetComponentType(Stellar.TxSetComponentTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTxSetComponentType request");
                return _service.EncodeTxSetComponentType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTxSetComponentType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTxSetComponentType method</summary>
        public async Task<Stellar.TxSetComponentTypeDecodeResponse> DecodeTxSetComponentType(Stellar.TxSetComponentTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTxSetComponentType request");
                return _service.DecodeTxSetComponentType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTxSetComponentType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTxSetComponent method</summary>
        public async Task<Stellar.TxSetComponentEncodeResponse> EncodeTxSetComponent(Stellar.TxSetComponentEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTxSetComponent request");
                return _service.EncodeTxSetComponent(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTxSetComponent");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTxSetComponent method</summary>
        public async Task<Stellar.TxSetComponentDecodeResponse> DecodeTxSetComponent(Stellar.TxSetComponentDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTxSetComponent request");
                return _service.DecodeTxSetComponent(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTxSetComponent");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionPhase method</summary>
        public async Task<Stellar.TransactionPhaseEncodeResponse> EncodeTransactionPhase(Stellar.TransactionPhaseEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionPhase request");
                return _service.EncodeTransactionPhase(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionPhase");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionPhase method</summary>
        public async Task<Stellar.TransactionPhaseDecodeResponse> DecodeTransactionPhase(Stellar.TransactionPhaseDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionPhase request");
                return _service.DecodeTransactionPhase(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionPhase");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionSet method</summary>
        public async Task<Stellar.TransactionSetEncodeResponse> EncodeTransactionSet(Stellar.TransactionSetEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionSet request");
                return _service.EncodeTransactionSet(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionSet method</summary>
        public async Task<Stellar.TransactionSetDecodeResponse> DecodeTransactionSet(Stellar.TransactionSetDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionSet request");
                return _service.DecodeTransactionSet(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionSetV1 method</summary>
        public async Task<Stellar.TransactionSetV1EncodeResponse> EncodeTransactionSetV1(Stellar.TransactionSetV1EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionSetV1 request");
                return _service.EncodeTransactionSetV1(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionSetV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionSetV1 method</summary>
        public async Task<Stellar.TransactionSetV1DecodeResponse> DecodeTransactionSetV1(Stellar.TransactionSetV1DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionSetV1 request");
                return _service.DecodeTransactionSetV1(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionSetV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeGeneralizedTransactionSet method</summary>
        public async Task<Stellar.GeneralizedTransactionSetEncodeResponse> EncodeGeneralizedTransactionSet(Stellar.GeneralizedTransactionSetEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeGeneralizedTransactionSet request");
                return _service.EncodeGeneralizedTransactionSet(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeGeneralizedTransactionSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeGeneralizedTransactionSet method</summary>
        public async Task<Stellar.GeneralizedTransactionSetDecodeResponse> DecodeGeneralizedTransactionSet(Stellar.GeneralizedTransactionSetDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeGeneralizedTransactionSet request");
                return _service.DecodeGeneralizedTransactionSet(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeGeneralizedTransactionSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionResultPair method</summary>
        public async Task<Stellar.TransactionResultPairEncodeResponse> EncodeTransactionResultPair(Stellar.TransactionResultPairEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionResultPair request");
                return _service.EncodeTransactionResultPair(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionResultPair");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionResultPair method</summary>
        public async Task<Stellar.TransactionResultPairDecodeResponse> DecodeTransactionResultPair(Stellar.TransactionResultPairDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionResultPair request");
                return _service.DecodeTransactionResultPair(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionResultPair");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionResultSet method</summary>
        public async Task<Stellar.TransactionResultSetEncodeResponse> EncodeTransactionResultSet(Stellar.TransactionResultSetEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionResultSet request");
                return _service.EncodeTransactionResultSet(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionResultSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionResultSet method</summary>
        public async Task<Stellar.TransactionResultSetDecodeResponse> DecodeTransactionResultSet(Stellar.TransactionResultSetDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionResultSet request");
                return _service.DecodeTransactionResultSet(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionResultSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionHistoryEntry method</summary>
        public async Task<Stellar.TransactionHistoryEntryEncodeResponse> EncodeTransactionHistoryEntry(Stellar.TransactionHistoryEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionHistoryEntry request");
                return _service.EncodeTransactionHistoryEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionHistoryEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionHistoryEntry method</summary>
        public async Task<Stellar.TransactionHistoryEntryDecodeResponse> DecodeTransactionHistoryEntry(Stellar.TransactionHistoryEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionHistoryEntry request");
                return _service.DecodeTransactionHistoryEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionHistoryEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionHistoryResultEntry method</summary>
        public async Task<Stellar.TransactionHistoryResultEntryEncodeResponse> EncodeTransactionHistoryResultEntry(Stellar.TransactionHistoryResultEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionHistoryResultEntry request");
                return _service.EncodeTransactionHistoryResultEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionHistoryResultEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionHistoryResultEntry method</summary>
        public async Task<Stellar.TransactionHistoryResultEntryDecodeResponse> DecodeTransactionHistoryResultEntry(Stellar.TransactionHistoryResultEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionHistoryResultEntry request");
                return _service.DecodeTransactionHistoryResultEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionHistoryResultEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerHeaderHistoryEntry method</summary>
        public async Task<Stellar.LedgerHeaderHistoryEntryEncodeResponse> EncodeLedgerHeaderHistoryEntry(Stellar.LedgerHeaderHistoryEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerHeaderHistoryEntry request");
                return _service.EncodeLedgerHeaderHistoryEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerHeaderHistoryEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerHeaderHistoryEntry method</summary>
        public async Task<Stellar.LedgerHeaderHistoryEntryDecodeResponse> DecodeLedgerHeaderHistoryEntry(Stellar.LedgerHeaderHistoryEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerHeaderHistoryEntry request");
                return _service.DecodeLedgerHeaderHistoryEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerHeaderHistoryEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerSCPMessages method</summary>
        public async Task<Stellar.LedgerSCPMessagesEncodeResponse> EncodeLedgerSCPMessages(Stellar.LedgerSCPMessagesEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerSCPMessages request");
                return _service.EncodeLedgerSCPMessages(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerSCPMessages");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerSCPMessages method</summary>
        public async Task<Stellar.LedgerSCPMessagesDecodeResponse> DecodeLedgerSCPMessages(Stellar.LedgerSCPMessagesDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerSCPMessages request");
                return _service.DecodeLedgerSCPMessages(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerSCPMessages");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCPHistoryEntryV0 method</summary>
        public async Task<Stellar.SCPHistoryEntryV0EncodeResponse> EncodeSCPHistoryEntryV0(Stellar.SCPHistoryEntryV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCPHistoryEntryV0 request");
                return _service.EncodeSCPHistoryEntryV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCPHistoryEntryV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCPHistoryEntryV0 method</summary>
        public async Task<Stellar.SCPHistoryEntryV0DecodeResponse> DecodeSCPHistoryEntryV0(Stellar.SCPHistoryEntryV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCPHistoryEntryV0 request");
                return _service.DecodeSCPHistoryEntryV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCPHistoryEntryV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCPHistoryEntry method</summary>
        public async Task<Stellar.SCPHistoryEntryEncodeResponse> EncodeSCPHistoryEntry(Stellar.SCPHistoryEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCPHistoryEntry request");
                return _service.EncodeSCPHistoryEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCPHistoryEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCPHistoryEntry method</summary>
        public async Task<Stellar.SCPHistoryEntryDecodeResponse> DecodeSCPHistoryEntry(Stellar.SCPHistoryEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCPHistoryEntry request");
                return _service.DecodeSCPHistoryEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCPHistoryEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerEntryChangeType method</summary>
        public async Task<Stellar.LedgerEntryChangeTypeEncodeResponse> EncodeLedgerEntryChangeType(Stellar.LedgerEntryChangeTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerEntryChangeType request");
                return _service.EncodeLedgerEntryChangeType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerEntryChangeType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerEntryChangeType method</summary>
        public async Task<Stellar.LedgerEntryChangeTypeDecodeResponse> DecodeLedgerEntryChangeType(Stellar.LedgerEntryChangeTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerEntryChangeType request");
                return _service.DecodeLedgerEntryChangeType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerEntryChangeType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerEntryChange method</summary>
        public async Task<Stellar.LedgerEntryChangeEncodeResponse> EncodeLedgerEntryChange(Stellar.LedgerEntryChangeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerEntryChange request");
                return _service.EncodeLedgerEntryChange(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerEntryChange");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerEntryChange method</summary>
        public async Task<Stellar.LedgerEntryChangeDecodeResponse> DecodeLedgerEntryChange(Stellar.LedgerEntryChangeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerEntryChange request");
                return _service.DecodeLedgerEntryChange(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerEntryChange");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerEntryChanges method</summary>
        public async Task<Stellar.LedgerEntryChangesEncodeResponse> EncodeLedgerEntryChanges(Stellar.LedgerEntryChangesEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerEntryChanges request");
                return _service.EncodeLedgerEntryChanges(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerEntryChanges");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerEntryChanges method</summary>
        public async Task<Stellar.LedgerEntryChangesDecodeResponse> DecodeLedgerEntryChanges(Stellar.LedgerEntryChangesDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerEntryChanges request");
                return _service.DecodeLedgerEntryChanges(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerEntryChanges");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeOperationMeta method</summary>
        public async Task<Stellar.OperationMetaEncodeResponse> EncodeOperationMeta(Stellar.OperationMetaEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeOperationMeta request");
                return _service.EncodeOperationMeta(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeOperationMeta");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeOperationMeta method</summary>
        public async Task<Stellar.OperationMetaDecodeResponse> DecodeOperationMeta(Stellar.OperationMetaDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeOperationMeta request");
                return _service.DecodeOperationMeta(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeOperationMeta");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionMetaV1 method</summary>
        public async Task<Stellar.TransactionMetaV1EncodeResponse> EncodeTransactionMetaV1(Stellar.TransactionMetaV1EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionMetaV1 request");
                return _service.EncodeTransactionMetaV1(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionMetaV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionMetaV1 method</summary>
        public async Task<Stellar.TransactionMetaV1DecodeResponse> DecodeTransactionMetaV1(Stellar.TransactionMetaV1DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionMetaV1 request");
                return _service.DecodeTransactionMetaV1(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionMetaV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionMetaV2 method</summary>
        public async Task<Stellar.TransactionMetaV2EncodeResponse> EncodeTransactionMetaV2(Stellar.TransactionMetaV2EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionMetaV2 request");
                return _service.EncodeTransactionMetaV2(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionMetaV2");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionMetaV2 method</summary>
        public async Task<Stellar.TransactionMetaV2DecodeResponse> DecodeTransactionMetaV2(Stellar.TransactionMetaV2DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionMetaV2 request");
                return _service.DecodeTransactionMetaV2(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionMetaV2");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeContractEventType method</summary>
        public async Task<Stellar.ContractEventTypeEncodeResponse> EncodeContractEventType(Stellar.ContractEventTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeContractEventType request");
                return _service.EncodeContractEventType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeContractEventType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeContractEventType method</summary>
        public async Task<Stellar.ContractEventTypeDecodeResponse> DecodeContractEventType(Stellar.ContractEventTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeContractEventType request");
                return _service.DecodeContractEventType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeContractEventType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeContractEvent method</summary>
        public async Task<Stellar.ContractEventEncodeResponse> EncodeContractEvent(Stellar.ContractEventEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeContractEvent request");
                return _service.EncodeContractEvent(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeContractEvent");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeContractEvent method</summary>
        public async Task<Stellar.ContractEventDecodeResponse> DecodeContractEvent(Stellar.ContractEventDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeContractEvent request");
                return _service.DecodeContractEvent(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeContractEvent");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeDiagnosticEvent method</summary>
        public async Task<Stellar.DiagnosticEventEncodeResponse> EncodeDiagnosticEvent(Stellar.DiagnosticEventEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeDiagnosticEvent request");
                return _service.EncodeDiagnosticEvent(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeDiagnosticEvent");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeDiagnosticEvent method</summary>
        public async Task<Stellar.DiagnosticEventDecodeResponse> DecodeDiagnosticEvent(Stellar.DiagnosticEventDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeDiagnosticEvent request");
                return _service.DecodeDiagnosticEvent(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeDiagnosticEvent");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeDiagnosticEvents method</summary>
        public async Task<Stellar.DiagnosticEventsEncodeResponse> EncodeDiagnosticEvents(Stellar.DiagnosticEventsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeDiagnosticEvents request");
                return _service.EncodeDiagnosticEvents(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeDiagnosticEvents");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeDiagnosticEvents method</summary>
        public async Task<Stellar.DiagnosticEventsDecodeResponse> DecodeDiagnosticEvents(Stellar.DiagnosticEventsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeDiagnosticEvents request");
                return _service.DecodeDiagnosticEvents(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeDiagnosticEvents");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSorobanTransactionMetaExtV1 method</summary>
        public async Task<Stellar.SorobanTransactionMetaExtV1EncodeResponse> EncodeSorobanTransactionMetaExtV1(Stellar.SorobanTransactionMetaExtV1EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSorobanTransactionMetaExtV1 request");
                return _service.EncodeSorobanTransactionMetaExtV1(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSorobanTransactionMetaExtV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSorobanTransactionMetaExtV1 method</summary>
        public async Task<Stellar.SorobanTransactionMetaExtV1DecodeResponse> DecodeSorobanTransactionMetaExtV1(Stellar.SorobanTransactionMetaExtV1DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSorobanTransactionMetaExtV1 request");
                return _service.DecodeSorobanTransactionMetaExtV1(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSorobanTransactionMetaExtV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSorobanTransactionMetaExt method</summary>
        public async Task<Stellar.SorobanTransactionMetaExtEncodeResponse> EncodeSorobanTransactionMetaExt(Stellar.SorobanTransactionMetaExtEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSorobanTransactionMetaExt request");
                return _service.EncodeSorobanTransactionMetaExt(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSorobanTransactionMetaExt");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSorobanTransactionMetaExt method</summary>
        public async Task<Stellar.SorobanTransactionMetaExtDecodeResponse> DecodeSorobanTransactionMetaExt(Stellar.SorobanTransactionMetaExtDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSorobanTransactionMetaExt request");
                return _service.DecodeSorobanTransactionMetaExt(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSorobanTransactionMetaExt");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSorobanTransactionMeta method</summary>
        public async Task<Stellar.SorobanTransactionMetaEncodeResponse> EncodeSorobanTransactionMeta(Stellar.SorobanTransactionMetaEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSorobanTransactionMeta request");
                return _service.EncodeSorobanTransactionMeta(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSorobanTransactionMeta");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSorobanTransactionMeta method</summary>
        public async Task<Stellar.SorobanTransactionMetaDecodeResponse> DecodeSorobanTransactionMeta(Stellar.SorobanTransactionMetaDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSorobanTransactionMeta request");
                return _service.DecodeSorobanTransactionMeta(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSorobanTransactionMeta");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionMetaV3 method</summary>
        public async Task<Stellar.TransactionMetaV3EncodeResponse> EncodeTransactionMetaV3(Stellar.TransactionMetaV3EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionMetaV3 request");
                return _service.EncodeTransactionMetaV3(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionMetaV3");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionMetaV3 method</summary>
        public async Task<Stellar.TransactionMetaV3DecodeResponse> DecodeTransactionMetaV3(Stellar.TransactionMetaV3DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionMetaV3 request");
                return _service.DecodeTransactionMetaV3(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionMetaV3");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeInvokeHostFunctionSuccessPreImage method</summary>
        public async Task<Stellar.InvokeHostFunctionSuccessPreImageEncodeResponse> EncodeInvokeHostFunctionSuccessPreImage(Stellar.InvokeHostFunctionSuccessPreImageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeInvokeHostFunctionSuccessPreImage request");
                return _service.EncodeInvokeHostFunctionSuccessPreImage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeInvokeHostFunctionSuccessPreImage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeInvokeHostFunctionSuccessPreImage method</summary>
        public async Task<Stellar.InvokeHostFunctionSuccessPreImageDecodeResponse> DecodeInvokeHostFunctionSuccessPreImage(Stellar.InvokeHostFunctionSuccessPreImageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeInvokeHostFunctionSuccessPreImage request");
                return _service.DecodeInvokeHostFunctionSuccessPreImage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeInvokeHostFunctionSuccessPreImage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionMeta method</summary>
        public async Task<Stellar.TransactionMetaEncodeResponse> EncodeTransactionMeta(Stellar.TransactionMetaEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionMeta request");
                return _service.EncodeTransactionMeta(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionMeta");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionMeta method</summary>
        public async Task<Stellar.TransactionMetaDecodeResponse> DecodeTransactionMeta(Stellar.TransactionMetaDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionMeta request");
                return _service.DecodeTransactionMeta(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionMeta");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionResultMeta method</summary>
        public async Task<Stellar.TransactionResultMetaEncodeResponse> EncodeTransactionResultMeta(Stellar.TransactionResultMetaEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionResultMeta request");
                return _service.EncodeTransactionResultMeta(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionResultMeta");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionResultMeta method</summary>
        public async Task<Stellar.TransactionResultMetaDecodeResponse> DecodeTransactionResultMeta(Stellar.TransactionResultMetaDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionResultMeta request");
                return _service.DecodeTransactionResultMeta(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionResultMeta");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeUpgradeEntryMeta method</summary>
        public async Task<Stellar.UpgradeEntryMetaEncodeResponse> EncodeUpgradeEntryMeta(Stellar.UpgradeEntryMetaEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeUpgradeEntryMeta request");
                return _service.EncodeUpgradeEntryMeta(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeUpgradeEntryMeta");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeUpgradeEntryMeta method</summary>
        public async Task<Stellar.UpgradeEntryMetaDecodeResponse> DecodeUpgradeEntryMeta(Stellar.UpgradeEntryMetaDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeUpgradeEntryMeta request");
                return _service.DecodeUpgradeEntryMeta(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeUpgradeEntryMeta");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerCloseMetaV0 method</summary>
        public async Task<Stellar.LedgerCloseMetaV0EncodeResponse> EncodeLedgerCloseMetaV0(Stellar.LedgerCloseMetaV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerCloseMetaV0 request");
                return _service.EncodeLedgerCloseMetaV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerCloseMetaV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerCloseMetaV0 method</summary>
        public async Task<Stellar.LedgerCloseMetaV0DecodeResponse> DecodeLedgerCloseMetaV0(Stellar.LedgerCloseMetaV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerCloseMetaV0 request");
                return _service.DecodeLedgerCloseMetaV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerCloseMetaV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerCloseMetaExtV1 method</summary>
        public async Task<Stellar.LedgerCloseMetaExtV1EncodeResponse> EncodeLedgerCloseMetaExtV1(Stellar.LedgerCloseMetaExtV1EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerCloseMetaExtV1 request");
                return _service.EncodeLedgerCloseMetaExtV1(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerCloseMetaExtV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerCloseMetaExtV1 method</summary>
        public async Task<Stellar.LedgerCloseMetaExtV1DecodeResponse> DecodeLedgerCloseMetaExtV1(Stellar.LedgerCloseMetaExtV1DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerCloseMetaExtV1 request");
                return _service.DecodeLedgerCloseMetaExtV1(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerCloseMetaExtV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerCloseMetaExt method</summary>
        public async Task<Stellar.LedgerCloseMetaExtEncodeResponse> EncodeLedgerCloseMetaExt(Stellar.LedgerCloseMetaExtEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerCloseMetaExt request");
                return _service.EncodeLedgerCloseMetaExt(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerCloseMetaExt");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerCloseMetaExt method</summary>
        public async Task<Stellar.LedgerCloseMetaExtDecodeResponse> DecodeLedgerCloseMetaExt(Stellar.LedgerCloseMetaExtDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerCloseMetaExt request");
                return _service.DecodeLedgerCloseMetaExt(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerCloseMetaExt");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerCloseMetaV1 method</summary>
        public async Task<Stellar.LedgerCloseMetaV1EncodeResponse> EncodeLedgerCloseMetaV1(Stellar.LedgerCloseMetaV1EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerCloseMetaV1 request");
                return _service.EncodeLedgerCloseMetaV1(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerCloseMetaV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerCloseMetaV1 method</summary>
        public async Task<Stellar.LedgerCloseMetaV1DecodeResponse> DecodeLedgerCloseMetaV1(Stellar.LedgerCloseMetaV1DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerCloseMetaV1 request");
                return _service.DecodeLedgerCloseMetaV1(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerCloseMetaV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerCloseMeta method</summary>
        public async Task<Stellar.LedgerCloseMetaEncodeResponse> EncodeLedgerCloseMeta(Stellar.LedgerCloseMetaEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerCloseMeta request");
                return _service.EncodeLedgerCloseMeta(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerCloseMeta");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerCloseMeta method</summary>
        public async Task<Stellar.LedgerCloseMetaDecodeResponse> DecodeLedgerCloseMeta(Stellar.LedgerCloseMetaDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerCloseMeta request");
                return _service.DecodeLedgerCloseMeta(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerCloseMeta");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeErrorCode method</summary>
        public async Task<Stellar.ErrorCodeEncodeResponse> EncodeErrorCode(Stellar.ErrorCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeErrorCode request");
                return _service.EncodeErrorCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeErrorCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeErrorCode method</summary>
        public async Task<Stellar.ErrorCodeDecodeResponse> DecodeErrorCode(Stellar.ErrorCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeErrorCode request");
                return _service.DecodeErrorCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeErrorCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeError method</summary>
        public async Task<Stellar.ErrorEncodeResponse> EncodeError(Stellar.ErrorEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeError request");
                return _service.EncodeError(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeError");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeError method</summary>
        public async Task<Stellar.ErrorDecodeResponse> DecodeError(Stellar.ErrorDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeError request");
                return _service.DecodeError(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeError");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSendMore method</summary>
        public async Task<Stellar.SendMoreEncodeResponse> EncodeSendMore(Stellar.SendMoreEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSendMore request");
                return _service.EncodeSendMore(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSendMore");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSendMore method</summary>
        public async Task<Stellar.SendMoreDecodeResponse> DecodeSendMore(Stellar.SendMoreDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSendMore request");
                return _service.DecodeSendMore(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSendMore");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSendMoreExtended method</summary>
        public async Task<Stellar.SendMoreExtendedEncodeResponse> EncodeSendMoreExtended(Stellar.SendMoreExtendedEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSendMoreExtended request");
                return _service.EncodeSendMoreExtended(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSendMoreExtended");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSendMoreExtended method</summary>
        public async Task<Stellar.SendMoreExtendedDecodeResponse> DecodeSendMoreExtended(Stellar.SendMoreExtendedDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSendMoreExtended request");
                return _service.DecodeSendMoreExtended(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSendMoreExtended");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAuthCert method</summary>
        public async Task<Stellar.AuthCertEncodeResponse> EncodeAuthCert(Stellar.AuthCertEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAuthCert request");
                return _service.EncodeAuthCert(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAuthCert");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAuthCert method</summary>
        public async Task<Stellar.AuthCertDecodeResponse> DecodeAuthCert(Stellar.AuthCertDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAuthCert request");
                return _service.DecodeAuthCert(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAuthCert");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeHello method</summary>
        public async Task<Stellar.HelloEncodeResponse> EncodeHello(Stellar.HelloEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeHello request");
                return _service.EncodeHello(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeHello");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeHello method</summary>
        public async Task<Stellar.HelloDecodeResponse> DecodeHello(Stellar.HelloDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeHello request");
                return _service.DecodeHello(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeHello");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAuth method</summary>
        public async Task<Stellar.AuthEncodeResponse> EncodeAuth(Stellar.AuthEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAuth request");
                return _service.EncodeAuth(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAuth");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAuth method</summary>
        public async Task<Stellar.AuthDecodeResponse> DecodeAuth(Stellar.AuthDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAuth request");
                return _service.DecodeAuth(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAuth");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeIPAddrType method</summary>
        public async Task<Stellar.IPAddrTypeEncodeResponse> EncodeIPAddrType(Stellar.IPAddrTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeIPAddrType request");
                return _service.EncodeIPAddrType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeIPAddrType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeIPAddrType method</summary>
        public async Task<Stellar.IPAddrTypeDecodeResponse> DecodeIPAddrType(Stellar.IPAddrTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeIPAddrType request");
                return _service.DecodeIPAddrType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeIPAddrType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePeerAddress method</summary>
        public async Task<Stellar.PeerAddressEncodeResponse> EncodePeerAddress(Stellar.PeerAddressEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePeerAddress request");
                return _service.EncodePeerAddress(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePeerAddress");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePeerAddress method</summary>
        public async Task<Stellar.PeerAddressDecodeResponse> DecodePeerAddress(Stellar.PeerAddressDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePeerAddress request");
                return _service.DecodePeerAddress(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePeerAddress");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeMessageType method</summary>
        public async Task<Stellar.MessageTypeEncodeResponse> EncodeMessageType(Stellar.MessageTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeMessageType request");
                return _service.EncodeMessageType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeMessageType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeMessageType method</summary>
        public async Task<Stellar.MessageTypeDecodeResponse> DecodeMessageType(Stellar.MessageTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeMessageType request");
                return _service.DecodeMessageType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeMessageType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeDontHave method</summary>
        public async Task<Stellar.DontHaveEncodeResponse> EncodeDontHave(Stellar.DontHaveEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeDontHave request");
                return _service.EncodeDontHave(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeDontHave");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeDontHave method</summary>
        public async Task<Stellar.DontHaveDecodeResponse> DecodeDontHave(Stellar.DontHaveDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeDontHave request");
                return _service.DecodeDontHave(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeDontHave");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSurveyMessageCommandType method</summary>
        public async Task<Stellar.SurveyMessageCommandTypeEncodeResponse> EncodeSurveyMessageCommandType(Stellar.SurveyMessageCommandTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSurveyMessageCommandType request");
                return _service.EncodeSurveyMessageCommandType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSurveyMessageCommandType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSurveyMessageCommandType method</summary>
        public async Task<Stellar.SurveyMessageCommandTypeDecodeResponse> DecodeSurveyMessageCommandType(Stellar.SurveyMessageCommandTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSurveyMessageCommandType request");
                return _service.DecodeSurveyMessageCommandType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSurveyMessageCommandType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSurveyMessageResponseType method</summary>
        public async Task<Stellar.SurveyMessageResponseTypeEncodeResponse> EncodeSurveyMessageResponseType(Stellar.SurveyMessageResponseTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSurveyMessageResponseType request");
                return _service.EncodeSurveyMessageResponseType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSurveyMessageResponseType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSurveyMessageResponseType method</summary>
        public async Task<Stellar.SurveyMessageResponseTypeDecodeResponse> DecodeSurveyMessageResponseType(Stellar.SurveyMessageResponseTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSurveyMessageResponseType request");
                return _service.DecodeSurveyMessageResponseType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSurveyMessageResponseType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTimeSlicedSurveyStartCollectingMessage method</summary>
        public async Task<Stellar.TimeSlicedSurveyStartCollectingMessageEncodeResponse> EncodeTimeSlicedSurveyStartCollectingMessage(Stellar.TimeSlicedSurveyStartCollectingMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTimeSlicedSurveyStartCollectingMessage request");
                return _service.EncodeTimeSlicedSurveyStartCollectingMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTimeSlicedSurveyStartCollectingMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTimeSlicedSurveyStartCollectingMessage method</summary>
        public async Task<Stellar.TimeSlicedSurveyStartCollectingMessageDecodeResponse> DecodeTimeSlicedSurveyStartCollectingMessage(Stellar.TimeSlicedSurveyStartCollectingMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTimeSlicedSurveyStartCollectingMessage request");
                return _service.DecodeTimeSlicedSurveyStartCollectingMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTimeSlicedSurveyStartCollectingMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSignedTimeSlicedSurveyStartCollectingMessage method</summary>
        public async Task<Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeResponse> EncodeSignedTimeSlicedSurveyStartCollectingMessage(Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSignedTimeSlicedSurveyStartCollectingMessage request");
                return _service.EncodeSignedTimeSlicedSurveyStartCollectingMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSignedTimeSlicedSurveyStartCollectingMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSignedTimeSlicedSurveyStartCollectingMessage method</summary>
        public async Task<Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeResponse> DecodeSignedTimeSlicedSurveyStartCollectingMessage(Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSignedTimeSlicedSurveyStartCollectingMessage request");
                return _service.DecodeSignedTimeSlicedSurveyStartCollectingMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSignedTimeSlicedSurveyStartCollectingMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTimeSlicedSurveyStopCollectingMessage method</summary>
        public async Task<Stellar.TimeSlicedSurveyStopCollectingMessageEncodeResponse> EncodeTimeSlicedSurveyStopCollectingMessage(Stellar.TimeSlicedSurveyStopCollectingMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTimeSlicedSurveyStopCollectingMessage request");
                return _service.EncodeTimeSlicedSurveyStopCollectingMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTimeSlicedSurveyStopCollectingMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTimeSlicedSurveyStopCollectingMessage method</summary>
        public async Task<Stellar.TimeSlicedSurveyStopCollectingMessageDecodeResponse> DecodeTimeSlicedSurveyStopCollectingMessage(Stellar.TimeSlicedSurveyStopCollectingMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTimeSlicedSurveyStopCollectingMessage request");
                return _service.DecodeTimeSlicedSurveyStopCollectingMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTimeSlicedSurveyStopCollectingMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSignedTimeSlicedSurveyStopCollectingMessage method</summary>
        public async Task<Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeResponse> EncodeSignedTimeSlicedSurveyStopCollectingMessage(Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSignedTimeSlicedSurveyStopCollectingMessage request");
                return _service.EncodeSignedTimeSlicedSurveyStopCollectingMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSignedTimeSlicedSurveyStopCollectingMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSignedTimeSlicedSurveyStopCollectingMessage method</summary>
        public async Task<Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeResponse> DecodeSignedTimeSlicedSurveyStopCollectingMessage(Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSignedTimeSlicedSurveyStopCollectingMessage request");
                return _service.DecodeSignedTimeSlicedSurveyStopCollectingMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSignedTimeSlicedSurveyStopCollectingMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSurveyRequestMessage method</summary>
        public async Task<Stellar.SurveyRequestMessageEncodeResponse> EncodeSurveyRequestMessage(Stellar.SurveyRequestMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSurveyRequestMessage request");
                return _service.EncodeSurveyRequestMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSurveyRequestMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSurveyRequestMessage method</summary>
        public async Task<Stellar.SurveyRequestMessageDecodeResponse> DecodeSurveyRequestMessage(Stellar.SurveyRequestMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSurveyRequestMessage request");
                return _service.DecodeSurveyRequestMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSurveyRequestMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTimeSlicedSurveyRequestMessage method</summary>
        public async Task<Stellar.TimeSlicedSurveyRequestMessageEncodeResponse> EncodeTimeSlicedSurveyRequestMessage(Stellar.TimeSlicedSurveyRequestMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTimeSlicedSurveyRequestMessage request");
                return _service.EncodeTimeSlicedSurveyRequestMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTimeSlicedSurveyRequestMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTimeSlicedSurveyRequestMessage method</summary>
        public async Task<Stellar.TimeSlicedSurveyRequestMessageDecodeResponse> DecodeTimeSlicedSurveyRequestMessage(Stellar.TimeSlicedSurveyRequestMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTimeSlicedSurveyRequestMessage request");
                return _service.DecodeTimeSlicedSurveyRequestMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTimeSlicedSurveyRequestMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSignedSurveyRequestMessage method</summary>
        public async Task<Stellar.SignedSurveyRequestMessageEncodeResponse> EncodeSignedSurveyRequestMessage(Stellar.SignedSurveyRequestMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSignedSurveyRequestMessage request");
                return _service.EncodeSignedSurveyRequestMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSignedSurveyRequestMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSignedSurveyRequestMessage method</summary>
        public async Task<Stellar.SignedSurveyRequestMessageDecodeResponse> DecodeSignedSurveyRequestMessage(Stellar.SignedSurveyRequestMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSignedSurveyRequestMessage request");
                return _service.DecodeSignedSurveyRequestMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSignedSurveyRequestMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSignedTimeSlicedSurveyRequestMessage method</summary>
        public async Task<Stellar.SignedTimeSlicedSurveyRequestMessageEncodeResponse> EncodeSignedTimeSlicedSurveyRequestMessage(Stellar.SignedTimeSlicedSurveyRequestMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSignedTimeSlicedSurveyRequestMessage request");
                return _service.EncodeSignedTimeSlicedSurveyRequestMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSignedTimeSlicedSurveyRequestMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSignedTimeSlicedSurveyRequestMessage method</summary>
        public async Task<Stellar.SignedTimeSlicedSurveyRequestMessageDecodeResponse> DecodeSignedTimeSlicedSurveyRequestMessage(Stellar.SignedTimeSlicedSurveyRequestMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSignedTimeSlicedSurveyRequestMessage request");
                return _service.DecodeSignedTimeSlicedSurveyRequestMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSignedTimeSlicedSurveyRequestMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeEncryptedBody method</summary>
        public async Task<Stellar.EncryptedBodyEncodeResponse> EncodeEncryptedBody(Stellar.EncryptedBodyEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeEncryptedBody request");
                return _service.EncodeEncryptedBody(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeEncryptedBody");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeEncryptedBody method</summary>
        public async Task<Stellar.EncryptedBodyDecodeResponse> DecodeEncryptedBody(Stellar.EncryptedBodyDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeEncryptedBody request");
                return _service.DecodeEncryptedBody(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeEncryptedBody");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSurveyResponseMessage method</summary>
        public async Task<Stellar.SurveyResponseMessageEncodeResponse> EncodeSurveyResponseMessage(Stellar.SurveyResponseMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSurveyResponseMessage request");
                return _service.EncodeSurveyResponseMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSurveyResponseMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSurveyResponseMessage method</summary>
        public async Task<Stellar.SurveyResponseMessageDecodeResponse> DecodeSurveyResponseMessage(Stellar.SurveyResponseMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSurveyResponseMessage request");
                return _service.DecodeSurveyResponseMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSurveyResponseMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTimeSlicedSurveyResponseMessage method</summary>
        public async Task<Stellar.TimeSlicedSurveyResponseMessageEncodeResponse> EncodeTimeSlicedSurveyResponseMessage(Stellar.TimeSlicedSurveyResponseMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTimeSlicedSurveyResponseMessage request");
                return _service.EncodeTimeSlicedSurveyResponseMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTimeSlicedSurveyResponseMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTimeSlicedSurveyResponseMessage method</summary>
        public async Task<Stellar.TimeSlicedSurveyResponseMessageDecodeResponse> DecodeTimeSlicedSurveyResponseMessage(Stellar.TimeSlicedSurveyResponseMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTimeSlicedSurveyResponseMessage request");
                return _service.DecodeTimeSlicedSurveyResponseMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTimeSlicedSurveyResponseMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSignedSurveyResponseMessage method</summary>
        public async Task<Stellar.SignedSurveyResponseMessageEncodeResponse> EncodeSignedSurveyResponseMessage(Stellar.SignedSurveyResponseMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSignedSurveyResponseMessage request");
                return _service.EncodeSignedSurveyResponseMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSignedSurveyResponseMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSignedSurveyResponseMessage method</summary>
        public async Task<Stellar.SignedSurveyResponseMessageDecodeResponse> DecodeSignedSurveyResponseMessage(Stellar.SignedSurveyResponseMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSignedSurveyResponseMessage request");
                return _service.DecodeSignedSurveyResponseMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSignedSurveyResponseMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSignedTimeSlicedSurveyResponseMessage method</summary>
        public async Task<Stellar.SignedTimeSlicedSurveyResponseMessageEncodeResponse> EncodeSignedTimeSlicedSurveyResponseMessage(Stellar.SignedTimeSlicedSurveyResponseMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSignedTimeSlicedSurveyResponseMessage request");
                return _service.EncodeSignedTimeSlicedSurveyResponseMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSignedTimeSlicedSurveyResponseMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSignedTimeSlicedSurveyResponseMessage method</summary>
        public async Task<Stellar.SignedTimeSlicedSurveyResponseMessageDecodeResponse> DecodeSignedTimeSlicedSurveyResponseMessage(Stellar.SignedTimeSlicedSurveyResponseMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSignedTimeSlicedSurveyResponseMessage request");
                return _service.DecodeSignedTimeSlicedSurveyResponseMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSignedTimeSlicedSurveyResponseMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePeerStats method</summary>
        public async Task<Stellar.PeerStatsEncodeResponse> EncodePeerStats(Stellar.PeerStatsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePeerStats request");
                return _service.EncodePeerStats(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePeerStats");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePeerStats method</summary>
        public async Task<Stellar.PeerStatsDecodeResponse> DecodePeerStats(Stellar.PeerStatsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePeerStats request");
                return _service.DecodePeerStats(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePeerStats");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePeerStatList method</summary>
        public async Task<Stellar.PeerStatListEncodeResponse> EncodePeerStatList(Stellar.PeerStatListEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePeerStatList request");
                return _service.EncodePeerStatList(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePeerStatList");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePeerStatList method</summary>
        public async Task<Stellar.PeerStatListDecodeResponse> DecodePeerStatList(Stellar.PeerStatListDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePeerStatList request");
                return _service.DecodePeerStatList(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePeerStatList");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTimeSlicedNodeData method</summary>
        public async Task<Stellar.TimeSlicedNodeDataEncodeResponse> EncodeTimeSlicedNodeData(Stellar.TimeSlicedNodeDataEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTimeSlicedNodeData request");
                return _service.EncodeTimeSlicedNodeData(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTimeSlicedNodeData");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTimeSlicedNodeData method</summary>
        public async Task<Stellar.TimeSlicedNodeDataDecodeResponse> DecodeTimeSlicedNodeData(Stellar.TimeSlicedNodeDataDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTimeSlicedNodeData request");
                return _service.DecodeTimeSlicedNodeData(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTimeSlicedNodeData");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTimeSlicedPeerData method</summary>
        public async Task<Stellar.TimeSlicedPeerDataEncodeResponse> EncodeTimeSlicedPeerData(Stellar.TimeSlicedPeerDataEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTimeSlicedPeerData request");
                return _service.EncodeTimeSlicedPeerData(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTimeSlicedPeerData");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTimeSlicedPeerData method</summary>
        public async Task<Stellar.TimeSlicedPeerDataDecodeResponse> DecodeTimeSlicedPeerData(Stellar.TimeSlicedPeerDataDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTimeSlicedPeerData request");
                return _service.DecodeTimeSlicedPeerData(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTimeSlicedPeerData");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTimeSlicedPeerDataList method</summary>
        public async Task<Stellar.TimeSlicedPeerDataListEncodeResponse> EncodeTimeSlicedPeerDataList(Stellar.TimeSlicedPeerDataListEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTimeSlicedPeerDataList request");
                return _service.EncodeTimeSlicedPeerDataList(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTimeSlicedPeerDataList");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTimeSlicedPeerDataList method</summary>
        public async Task<Stellar.TimeSlicedPeerDataListDecodeResponse> DecodeTimeSlicedPeerDataList(Stellar.TimeSlicedPeerDataListDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTimeSlicedPeerDataList request");
                return _service.DecodeTimeSlicedPeerDataList(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTimeSlicedPeerDataList");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTopologyResponseBodyV0 method</summary>
        public async Task<Stellar.TopologyResponseBodyV0EncodeResponse> EncodeTopologyResponseBodyV0(Stellar.TopologyResponseBodyV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTopologyResponseBodyV0 request");
                return _service.EncodeTopologyResponseBodyV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTopologyResponseBodyV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTopologyResponseBodyV0 method</summary>
        public async Task<Stellar.TopologyResponseBodyV0DecodeResponse> DecodeTopologyResponseBodyV0(Stellar.TopologyResponseBodyV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTopologyResponseBodyV0 request");
                return _service.DecodeTopologyResponseBodyV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTopologyResponseBodyV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTopologyResponseBodyV1 method</summary>
        public async Task<Stellar.TopologyResponseBodyV1EncodeResponse> EncodeTopologyResponseBodyV1(Stellar.TopologyResponseBodyV1EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTopologyResponseBodyV1 request");
                return _service.EncodeTopologyResponseBodyV1(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTopologyResponseBodyV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTopologyResponseBodyV1 method</summary>
        public async Task<Stellar.TopologyResponseBodyV1DecodeResponse> DecodeTopologyResponseBodyV1(Stellar.TopologyResponseBodyV1DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTopologyResponseBodyV1 request");
                return _service.DecodeTopologyResponseBodyV1(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTopologyResponseBodyV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTopologyResponseBodyV2 method</summary>
        public async Task<Stellar.TopologyResponseBodyV2EncodeResponse> EncodeTopologyResponseBodyV2(Stellar.TopologyResponseBodyV2EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTopologyResponseBodyV2 request");
                return _service.EncodeTopologyResponseBodyV2(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTopologyResponseBodyV2");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTopologyResponseBodyV2 method</summary>
        public async Task<Stellar.TopologyResponseBodyV2DecodeResponse> DecodeTopologyResponseBodyV2(Stellar.TopologyResponseBodyV2DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTopologyResponseBodyV2 request");
                return _service.DecodeTopologyResponseBodyV2(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTopologyResponseBodyV2");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSurveyResponseBody method</summary>
        public async Task<Stellar.SurveyResponseBodyEncodeResponse> EncodeSurveyResponseBody(Stellar.SurveyResponseBodyEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSurveyResponseBody request");
                return _service.EncodeSurveyResponseBody(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSurveyResponseBody");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSurveyResponseBody method</summary>
        public async Task<Stellar.SurveyResponseBodyDecodeResponse> DecodeSurveyResponseBody(Stellar.SurveyResponseBodyDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSurveyResponseBody request");
                return _service.DecodeSurveyResponseBody(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSurveyResponseBody");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTxAdvertVector method</summary>
        public async Task<Stellar.TxAdvertVectorEncodeResponse> EncodeTxAdvertVector(Stellar.TxAdvertVectorEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTxAdvertVector request");
                return _service.EncodeTxAdvertVector(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTxAdvertVector");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTxAdvertVector method</summary>
        public async Task<Stellar.TxAdvertVectorDecodeResponse> DecodeTxAdvertVector(Stellar.TxAdvertVectorDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTxAdvertVector request");
                return _service.DecodeTxAdvertVector(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTxAdvertVector");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeFloodAdvert method</summary>
        public async Task<Stellar.FloodAdvertEncodeResponse> EncodeFloodAdvert(Stellar.FloodAdvertEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeFloodAdvert request");
                return _service.EncodeFloodAdvert(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeFloodAdvert");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeFloodAdvert method</summary>
        public async Task<Stellar.FloodAdvertDecodeResponse> DecodeFloodAdvert(Stellar.FloodAdvertDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeFloodAdvert request");
                return _service.DecodeFloodAdvert(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeFloodAdvert");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTxDemandVector method</summary>
        public async Task<Stellar.TxDemandVectorEncodeResponse> EncodeTxDemandVector(Stellar.TxDemandVectorEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTxDemandVector request");
                return _service.EncodeTxDemandVector(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTxDemandVector");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTxDemandVector method</summary>
        public async Task<Stellar.TxDemandVectorDecodeResponse> DecodeTxDemandVector(Stellar.TxDemandVectorDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTxDemandVector request");
                return _service.DecodeTxDemandVector(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTxDemandVector");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeFloodDemand method</summary>
        public async Task<Stellar.FloodDemandEncodeResponse> EncodeFloodDemand(Stellar.FloodDemandEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeFloodDemand request");
                return _service.EncodeFloodDemand(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeFloodDemand");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeFloodDemand method</summary>
        public async Task<Stellar.FloodDemandDecodeResponse> DecodeFloodDemand(Stellar.FloodDemandDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeFloodDemand request");
                return _service.DecodeFloodDemand(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeFloodDemand");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeStellarMessage method</summary>
        public async Task<Stellar.StellarMessageEncodeResponse> EncodeStellarMessage(Stellar.StellarMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeStellarMessage request");
                return _service.EncodeStellarMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeStellarMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeStellarMessage method</summary>
        public async Task<Stellar.StellarMessageDecodeResponse> DecodeStellarMessage(Stellar.StellarMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeStellarMessage request");
                return _service.DecodeStellarMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeStellarMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAuthenticatedMessage method</summary>
        public async Task<Stellar.AuthenticatedMessageEncodeResponse> EncodeAuthenticatedMessage(Stellar.AuthenticatedMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAuthenticatedMessage request");
                return _service.EncodeAuthenticatedMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAuthenticatedMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAuthenticatedMessage method</summary>
        public async Task<Stellar.AuthenticatedMessageDecodeResponse> DecodeAuthenticatedMessage(Stellar.AuthenticatedMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAuthenticatedMessage request");
                return _service.DecodeAuthenticatedMessage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAuthenticatedMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeValue method</summary>
        public async Task<Stellar.ValueEncodeResponse> EncodeValue(Stellar.ValueEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeValue request");
                return _service.EncodeValue(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeValue");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeValue method</summary>
        public async Task<Stellar.ValueDecodeResponse> DecodeValue(Stellar.ValueDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeValue request");
                return _service.DecodeValue(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeValue");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCPBallot method</summary>
        public async Task<Stellar.SCPBallotEncodeResponse> EncodeSCPBallot(Stellar.SCPBallotEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCPBallot request");
                return _service.EncodeSCPBallot(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCPBallot");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCPBallot method</summary>
        public async Task<Stellar.SCPBallotDecodeResponse> DecodeSCPBallot(Stellar.SCPBallotDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCPBallot request");
                return _service.DecodeSCPBallot(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCPBallot");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCPStatementType method</summary>
        public async Task<Stellar.SCPStatementTypeEncodeResponse> EncodeSCPStatementType(Stellar.SCPStatementTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCPStatementType request");
                return _service.EncodeSCPStatementType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCPStatementType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCPStatementType method</summary>
        public async Task<Stellar.SCPStatementTypeDecodeResponse> DecodeSCPStatementType(Stellar.SCPStatementTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCPStatementType request");
                return _service.DecodeSCPStatementType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCPStatementType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCPNomination method</summary>
        public async Task<Stellar.SCPNominationEncodeResponse> EncodeSCPNomination(Stellar.SCPNominationEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCPNomination request");
                return _service.EncodeSCPNomination(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCPNomination");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCPNomination method</summary>
        public async Task<Stellar.SCPNominationDecodeResponse> DecodeSCPNomination(Stellar.SCPNominationDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCPNomination request");
                return _service.DecodeSCPNomination(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCPNomination");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCPStatement method</summary>
        public async Task<Stellar.SCPStatementEncodeResponse> EncodeSCPStatement(Stellar.SCPStatementEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCPStatement request");
                return _service.EncodeSCPStatement(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCPStatement");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCPStatement method</summary>
        public async Task<Stellar.SCPStatementDecodeResponse> DecodeSCPStatement(Stellar.SCPStatementDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCPStatement request");
                return _service.DecodeSCPStatement(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCPStatement");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCPEnvelope method</summary>
        public async Task<Stellar.SCPEnvelopeEncodeResponse> EncodeSCPEnvelope(Stellar.SCPEnvelopeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCPEnvelope request");
                return _service.EncodeSCPEnvelope(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCPEnvelope");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCPEnvelope method</summary>
        public async Task<Stellar.SCPEnvelopeDecodeResponse> DecodeSCPEnvelope(Stellar.SCPEnvelopeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCPEnvelope request");
                return _service.DecodeSCPEnvelope(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCPEnvelope");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCPQuorumSet method</summary>
        public async Task<Stellar.SCPQuorumSetEncodeResponse> EncodeSCPQuorumSet(Stellar.SCPQuorumSetEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCPQuorumSet request");
                return _service.EncodeSCPQuorumSet(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCPQuorumSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCPQuorumSet method</summary>
        public async Task<Stellar.SCPQuorumSetDecodeResponse> DecodeSCPQuorumSet(Stellar.SCPQuorumSetDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCPQuorumSet request");
                return _service.DecodeSCPQuorumSet(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCPQuorumSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLiquidityPoolParameters method</summary>
        public async Task<Stellar.LiquidityPoolParametersEncodeResponse> EncodeLiquidityPoolParameters(Stellar.LiquidityPoolParametersEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLiquidityPoolParameters request");
                return _service.EncodeLiquidityPoolParameters(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLiquidityPoolParameters");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLiquidityPoolParameters method</summary>
        public async Task<Stellar.LiquidityPoolParametersDecodeResponse> DecodeLiquidityPoolParameters(Stellar.LiquidityPoolParametersDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLiquidityPoolParameters request");
                return _service.DecodeLiquidityPoolParameters(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLiquidityPoolParameters");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeMuxedAccount method</summary>
        public async Task<Stellar.MuxedAccountEncodeResponse> EncodeMuxedAccount(Stellar.MuxedAccountEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeMuxedAccount request");
                return _service.EncodeMuxedAccount(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeMuxedAccount");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeMuxedAccount method</summary>
        public async Task<Stellar.MuxedAccountDecodeResponse> DecodeMuxedAccount(Stellar.MuxedAccountDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeMuxedAccount request");
                return _service.DecodeMuxedAccount(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeMuxedAccount");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeDecoratedSignature method</summary>
        public async Task<Stellar.DecoratedSignatureEncodeResponse> EncodeDecoratedSignature(Stellar.DecoratedSignatureEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeDecoratedSignature request");
                return _service.EncodeDecoratedSignature(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeDecoratedSignature");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeDecoratedSignature method</summary>
        public async Task<Stellar.DecoratedSignatureDecodeResponse> DecodeDecoratedSignature(Stellar.DecoratedSignatureDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeDecoratedSignature request");
                return _service.DecodeDecoratedSignature(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeDecoratedSignature");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeOperationType method</summary>
        public async Task<Stellar.OperationTypeEncodeResponse> EncodeOperationType(Stellar.OperationTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeOperationType request");
                return _service.EncodeOperationType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeOperationType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeOperationType method</summary>
        public async Task<Stellar.OperationTypeDecodeResponse> DecodeOperationType(Stellar.OperationTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeOperationType request");
                return _service.DecodeOperationType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeOperationType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeCreateAccountOp method</summary>
        public async Task<Stellar.CreateAccountOpEncodeResponse> EncodeCreateAccountOp(Stellar.CreateAccountOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeCreateAccountOp request");
                return _service.EncodeCreateAccountOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeCreateAccountOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeCreateAccountOp method</summary>
        public async Task<Stellar.CreateAccountOpDecodeResponse> DecodeCreateAccountOp(Stellar.CreateAccountOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeCreateAccountOp request");
                return _service.DecodeCreateAccountOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeCreateAccountOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePaymentOp method</summary>
        public async Task<Stellar.PaymentOpEncodeResponse> EncodePaymentOp(Stellar.PaymentOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePaymentOp request");
                return _service.EncodePaymentOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePaymentOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePaymentOp method</summary>
        public async Task<Stellar.PaymentOpDecodeResponse> DecodePaymentOp(Stellar.PaymentOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePaymentOp request");
                return _service.DecodePaymentOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePaymentOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePathPaymentStrictReceiveOp method</summary>
        public async Task<Stellar.PathPaymentStrictReceiveOpEncodeResponse> EncodePathPaymentStrictReceiveOp(Stellar.PathPaymentStrictReceiveOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePathPaymentStrictReceiveOp request");
                return _service.EncodePathPaymentStrictReceiveOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePathPaymentStrictReceiveOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePathPaymentStrictReceiveOp method</summary>
        public async Task<Stellar.PathPaymentStrictReceiveOpDecodeResponse> DecodePathPaymentStrictReceiveOp(Stellar.PathPaymentStrictReceiveOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePathPaymentStrictReceiveOp request");
                return _service.DecodePathPaymentStrictReceiveOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePathPaymentStrictReceiveOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePathPaymentStrictSendOp method</summary>
        public async Task<Stellar.PathPaymentStrictSendOpEncodeResponse> EncodePathPaymentStrictSendOp(Stellar.PathPaymentStrictSendOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePathPaymentStrictSendOp request");
                return _service.EncodePathPaymentStrictSendOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePathPaymentStrictSendOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePathPaymentStrictSendOp method</summary>
        public async Task<Stellar.PathPaymentStrictSendOpDecodeResponse> DecodePathPaymentStrictSendOp(Stellar.PathPaymentStrictSendOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePathPaymentStrictSendOp request");
                return _service.DecodePathPaymentStrictSendOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePathPaymentStrictSendOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeManageSellOfferOp method</summary>
        public async Task<Stellar.ManageSellOfferOpEncodeResponse> EncodeManageSellOfferOp(Stellar.ManageSellOfferOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeManageSellOfferOp request");
                return _service.EncodeManageSellOfferOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeManageSellOfferOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeManageSellOfferOp method</summary>
        public async Task<Stellar.ManageSellOfferOpDecodeResponse> DecodeManageSellOfferOp(Stellar.ManageSellOfferOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeManageSellOfferOp request");
                return _service.DecodeManageSellOfferOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeManageSellOfferOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeManageBuyOfferOp method</summary>
        public async Task<Stellar.ManageBuyOfferOpEncodeResponse> EncodeManageBuyOfferOp(Stellar.ManageBuyOfferOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeManageBuyOfferOp request");
                return _service.EncodeManageBuyOfferOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeManageBuyOfferOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeManageBuyOfferOp method</summary>
        public async Task<Stellar.ManageBuyOfferOpDecodeResponse> DecodeManageBuyOfferOp(Stellar.ManageBuyOfferOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeManageBuyOfferOp request");
                return _service.DecodeManageBuyOfferOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeManageBuyOfferOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeCreatePassiveSellOfferOp method</summary>
        public async Task<Stellar.CreatePassiveSellOfferOpEncodeResponse> EncodeCreatePassiveSellOfferOp(Stellar.CreatePassiveSellOfferOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeCreatePassiveSellOfferOp request");
                return _service.EncodeCreatePassiveSellOfferOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeCreatePassiveSellOfferOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeCreatePassiveSellOfferOp method</summary>
        public async Task<Stellar.CreatePassiveSellOfferOpDecodeResponse> DecodeCreatePassiveSellOfferOp(Stellar.CreatePassiveSellOfferOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeCreatePassiveSellOfferOp request");
                return _service.DecodeCreatePassiveSellOfferOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeCreatePassiveSellOfferOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSetOptionsOp method</summary>
        public async Task<Stellar.SetOptionsOpEncodeResponse> EncodeSetOptionsOp(Stellar.SetOptionsOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSetOptionsOp request");
                return _service.EncodeSetOptionsOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSetOptionsOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSetOptionsOp method</summary>
        public async Task<Stellar.SetOptionsOpDecodeResponse> DecodeSetOptionsOp(Stellar.SetOptionsOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSetOptionsOp request");
                return _service.DecodeSetOptionsOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSetOptionsOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeChangeTrustAsset method</summary>
        public async Task<Stellar.ChangeTrustAssetEncodeResponse> EncodeChangeTrustAsset(Stellar.ChangeTrustAssetEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeChangeTrustAsset request");
                return _service.EncodeChangeTrustAsset(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeChangeTrustAsset");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeChangeTrustAsset method</summary>
        public async Task<Stellar.ChangeTrustAssetDecodeResponse> DecodeChangeTrustAsset(Stellar.ChangeTrustAssetDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeChangeTrustAsset request");
                return _service.DecodeChangeTrustAsset(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeChangeTrustAsset");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeChangeTrustOp method</summary>
        public async Task<Stellar.ChangeTrustOpEncodeResponse> EncodeChangeTrustOp(Stellar.ChangeTrustOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeChangeTrustOp request");
                return _service.EncodeChangeTrustOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeChangeTrustOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeChangeTrustOp method</summary>
        public async Task<Stellar.ChangeTrustOpDecodeResponse> DecodeChangeTrustOp(Stellar.ChangeTrustOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeChangeTrustOp request");
                return _service.DecodeChangeTrustOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeChangeTrustOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAllowTrustOp method</summary>
        public async Task<Stellar.AllowTrustOpEncodeResponse> EncodeAllowTrustOp(Stellar.AllowTrustOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAllowTrustOp request");
                return _service.EncodeAllowTrustOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAllowTrustOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAllowTrustOp method</summary>
        public async Task<Stellar.AllowTrustOpDecodeResponse> DecodeAllowTrustOp(Stellar.AllowTrustOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAllowTrustOp request");
                return _service.DecodeAllowTrustOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAllowTrustOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeManageDataOp method</summary>
        public async Task<Stellar.ManageDataOpEncodeResponse> EncodeManageDataOp(Stellar.ManageDataOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeManageDataOp request");
                return _service.EncodeManageDataOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeManageDataOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeManageDataOp method</summary>
        public async Task<Stellar.ManageDataOpDecodeResponse> DecodeManageDataOp(Stellar.ManageDataOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeManageDataOp request");
                return _service.DecodeManageDataOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeManageDataOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeBumpSequenceOp method</summary>
        public async Task<Stellar.BumpSequenceOpEncodeResponse> EncodeBumpSequenceOp(Stellar.BumpSequenceOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeBumpSequenceOp request");
                return _service.EncodeBumpSequenceOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeBumpSequenceOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeBumpSequenceOp method</summary>
        public async Task<Stellar.BumpSequenceOpDecodeResponse> DecodeBumpSequenceOp(Stellar.BumpSequenceOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeBumpSequenceOp request");
                return _service.DecodeBumpSequenceOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeBumpSequenceOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeCreateClaimableBalanceOp method</summary>
        public async Task<Stellar.CreateClaimableBalanceOpEncodeResponse> EncodeCreateClaimableBalanceOp(Stellar.CreateClaimableBalanceOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeCreateClaimableBalanceOp request");
                return _service.EncodeCreateClaimableBalanceOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeCreateClaimableBalanceOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeCreateClaimableBalanceOp method</summary>
        public async Task<Stellar.CreateClaimableBalanceOpDecodeResponse> DecodeCreateClaimableBalanceOp(Stellar.CreateClaimableBalanceOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeCreateClaimableBalanceOp request");
                return _service.DecodeCreateClaimableBalanceOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeCreateClaimableBalanceOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimClaimableBalanceOp method</summary>
        public async Task<Stellar.ClaimClaimableBalanceOpEncodeResponse> EncodeClaimClaimableBalanceOp(Stellar.ClaimClaimableBalanceOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimClaimableBalanceOp request");
                return _service.EncodeClaimClaimableBalanceOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimClaimableBalanceOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimClaimableBalanceOp method</summary>
        public async Task<Stellar.ClaimClaimableBalanceOpDecodeResponse> DecodeClaimClaimableBalanceOp(Stellar.ClaimClaimableBalanceOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimClaimableBalanceOp request");
                return _service.DecodeClaimClaimableBalanceOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimClaimableBalanceOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeBeginSponsoringFutureReservesOp method</summary>
        public async Task<Stellar.BeginSponsoringFutureReservesOpEncodeResponse> EncodeBeginSponsoringFutureReservesOp(Stellar.BeginSponsoringFutureReservesOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeBeginSponsoringFutureReservesOp request");
                return _service.EncodeBeginSponsoringFutureReservesOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeBeginSponsoringFutureReservesOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeBeginSponsoringFutureReservesOp method</summary>
        public async Task<Stellar.BeginSponsoringFutureReservesOpDecodeResponse> DecodeBeginSponsoringFutureReservesOp(Stellar.BeginSponsoringFutureReservesOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeBeginSponsoringFutureReservesOp request");
                return _service.DecodeBeginSponsoringFutureReservesOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeBeginSponsoringFutureReservesOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeRevokeSponsorshipType method</summary>
        public async Task<Stellar.RevokeSponsorshipTypeEncodeResponse> EncodeRevokeSponsorshipType(Stellar.RevokeSponsorshipTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeRevokeSponsorshipType request");
                return _service.EncodeRevokeSponsorshipType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeRevokeSponsorshipType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeRevokeSponsorshipType method</summary>
        public async Task<Stellar.RevokeSponsorshipTypeDecodeResponse> DecodeRevokeSponsorshipType(Stellar.RevokeSponsorshipTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeRevokeSponsorshipType request");
                return _service.DecodeRevokeSponsorshipType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeRevokeSponsorshipType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeRevokeSponsorshipOp method</summary>
        public async Task<Stellar.RevokeSponsorshipOpEncodeResponse> EncodeRevokeSponsorshipOp(Stellar.RevokeSponsorshipOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeRevokeSponsorshipOp request");
                return _service.EncodeRevokeSponsorshipOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeRevokeSponsorshipOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeRevokeSponsorshipOp method</summary>
        public async Task<Stellar.RevokeSponsorshipOpDecodeResponse> DecodeRevokeSponsorshipOp(Stellar.RevokeSponsorshipOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeRevokeSponsorshipOp request");
                return _service.DecodeRevokeSponsorshipOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeRevokeSponsorshipOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClawbackOp method</summary>
        public async Task<Stellar.ClawbackOpEncodeResponse> EncodeClawbackOp(Stellar.ClawbackOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClawbackOp request");
                return _service.EncodeClawbackOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClawbackOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClawbackOp method</summary>
        public async Task<Stellar.ClawbackOpDecodeResponse> DecodeClawbackOp(Stellar.ClawbackOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClawbackOp request");
                return _service.DecodeClawbackOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClawbackOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClawbackClaimableBalanceOp method</summary>
        public async Task<Stellar.ClawbackClaimableBalanceOpEncodeResponse> EncodeClawbackClaimableBalanceOp(Stellar.ClawbackClaimableBalanceOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClawbackClaimableBalanceOp request");
                return _service.EncodeClawbackClaimableBalanceOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClawbackClaimableBalanceOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClawbackClaimableBalanceOp method</summary>
        public async Task<Stellar.ClawbackClaimableBalanceOpDecodeResponse> DecodeClawbackClaimableBalanceOp(Stellar.ClawbackClaimableBalanceOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClawbackClaimableBalanceOp request");
                return _service.DecodeClawbackClaimableBalanceOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClawbackClaimableBalanceOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSetTrustLineFlagsOp method</summary>
        public async Task<Stellar.SetTrustLineFlagsOpEncodeResponse> EncodeSetTrustLineFlagsOp(Stellar.SetTrustLineFlagsOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSetTrustLineFlagsOp request");
                return _service.EncodeSetTrustLineFlagsOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSetTrustLineFlagsOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSetTrustLineFlagsOp method</summary>
        public async Task<Stellar.SetTrustLineFlagsOpDecodeResponse> DecodeSetTrustLineFlagsOp(Stellar.SetTrustLineFlagsOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSetTrustLineFlagsOp request");
                return _service.DecodeSetTrustLineFlagsOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSetTrustLineFlagsOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLiquidityPoolDepositOp method</summary>
        public async Task<Stellar.LiquidityPoolDepositOpEncodeResponse> EncodeLiquidityPoolDepositOp(Stellar.LiquidityPoolDepositOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLiquidityPoolDepositOp request");
                return _service.EncodeLiquidityPoolDepositOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLiquidityPoolDepositOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLiquidityPoolDepositOp method</summary>
        public async Task<Stellar.LiquidityPoolDepositOpDecodeResponse> DecodeLiquidityPoolDepositOp(Stellar.LiquidityPoolDepositOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLiquidityPoolDepositOp request");
                return _service.DecodeLiquidityPoolDepositOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLiquidityPoolDepositOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLiquidityPoolWithdrawOp method</summary>
        public async Task<Stellar.LiquidityPoolWithdrawOpEncodeResponse> EncodeLiquidityPoolWithdrawOp(Stellar.LiquidityPoolWithdrawOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLiquidityPoolWithdrawOp request");
                return _service.EncodeLiquidityPoolWithdrawOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLiquidityPoolWithdrawOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLiquidityPoolWithdrawOp method</summary>
        public async Task<Stellar.LiquidityPoolWithdrawOpDecodeResponse> DecodeLiquidityPoolWithdrawOp(Stellar.LiquidityPoolWithdrawOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLiquidityPoolWithdrawOp request");
                return _service.DecodeLiquidityPoolWithdrawOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLiquidityPoolWithdrawOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeHostFunctionType method</summary>
        public async Task<Stellar.HostFunctionTypeEncodeResponse> EncodeHostFunctionType(Stellar.HostFunctionTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeHostFunctionType request");
                return _service.EncodeHostFunctionType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeHostFunctionType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeHostFunctionType method</summary>
        public async Task<Stellar.HostFunctionTypeDecodeResponse> DecodeHostFunctionType(Stellar.HostFunctionTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeHostFunctionType request");
                return _service.DecodeHostFunctionType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeHostFunctionType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeContractIDPreimageType method</summary>
        public async Task<Stellar.ContractIDPreimageTypeEncodeResponse> EncodeContractIDPreimageType(Stellar.ContractIDPreimageTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeContractIDPreimageType request");
                return _service.EncodeContractIDPreimageType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeContractIDPreimageType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeContractIDPreimageType method</summary>
        public async Task<Stellar.ContractIDPreimageTypeDecodeResponse> DecodeContractIDPreimageType(Stellar.ContractIDPreimageTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeContractIDPreimageType request");
                return _service.DecodeContractIDPreimageType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeContractIDPreimageType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeContractIDPreimage method</summary>
        public async Task<Stellar.ContractIDPreimageEncodeResponse> EncodeContractIDPreimage(Stellar.ContractIDPreimageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeContractIDPreimage request");
                return _service.EncodeContractIDPreimage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeContractIDPreimage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeContractIDPreimage method</summary>
        public async Task<Stellar.ContractIDPreimageDecodeResponse> DecodeContractIDPreimage(Stellar.ContractIDPreimageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeContractIDPreimage request");
                return _service.DecodeContractIDPreimage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeContractIDPreimage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeCreateContractArgs method</summary>
        public async Task<Stellar.CreateContractArgsEncodeResponse> EncodeCreateContractArgs(Stellar.CreateContractArgsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeCreateContractArgs request");
                return _service.EncodeCreateContractArgs(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeCreateContractArgs");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeCreateContractArgs method</summary>
        public async Task<Stellar.CreateContractArgsDecodeResponse> DecodeCreateContractArgs(Stellar.CreateContractArgsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeCreateContractArgs request");
                return _service.DecodeCreateContractArgs(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeCreateContractArgs");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeCreateContractArgsV2 method</summary>
        public async Task<Stellar.CreateContractArgsV2EncodeResponse> EncodeCreateContractArgsV2(Stellar.CreateContractArgsV2EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeCreateContractArgsV2 request");
                return _service.EncodeCreateContractArgsV2(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeCreateContractArgsV2");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeCreateContractArgsV2 method</summary>
        public async Task<Stellar.CreateContractArgsV2DecodeResponse> DecodeCreateContractArgsV2(Stellar.CreateContractArgsV2DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeCreateContractArgsV2 request");
                return _service.DecodeCreateContractArgsV2(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeCreateContractArgsV2");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeInvokeContractArgs method</summary>
        public async Task<Stellar.InvokeContractArgsEncodeResponse> EncodeInvokeContractArgs(Stellar.InvokeContractArgsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeInvokeContractArgs request");
                return _service.EncodeInvokeContractArgs(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeInvokeContractArgs");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeInvokeContractArgs method</summary>
        public async Task<Stellar.InvokeContractArgsDecodeResponse> DecodeInvokeContractArgs(Stellar.InvokeContractArgsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeInvokeContractArgs request");
                return _service.DecodeInvokeContractArgs(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeInvokeContractArgs");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeHostFunction method</summary>
        public async Task<Stellar.HostFunctionEncodeResponse> EncodeHostFunction(Stellar.HostFunctionEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeHostFunction request");
                return _service.EncodeHostFunction(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeHostFunction");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeHostFunction method</summary>
        public async Task<Stellar.HostFunctionDecodeResponse> DecodeHostFunction(Stellar.HostFunctionDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeHostFunction request");
                return _service.DecodeHostFunction(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeHostFunction");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSorobanAuthorizedFunctionType method</summary>
        public async Task<Stellar.SorobanAuthorizedFunctionTypeEncodeResponse> EncodeSorobanAuthorizedFunctionType(Stellar.SorobanAuthorizedFunctionTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSorobanAuthorizedFunctionType request");
                return _service.EncodeSorobanAuthorizedFunctionType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSorobanAuthorizedFunctionType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSorobanAuthorizedFunctionType method</summary>
        public async Task<Stellar.SorobanAuthorizedFunctionTypeDecodeResponse> DecodeSorobanAuthorizedFunctionType(Stellar.SorobanAuthorizedFunctionTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSorobanAuthorizedFunctionType request");
                return _service.DecodeSorobanAuthorizedFunctionType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSorobanAuthorizedFunctionType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSorobanAuthorizedFunction method</summary>
        public async Task<Stellar.SorobanAuthorizedFunctionEncodeResponse> EncodeSorobanAuthorizedFunction(Stellar.SorobanAuthorizedFunctionEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSorobanAuthorizedFunction request");
                return _service.EncodeSorobanAuthorizedFunction(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSorobanAuthorizedFunction");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSorobanAuthorizedFunction method</summary>
        public async Task<Stellar.SorobanAuthorizedFunctionDecodeResponse> DecodeSorobanAuthorizedFunction(Stellar.SorobanAuthorizedFunctionDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSorobanAuthorizedFunction request");
                return _service.DecodeSorobanAuthorizedFunction(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSorobanAuthorizedFunction");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSorobanAuthorizedInvocation method</summary>
        public async Task<Stellar.SorobanAuthorizedInvocationEncodeResponse> EncodeSorobanAuthorizedInvocation(Stellar.SorobanAuthorizedInvocationEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSorobanAuthorizedInvocation request");
                return _service.EncodeSorobanAuthorizedInvocation(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSorobanAuthorizedInvocation");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSorobanAuthorizedInvocation method</summary>
        public async Task<Stellar.SorobanAuthorizedInvocationDecodeResponse> DecodeSorobanAuthorizedInvocation(Stellar.SorobanAuthorizedInvocationDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSorobanAuthorizedInvocation request");
                return _service.DecodeSorobanAuthorizedInvocation(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSorobanAuthorizedInvocation");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSorobanAddressCredentials method</summary>
        public async Task<Stellar.SorobanAddressCredentialsEncodeResponse> EncodeSorobanAddressCredentials(Stellar.SorobanAddressCredentialsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSorobanAddressCredentials request");
                return _service.EncodeSorobanAddressCredentials(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSorobanAddressCredentials");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSorobanAddressCredentials method</summary>
        public async Task<Stellar.SorobanAddressCredentialsDecodeResponse> DecodeSorobanAddressCredentials(Stellar.SorobanAddressCredentialsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSorobanAddressCredentials request");
                return _service.DecodeSorobanAddressCredentials(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSorobanAddressCredentials");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSorobanCredentialsType method</summary>
        public async Task<Stellar.SorobanCredentialsTypeEncodeResponse> EncodeSorobanCredentialsType(Stellar.SorobanCredentialsTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSorobanCredentialsType request");
                return _service.EncodeSorobanCredentialsType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSorobanCredentialsType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSorobanCredentialsType method</summary>
        public async Task<Stellar.SorobanCredentialsTypeDecodeResponse> DecodeSorobanCredentialsType(Stellar.SorobanCredentialsTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSorobanCredentialsType request");
                return _service.DecodeSorobanCredentialsType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSorobanCredentialsType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSorobanCredentials method</summary>
        public async Task<Stellar.SorobanCredentialsEncodeResponse> EncodeSorobanCredentials(Stellar.SorobanCredentialsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSorobanCredentials request");
                return _service.EncodeSorobanCredentials(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSorobanCredentials");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSorobanCredentials method</summary>
        public async Task<Stellar.SorobanCredentialsDecodeResponse> DecodeSorobanCredentials(Stellar.SorobanCredentialsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSorobanCredentials request");
                return _service.DecodeSorobanCredentials(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSorobanCredentials");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSorobanAuthorizationEntry method</summary>
        public async Task<Stellar.SorobanAuthorizationEntryEncodeResponse> EncodeSorobanAuthorizationEntry(Stellar.SorobanAuthorizationEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSorobanAuthorizationEntry request");
                return _service.EncodeSorobanAuthorizationEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSorobanAuthorizationEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSorobanAuthorizationEntry method</summary>
        public async Task<Stellar.SorobanAuthorizationEntryDecodeResponse> DecodeSorobanAuthorizationEntry(Stellar.SorobanAuthorizationEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSorobanAuthorizationEntry request");
                return _service.DecodeSorobanAuthorizationEntry(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSorobanAuthorizationEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeInvokeHostFunctionOp method</summary>
        public async Task<Stellar.InvokeHostFunctionOpEncodeResponse> EncodeInvokeHostFunctionOp(Stellar.InvokeHostFunctionOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeInvokeHostFunctionOp request");
                return _service.EncodeInvokeHostFunctionOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeInvokeHostFunctionOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeInvokeHostFunctionOp method</summary>
        public async Task<Stellar.InvokeHostFunctionOpDecodeResponse> DecodeInvokeHostFunctionOp(Stellar.InvokeHostFunctionOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeInvokeHostFunctionOp request");
                return _service.DecodeInvokeHostFunctionOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeInvokeHostFunctionOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeExtendFootprintTTLOp method</summary>
        public async Task<Stellar.ExtendFootprintTTLOpEncodeResponse> EncodeExtendFootprintTTLOp(Stellar.ExtendFootprintTTLOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeExtendFootprintTTLOp request");
                return _service.EncodeExtendFootprintTTLOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeExtendFootprintTTLOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeExtendFootprintTTLOp method</summary>
        public async Task<Stellar.ExtendFootprintTTLOpDecodeResponse> DecodeExtendFootprintTTLOp(Stellar.ExtendFootprintTTLOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeExtendFootprintTTLOp request");
                return _service.DecodeExtendFootprintTTLOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeExtendFootprintTTLOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeRestoreFootprintOp method</summary>
        public async Task<Stellar.RestoreFootprintOpEncodeResponse> EncodeRestoreFootprintOp(Stellar.RestoreFootprintOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeRestoreFootprintOp request");
                return _service.EncodeRestoreFootprintOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeRestoreFootprintOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeRestoreFootprintOp method</summary>
        public async Task<Stellar.RestoreFootprintOpDecodeResponse> DecodeRestoreFootprintOp(Stellar.RestoreFootprintOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeRestoreFootprintOp request");
                return _service.DecodeRestoreFootprintOp(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeRestoreFootprintOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeOperation method</summary>
        public async Task<Stellar.OperationEncodeResponse> EncodeOperation(Stellar.OperationEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeOperation request");
                return _service.EncodeOperation(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeOperation");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeOperation method</summary>
        public async Task<Stellar.OperationDecodeResponse> DecodeOperation(Stellar.OperationDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeOperation request");
                return _service.DecodeOperation(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeOperation");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeHashIDPreimage method</summary>
        public async Task<Stellar.HashIDPreimageEncodeResponse> EncodeHashIDPreimage(Stellar.HashIDPreimageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeHashIDPreimage request");
                return _service.EncodeHashIDPreimage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeHashIDPreimage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeHashIDPreimage method</summary>
        public async Task<Stellar.HashIDPreimageDecodeResponse> DecodeHashIDPreimage(Stellar.HashIDPreimageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeHashIDPreimage request");
                return _service.DecodeHashIDPreimage(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeHashIDPreimage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeMemoType method</summary>
        public async Task<Stellar.MemoTypeEncodeResponse> EncodeMemoType(Stellar.MemoTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeMemoType request");
                return _service.EncodeMemoType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeMemoType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeMemoType method</summary>
        public async Task<Stellar.MemoTypeDecodeResponse> DecodeMemoType(Stellar.MemoTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeMemoType request");
                return _service.DecodeMemoType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeMemoType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeMemo method</summary>
        public async Task<Stellar.MemoEncodeResponse> EncodeMemo(Stellar.MemoEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeMemo request");
                return _service.EncodeMemo(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeMemo");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeMemo method</summary>
        public async Task<Stellar.MemoDecodeResponse> DecodeMemo(Stellar.MemoDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeMemo request");
                return _service.DecodeMemo(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeMemo");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTimeBounds method</summary>
        public async Task<Stellar.TimeBoundsEncodeResponse> EncodeTimeBounds(Stellar.TimeBoundsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTimeBounds request");
                return _service.EncodeTimeBounds(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTimeBounds");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTimeBounds method</summary>
        public async Task<Stellar.TimeBoundsDecodeResponse> DecodeTimeBounds(Stellar.TimeBoundsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTimeBounds request");
                return _service.DecodeTimeBounds(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTimeBounds");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerBounds method</summary>
        public async Task<Stellar.LedgerBoundsEncodeResponse> EncodeLedgerBounds(Stellar.LedgerBoundsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerBounds request");
                return _service.EncodeLedgerBounds(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerBounds");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerBounds method</summary>
        public async Task<Stellar.LedgerBoundsDecodeResponse> DecodeLedgerBounds(Stellar.LedgerBoundsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerBounds request");
                return _service.DecodeLedgerBounds(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerBounds");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePreconditionsV2 method</summary>
        public async Task<Stellar.PreconditionsV2EncodeResponse> EncodePreconditionsV2(Stellar.PreconditionsV2EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePreconditionsV2 request");
                return _service.EncodePreconditionsV2(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePreconditionsV2");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePreconditionsV2 method</summary>
        public async Task<Stellar.PreconditionsV2DecodeResponse> DecodePreconditionsV2(Stellar.PreconditionsV2DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePreconditionsV2 request");
                return _service.DecodePreconditionsV2(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePreconditionsV2");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePreconditionType method</summary>
        public async Task<Stellar.PreconditionTypeEncodeResponse> EncodePreconditionType(Stellar.PreconditionTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePreconditionType request");
                return _service.EncodePreconditionType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePreconditionType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePreconditionType method</summary>
        public async Task<Stellar.PreconditionTypeDecodeResponse> DecodePreconditionType(Stellar.PreconditionTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePreconditionType request");
                return _service.DecodePreconditionType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePreconditionType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePreconditions method</summary>
        public async Task<Stellar.PreconditionsEncodeResponse> EncodePreconditions(Stellar.PreconditionsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePreconditions request");
                return _service.EncodePreconditions(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePreconditions");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePreconditions method</summary>
        public async Task<Stellar.PreconditionsDecodeResponse> DecodePreconditions(Stellar.PreconditionsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePreconditions request");
                return _service.DecodePreconditions(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePreconditions");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerFootprint method</summary>
        public async Task<Stellar.LedgerFootprintEncodeResponse> EncodeLedgerFootprint(Stellar.LedgerFootprintEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerFootprint request");
                return _service.EncodeLedgerFootprint(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerFootprint");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerFootprint method</summary>
        public async Task<Stellar.LedgerFootprintDecodeResponse> DecodeLedgerFootprint(Stellar.LedgerFootprintDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerFootprint request");
                return _service.DecodeLedgerFootprint(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerFootprint");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeArchivalProofType method</summary>
        public async Task<Stellar.ArchivalProofTypeEncodeResponse> EncodeArchivalProofType(Stellar.ArchivalProofTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeArchivalProofType request");
                return _service.EncodeArchivalProofType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeArchivalProofType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeArchivalProofType method</summary>
        public async Task<Stellar.ArchivalProofTypeDecodeResponse> DecodeArchivalProofType(Stellar.ArchivalProofTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeArchivalProofType request");
                return _service.DecodeArchivalProofType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeArchivalProofType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeArchivalProofNode method</summary>
        public async Task<Stellar.ArchivalProofNodeEncodeResponse> EncodeArchivalProofNode(Stellar.ArchivalProofNodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeArchivalProofNode request");
                return _service.EncodeArchivalProofNode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeArchivalProofNode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeArchivalProofNode method</summary>
        public async Task<Stellar.ArchivalProofNodeDecodeResponse> DecodeArchivalProofNode(Stellar.ArchivalProofNodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeArchivalProofNode request");
                return _service.DecodeArchivalProofNode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeArchivalProofNode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeProofLevel method</summary>
        public async Task<Stellar.ProofLevelEncodeResponse> EncodeProofLevel(Stellar.ProofLevelEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeProofLevel request");
                return _service.EncodeProofLevel(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeProofLevel");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeProofLevel method</summary>
        public async Task<Stellar.ProofLevelDecodeResponse> DecodeProofLevel(Stellar.ProofLevelDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeProofLevel request");
                return _service.DecodeProofLevel(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeProofLevel");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeNonexistenceProofBody method</summary>
        public async Task<Stellar.NonexistenceProofBodyEncodeResponse> EncodeNonexistenceProofBody(Stellar.NonexistenceProofBodyEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeNonexistenceProofBody request");
                return _service.EncodeNonexistenceProofBody(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeNonexistenceProofBody");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeNonexistenceProofBody method</summary>
        public async Task<Stellar.NonexistenceProofBodyDecodeResponse> DecodeNonexistenceProofBody(Stellar.NonexistenceProofBodyDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeNonexistenceProofBody request");
                return _service.DecodeNonexistenceProofBody(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeNonexistenceProofBody");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeExistenceProofBody method</summary>
        public async Task<Stellar.ExistenceProofBodyEncodeResponse> EncodeExistenceProofBody(Stellar.ExistenceProofBodyEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeExistenceProofBody request");
                return _service.EncodeExistenceProofBody(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeExistenceProofBody");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeExistenceProofBody method</summary>
        public async Task<Stellar.ExistenceProofBodyDecodeResponse> DecodeExistenceProofBody(Stellar.ExistenceProofBodyDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeExistenceProofBody request");
                return _service.DecodeExistenceProofBody(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeExistenceProofBody");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeArchivalProof method</summary>
        public async Task<Stellar.ArchivalProofEncodeResponse> EncodeArchivalProof(Stellar.ArchivalProofEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeArchivalProof request");
                return _service.EncodeArchivalProof(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeArchivalProof");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeArchivalProof method</summary>
        public async Task<Stellar.ArchivalProofDecodeResponse> DecodeArchivalProof(Stellar.ArchivalProofDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeArchivalProof request");
                return _service.DecodeArchivalProof(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeArchivalProof");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSorobanResources method</summary>
        public async Task<Stellar.SorobanResourcesEncodeResponse> EncodeSorobanResources(Stellar.SorobanResourcesEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSorobanResources request");
                return _service.EncodeSorobanResources(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSorobanResources");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSorobanResources method</summary>
        public async Task<Stellar.SorobanResourcesDecodeResponse> DecodeSorobanResources(Stellar.SorobanResourcesDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSorobanResources request");
                return _service.DecodeSorobanResources(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSorobanResources");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSorobanTransactionData method</summary>
        public async Task<Stellar.SorobanTransactionDataEncodeResponse> EncodeSorobanTransactionData(Stellar.SorobanTransactionDataEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSorobanTransactionData request");
                return _service.EncodeSorobanTransactionData(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSorobanTransactionData");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSorobanTransactionData method</summary>
        public async Task<Stellar.SorobanTransactionDataDecodeResponse> DecodeSorobanTransactionData(Stellar.SorobanTransactionDataDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSorobanTransactionData request");
                return _service.DecodeSorobanTransactionData(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSorobanTransactionData");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionV0 method</summary>
        public async Task<Stellar.TransactionV0EncodeResponse> EncodeTransactionV0(Stellar.TransactionV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionV0 request");
                return _service.EncodeTransactionV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionV0 method</summary>
        public async Task<Stellar.TransactionV0DecodeResponse> DecodeTransactionV0(Stellar.TransactionV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionV0 request");
                return _service.DecodeTransactionV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionV0Envelope method</summary>
        public async Task<Stellar.TransactionV0EnvelopeEncodeResponse> EncodeTransactionV0Envelope(Stellar.TransactionV0EnvelopeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionV0Envelope request");
                return _service.EncodeTransactionV0Envelope(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionV0Envelope");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionV0Envelope method</summary>
        public async Task<Stellar.TransactionV0EnvelopeDecodeResponse> DecodeTransactionV0Envelope(Stellar.TransactionV0EnvelopeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionV0Envelope request");
                return _service.DecodeTransactionV0Envelope(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionV0Envelope");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransaction method</summary>
        public async Task<Stellar.TransactionEncodeResponse> EncodeTransaction(Stellar.TransactionEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransaction request");
                return _service.EncodeTransaction(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransaction");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransaction method</summary>
        public async Task<Stellar.TransactionDecodeResponse> DecodeTransaction(Stellar.TransactionDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransaction request");
                return _service.DecodeTransaction(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransaction");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionV1Envelope method</summary>
        public async Task<Stellar.TransactionV1EnvelopeEncodeResponse> EncodeTransactionV1Envelope(Stellar.TransactionV1EnvelopeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionV1Envelope request");
                return _service.EncodeTransactionV1Envelope(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionV1Envelope");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionV1Envelope method</summary>
        public async Task<Stellar.TransactionV1EnvelopeDecodeResponse> DecodeTransactionV1Envelope(Stellar.TransactionV1EnvelopeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionV1Envelope request");
                return _service.DecodeTransactionV1Envelope(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionV1Envelope");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeFeeBumpTransaction method</summary>
        public async Task<Stellar.FeeBumpTransactionEncodeResponse> EncodeFeeBumpTransaction(Stellar.FeeBumpTransactionEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeFeeBumpTransaction request");
                return _service.EncodeFeeBumpTransaction(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeFeeBumpTransaction");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeFeeBumpTransaction method</summary>
        public async Task<Stellar.FeeBumpTransactionDecodeResponse> DecodeFeeBumpTransaction(Stellar.FeeBumpTransactionDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeFeeBumpTransaction request");
                return _service.DecodeFeeBumpTransaction(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeFeeBumpTransaction");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeFeeBumpTransactionEnvelope method</summary>
        public async Task<Stellar.FeeBumpTransactionEnvelopeEncodeResponse> EncodeFeeBumpTransactionEnvelope(Stellar.FeeBumpTransactionEnvelopeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeFeeBumpTransactionEnvelope request");
                return _service.EncodeFeeBumpTransactionEnvelope(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeFeeBumpTransactionEnvelope");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeFeeBumpTransactionEnvelope method</summary>
        public async Task<Stellar.FeeBumpTransactionEnvelopeDecodeResponse> DecodeFeeBumpTransactionEnvelope(Stellar.FeeBumpTransactionEnvelopeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeFeeBumpTransactionEnvelope request");
                return _service.DecodeFeeBumpTransactionEnvelope(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeFeeBumpTransactionEnvelope");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionEnvelope method</summary>
        public async Task<Stellar.TransactionEnvelopeEncodeResponse> EncodeTransactionEnvelope(Stellar.TransactionEnvelopeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionEnvelope request");
                return _service.EncodeTransactionEnvelope(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionEnvelope");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionEnvelope method</summary>
        public async Task<Stellar.TransactionEnvelopeDecodeResponse> DecodeTransactionEnvelope(Stellar.TransactionEnvelopeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionEnvelope request");
                return _service.DecodeTransactionEnvelope(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionEnvelope");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionSignaturePayload method</summary>
        public async Task<Stellar.TransactionSignaturePayloadEncodeResponse> EncodeTransactionSignaturePayload(Stellar.TransactionSignaturePayloadEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionSignaturePayload request");
                return _service.EncodeTransactionSignaturePayload(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionSignaturePayload");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionSignaturePayload method</summary>
        public async Task<Stellar.TransactionSignaturePayloadDecodeResponse> DecodeTransactionSignaturePayload(Stellar.TransactionSignaturePayloadDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionSignaturePayload request");
                return _service.DecodeTransactionSignaturePayload(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionSignaturePayload");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimAtomType method</summary>
        public async Task<Stellar.ClaimAtomTypeEncodeResponse> EncodeClaimAtomType(Stellar.ClaimAtomTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimAtomType request");
                return _service.EncodeClaimAtomType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimAtomType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimAtomType method</summary>
        public async Task<Stellar.ClaimAtomTypeDecodeResponse> DecodeClaimAtomType(Stellar.ClaimAtomTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimAtomType request");
                return _service.DecodeClaimAtomType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimAtomType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimOfferAtomV0 method</summary>
        public async Task<Stellar.ClaimOfferAtomV0EncodeResponse> EncodeClaimOfferAtomV0(Stellar.ClaimOfferAtomV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimOfferAtomV0 request");
                return _service.EncodeClaimOfferAtomV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimOfferAtomV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimOfferAtomV0 method</summary>
        public async Task<Stellar.ClaimOfferAtomV0DecodeResponse> DecodeClaimOfferAtomV0(Stellar.ClaimOfferAtomV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimOfferAtomV0 request");
                return _service.DecodeClaimOfferAtomV0(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimOfferAtomV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimOfferAtom method</summary>
        public async Task<Stellar.ClaimOfferAtomEncodeResponse> EncodeClaimOfferAtom(Stellar.ClaimOfferAtomEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimOfferAtom request");
                return _service.EncodeClaimOfferAtom(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimOfferAtom");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimOfferAtom method</summary>
        public async Task<Stellar.ClaimOfferAtomDecodeResponse> DecodeClaimOfferAtom(Stellar.ClaimOfferAtomDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimOfferAtom request");
                return _service.DecodeClaimOfferAtom(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimOfferAtom");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimLiquidityAtom method</summary>
        public async Task<Stellar.ClaimLiquidityAtomEncodeResponse> EncodeClaimLiquidityAtom(Stellar.ClaimLiquidityAtomEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimLiquidityAtom request");
                return _service.EncodeClaimLiquidityAtom(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimLiquidityAtom");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimLiquidityAtom method</summary>
        public async Task<Stellar.ClaimLiquidityAtomDecodeResponse> DecodeClaimLiquidityAtom(Stellar.ClaimLiquidityAtomDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimLiquidityAtom request");
                return _service.DecodeClaimLiquidityAtom(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimLiquidityAtom");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimAtom method</summary>
        public async Task<Stellar.ClaimAtomEncodeResponse> EncodeClaimAtom(Stellar.ClaimAtomEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimAtom request");
                return _service.EncodeClaimAtom(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimAtom");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimAtom method</summary>
        public async Task<Stellar.ClaimAtomDecodeResponse> DecodeClaimAtom(Stellar.ClaimAtomDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimAtom request");
                return _service.DecodeClaimAtom(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimAtom");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeCreateAccountResultCode method</summary>
        public async Task<Stellar.CreateAccountResultCodeEncodeResponse> EncodeCreateAccountResultCode(Stellar.CreateAccountResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeCreateAccountResultCode request");
                return _service.EncodeCreateAccountResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeCreateAccountResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeCreateAccountResultCode method</summary>
        public async Task<Stellar.CreateAccountResultCodeDecodeResponse> DecodeCreateAccountResultCode(Stellar.CreateAccountResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeCreateAccountResultCode request");
                return _service.DecodeCreateAccountResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeCreateAccountResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeCreateAccountResult method</summary>
        public async Task<Stellar.CreateAccountResultEncodeResponse> EncodeCreateAccountResult(Stellar.CreateAccountResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeCreateAccountResult request");
                return _service.EncodeCreateAccountResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeCreateAccountResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeCreateAccountResult method</summary>
        public async Task<Stellar.CreateAccountResultDecodeResponse> DecodeCreateAccountResult(Stellar.CreateAccountResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeCreateAccountResult request");
                return _service.DecodeCreateAccountResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeCreateAccountResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePaymentResultCode method</summary>
        public async Task<Stellar.PaymentResultCodeEncodeResponse> EncodePaymentResultCode(Stellar.PaymentResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePaymentResultCode request");
                return _service.EncodePaymentResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePaymentResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePaymentResultCode method</summary>
        public async Task<Stellar.PaymentResultCodeDecodeResponse> DecodePaymentResultCode(Stellar.PaymentResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePaymentResultCode request");
                return _service.DecodePaymentResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePaymentResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePaymentResult method</summary>
        public async Task<Stellar.PaymentResultEncodeResponse> EncodePaymentResult(Stellar.PaymentResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePaymentResult request");
                return _service.EncodePaymentResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePaymentResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePaymentResult method</summary>
        public async Task<Stellar.PaymentResultDecodeResponse> DecodePaymentResult(Stellar.PaymentResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePaymentResult request");
                return _service.DecodePaymentResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePaymentResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePathPaymentStrictReceiveResultCode method</summary>
        public async Task<Stellar.PathPaymentStrictReceiveResultCodeEncodeResponse> EncodePathPaymentStrictReceiveResultCode(Stellar.PathPaymentStrictReceiveResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePathPaymentStrictReceiveResultCode request");
                return _service.EncodePathPaymentStrictReceiveResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePathPaymentStrictReceiveResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePathPaymentStrictReceiveResultCode method</summary>
        public async Task<Stellar.PathPaymentStrictReceiveResultCodeDecodeResponse> DecodePathPaymentStrictReceiveResultCode(Stellar.PathPaymentStrictReceiveResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePathPaymentStrictReceiveResultCode request");
                return _service.DecodePathPaymentStrictReceiveResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePathPaymentStrictReceiveResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSimplePaymentResult method</summary>
        public async Task<Stellar.SimplePaymentResultEncodeResponse> EncodeSimplePaymentResult(Stellar.SimplePaymentResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSimplePaymentResult request");
                return _service.EncodeSimplePaymentResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSimplePaymentResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSimplePaymentResult method</summary>
        public async Task<Stellar.SimplePaymentResultDecodeResponse> DecodeSimplePaymentResult(Stellar.SimplePaymentResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSimplePaymentResult request");
                return _service.DecodeSimplePaymentResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSimplePaymentResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePathPaymentStrictReceiveResult method</summary>
        public async Task<Stellar.PathPaymentStrictReceiveResultEncodeResponse> EncodePathPaymentStrictReceiveResult(Stellar.PathPaymentStrictReceiveResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePathPaymentStrictReceiveResult request");
                return _service.EncodePathPaymentStrictReceiveResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePathPaymentStrictReceiveResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePathPaymentStrictReceiveResult method</summary>
        public async Task<Stellar.PathPaymentStrictReceiveResultDecodeResponse> DecodePathPaymentStrictReceiveResult(Stellar.PathPaymentStrictReceiveResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePathPaymentStrictReceiveResult request");
                return _service.DecodePathPaymentStrictReceiveResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePathPaymentStrictReceiveResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePathPaymentStrictSendResultCode method</summary>
        public async Task<Stellar.PathPaymentStrictSendResultCodeEncodeResponse> EncodePathPaymentStrictSendResultCode(Stellar.PathPaymentStrictSendResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePathPaymentStrictSendResultCode request");
                return _service.EncodePathPaymentStrictSendResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePathPaymentStrictSendResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePathPaymentStrictSendResultCode method</summary>
        public async Task<Stellar.PathPaymentStrictSendResultCodeDecodeResponse> DecodePathPaymentStrictSendResultCode(Stellar.PathPaymentStrictSendResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePathPaymentStrictSendResultCode request");
                return _service.DecodePathPaymentStrictSendResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePathPaymentStrictSendResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePathPaymentStrictSendResult method</summary>
        public async Task<Stellar.PathPaymentStrictSendResultEncodeResponse> EncodePathPaymentStrictSendResult(Stellar.PathPaymentStrictSendResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePathPaymentStrictSendResult request");
                return _service.EncodePathPaymentStrictSendResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePathPaymentStrictSendResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePathPaymentStrictSendResult method</summary>
        public async Task<Stellar.PathPaymentStrictSendResultDecodeResponse> DecodePathPaymentStrictSendResult(Stellar.PathPaymentStrictSendResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePathPaymentStrictSendResult request");
                return _service.DecodePathPaymentStrictSendResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePathPaymentStrictSendResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeManageSellOfferResultCode method</summary>
        public async Task<Stellar.ManageSellOfferResultCodeEncodeResponse> EncodeManageSellOfferResultCode(Stellar.ManageSellOfferResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeManageSellOfferResultCode request");
                return _service.EncodeManageSellOfferResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeManageSellOfferResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeManageSellOfferResultCode method</summary>
        public async Task<Stellar.ManageSellOfferResultCodeDecodeResponse> DecodeManageSellOfferResultCode(Stellar.ManageSellOfferResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeManageSellOfferResultCode request");
                return _service.DecodeManageSellOfferResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeManageSellOfferResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeManageOfferEffect method</summary>
        public async Task<Stellar.ManageOfferEffectEncodeResponse> EncodeManageOfferEffect(Stellar.ManageOfferEffectEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeManageOfferEffect request");
                return _service.EncodeManageOfferEffect(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeManageOfferEffect");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeManageOfferEffect method</summary>
        public async Task<Stellar.ManageOfferEffectDecodeResponse> DecodeManageOfferEffect(Stellar.ManageOfferEffectDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeManageOfferEffect request");
                return _service.DecodeManageOfferEffect(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeManageOfferEffect");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeManageOfferSuccessResult method</summary>
        public async Task<Stellar.ManageOfferSuccessResultEncodeResponse> EncodeManageOfferSuccessResult(Stellar.ManageOfferSuccessResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeManageOfferSuccessResult request");
                return _service.EncodeManageOfferSuccessResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeManageOfferSuccessResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeManageOfferSuccessResult method</summary>
        public async Task<Stellar.ManageOfferSuccessResultDecodeResponse> DecodeManageOfferSuccessResult(Stellar.ManageOfferSuccessResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeManageOfferSuccessResult request");
                return _service.DecodeManageOfferSuccessResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeManageOfferSuccessResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeManageSellOfferResult method</summary>
        public async Task<Stellar.ManageSellOfferResultEncodeResponse> EncodeManageSellOfferResult(Stellar.ManageSellOfferResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeManageSellOfferResult request");
                return _service.EncodeManageSellOfferResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeManageSellOfferResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeManageSellOfferResult method</summary>
        public async Task<Stellar.ManageSellOfferResultDecodeResponse> DecodeManageSellOfferResult(Stellar.ManageSellOfferResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeManageSellOfferResult request");
                return _service.DecodeManageSellOfferResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeManageSellOfferResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeManageBuyOfferResultCode method</summary>
        public async Task<Stellar.ManageBuyOfferResultCodeEncodeResponse> EncodeManageBuyOfferResultCode(Stellar.ManageBuyOfferResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeManageBuyOfferResultCode request");
                return _service.EncodeManageBuyOfferResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeManageBuyOfferResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeManageBuyOfferResultCode method</summary>
        public async Task<Stellar.ManageBuyOfferResultCodeDecodeResponse> DecodeManageBuyOfferResultCode(Stellar.ManageBuyOfferResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeManageBuyOfferResultCode request");
                return _service.DecodeManageBuyOfferResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeManageBuyOfferResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeManageBuyOfferResult method</summary>
        public async Task<Stellar.ManageBuyOfferResultEncodeResponse> EncodeManageBuyOfferResult(Stellar.ManageBuyOfferResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeManageBuyOfferResult request");
                return _service.EncodeManageBuyOfferResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeManageBuyOfferResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeManageBuyOfferResult method</summary>
        public async Task<Stellar.ManageBuyOfferResultDecodeResponse> DecodeManageBuyOfferResult(Stellar.ManageBuyOfferResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeManageBuyOfferResult request");
                return _service.DecodeManageBuyOfferResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeManageBuyOfferResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSetOptionsResultCode method</summary>
        public async Task<Stellar.SetOptionsResultCodeEncodeResponse> EncodeSetOptionsResultCode(Stellar.SetOptionsResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSetOptionsResultCode request");
                return _service.EncodeSetOptionsResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSetOptionsResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSetOptionsResultCode method</summary>
        public async Task<Stellar.SetOptionsResultCodeDecodeResponse> DecodeSetOptionsResultCode(Stellar.SetOptionsResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSetOptionsResultCode request");
                return _service.DecodeSetOptionsResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSetOptionsResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSetOptionsResult method</summary>
        public async Task<Stellar.SetOptionsResultEncodeResponse> EncodeSetOptionsResult(Stellar.SetOptionsResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSetOptionsResult request");
                return _service.EncodeSetOptionsResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSetOptionsResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSetOptionsResult method</summary>
        public async Task<Stellar.SetOptionsResultDecodeResponse> DecodeSetOptionsResult(Stellar.SetOptionsResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSetOptionsResult request");
                return _service.DecodeSetOptionsResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSetOptionsResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeChangeTrustResultCode method</summary>
        public async Task<Stellar.ChangeTrustResultCodeEncodeResponse> EncodeChangeTrustResultCode(Stellar.ChangeTrustResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeChangeTrustResultCode request");
                return _service.EncodeChangeTrustResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeChangeTrustResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeChangeTrustResultCode method</summary>
        public async Task<Stellar.ChangeTrustResultCodeDecodeResponse> DecodeChangeTrustResultCode(Stellar.ChangeTrustResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeChangeTrustResultCode request");
                return _service.DecodeChangeTrustResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeChangeTrustResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeChangeTrustResult method</summary>
        public async Task<Stellar.ChangeTrustResultEncodeResponse> EncodeChangeTrustResult(Stellar.ChangeTrustResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeChangeTrustResult request");
                return _service.EncodeChangeTrustResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeChangeTrustResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeChangeTrustResult method</summary>
        public async Task<Stellar.ChangeTrustResultDecodeResponse> DecodeChangeTrustResult(Stellar.ChangeTrustResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeChangeTrustResult request");
                return _service.DecodeChangeTrustResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeChangeTrustResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAllowTrustResultCode method</summary>
        public async Task<Stellar.AllowTrustResultCodeEncodeResponse> EncodeAllowTrustResultCode(Stellar.AllowTrustResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAllowTrustResultCode request");
                return _service.EncodeAllowTrustResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAllowTrustResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAllowTrustResultCode method</summary>
        public async Task<Stellar.AllowTrustResultCodeDecodeResponse> DecodeAllowTrustResultCode(Stellar.AllowTrustResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAllowTrustResultCode request");
                return _service.DecodeAllowTrustResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAllowTrustResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAllowTrustResult method</summary>
        public async Task<Stellar.AllowTrustResultEncodeResponse> EncodeAllowTrustResult(Stellar.AllowTrustResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAllowTrustResult request");
                return _service.EncodeAllowTrustResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAllowTrustResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAllowTrustResult method</summary>
        public async Task<Stellar.AllowTrustResultDecodeResponse> DecodeAllowTrustResult(Stellar.AllowTrustResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAllowTrustResult request");
                return _service.DecodeAllowTrustResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAllowTrustResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAccountMergeResultCode method</summary>
        public async Task<Stellar.AccountMergeResultCodeEncodeResponse> EncodeAccountMergeResultCode(Stellar.AccountMergeResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAccountMergeResultCode request");
                return _service.EncodeAccountMergeResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAccountMergeResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAccountMergeResultCode method</summary>
        public async Task<Stellar.AccountMergeResultCodeDecodeResponse> DecodeAccountMergeResultCode(Stellar.AccountMergeResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAccountMergeResultCode request");
                return _service.DecodeAccountMergeResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAccountMergeResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAccountMergeResult method</summary>
        public async Task<Stellar.AccountMergeResultEncodeResponse> EncodeAccountMergeResult(Stellar.AccountMergeResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAccountMergeResult request");
                return _service.EncodeAccountMergeResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAccountMergeResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAccountMergeResult method</summary>
        public async Task<Stellar.AccountMergeResultDecodeResponse> DecodeAccountMergeResult(Stellar.AccountMergeResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAccountMergeResult request");
                return _service.DecodeAccountMergeResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAccountMergeResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeInflationResultCode method</summary>
        public async Task<Stellar.InflationResultCodeEncodeResponse> EncodeInflationResultCode(Stellar.InflationResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeInflationResultCode request");
                return _service.EncodeInflationResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeInflationResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeInflationResultCode method</summary>
        public async Task<Stellar.InflationResultCodeDecodeResponse> DecodeInflationResultCode(Stellar.InflationResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeInflationResultCode request");
                return _service.DecodeInflationResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeInflationResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeInflationPayout method</summary>
        public async Task<Stellar.InflationPayoutEncodeResponse> EncodeInflationPayout(Stellar.InflationPayoutEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeInflationPayout request");
                return _service.EncodeInflationPayout(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeInflationPayout");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeInflationPayout method</summary>
        public async Task<Stellar.InflationPayoutDecodeResponse> DecodeInflationPayout(Stellar.InflationPayoutDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeInflationPayout request");
                return _service.DecodeInflationPayout(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeInflationPayout");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeInflationResult method</summary>
        public async Task<Stellar.InflationResultEncodeResponse> EncodeInflationResult(Stellar.InflationResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeInflationResult request");
                return _service.EncodeInflationResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeInflationResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeInflationResult method</summary>
        public async Task<Stellar.InflationResultDecodeResponse> DecodeInflationResult(Stellar.InflationResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeInflationResult request");
                return _service.DecodeInflationResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeInflationResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeManageDataResultCode method</summary>
        public async Task<Stellar.ManageDataResultCodeEncodeResponse> EncodeManageDataResultCode(Stellar.ManageDataResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeManageDataResultCode request");
                return _service.EncodeManageDataResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeManageDataResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeManageDataResultCode method</summary>
        public async Task<Stellar.ManageDataResultCodeDecodeResponse> DecodeManageDataResultCode(Stellar.ManageDataResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeManageDataResultCode request");
                return _service.DecodeManageDataResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeManageDataResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeManageDataResult method</summary>
        public async Task<Stellar.ManageDataResultEncodeResponse> EncodeManageDataResult(Stellar.ManageDataResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeManageDataResult request");
                return _service.EncodeManageDataResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeManageDataResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeManageDataResult method</summary>
        public async Task<Stellar.ManageDataResultDecodeResponse> DecodeManageDataResult(Stellar.ManageDataResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeManageDataResult request");
                return _service.DecodeManageDataResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeManageDataResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeBumpSequenceResultCode method</summary>
        public async Task<Stellar.BumpSequenceResultCodeEncodeResponse> EncodeBumpSequenceResultCode(Stellar.BumpSequenceResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeBumpSequenceResultCode request");
                return _service.EncodeBumpSequenceResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeBumpSequenceResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeBumpSequenceResultCode method</summary>
        public async Task<Stellar.BumpSequenceResultCodeDecodeResponse> DecodeBumpSequenceResultCode(Stellar.BumpSequenceResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeBumpSequenceResultCode request");
                return _service.DecodeBumpSequenceResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeBumpSequenceResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeBumpSequenceResult method</summary>
        public async Task<Stellar.BumpSequenceResultEncodeResponse> EncodeBumpSequenceResult(Stellar.BumpSequenceResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeBumpSequenceResult request");
                return _service.EncodeBumpSequenceResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeBumpSequenceResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeBumpSequenceResult method</summary>
        public async Task<Stellar.BumpSequenceResultDecodeResponse> DecodeBumpSequenceResult(Stellar.BumpSequenceResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeBumpSequenceResult request");
                return _service.DecodeBumpSequenceResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeBumpSequenceResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeCreateClaimableBalanceResultCode method</summary>
        public async Task<Stellar.CreateClaimableBalanceResultCodeEncodeResponse> EncodeCreateClaimableBalanceResultCode(Stellar.CreateClaimableBalanceResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeCreateClaimableBalanceResultCode request");
                return _service.EncodeCreateClaimableBalanceResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeCreateClaimableBalanceResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeCreateClaimableBalanceResultCode method</summary>
        public async Task<Stellar.CreateClaimableBalanceResultCodeDecodeResponse> DecodeCreateClaimableBalanceResultCode(Stellar.CreateClaimableBalanceResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeCreateClaimableBalanceResultCode request");
                return _service.DecodeCreateClaimableBalanceResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeCreateClaimableBalanceResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeCreateClaimableBalanceResult method</summary>
        public async Task<Stellar.CreateClaimableBalanceResultEncodeResponse> EncodeCreateClaimableBalanceResult(Stellar.CreateClaimableBalanceResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeCreateClaimableBalanceResult request");
                return _service.EncodeCreateClaimableBalanceResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeCreateClaimableBalanceResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeCreateClaimableBalanceResult method</summary>
        public async Task<Stellar.CreateClaimableBalanceResultDecodeResponse> DecodeCreateClaimableBalanceResult(Stellar.CreateClaimableBalanceResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeCreateClaimableBalanceResult request");
                return _service.DecodeCreateClaimableBalanceResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeCreateClaimableBalanceResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimClaimableBalanceResultCode method</summary>
        public async Task<Stellar.ClaimClaimableBalanceResultCodeEncodeResponse> EncodeClaimClaimableBalanceResultCode(Stellar.ClaimClaimableBalanceResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimClaimableBalanceResultCode request");
                return _service.EncodeClaimClaimableBalanceResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimClaimableBalanceResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimClaimableBalanceResultCode method</summary>
        public async Task<Stellar.ClaimClaimableBalanceResultCodeDecodeResponse> DecodeClaimClaimableBalanceResultCode(Stellar.ClaimClaimableBalanceResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimClaimableBalanceResultCode request");
                return _service.DecodeClaimClaimableBalanceResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimClaimableBalanceResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimClaimableBalanceResult method</summary>
        public async Task<Stellar.ClaimClaimableBalanceResultEncodeResponse> EncodeClaimClaimableBalanceResult(Stellar.ClaimClaimableBalanceResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimClaimableBalanceResult request");
                return _service.EncodeClaimClaimableBalanceResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimClaimableBalanceResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimClaimableBalanceResult method</summary>
        public async Task<Stellar.ClaimClaimableBalanceResultDecodeResponse> DecodeClaimClaimableBalanceResult(Stellar.ClaimClaimableBalanceResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimClaimableBalanceResult request");
                return _service.DecodeClaimClaimableBalanceResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimClaimableBalanceResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeBeginSponsoringFutureReservesResultCode method</summary>
        public async Task<Stellar.BeginSponsoringFutureReservesResultCodeEncodeResponse> EncodeBeginSponsoringFutureReservesResultCode(Stellar.BeginSponsoringFutureReservesResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeBeginSponsoringFutureReservesResultCode request");
                return _service.EncodeBeginSponsoringFutureReservesResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeBeginSponsoringFutureReservesResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeBeginSponsoringFutureReservesResultCode method</summary>
        public async Task<Stellar.BeginSponsoringFutureReservesResultCodeDecodeResponse> DecodeBeginSponsoringFutureReservesResultCode(Stellar.BeginSponsoringFutureReservesResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeBeginSponsoringFutureReservesResultCode request");
                return _service.DecodeBeginSponsoringFutureReservesResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeBeginSponsoringFutureReservesResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeBeginSponsoringFutureReservesResult method</summary>
        public async Task<Stellar.BeginSponsoringFutureReservesResultEncodeResponse> EncodeBeginSponsoringFutureReservesResult(Stellar.BeginSponsoringFutureReservesResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeBeginSponsoringFutureReservesResult request");
                return _service.EncodeBeginSponsoringFutureReservesResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeBeginSponsoringFutureReservesResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeBeginSponsoringFutureReservesResult method</summary>
        public async Task<Stellar.BeginSponsoringFutureReservesResultDecodeResponse> DecodeBeginSponsoringFutureReservesResult(Stellar.BeginSponsoringFutureReservesResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeBeginSponsoringFutureReservesResult request");
                return _service.DecodeBeginSponsoringFutureReservesResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeBeginSponsoringFutureReservesResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeEndSponsoringFutureReservesResultCode method</summary>
        public async Task<Stellar.EndSponsoringFutureReservesResultCodeEncodeResponse> EncodeEndSponsoringFutureReservesResultCode(Stellar.EndSponsoringFutureReservesResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeEndSponsoringFutureReservesResultCode request");
                return _service.EncodeEndSponsoringFutureReservesResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeEndSponsoringFutureReservesResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeEndSponsoringFutureReservesResultCode method</summary>
        public async Task<Stellar.EndSponsoringFutureReservesResultCodeDecodeResponse> DecodeEndSponsoringFutureReservesResultCode(Stellar.EndSponsoringFutureReservesResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeEndSponsoringFutureReservesResultCode request");
                return _service.DecodeEndSponsoringFutureReservesResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeEndSponsoringFutureReservesResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeEndSponsoringFutureReservesResult method</summary>
        public async Task<Stellar.EndSponsoringFutureReservesResultEncodeResponse> EncodeEndSponsoringFutureReservesResult(Stellar.EndSponsoringFutureReservesResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeEndSponsoringFutureReservesResult request");
                return _service.EncodeEndSponsoringFutureReservesResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeEndSponsoringFutureReservesResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeEndSponsoringFutureReservesResult method</summary>
        public async Task<Stellar.EndSponsoringFutureReservesResultDecodeResponse> DecodeEndSponsoringFutureReservesResult(Stellar.EndSponsoringFutureReservesResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeEndSponsoringFutureReservesResult request");
                return _service.DecodeEndSponsoringFutureReservesResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeEndSponsoringFutureReservesResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeRevokeSponsorshipResultCode method</summary>
        public async Task<Stellar.RevokeSponsorshipResultCodeEncodeResponse> EncodeRevokeSponsorshipResultCode(Stellar.RevokeSponsorshipResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeRevokeSponsorshipResultCode request");
                return _service.EncodeRevokeSponsorshipResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeRevokeSponsorshipResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeRevokeSponsorshipResultCode method</summary>
        public async Task<Stellar.RevokeSponsorshipResultCodeDecodeResponse> DecodeRevokeSponsorshipResultCode(Stellar.RevokeSponsorshipResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeRevokeSponsorshipResultCode request");
                return _service.DecodeRevokeSponsorshipResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeRevokeSponsorshipResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeRevokeSponsorshipResult method</summary>
        public async Task<Stellar.RevokeSponsorshipResultEncodeResponse> EncodeRevokeSponsorshipResult(Stellar.RevokeSponsorshipResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeRevokeSponsorshipResult request");
                return _service.EncodeRevokeSponsorshipResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeRevokeSponsorshipResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeRevokeSponsorshipResult method</summary>
        public async Task<Stellar.RevokeSponsorshipResultDecodeResponse> DecodeRevokeSponsorshipResult(Stellar.RevokeSponsorshipResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeRevokeSponsorshipResult request");
                return _service.DecodeRevokeSponsorshipResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeRevokeSponsorshipResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClawbackResultCode method</summary>
        public async Task<Stellar.ClawbackResultCodeEncodeResponse> EncodeClawbackResultCode(Stellar.ClawbackResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClawbackResultCode request");
                return _service.EncodeClawbackResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClawbackResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClawbackResultCode method</summary>
        public async Task<Stellar.ClawbackResultCodeDecodeResponse> DecodeClawbackResultCode(Stellar.ClawbackResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClawbackResultCode request");
                return _service.DecodeClawbackResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClawbackResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClawbackResult method</summary>
        public async Task<Stellar.ClawbackResultEncodeResponse> EncodeClawbackResult(Stellar.ClawbackResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClawbackResult request");
                return _service.EncodeClawbackResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClawbackResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClawbackResult method</summary>
        public async Task<Stellar.ClawbackResultDecodeResponse> DecodeClawbackResult(Stellar.ClawbackResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClawbackResult request");
                return _service.DecodeClawbackResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClawbackResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClawbackClaimableBalanceResultCode method</summary>
        public async Task<Stellar.ClawbackClaimableBalanceResultCodeEncodeResponse> EncodeClawbackClaimableBalanceResultCode(Stellar.ClawbackClaimableBalanceResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClawbackClaimableBalanceResultCode request");
                return _service.EncodeClawbackClaimableBalanceResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClawbackClaimableBalanceResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClawbackClaimableBalanceResultCode method</summary>
        public async Task<Stellar.ClawbackClaimableBalanceResultCodeDecodeResponse> DecodeClawbackClaimableBalanceResultCode(Stellar.ClawbackClaimableBalanceResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClawbackClaimableBalanceResultCode request");
                return _service.DecodeClawbackClaimableBalanceResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClawbackClaimableBalanceResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClawbackClaimableBalanceResult method</summary>
        public async Task<Stellar.ClawbackClaimableBalanceResultEncodeResponse> EncodeClawbackClaimableBalanceResult(Stellar.ClawbackClaimableBalanceResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClawbackClaimableBalanceResult request");
                return _service.EncodeClawbackClaimableBalanceResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClawbackClaimableBalanceResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClawbackClaimableBalanceResult method</summary>
        public async Task<Stellar.ClawbackClaimableBalanceResultDecodeResponse> DecodeClawbackClaimableBalanceResult(Stellar.ClawbackClaimableBalanceResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClawbackClaimableBalanceResult request");
                return _service.DecodeClawbackClaimableBalanceResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClawbackClaimableBalanceResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSetTrustLineFlagsResultCode method</summary>
        public async Task<Stellar.SetTrustLineFlagsResultCodeEncodeResponse> EncodeSetTrustLineFlagsResultCode(Stellar.SetTrustLineFlagsResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSetTrustLineFlagsResultCode request");
                return _service.EncodeSetTrustLineFlagsResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSetTrustLineFlagsResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSetTrustLineFlagsResultCode method</summary>
        public async Task<Stellar.SetTrustLineFlagsResultCodeDecodeResponse> DecodeSetTrustLineFlagsResultCode(Stellar.SetTrustLineFlagsResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSetTrustLineFlagsResultCode request");
                return _service.DecodeSetTrustLineFlagsResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSetTrustLineFlagsResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSetTrustLineFlagsResult method</summary>
        public async Task<Stellar.SetTrustLineFlagsResultEncodeResponse> EncodeSetTrustLineFlagsResult(Stellar.SetTrustLineFlagsResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSetTrustLineFlagsResult request");
                return _service.EncodeSetTrustLineFlagsResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSetTrustLineFlagsResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSetTrustLineFlagsResult method</summary>
        public async Task<Stellar.SetTrustLineFlagsResultDecodeResponse> DecodeSetTrustLineFlagsResult(Stellar.SetTrustLineFlagsResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSetTrustLineFlagsResult request");
                return _service.DecodeSetTrustLineFlagsResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSetTrustLineFlagsResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLiquidityPoolDepositResultCode method</summary>
        public async Task<Stellar.LiquidityPoolDepositResultCodeEncodeResponse> EncodeLiquidityPoolDepositResultCode(Stellar.LiquidityPoolDepositResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLiquidityPoolDepositResultCode request");
                return _service.EncodeLiquidityPoolDepositResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLiquidityPoolDepositResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLiquidityPoolDepositResultCode method</summary>
        public async Task<Stellar.LiquidityPoolDepositResultCodeDecodeResponse> DecodeLiquidityPoolDepositResultCode(Stellar.LiquidityPoolDepositResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLiquidityPoolDepositResultCode request");
                return _service.DecodeLiquidityPoolDepositResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLiquidityPoolDepositResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLiquidityPoolDepositResult method</summary>
        public async Task<Stellar.LiquidityPoolDepositResultEncodeResponse> EncodeLiquidityPoolDepositResult(Stellar.LiquidityPoolDepositResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLiquidityPoolDepositResult request");
                return _service.EncodeLiquidityPoolDepositResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLiquidityPoolDepositResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLiquidityPoolDepositResult method</summary>
        public async Task<Stellar.LiquidityPoolDepositResultDecodeResponse> DecodeLiquidityPoolDepositResult(Stellar.LiquidityPoolDepositResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLiquidityPoolDepositResult request");
                return _service.DecodeLiquidityPoolDepositResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLiquidityPoolDepositResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLiquidityPoolWithdrawResultCode method</summary>
        public async Task<Stellar.LiquidityPoolWithdrawResultCodeEncodeResponse> EncodeLiquidityPoolWithdrawResultCode(Stellar.LiquidityPoolWithdrawResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLiquidityPoolWithdrawResultCode request");
                return _service.EncodeLiquidityPoolWithdrawResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLiquidityPoolWithdrawResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLiquidityPoolWithdrawResultCode method</summary>
        public async Task<Stellar.LiquidityPoolWithdrawResultCodeDecodeResponse> DecodeLiquidityPoolWithdrawResultCode(Stellar.LiquidityPoolWithdrawResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLiquidityPoolWithdrawResultCode request");
                return _service.DecodeLiquidityPoolWithdrawResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLiquidityPoolWithdrawResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLiquidityPoolWithdrawResult method</summary>
        public async Task<Stellar.LiquidityPoolWithdrawResultEncodeResponse> EncodeLiquidityPoolWithdrawResult(Stellar.LiquidityPoolWithdrawResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLiquidityPoolWithdrawResult request");
                return _service.EncodeLiquidityPoolWithdrawResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLiquidityPoolWithdrawResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLiquidityPoolWithdrawResult method</summary>
        public async Task<Stellar.LiquidityPoolWithdrawResultDecodeResponse> DecodeLiquidityPoolWithdrawResult(Stellar.LiquidityPoolWithdrawResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLiquidityPoolWithdrawResult request");
                return _service.DecodeLiquidityPoolWithdrawResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLiquidityPoolWithdrawResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeInvokeHostFunctionResultCode method</summary>
        public async Task<Stellar.InvokeHostFunctionResultCodeEncodeResponse> EncodeInvokeHostFunctionResultCode(Stellar.InvokeHostFunctionResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeInvokeHostFunctionResultCode request");
                return _service.EncodeInvokeHostFunctionResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeInvokeHostFunctionResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeInvokeHostFunctionResultCode method</summary>
        public async Task<Stellar.InvokeHostFunctionResultCodeDecodeResponse> DecodeInvokeHostFunctionResultCode(Stellar.InvokeHostFunctionResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeInvokeHostFunctionResultCode request");
                return _service.DecodeInvokeHostFunctionResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeInvokeHostFunctionResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeInvokeHostFunctionResult method</summary>
        public async Task<Stellar.InvokeHostFunctionResultEncodeResponse> EncodeInvokeHostFunctionResult(Stellar.InvokeHostFunctionResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeInvokeHostFunctionResult request");
                return _service.EncodeInvokeHostFunctionResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeInvokeHostFunctionResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeInvokeHostFunctionResult method</summary>
        public async Task<Stellar.InvokeHostFunctionResultDecodeResponse> DecodeInvokeHostFunctionResult(Stellar.InvokeHostFunctionResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeInvokeHostFunctionResult request");
                return _service.DecodeInvokeHostFunctionResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeInvokeHostFunctionResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeExtendFootprintTTLResultCode method</summary>
        public async Task<Stellar.ExtendFootprintTTLResultCodeEncodeResponse> EncodeExtendFootprintTTLResultCode(Stellar.ExtendFootprintTTLResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeExtendFootprintTTLResultCode request");
                return _service.EncodeExtendFootprintTTLResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeExtendFootprintTTLResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeExtendFootprintTTLResultCode method</summary>
        public async Task<Stellar.ExtendFootprintTTLResultCodeDecodeResponse> DecodeExtendFootprintTTLResultCode(Stellar.ExtendFootprintTTLResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeExtendFootprintTTLResultCode request");
                return _service.DecodeExtendFootprintTTLResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeExtendFootprintTTLResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeExtendFootprintTTLResult method</summary>
        public async Task<Stellar.ExtendFootprintTTLResultEncodeResponse> EncodeExtendFootprintTTLResult(Stellar.ExtendFootprintTTLResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeExtendFootprintTTLResult request");
                return _service.EncodeExtendFootprintTTLResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeExtendFootprintTTLResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeExtendFootprintTTLResult method</summary>
        public async Task<Stellar.ExtendFootprintTTLResultDecodeResponse> DecodeExtendFootprintTTLResult(Stellar.ExtendFootprintTTLResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeExtendFootprintTTLResult request");
                return _service.DecodeExtendFootprintTTLResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeExtendFootprintTTLResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeRestoreFootprintResultCode method</summary>
        public async Task<Stellar.RestoreFootprintResultCodeEncodeResponse> EncodeRestoreFootprintResultCode(Stellar.RestoreFootprintResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeRestoreFootprintResultCode request");
                return _service.EncodeRestoreFootprintResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeRestoreFootprintResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeRestoreFootprintResultCode method</summary>
        public async Task<Stellar.RestoreFootprintResultCodeDecodeResponse> DecodeRestoreFootprintResultCode(Stellar.RestoreFootprintResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeRestoreFootprintResultCode request");
                return _service.DecodeRestoreFootprintResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeRestoreFootprintResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeRestoreFootprintResult method</summary>
        public async Task<Stellar.RestoreFootprintResultEncodeResponse> EncodeRestoreFootprintResult(Stellar.RestoreFootprintResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeRestoreFootprintResult request");
                return _service.EncodeRestoreFootprintResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeRestoreFootprintResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeRestoreFootprintResult method</summary>
        public async Task<Stellar.RestoreFootprintResultDecodeResponse> DecodeRestoreFootprintResult(Stellar.RestoreFootprintResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeRestoreFootprintResult request");
                return _service.DecodeRestoreFootprintResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeRestoreFootprintResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeOperationResultCode method</summary>
        public async Task<Stellar.OperationResultCodeEncodeResponse> EncodeOperationResultCode(Stellar.OperationResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeOperationResultCode request");
                return _service.EncodeOperationResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeOperationResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeOperationResultCode method</summary>
        public async Task<Stellar.OperationResultCodeDecodeResponse> DecodeOperationResultCode(Stellar.OperationResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeOperationResultCode request");
                return _service.DecodeOperationResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeOperationResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeOperationResult method</summary>
        public async Task<Stellar.OperationResultEncodeResponse> EncodeOperationResult(Stellar.OperationResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeOperationResult request");
                return _service.EncodeOperationResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeOperationResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeOperationResult method</summary>
        public async Task<Stellar.OperationResultDecodeResponse> DecodeOperationResult(Stellar.OperationResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeOperationResult request");
                return _service.DecodeOperationResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeOperationResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionResultCode method</summary>
        public async Task<Stellar.TransactionResultCodeEncodeResponse> EncodeTransactionResultCode(Stellar.TransactionResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionResultCode request");
                return _service.EncodeTransactionResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionResultCode method</summary>
        public async Task<Stellar.TransactionResultCodeDecodeResponse> DecodeTransactionResultCode(Stellar.TransactionResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionResultCode request");
                return _service.DecodeTransactionResultCode(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeInnerTransactionResult method</summary>
        public async Task<Stellar.InnerTransactionResultEncodeResponse> EncodeInnerTransactionResult(Stellar.InnerTransactionResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeInnerTransactionResult request");
                return _service.EncodeInnerTransactionResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeInnerTransactionResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeInnerTransactionResult method</summary>
        public async Task<Stellar.InnerTransactionResultDecodeResponse> DecodeInnerTransactionResult(Stellar.InnerTransactionResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeInnerTransactionResult request");
                return _service.DecodeInnerTransactionResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeInnerTransactionResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeInnerTransactionResultPair method</summary>
        public async Task<Stellar.InnerTransactionResultPairEncodeResponse> EncodeInnerTransactionResultPair(Stellar.InnerTransactionResultPairEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeInnerTransactionResultPair request");
                return _service.EncodeInnerTransactionResultPair(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeInnerTransactionResultPair");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeInnerTransactionResultPair method</summary>
        public async Task<Stellar.InnerTransactionResultPairDecodeResponse> DecodeInnerTransactionResultPair(Stellar.InnerTransactionResultPairDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeInnerTransactionResultPair request");
                return _service.DecodeInnerTransactionResultPair(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeInnerTransactionResultPair");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionResult method</summary>
        public async Task<Stellar.TransactionResultEncodeResponse> EncodeTransactionResult(Stellar.TransactionResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionResult request");
                return _service.EncodeTransactionResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionResult method</summary>
        public async Task<Stellar.TransactionResultDecodeResponse> DecodeTransactionResult(Stellar.TransactionResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionResult request");
                return _service.DecodeTransactionResult(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeHash method</summary>
        public async Task<Stellar.HashEncodeResponse> EncodeHash(Stellar.HashEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeHash request");
                return _service.EncodeHash(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeHash");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeHash method</summary>
        public async Task<Stellar.HashDecodeResponse> DecodeHash(Stellar.HashDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeHash request");
                return _service.DecodeHash(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeHash");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Encodeuint256 method</summary>
        public async Task<Stellar.uint256EncodeResponse> Encodeuint256(Stellar.uint256EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Encodeuint256 request");
                return _service.Encodeuint256(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Encodeuint256");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Decodeuint256 method</summary>
        public async Task<Stellar.uint256DecodeResponse> Decodeuint256(Stellar.uint256DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Decodeuint256 request");
                return _service.Decodeuint256(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Decodeuint256");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Encodeuint32 method</summary>
        public async Task<Stellar.uint32EncodeResponse> Encodeuint32(Stellar.uint32EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Encodeuint32 request");
                return _service.Encodeuint32(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Encodeuint32");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Decodeuint32 method</summary>
        public async Task<Stellar.uint32DecodeResponse> Decodeuint32(Stellar.uint32DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Decodeuint32 request");
                return _service.Decodeuint32(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Decodeuint32");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Encodeint32 method</summary>
        public async Task<Stellar.int32EncodeResponse> Encodeint32(Stellar.int32EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Encodeint32 request");
                return _service.Encodeint32(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Encodeint32");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Decodeint32 method</summary>
        public async Task<Stellar.int32DecodeResponse> Decodeint32(Stellar.int32DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Decodeint32 request");
                return _service.Decodeint32(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Decodeint32");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Encodeuint64 method</summary>
        public async Task<Stellar.uint64EncodeResponse> Encodeuint64(Stellar.uint64EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Encodeuint64 request");
                return _service.Encodeuint64(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Encodeuint64");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Decodeuint64 method</summary>
        public async Task<Stellar.uint64DecodeResponse> Decodeuint64(Stellar.uint64DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Decodeuint64 request");
                return _service.Decodeuint64(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Decodeuint64");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Encodeint64 method</summary>
        public async Task<Stellar.int64EncodeResponse> Encodeint64(Stellar.int64EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Encodeint64 request");
                return _service.Encodeint64(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Encodeint64");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Decodeint64 method</summary>
        public async Task<Stellar.int64DecodeResponse> Decodeint64(Stellar.int64DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Decodeint64 request");
                return _service.Decodeint64(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Decodeint64");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTimePoint method</summary>
        public async Task<Stellar.TimePointEncodeResponse> EncodeTimePoint(Stellar.TimePointEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTimePoint request");
                return _service.EncodeTimePoint(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTimePoint");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTimePoint method</summary>
        public async Task<Stellar.TimePointDecodeResponse> DecodeTimePoint(Stellar.TimePointDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTimePoint request");
                return _service.DecodeTimePoint(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTimePoint");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeDuration method</summary>
        public async Task<Stellar.DurationEncodeResponse> EncodeDuration(Stellar.DurationEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeDuration request");
                return _service.EncodeDuration(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeDuration");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeDuration method</summary>
        public async Task<Stellar.DurationDecodeResponse> DecodeDuration(Stellar.DurationDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeDuration request");
                return _service.DecodeDuration(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeDuration");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeExtensionPoint method</summary>
        public async Task<Stellar.ExtensionPointEncodeResponse> EncodeExtensionPoint(Stellar.ExtensionPointEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeExtensionPoint request");
                return _service.EncodeExtensionPoint(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeExtensionPoint");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeExtensionPoint method</summary>
        public async Task<Stellar.ExtensionPointDecodeResponse> DecodeExtensionPoint(Stellar.ExtensionPointDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeExtensionPoint request");
                return _service.DecodeExtensionPoint(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeExtensionPoint");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeCryptoKeyType method</summary>
        public async Task<Stellar.CryptoKeyTypeEncodeResponse> EncodeCryptoKeyType(Stellar.CryptoKeyTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeCryptoKeyType request");
                return _service.EncodeCryptoKeyType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeCryptoKeyType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeCryptoKeyType method</summary>
        public async Task<Stellar.CryptoKeyTypeDecodeResponse> DecodeCryptoKeyType(Stellar.CryptoKeyTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeCryptoKeyType request");
                return _service.DecodeCryptoKeyType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeCryptoKeyType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePublicKeyType method</summary>
        public async Task<Stellar.PublicKeyTypeEncodeResponse> EncodePublicKeyType(Stellar.PublicKeyTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePublicKeyType request");
                return _service.EncodePublicKeyType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePublicKeyType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePublicKeyType method</summary>
        public async Task<Stellar.PublicKeyTypeDecodeResponse> DecodePublicKeyType(Stellar.PublicKeyTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePublicKeyType request");
                return _service.DecodePublicKeyType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePublicKeyType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSignerKeyType method</summary>
        public async Task<Stellar.SignerKeyTypeEncodeResponse> EncodeSignerKeyType(Stellar.SignerKeyTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSignerKeyType request");
                return _service.EncodeSignerKeyType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSignerKeyType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSignerKeyType method</summary>
        public async Task<Stellar.SignerKeyTypeDecodeResponse> DecodeSignerKeyType(Stellar.SignerKeyTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSignerKeyType request");
                return _service.DecodeSignerKeyType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSignerKeyType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePublicKey method</summary>
        public async Task<Stellar.PublicKeyEncodeResponse> EncodePublicKey(Stellar.PublicKeyEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePublicKey request");
                return _service.EncodePublicKey(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePublicKey");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePublicKey method</summary>
        public async Task<Stellar.PublicKeyDecodeResponse> DecodePublicKey(Stellar.PublicKeyDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePublicKey request");
                return _service.DecodePublicKey(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePublicKey");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSignerKey method</summary>
        public async Task<Stellar.SignerKeyEncodeResponse> EncodeSignerKey(Stellar.SignerKeyEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSignerKey request");
                return _service.EncodeSignerKey(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSignerKey");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSignerKey method</summary>
        public async Task<Stellar.SignerKeyDecodeResponse> DecodeSignerKey(Stellar.SignerKeyDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSignerKey request");
                return _service.DecodeSignerKey(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSignerKey");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSignature method</summary>
        public async Task<Stellar.SignatureEncodeResponse> EncodeSignature(Stellar.SignatureEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSignature request");
                return _service.EncodeSignature(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSignature");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSignature method</summary>
        public async Task<Stellar.SignatureDecodeResponse> DecodeSignature(Stellar.SignatureDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSignature request");
                return _service.DecodeSignature(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSignature");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSignatureHint method</summary>
        public async Task<Stellar.SignatureHintEncodeResponse> EncodeSignatureHint(Stellar.SignatureHintEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSignatureHint request");
                return _service.EncodeSignatureHint(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSignatureHint");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSignatureHint method</summary>
        public async Task<Stellar.SignatureHintDecodeResponse> DecodeSignatureHint(Stellar.SignatureHintDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSignatureHint request");
                return _service.DecodeSignatureHint(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSignatureHint");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeNodeID method</summary>
        public async Task<Stellar.NodeIDEncodeResponse> EncodeNodeID(Stellar.NodeIDEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeNodeID request");
                return _service.EncodeNodeID(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeNodeID");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeNodeID method</summary>
        public async Task<Stellar.NodeIDDecodeResponse> DecodeNodeID(Stellar.NodeIDDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeNodeID request");
                return _service.DecodeNodeID(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeNodeID");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAccountID method</summary>
        public async Task<Stellar.AccountIDEncodeResponse> EncodeAccountID(Stellar.AccountIDEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAccountID request");
                return _service.EncodeAccountID(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAccountID");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAccountID method</summary>
        public async Task<Stellar.AccountIDDecodeResponse> DecodeAccountID(Stellar.AccountIDDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAccountID request");
                return _service.DecodeAccountID(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAccountID");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeCurve25519Secret method</summary>
        public async Task<Stellar.Curve25519SecretEncodeResponse> EncodeCurve25519Secret(Stellar.Curve25519SecretEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeCurve25519Secret request");
                return _service.EncodeCurve25519Secret(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeCurve25519Secret");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeCurve25519Secret method</summary>
        public async Task<Stellar.Curve25519SecretDecodeResponse> DecodeCurve25519Secret(Stellar.Curve25519SecretDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeCurve25519Secret request");
                return _service.DecodeCurve25519Secret(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeCurve25519Secret");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeCurve25519Public method</summary>
        public async Task<Stellar.Curve25519PublicEncodeResponse> EncodeCurve25519Public(Stellar.Curve25519PublicEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeCurve25519Public request");
                return _service.EncodeCurve25519Public(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeCurve25519Public");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeCurve25519Public method</summary>
        public async Task<Stellar.Curve25519PublicDecodeResponse> DecodeCurve25519Public(Stellar.Curve25519PublicDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeCurve25519Public request");
                return _service.DecodeCurve25519Public(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeCurve25519Public");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeHmacSha256Key method</summary>
        public async Task<Stellar.HmacSha256KeyEncodeResponse> EncodeHmacSha256Key(Stellar.HmacSha256KeyEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeHmacSha256Key request");
                return _service.EncodeHmacSha256Key(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeHmacSha256Key");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeHmacSha256Key method</summary>
        public async Task<Stellar.HmacSha256KeyDecodeResponse> DecodeHmacSha256Key(Stellar.HmacSha256KeyDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeHmacSha256Key request");
                return _service.DecodeHmacSha256Key(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeHmacSha256Key");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeHmacSha256Mac method</summary>
        public async Task<Stellar.HmacSha256MacEncodeResponse> EncodeHmacSha256Mac(Stellar.HmacSha256MacEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeHmacSha256Mac request");
                return _service.EncodeHmacSha256Mac(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeHmacSha256Mac");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeHmacSha256Mac method</summary>
        public async Task<Stellar.HmacSha256MacDecodeResponse> DecodeHmacSha256Mac(Stellar.HmacSha256MacDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeHmacSha256Mac request");
                return _service.DecodeHmacSha256Mac(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeHmacSha256Mac");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeShortHashSeed method</summary>
        public async Task<Stellar.ShortHashSeedEncodeResponse> EncodeShortHashSeed(Stellar.ShortHashSeedEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeShortHashSeed request");
                return _service.EncodeShortHashSeed(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeShortHashSeed");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeShortHashSeed method</summary>
        public async Task<Stellar.ShortHashSeedDecodeResponse> DecodeShortHashSeed(Stellar.ShortHashSeedDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeShortHashSeed request");
                return _service.DecodeShortHashSeed(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeShortHashSeed");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeBinaryFuseFilterType method</summary>
        public async Task<Stellar.BinaryFuseFilterTypeEncodeResponse> EncodeBinaryFuseFilterType(Stellar.BinaryFuseFilterTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeBinaryFuseFilterType request");
                return _service.EncodeBinaryFuseFilterType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeBinaryFuseFilterType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeBinaryFuseFilterType method</summary>
        public async Task<Stellar.BinaryFuseFilterTypeDecodeResponse> DecodeBinaryFuseFilterType(Stellar.BinaryFuseFilterTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeBinaryFuseFilterType request");
                return _service.DecodeBinaryFuseFilterType(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeBinaryFuseFilterType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSerializedBinaryFuseFilter method</summary>
        public async Task<Stellar.SerializedBinaryFuseFilterEncodeResponse> EncodeSerializedBinaryFuseFilter(Stellar.SerializedBinaryFuseFilterEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSerializedBinaryFuseFilter request");
                return _service.EncodeSerializedBinaryFuseFilter(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSerializedBinaryFuseFilter");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSerializedBinaryFuseFilter method</summary>
        public async Task<Stellar.SerializedBinaryFuseFilterDecodeResponse> DecodeSerializedBinaryFuseFilter(Stellar.SerializedBinaryFuseFilterDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSerializedBinaryFuseFilter request");
                return _service.DecodeSerializedBinaryFuseFilter(request) ;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSerializedBinaryFuseFilter");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

    }
}
