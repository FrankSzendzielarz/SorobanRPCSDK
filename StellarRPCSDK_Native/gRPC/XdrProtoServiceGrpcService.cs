// Generated code - do not modify directly
using System;
using System.Threading.Tasks;
using Grpc.Core;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using ProtoBuf;
using ProtoBuf.Meta;
using Stellar;

namespace Stellar.RPC.AOT
{
    /// <summary>gRPC service descriptor for IXdrProtoService</summary>
    public static class XdrProtoServiceGrpcDescriptor
    {
        public const string ServiceName = "Stellar.XdrProtoService";

        /// <summary>Method descriptor for EncodeConfigSettingContractExecutionLanesV0</summary>
        public static readonly Method<Stellar.ConfigSettingContractExecutionLanesV0EncodeRequest, Stellar.ConfigSettingContractExecutionLanesV0EncodeResponse> EncodeConfigSettingContractExecutionLanesV0Method =
            new Method<Stellar.ConfigSettingContractExecutionLanesV0EncodeRequest, Stellar.ConfigSettingContractExecutionLanesV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeConfigSettingContractExecutionLanesV0",
                XdrProtoServiceGrpcMarshaller.ConfigSettingContractExecutionLanesV0EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ConfigSettingContractExecutionLanesV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeConfigSettingContractExecutionLanesV0</summary>
        public static readonly Method<Stellar.ConfigSettingContractExecutionLanesV0DecodeRequest, Stellar.ConfigSettingContractExecutionLanesV0DecodeResponse> DecodeConfigSettingContractExecutionLanesV0Method =
            new Method<Stellar.ConfigSettingContractExecutionLanesV0DecodeRequest, Stellar.ConfigSettingContractExecutionLanesV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeConfigSettingContractExecutionLanesV0",
                XdrProtoServiceGrpcMarshaller.ConfigSettingContractExecutionLanesV0DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ConfigSettingContractExecutionLanesV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeConfigSettingContractComputeV0</summary>
        public static readonly Method<Stellar.ConfigSettingContractComputeV0EncodeRequest, Stellar.ConfigSettingContractComputeV0EncodeResponse> EncodeConfigSettingContractComputeV0Method =
            new Method<Stellar.ConfigSettingContractComputeV0EncodeRequest, Stellar.ConfigSettingContractComputeV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeConfigSettingContractComputeV0",
                XdrProtoServiceGrpcMarshaller.ConfigSettingContractComputeV0EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ConfigSettingContractComputeV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeConfigSettingContractComputeV0</summary>
        public static readonly Method<Stellar.ConfigSettingContractComputeV0DecodeRequest, Stellar.ConfigSettingContractComputeV0DecodeResponse> DecodeConfigSettingContractComputeV0Method =
            new Method<Stellar.ConfigSettingContractComputeV0DecodeRequest, Stellar.ConfigSettingContractComputeV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeConfigSettingContractComputeV0",
                XdrProtoServiceGrpcMarshaller.ConfigSettingContractComputeV0DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ConfigSettingContractComputeV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeConfigSettingContractLedgerCostV0</summary>
        public static readonly Method<Stellar.ConfigSettingContractLedgerCostV0EncodeRequest, Stellar.ConfigSettingContractLedgerCostV0EncodeResponse> EncodeConfigSettingContractLedgerCostV0Method =
            new Method<Stellar.ConfigSettingContractLedgerCostV0EncodeRequest, Stellar.ConfigSettingContractLedgerCostV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeConfigSettingContractLedgerCostV0",
                XdrProtoServiceGrpcMarshaller.ConfigSettingContractLedgerCostV0EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ConfigSettingContractLedgerCostV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeConfigSettingContractLedgerCostV0</summary>
        public static readonly Method<Stellar.ConfigSettingContractLedgerCostV0DecodeRequest, Stellar.ConfigSettingContractLedgerCostV0DecodeResponse> DecodeConfigSettingContractLedgerCostV0Method =
            new Method<Stellar.ConfigSettingContractLedgerCostV0DecodeRequest, Stellar.ConfigSettingContractLedgerCostV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeConfigSettingContractLedgerCostV0",
                XdrProtoServiceGrpcMarshaller.ConfigSettingContractLedgerCostV0DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ConfigSettingContractLedgerCostV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeConfigSettingContractHistoricalDataV0</summary>
        public static readonly Method<Stellar.ConfigSettingContractHistoricalDataV0EncodeRequest, Stellar.ConfigSettingContractHistoricalDataV0EncodeResponse> EncodeConfigSettingContractHistoricalDataV0Method =
            new Method<Stellar.ConfigSettingContractHistoricalDataV0EncodeRequest, Stellar.ConfigSettingContractHistoricalDataV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeConfigSettingContractHistoricalDataV0",
                XdrProtoServiceGrpcMarshaller.ConfigSettingContractHistoricalDataV0EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ConfigSettingContractHistoricalDataV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeConfigSettingContractHistoricalDataV0</summary>
        public static readonly Method<Stellar.ConfigSettingContractHistoricalDataV0DecodeRequest, Stellar.ConfigSettingContractHistoricalDataV0DecodeResponse> DecodeConfigSettingContractHistoricalDataV0Method =
            new Method<Stellar.ConfigSettingContractHistoricalDataV0DecodeRequest, Stellar.ConfigSettingContractHistoricalDataV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeConfigSettingContractHistoricalDataV0",
                XdrProtoServiceGrpcMarshaller.ConfigSettingContractHistoricalDataV0DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ConfigSettingContractHistoricalDataV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeConfigSettingContractEventsV0</summary>
        public static readonly Method<Stellar.ConfigSettingContractEventsV0EncodeRequest, Stellar.ConfigSettingContractEventsV0EncodeResponse> EncodeConfigSettingContractEventsV0Method =
            new Method<Stellar.ConfigSettingContractEventsV0EncodeRequest, Stellar.ConfigSettingContractEventsV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeConfigSettingContractEventsV0",
                XdrProtoServiceGrpcMarshaller.ConfigSettingContractEventsV0EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ConfigSettingContractEventsV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeConfigSettingContractEventsV0</summary>
        public static readonly Method<Stellar.ConfigSettingContractEventsV0DecodeRequest, Stellar.ConfigSettingContractEventsV0DecodeResponse> DecodeConfigSettingContractEventsV0Method =
            new Method<Stellar.ConfigSettingContractEventsV0DecodeRequest, Stellar.ConfigSettingContractEventsV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeConfigSettingContractEventsV0",
                XdrProtoServiceGrpcMarshaller.ConfigSettingContractEventsV0DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ConfigSettingContractEventsV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeConfigSettingContractBandwidthV0</summary>
        public static readonly Method<Stellar.ConfigSettingContractBandwidthV0EncodeRequest, Stellar.ConfigSettingContractBandwidthV0EncodeResponse> EncodeConfigSettingContractBandwidthV0Method =
            new Method<Stellar.ConfigSettingContractBandwidthV0EncodeRequest, Stellar.ConfigSettingContractBandwidthV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeConfigSettingContractBandwidthV0",
                XdrProtoServiceGrpcMarshaller.ConfigSettingContractBandwidthV0EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ConfigSettingContractBandwidthV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeConfigSettingContractBandwidthV0</summary>
        public static readonly Method<Stellar.ConfigSettingContractBandwidthV0DecodeRequest, Stellar.ConfigSettingContractBandwidthV0DecodeResponse> DecodeConfigSettingContractBandwidthV0Method =
            new Method<Stellar.ConfigSettingContractBandwidthV0DecodeRequest, Stellar.ConfigSettingContractBandwidthV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeConfigSettingContractBandwidthV0",
                XdrProtoServiceGrpcMarshaller.ConfigSettingContractBandwidthV0DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ConfigSettingContractBandwidthV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeContractCostType</summary>
        public static readonly Method<Stellar.ContractCostTypeEncodeRequest, Stellar.ContractCostTypeEncodeResponse> EncodeContractCostTypeMethod =
            new Method<Stellar.ContractCostTypeEncodeRequest, Stellar.ContractCostTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeContractCostType",
                XdrProtoServiceGrpcMarshaller.ContractCostTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ContractCostTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeContractCostType</summary>
        public static readonly Method<Stellar.ContractCostTypeDecodeRequest, Stellar.ContractCostTypeDecodeResponse> DecodeContractCostTypeMethod =
            new Method<Stellar.ContractCostTypeDecodeRequest, Stellar.ContractCostTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeContractCostType",
                XdrProtoServiceGrpcMarshaller.ContractCostTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ContractCostTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeContractCostParamEntry</summary>
        public static readonly Method<Stellar.ContractCostParamEntryEncodeRequest, Stellar.ContractCostParamEntryEncodeResponse> EncodeContractCostParamEntryMethod =
            new Method<Stellar.ContractCostParamEntryEncodeRequest, Stellar.ContractCostParamEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeContractCostParamEntry",
                XdrProtoServiceGrpcMarshaller.ContractCostParamEntryEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ContractCostParamEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeContractCostParamEntry</summary>
        public static readonly Method<Stellar.ContractCostParamEntryDecodeRequest, Stellar.ContractCostParamEntryDecodeResponse> DecodeContractCostParamEntryMethod =
            new Method<Stellar.ContractCostParamEntryDecodeRequest, Stellar.ContractCostParamEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeContractCostParamEntry",
                XdrProtoServiceGrpcMarshaller.ContractCostParamEntryDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ContractCostParamEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeStateArchivalSettings</summary>
        public static readonly Method<Stellar.StateArchivalSettingsEncodeRequest, Stellar.StateArchivalSettingsEncodeResponse> EncodeStateArchivalSettingsMethod =
            new Method<Stellar.StateArchivalSettingsEncodeRequest, Stellar.StateArchivalSettingsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeStateArchivalSettings",
                XdrProtoServiceGrpcMarshaller.StateArchivalSettingsEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.StateArchivalSettingsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeStateArchivalSettings</summary>
        public static readonly Method<Stellar.StateArchivalSettingsDecodeRequest, Stellar.StateArchivalSettingsDecodeResponse> DecodeStateArchivalSettingsMethod =
            new Method<Stellar.StateArchivalSettingsDecodeRequest, Stellar.StateArchivalSettingsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeStateArchivalSettings",
                XdrProtoServiceGrpcMarshaller.StateArchivalSettingsDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.StateArchivalSettingsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeEvictionIterator</summary>
        public static readonly Method<Stellar.EvictionIteratorEncodeRequest, Stellar.EvictionIteratorEncodeResponse> EncodeEvictionIteratorMethod =
            new Method<Stellar.EvictionIteratorEncodeRequest, Stellar.EvictionIteratorEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeEvictionIterator",
                XdrProtoServiceGrpcMarshaller.EvictionIteratorEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.EvictionIteratorEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeEvictionIterator</summary>
        public static readonly Method<Stellar.EvictionIteratorDecodeRequest, Stellar.EvictionIteratorDecodeResponse> DecodeEvictionIteratorMethod =
            new Method<Stellar.EvictionIteratorDecodeRequest, Stellar.EvictionIteratorDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeEvictionIterator",
                XdrProtoServiceGrpcMarshaller.EvictionIteratorDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.EvictionIteratorDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeContractCostParams</summary>
        public static readonly Method<Stellar.ContractCostParamsEncodeRequest, Stellar.ContractCostParamsEncodeResponse> EncodeContractCostParamsMethod =
            new Method<Stellar.ContractCostParamsEncodeRequest, Stellar.ContractCostParamsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeContractCostParams",
                XdrProtoServiceGrpcMarshaller.ContractCostParamsEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ContractCostParamsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeContractCostParams</summary>
        public static readonly Method<Stellar.ContractCostParamsDecodeRequest, Stellar.ContractCostParamsDecodeResponse> DecodeContractCostParamsMethod =
            new Method<Stellar.ContractCostParamsDecodeRequest, Stellar.ContractCostParamsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeContractCostParams",
                XdrProtoServiceGrpcMarshaller.ContractCostParamsDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ContractCostParamsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeConfigSettingID</summary>
        public static readonly Method<Stellar.ConfigSettingIDEncodeRequest, Stellar.ConfigSettingIDEncodeResponse> EncodeConfigSettingIDMethod =
            new Method<Stellar.ConfigSettingIDEncodeRequest, Stellar.ConfigSettingIDEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeConfigSettingID",
                XdrProtoServiceGrpcMarshaller.ConfigSettingIDEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ConfigSettingIDEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeConfigSettingID</summary>
        public static readonly Method<Stellar.ConfigSettingIDDecodeRequest, Stellar.ConfigSettingIDDecodeResponse> DecodeConfigSettingIDMethod =
            new Method<Stellar.ConfigSettingIDDecodeRequest, Stellar.ConfigSettingIDDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeConfigSettingID",
                XdrProtoServiceGrpcMarshaller.ConfigSettingIDDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ConfigSettingIDDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeConfigSettingEntry</summary>
        public static readonly Method<Stellar.ConfigSettingEntryEncodeRequest, Stellar.ConfigSettingEntryEncodeResponse> EncodeConfigSettingEntryMethod =
            new Method<Stellar.ConfigSettingEntryEncodeRequest, Stellar.ConfigSettingEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeConfigSettingEntry",
                XdrProtoServiceGrpcMarshaller.ConfigSettingEntryEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ConfigSettingEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeConfigSettingEntry</summary>
        public static readonly Method<Stellar.ConfigSettingEntryDecodeRequest, Stellar.ConfigSettingEntryDecodeResponse> DecodeConfigSettingEntryMethod =
            new Method<Stellar.ConfigSettingEntryDecodeRequest, Stellar.ConfigSettingEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeConfigSettingEntry",
                XdrProtoServiceGrpcMarshaller.ConfigSettingEntryDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ConfigSettingEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCEnvMetaKind</summary>
        public static readonly Method<Stellar.SCEnvMetaKindEncodeRequest, Stellar.SCEnvMetaKindEncodeResponse> EncodeSCEnvMetaKindMethod =
            new Method<Stellar.SCEnvMetaKindEncodeRequest, Stellar.SCEnvMetaKindEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCEnvMetaKind",
                XdrProtoServiceGrpcMarshaller.SCEnvMetaKindEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCEnvMetaKindEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCEnvMetaKind</summary>
        public static readonly Method<Stellar.SCEnvMetaKindDecodeRequest, Stellar.SCEnvMetaKindDecodeResponse> DecodeSCEnvMetaKindMethod =
            new Method<Stellar.SCEnvMetaKindDecodeRequest, Stellar.SCEnvMetaKindDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCEnvMetaKind",
                XdrProtoServiceGrpcMarshaller.SCEnvMetaKindDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCEnvMetaKindDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCEnvMetaEntry</summary>
        public static readonly Method<Stellar.SCEnvMetaEntryEncodeRequest, Stellar.SCEnvMetaEntryEncodeResponse> EncodeSCEnvMetaEntryMethod =
            new Method<Stellar.SCEnvMetaEntryEncodeRequest, Stellar.SCEnvMetaEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCEnvMetaEntry",
                XdrProtoServiceGrpcMarshaller.SCEnvMetaEntryEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCEnvMetaEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCEnvMetaEntry</summary>
        public static readonly Method<Stellar.SCEnvMetaEntryDecodeRequest, Stellar.SCEnvMetaEntryDecodeResponse> DecodeSCEnvMetaEntryMethod =
            new Method<Stellar.SCEnvMetaEntryDecodeRequest, Stellar.SCEnvMetaEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCEnvMetaEntry",
                XdrProtoServiceGrpcMarshaller.SCEnvMetaEntryDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCEnvMetaEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCMetaV0</summary>
        public static readonly Method<Stellar.SCMetaV0EncodeRequest, Stellar.SCMetaV0EncodeResponse> EncodeSCMetaV0Method =
            new Method<Stellar.SCMetaV0EncodeRequest, Stellar.SCMetaV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCMetaV0",
                XdrProtoServiceGrpcMarshaller.SCMetaV0EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCMetaV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCMetaV0</summary>
        public static readonly Method<Stellar.SCMetaV0DecodeRequest, Stellar.SCMetaV0DecodeResponse> DecodeSCMetaV0Method =
            new Method<Stellar.SCMetaV0DecodeRequest, Stellar.SCMetaV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCMetaV0",
                XdrProtoServiceGrpcMarshaller.SCMetaV0DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCMetaV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCMetaKind</summary>
        public static readonly Method<Stellar.SCMetaKindEncodeRequest, Stellar.SCMetaKindEncodeResponse> EncodeSCMetaKindMethod =
            new Method<Stellar.SCMetaKindEncodeRequest, Stellar.SCMetaKindEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCMetaKind",
                XdrProtoServiceGrpcMarshaller.SCMetaKindEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCMetaKindEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCMetaKind</summary>
        public static readonly Method<Stellar.SCMetaKindDecodeRequest, Stellar.SCMetaKindDecodeResponse> DecodeSCMetaKindMethod =
            new Method<Stellar.SCMetaKindDecodeRequest, Stellar.SCMetaKindDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCMetaKind",
                XdrProtoServiceGrpcMarshaller.SCMetaKindDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCMetaKindDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCMetaEntry</summary>
        public static readonly Method<Stellar.SCMetaEntryEncodeRequest, Stellar.SCMetaEntryEncodeResponse> EncodeSCMetaEntryMethod =
            new Method<Stellar.SCMetaEntryEncodeRequest, Stellar.SCMetaEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCMetaEntry",
                XdrProtoServiceGrpcMarshaller.SCMetaEntryEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCMetaEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCMetaEntry</summary>
        public static readonly Method<Stellar.SCMetaEntryDecodeRequest, Stellar.SCMetaEntryDecodeResponse> DecodeSCMetaEntryMethod =
            new Method<Stellar.SCMetaEntryDecodeRequest, Stellar.SCMetaEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCMetaEntry",
                XdrProtoServiceGrpcMarshaller.SCMetaEntryDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCMetaEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecType</summary>
        public static readonly Method<Stellar.SCSpecTypeEncodeRequest, Stellar.SCSpecTypeEncodeResponse> EncodeSCSpecTypeMethod =
            new Method<Stellar.SCSpecTypeEncodeRequest, Stellar.SCSpecTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecType",
                XdrProtoServiceGrpcMarshaller.SCSpecTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecType</summary>
        public static readonly Method<Stellar.SCSpecTypeDecodeRequest, Stellar.SCSpecTypeDecodeResponse> DecodeSCSpecTypeMethod =
            new Method<Stellar.SCSpecTypeDecodeRequest, Stellar.SCSpecTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecType",
                XdrProtoServiceGrpcMarshaller.SCSpecTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecTypeOption</summary>
        public static readonly Method<Stellar.SCSpecTypeOptionEncodeRequest, Stellar.SCSpecTypeOptionEncodeResponse> EncodeSCSpecTypeOptionMethod =
            new Method<Stellar.SCSpecTypeOptionEncodeRequest, Stellar.SCSpecTypeOptionEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecTypeOption",
                XdrProtoServiceGrpcMarshaller.SCSpecTypeOptionEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecTypeOptionEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecTypeOption</summary>
        public static readonly Method<Stellar.SCSpecTypeOptionDecodeRequest, Stellar.SCSpecTypeOptionDecodeResponse> DecodeSCSpecTypeOptionMethod =
            new Method<Stellar.SCSpecTypeOptionDecodeRequest, Stellar.SCSpecTypeOptionDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecTypeOption",
                XdrProtoServiceGrpcMarshaller.SCSpecTypeOptionDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecTypeOptionDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecTypeResult</summary>
        public static readonly Method<Stellar.SCSpecTypeResultEncodeRequest, Stellar.SCSpecTypeResultEncodeResponse> EncodeSCSpecTypeResultMethod =
            new Method<Stellar.SCSpecTypeResultEncodeRequest, Stellar.SCSpecTypeResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecTypeResult",
                XdrProtoServiceGrpcMarshaller.SCSpecTypeResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecTypeResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecTypeResult</summary>
        public static readonly Method<Stellar.SCSpecTypeResultDecodeRequest, Stellar.SCSpecTypeResultDecodeResponse> DecodeSCSpecTypeResultMethod =
            new Method<Stellar.SCSpecTypeResultDecodeRequest, Stellar.SCSpecTypeResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecTypeResult",
                XdrProtoServiceGrpcMarshaller.SCSpecTypeResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecTypeResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecTypeVec</summary>
        public static readonly Method<Stellar.SCSpecTypeVecEncodeRequest, Stellar.SCSpecTypeVecEncodeResponse> EncodeSCSpecTypeVecMethod =
            new Method<Stellar.SCSpecTypeVecEncodeRequest, Stellar.SCSpecTypeVecEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecTypeVec",
                XdrProtoServiceGrpcMarshaller.SCSpecTypeVecEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecTypeVecEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecTypeVec</summary>
        public static readonly Method<Stellar.SCSpecTypeVecDecodeRequest, Stellar.SCSpecTypeVecDecodeResponse> DecodeSCSpecTypeVecMethod =
            new Method<Stellar.SCSpecTypeVecDecodeRequest, Stellar.SCSpecTypeVecDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecTypeVec",
                XdrProtoServiceGrpcMarshaller.SCSpecTypeVecDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecTypeVecDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecTypeMap</summary>
        public static readonly Method<Stellar.SCSpecTypeMapEncodeRequest, Stellar.SCSpecTypeMapEncodeResponse> EncodeSCSpecTypeMapMethod =
            new Method<Stellar.SCSpecTypeMapEncodeRequest, Stellar.SCSpecTypeMapEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecTypeMap",
                XdrProtoServiceGrpcMarshaller.SCSpecTypeMapEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecTypeMapEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecTypeMap</summary>
        public static readonly Method<Stellar.SCSpecTypeMapDecodeRequest, Stellar.SCSpecTypeMapDecodeResponse> DecodeSCSpecTypeMapMethod =
            new Method<Stellar.SCSpecTypeMapDecodeRequest, Stellar.SCSpecTypeMapDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecTypeMap",
                XdrProtoServiceGrpcMarshaller.SCSpecTypeMapDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecTypeMapDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecTypeTuple</summary>
        public static readonly Method<Stellar.SCSpecTypeTupleEncodeRequest, Stellar.SCSpecTypeTupleEncodeResponse> EncodeSCSpecTypeTupleMethod =
            new Method<Stellar.SCSpecTypeTupleEncodeRequest, Stellar.SCSpecTypeTupleEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecTypeTuple",
                XdrProtoServiceGrpcMarshaller.SCSpecTypeTupleEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecTypeTupleEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecTypeTuple</summary>
        public static readonly Method<Stellar.SCSpecTypeTupleDecodeRequest, Stellar.SCSpecTypeTupleDecodeResponse> DecodeSCSpecTypeTupleMethod =
            new Method<Stellar.SCSpecTypeTupleDecodeRequest, Stellar.SCSpecTypeTupleDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecTypeTuple",
                XdrProtoServiceGrpcMarshaller.SCSpecTypeTupleDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecTypeTupleDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecTypeBytesN</summary>
        public static readonly Method<Stellar.SCSpecTypeBytesNEncodeRequest, Stellar.SCSpecTypeBytesNEncodeResponse> EncodeSCSpecTypeBytesNMethod =
            new Method<Stellar.SCSpecTypeBytesNEncodeRequest, Stellar.SCSpecTypeBytesNEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecTypeBytesN",
                XdrProtoServiceGrpcMarshaller.SCSpecTypeBytesNEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecTypeBytesNEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecTypeBytesN</summary>
        public static readonly Method<Stellar.SCSpecTypeBytesNDecodeRequest, Stellar.SCSpecTypeBytesNDecodeResponse> DecodeSCSpecTypeBytesNMethod =
            new Method<Stellar.SCSpecTypeBytesNDecodeRequest, Stellar.SCSpecTypeBytesNDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecTypeBytesN",
                XdrProtoServiceGrpcMarshaller.SCSpecTypeBytesNDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecTypeBytesNDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecTypeUDT</summary>
        public static readonly Method<Stellar.SCSpecTypeUDTEncodeRequest, Stellar.SCSpecTypeUDTEncodeResponse> EncodeSCSpecTypeUDTMethod =
            new Method<Stellar.SCSpecTypeUDTEncodeRequest, Stellar.SCSpecTypeUDTEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecTypeUDT",
                XdrProtoServiceGrpcMarshaller.SCSpecTypeUDTEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecTypeUDTEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecTypeUDT</summary>
        public static readonly Method<Stellar.SCSpecTypeUDTDecodeRequest, Stellar.SCSpecTypeUDTDecodeResponse> DecodeSCSpecTypeUDTMethod =
            new Method<Stellar.SCSpecTypeUDTDecodeRequest, Stellar.SCSpecTypeUDTDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecTypeUDT",
                XdrProtoServiceGrpcMarshaller.SCSpecTypeUDTDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecTypeUDTDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecTypeDef</summary>
        public static readonly Method<Stellar.SCSpecTypeDefEncodeRequest, Stellar.SCSpecTypeDefEncodeResponse> EncodeSCSpecTypeDefMethod =
            new Method<Stellar.SCSpecTypeDefEncodeRequest, Stellar.SCSpecTypeDefEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecTypeDef",
                XdrProtoServiceGrpcMarshaller.SCSpecTypeDefEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecTypeDefEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecTypeDef</summary>
        public static readonly Method<Stellar.SCSpecTypeDefDecodeRequest, Stellar.SCSpecTypeDefDecodeResponse> DecodeSCSpecTypeDefMethod =
            new Method<Stellar.SCSpecTypeDefDecodeRequest, Stellar.SCSpecTypeDefDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecTypeDef",
                XdrProtoServiceGrpcMarshaller.SCSpecTypeDefDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecTypeDefDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecUDTStructFieldV0</summary>
        public static readonly Method<Stellar.SCSpecUDTStructFieldV0EncodeRequest, Stellar.SCSpecUDTStructFieldV0EncodeResponse> EncodeSCSpecUDTStructFieldV0Method =
            new Method<Stellar.SCSpecUDTStructFieldV0EncodeRequest, Stellar.SCSpecUDTStructFieldV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecUDTStructFieldV0",
                XdrProtoServiceGrpcMarshaller.SCSpecUDTStructFieldV0EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecUDTStructFieldV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecUDTStructFieldV0</summary>
        public static readonly Method<Stellar.SCSpecUDTStructFieldV0DecodeRequest, Stellar.SCSpecUDTStructFieldV0DecodeResponse> DecodeSCSpecUDTStructFieldV0Method =
            new Method<Stellar.SCSpecUDTStructFieldV0DecodeRequest, Stellar.SCSpecUDTStructFieldV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecUDTStructFieldV0",
                XdrProtoServiceGrpcMarshaller.SCSpecUDTStructFieldV0DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecUDTStructFieldV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecUDTStructV0</summary>
        public static readonly Method<Stellar.SCSpecUDTStructV0EncodeRequest, Stellar.SCSpecUDTStructV0EncodeResponse> EncodeSCSpecUDTStructV0Method =
            new Method<Stellar.SCSpecUDTStructV0EncodeRequest, Stellar.SCSpecUDTStructV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecUDTStructV0",
                XdrProtoServiceGrpcMarshaller.SCSpecUDTStructV0EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecUDTStructV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecUDTStructV0</summary>
        public static readonly Method<Stellar.SCSpecUDTStructV0DecodeRequest, Stellar.SCSpecUDTStructV0DecodeResponse> DecodeSCSpecUDTStructV0Method =
            new Method<Stellar.SCSpecUDTStructV0DecodeRequest, Stellar.SCSpecUDTStructV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecUDTStructV0",
                XdrProtoServiceGrpcMarshaller.SCSpecUDTStructV0DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecUDTStructV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecUDTUnionCaseVoidV0</summary>
        public static readonly Method<Stellar.SCSpecUDTUnionCaseVoidV0EncodeRequest, Stellar.SCSpecUDTUnionCaseVoidV0EncodeResponse> EncodeSCSpecUDTUnionCaseVoidV0Method =
            new Method<Stellar.SCSpecUDTUnionCaseVoidV0EncodeRequest, Stellar.SCSpecUDTUnionCaseVoidV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecUDTUnionCaseVoidV0",
                XdrProtoServiceGrpcMarshaller.SCSpecUDTUnionCaseVoidV0EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecUDTUnionCaseVoidV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecUDTUnionCaseVoidV0</summary>
        public static readonly Method<Stellar.SCSpecUDTUnionCaseVoidV0DecodeRequest, Stellar.SCSpecUDTUnionCaseVoidV0DecodeResponse> DecodeSCSpecUDTUnionCaseVoidV0Method =
            new Method<Stellar.SCSpecUDTUnionCaseVoidV0DecodeRequest, Stellar.SCSpecUDTUnionCaseVoidV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecUDTUnionCaseVoidV0",
                XdrProtoServiceGrpcMarshaller.SCSpecUDTUnionCaseVoidV0DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecUDTUnionCaseVoidV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecUDTUnionCaseTupleV0</summary>
        public static readonly Method<Stellar.SCSpecUDTUnionCaseTupleV0EncodeRequest, Stellar.SCSpecUDTUnionCaseTupleV0EncodeResponse> EncodeSCSpecUDTUnionCaseTupleV0Method =
            new Method<Stellar.SCSpecUDTUnionCaseTupleV0EncodeRequest, Stellar.SCSpecUDTUnionCaseTupleV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecUDTUnionCaseTupleV0",
                XdrProtoServiceGrpcMarshaller.SCSpecUDTUnionCaseTupleV0EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecUDTUnionCaseTupleV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecUDTUnionCaseTupleV0</summary>
        public static readonly Method<Stellar.SCSpecUDTUnionCaseTupleV0DecodeRequest, Stellar.SCSpecUDTUnionCaseTupleV0DecodeResponse> DecodeSCSpecUDTUnionCaseTupleV0Method =
            new Method<Stellar.SCSpecUDTUnionCaseTupleV0DecodeRequest, Stellar.SCSpecUDTUnionCaseTupleV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecUDTUnionCaseTupleV0",
                XdrProtoServiceGrpcMarshaller.SCSpecUDTUnionCaseTupleV0DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecUDTUnionCaseTupleV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecUDTUnionCaseV0Kind</summary>
        public static readonly Method<Stellar.SCSpecUDTUnionCaseV0KindEncodeRequest, Stellar.SCSpecUDTUnionCaseV0KindEncodeResponse> EncodeSCSpecUDTUnionCaseV0KindMethod =
            new Method<Stellar.SCSpecUDTUnionCaseV0KindEncodeRequest, Stellar.SCSpecUDTUnionCaseV0KindEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecUDTUnionCaseV0Kind",
                XdrProtoServiceGrpcMarshaller.SCSpecUDTUnionCaseV0KindEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecUDTUnionCaseV0KindEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecUDTUnionCaseV0Kind</summary>
        public static readonly Method<Stellar.SCSpecUDTUnionCaseV0KindDecodeRequest, Stellar.SCSpecUDTUnionCaseV0KindDecodeResponse> DecodeSCSpecUDTUnionCaseV0KindMethod =
            new Method<Stellar.SCSpecUDTUnionCaseV0KindDecodeRequest, Stellar.SCSpecUDTUnionCaseV0KindDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecUDTUnionCaseV0Kind",
                XdrProtoServiceGrpcMarshaller.SCSpecUDTUnionCaseV0KindDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecUDTUnionCaseV0KindDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecUDTUnionCaseV0</summary>
        public static readonly Method<Stellar.SCSpecUDTUnionCaseV0EncodeRequest, Stellar.SCSpecUDTUnionCaseV0EncodeResponse> EncodeSCSpecUDTUnionCaseV0Method =
            new Method<Stellar.SCSpecUDTUnionCaseV0EncodeRequest, Stellar.SCSpecUDTUnionCaseV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecUDTUnionCaseV0",
                XdrProtoServiceGrpcMarshaller.SCSpecUDTUnionCaseV0EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecUDTUnionCaseV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecUDTUnionCaseV0</summary>
        public static readonly Method<Stellar.SCSpecUDTUnionCaseV0DecodeRequest, Stellar.SCSpecUDTUnionCaseV0DecodeResponse> DecodeSCSpecUDTUnionCaseV0Method =
            new Method<Stellar.SCSpecUDTUnionCaseV0DecodeRequest, Stellar.SCSpecUDTUnionCaseV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecUDTUnionCaseV0",
                XdrProtoServiceGrpcMarshaller.SCSpecUDTUnionCaseV0DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecUDTUnionCaseV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecUDTUnionV0</summary>
        public static readonly Method<Stellar.SCSpecUDTUnionV0EncodeRequest, Stellar.SCSpecUDTUnionV0EncodeResponse> EncodeSCSpecUDTUnionV0Method =
            new Method<Stellar.SCSpecUDTUnionV0EncodeRequest, Stellar.SCSpecUDTUnionV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecUDTUnionV0",
                XdrProtoServiceGrpcMarshaller.SCSpecUDTUnionV0EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecUDTUnionV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecUDTUnionV0</summary>
        public static readonly Method<Stellar.SCSpecUDTUnionV0DecodeRequest, Stellar.SCSpecUDTUnionV0DecodeResponse> DecodeSCSpecUDTUnionV0Method =
            new Method<Stellar.SCSpecUDTUnionV0DecodeRequest, Stellar.SCSpecUDTUnionV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecUDTUnionV0",
                XdrProtoServiceGrpcMarshaller.SCSpecUDTUnionV0DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecUDTUnionV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecUDTEnumCaseV0</summary>
        public static readonly Method<Stellar.SCSpecUDTEnumCaseV0EncodeRequest, Stellar.SCSpecUDTEnumCaseV0EncodeResponse> EncodeSCSpecUDTEnumCaseV0Method =
            new Method<Stellar.SCSpecUDTEnumCaseV0EncodeRequest, Stellar.SCSpecUDTEnumCaseV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecUDTEnumCaseV0",
                XdrProtoServiceGrpcMarshaller.SCSpecUDTEnumCaseV0EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecUDTEnumCaseV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecUDTEnumCaseV0</summary>
        public static readonly Method<Stellar.SCSpecUDTEnumCaseV0DecodeRequest, Stellar.SCSpecUDTEnumCaseV0DecodeResponse> DecodeSCSpecUDTEnumCaseV0Method =
            new Method<Stellar.SCSpecUDTEnumCaseV0DecodeRequest, Stellar.SCSpecUDTEnumCaseV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecUDTEnumCaseV0",
                XdrProtoServiceGrpcMarshaller.SCSpecUDTEnumCaseV0DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecUDTEnumCaseV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecUDTEnumV0</summary>
        public static readonly Method<Stellar.SCSpecUDTEnumV0EncodeRequest, Stellar.SCSpecUDTEnumV0EncodeResponse> EncodeSCSpecUDTEnumV0Method =
            new Method<Stellar.SCSpecUDTEnumV0EncodeRequest, Stellar.SCSpecUDTEnumV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecUDTEnumV0",
                XdrProtoServiceGrpcMarshaller.SCSpecUDTEnumV0EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecUDTEnumV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecUDTEnumV0</summary>
        public static readonly Method<Stellar.SCSpecUDTEnumV0DecodeRequest, Stellar.SCSpecUDTEnumV0DecodeResponse> DecodeSCSpecUDTEnumV0Method =
            new Method<Stellar.SCSpecUDTEnumV0DecodeRequest, Stellar.SCSpecUDTEnumV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecUDTEnumV0",
                XdrProtoServiceGrpcMarshaller.SCSpecUDTEnumV0DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecUDTEnumV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecUDTErrorEnumCaseV0</summary>
        public static readonly Method<Stellar.SCSpecUDTErrorEnumCaseV0EncodeRequest, Stellar.SCSpecUDTErrorEnumCaseV0EncodeResponse> EncodeSCSpecUDTErrorEnumCaseV0Method =
            new Method<Stellar.SCSpecUDTErrorEnumCaseV0EncodeRequest, Stellar.SCSpecUDTErrorEnumCaseV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecUDTErrorEnumCaseV0",
                XdrProtoServiceGrpcMarshaller.SCSpecUDTErrorEnumCaseV0EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecUDTErrorEnumCaseV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecUDTErrorEnumCaseV0</summary>
        public static readonly Method<Stellar.SCSpecUDTErrorEnumCaseV0DecodeRequest, Stellar.SCSpecUDTErrorEnumCaseV0DecodeResponse> DecodeSCSpecUDTErrorEnumCaseV0Method =
            new Method<Stellar.SCSpecUDTErrorEnumCaseV0DecodeRequest, Stellar.SCSpecUDTErrorEnumCaseV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecUDTErrorEnumCaseV0",
                XdrProtoServiceGrpcMarshaller.SCSpecUDTErrorEnumCaseV0DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecUDTErrorEnumCaseV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecUDTErrorEnumV0</summary>
        public static readonly Method<Stellar.SCSpecUDTErrorEnumV0EncodeRequest, Stellar.SCSpecUDTErrorEnumV0EncodeResponse> EncodeSCSpecUDTErrorEnumV0Method =
            new Method<Stellar.SCSpecUDTErrorEnumV0EncodeRequest, Stellar.SCSpecUDTErrorEnumV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecUDTErrorEnumV0",
                XdrProtoServiceGrpcMarshaller.SCSpecUDTErrorEnumV0EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecUDTErrorEnumV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecUDTErrorEnumV0</summary>
        public static readonly Method<Stellar.SCSpecUDTErrorEnumV0DecodeRequest, Stellar.SCSpecUDTErrorEnumV0DecodeResponse> DecodeSCSpecUDTErrorEnumV0Method =
            new Method<Stellar.SCSpecUDTErrorEnumV0DecodeRequest, Stellar.SCSpecUDTErrorEnumV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecUDTErrorEnumV0",
                XdrProtoServiceGrpcMarshaller.SCSpecUDTErrorEnumV0DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecUDTErrorEnumV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecFunctionInputV0</summary>
        public static readonly Method<Stellar.SCSpecFunctionInputV0EncodeRequest, Stellar.SCSpecFunctionInputV0EncodeResponse> EncodeSCSpecFunctionInputV0Method =
            new Method<Stellar.SCSpecFunctionInputV0EncodeRequest, Stellar.SCSpecFunctionInputV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecFunctionInputV0",
                XdrProtoServiceGrpcMarshaller.SCSpecFunctionInputV0EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecFunctionInputV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecFunctionInputV0</summary>
        public static readonly Method<Stellar.SCSpecFunctionInputV0DecodeRequest, Stellar.SCSpecFunctionInputV0DecodeResponse> DecodeSCSpecFunctionInputV0Method =
            new Method<Stellar.SCSpecFunctionInputV0DecodeRequest, Stellar.SCSpecFunctionInputV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecFunctionInputV0",
                XdrProtoServiceGrpcMarshaller.SCSpecFunctionInputV0DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecFunctionInputV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecFunctionV0</summary>
        public static readonly Method<Stellar.SCSpecFunctionV0EncodeRequest, Stellar.SCSpecFunctionV0EncodeResponse> EncodeSCSpecFunctionV0Method =
            new Method<Stellar.SCSpecFunctionV0EncodeRequest, Stellar.SCSpecFunctionV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecFunctionV0",
                XdrProtoServiceGrpcMarshaller.SCSpecFunctionV0EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecFunctionV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecFunctionV0</summary>
        public static readonly Method<Stellar.SCSpecFunctionV0DecodeRequest, Stellar.SCSpecFunctionV0DecodeResponse> DecodeSCSpecFunctionV0Method =
            new Method<Stellar.SCSpecFunctionV0DecodeRequest, Stellar.SCSpecFunctionV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecFunctionV0",
                XdrProtoServiceGrpcMarshaller.SCSpecFunctionV0DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecFunctionV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecEntryKind</summary>
        public static readonly Method<Stellar.SCSpecEntryKindEncodeRequest, Stellar.SCSpecEntryKindEncodeResponse> EncodeSCSpecEntryKindMethod =
            new Method<Stellar.SCSpecEntryKindEncodeRequest, Stellar.SCSpecEntryKindEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecEntryKind",
                XdrProtoServiceGrpcMarshaller.SCSpecEntryKindEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecEntryKindEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecEntryKind</summary>
        public static readonly Method<Stellar.SCSpecEntryKindDecodeRequest, Stellar.SCSpecEntryKindDecodeResponse> DecodeSCSpecEntryKindMethod =
            new Method<Stellar.SCSpecEntryKindDecodeRequest, Stellar.SCSpecEntryKindDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecEntryKind",
                XdrProtoServiceGrpcMarshaller.SCSpecEntryKindDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecEntryKindDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSpecEntry</summary>
        public static readonly Method<Stellar.SCSpecEntryEncodeRequest, Stellar.SCSpecEntryEncodeResponse> EncodeSCSpecEntryMethod =
            new Method<Stellar.SCSpecEntryEncodeRequest, Stellar.SCSpecEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSpecEntry",
                XdrProtoServiceGrpcMarshaller.SCSpecEntryEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSpecEntry</summary>
        public static readonly Method<Stellar.SCSpecEntryDecodeRequest, Stellar.SCSpecEntryDecodeResponse> DecodeSCSpecEntryMethod =
            new Method<Stellar.SCSpecEntryDecodeRequest, Stellar.SCSpecEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSpecEntry",
                XdrProtoServiceGrpcMarshaller.SCSpecEntryDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSpecEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCValType</summary>
        public static readonly Method<Stellar.SCValTypeEncodeRequest, Stellar.SCValTypeEncodeResponse> EncodeSCValTypeMethod =
            new Method<Stellar.SCValTypeEncodeRequest, Stellar.SCValTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCValType",
                XdrProtoServiceGrpcMarshaller.SCValTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCValTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCValType</summary>
        public static readonly Method<Stellar.SCValTypeDecodeRequest, Stellar.SCValTypeDecodeResponse> DecodeSCValTypeMethod =
            new Method<Stellar.SCValTypeDecodeRequest, Stellar.SCValTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCValType",
                XdrProtoServiceGrpcMarshaller.SCValTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCValTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCErrorType</summary>
        public static readonly Method<Stellar.SCErrorTypeEncodeRequest, Stellar.SCErrorTypeEncodeResponse> EncodeSCErrorTypeMethod =
            new Method<Stellar.SCErrorTypeEncodeRequest, Stellar.SCErrorTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCErrorType",
                XdrProtoServiceGrpcMarshaller.SCErrorTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCErrorTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCErrorType</summary>
        public static readonly Method<Stellar.SCErrorTypeDecodeRequest, Stellar.SCErrorTypeDecodeResponse> DecodeSCErrorTypeMethod =
            new Method<Stellar.SCErrorTypeDecodeRequest, Stellar.SCErrorTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCErrorType",
                XdrProtoServiceGrpcMarshaller.SCErrorTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCErrorTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCErrorCode</summary>
        public static readonly Method<Stellar.SCErrorCodeEncodeRequest, Stellar.SCErrorCodeEncodeResponse> EncodeSCErrorCodeMethod =
            new Method<Stellar.SCErrorCodeEncodeRequest, Stellar.SCErrorCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCErrorCode",
                XdrProtoServiceGrpcMarshaller.SCErrorCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCErrorCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCErrorCode</summary>
        public static readonly Method<Stellar.SCErrorCodeDecodeRequest, Stellar.SCErrorCodeDecodeResponse> DecodeSCErrorCodeMethod =
            new Method<Stellar.SCErrorCodeDecodeRequest, Stellar.SCErrorCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCErrorCode",
                XdrProtoServiceGrpcMarshaller.SCErrorCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCErrorCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCError</summary>
        public static readonly Method<Stellar.SCErrorEncodeRequest, Stellar.SCErrorEncodeResponse> EncodeSCErrorMethod =
            new Method<Stellar.SCErrorEncodeRequest, Stellar.SCErrorEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCError",
                XdrProtoServiceGrpcMarshaller.SCErrorEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCErrorEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCError</summary>
        public static readonly Method<Stellar.SCErrorDecodeRequest, Stellar.SCErrorDecodeResponse> DecodeSCErrorMethod =
            new Method<Stellar.SCErrorDecodeRequest, Stellar.SCErrorDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCError",
                XdrProtoServiceGrpcMarshaller.SCErrorDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCErrorDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeUInt128Parts</summary>
        public static readonly Method<Stellar.UInt128PartsEncodeRequest, Stellar.UInt128PartsEncodeResponse> EncodeUInt128PartsMethod =
            new Method<Stellar.UInt128PartsEncodeRequest, Stellar.UInt128PartsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeUInt128Parts",
                XdrProtoServiceGrpcMarshaller.UInt128PartsEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.UInt128PartsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeUInt128Parts</summary>
        public static readonly Method<Stellar.UInt128PartsDecodeRequest, Stellar.UInt128PartsDecodeResponse> DecodeUInt128PartsMethod =
            new Method<Stellar.UInt128PartsDecodeRequest, Stellar.UInt128PartsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeUInt128Parts",
                XdrProtoServiceGrpcMarshaller.UInt128PartsDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.UInt128PartsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeInt128Parts</summary>
        public static readonly Method<Stellar.Int128PartsEncodeRequest, Stellar.Int128PartsEncodeResponse> EncodeInt128PartsMethod =
            new Method<Stellar.Int128PartsEncodeRequest, Stellar.Int128PartsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeInt128Parts",
                XdrProtoServiceGrpcMarshaller.Int128PartsEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.Int128PartsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeInt128Parts</summary>
        public static readonly Method<Stellar.Int128PartsDecodeRequest, Stellar.Int128PartsDecodeResponse> DecodeInt128PartsMethod =
            new Method<Stellar.Int128PartsDecodeRequest, Stellar.Int128PartsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeInt128Parts",
                XdrProtoServiceGrpcMarshaller.Int128PartsDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.Int128PartsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeUInt256Parts</summary>
        public static readonly Method<Stellar.UInt256PartsEncodeRequest, Stellar.UInt256PartsEncodeResponse> EncodeUInt256PartsMethod =
            new Method<Stellar.UInt256PartsEncodeRequest, Stellar.UInt256PartsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeUInt256Parts",
                XdrProtoServiceGrpcMarshaller.UInt256PartsEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.UInt256PartsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeUInt256Parts</summary>
        public static readonly Method<Stellar.UInt256PartsDecodeRequest, Stellar.UInt256PartsDecodeResponse> DecodeUInt256PartsMethod =
            new Method<Stellar.UInt256PartsDecodeRequest, Stellar.UInt256PartsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeUInt256Parts",
                XdrProtoServiceGrpcMarshaller.UInt256PartsDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.UInt256PartsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeInt256Parts</summary>
        public static readonly Method<Stellar.Int256PartsEncodeRequest, Stellar.Int256PartsEncodeResponse> EncodeInt256PartsMethod =
            new Method<Stellar.Int256PartsEncodeRequest, Stellar.Int256PartsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeInt256Parts",
                XdrProtoServiceGrpcMarshaller.Int256PartsEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.Int256PartsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeInt256Parts</summary>
        public static readonly Method<Stellar.Int256PartsDecodeRequest, Stellar.Int256PartsDecodeResponse> DecodeInt256PartsMethod =
            new Method<Stellar.Int256PartsDecodeRequest, Stellar.Int256PartsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeInt256Parts",
                XdrProtoServiceGrpcMarshaller.Int256PartsDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.Int256PartsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeContractExecutableType</summary>
        public static readonly Method<Stellar.ContractExecutableTypeEncodeRequest, Stellar.ContractExecutableTypeEncodeResponse> EncodeContractExecutableTypeMethod =
            new Method<Stellar.ContractExecutableTypeEncodeRequest, Stellar.ContractExecutableTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeContractExecutableType",
                XdrProtoServiceGrpcMarshaller.ContractExecutableTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ContractExecutableTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeContractExecutableType</summary>
        public static readonly Method<Stellar.ContractExecutableTypeDecodeRequest, Stellar.ContractExecutableTypeDecodeResponse> DecodeContractExecutableTypeMethod =
            new Method<Stellar.ContractExecutableTypeDecodeRequest, Stellar.ContractExecutableTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeContractExecutableType",
                XdrProtoServiceGrpcMarshaller.ContractExecutableTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ContractExecutableTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeContractExecutable</summary>
        public static readonly Method<Stellar.ContractExecutableEncodeRequest, Stellar.ContractExecutableEncodeResponse> EncodeContractExecutableMethod =
            new Method<Stellar.ContractExecutableEncodeRequest, Stellar.ContractExecutableEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeContractExecutable",
                XdrProtoServiceGrpcMarshaller.ContractExecutableEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ContractExecutableEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeContractExecutable</summary>
        public static readonly Method<Stellar.ContractExecutableDecodeRequest, Stellar.ContractExecutableDecodeResponse> DecodeContractExecutableMethod =
            new Method<Stellar.ContractExecutableDecodeRequest, Stellar.ContractExecutableDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeContractExecutable",
                XdrProtoServiceGrpcMarshaller.ContractExecutableDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ContractExecutableDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCAddressType</summary>
        public static readonly Method<Stellar.SCAddressTypeEncodeRequest, Stellar.SCAddressTypeEncodeResponse> EncodeSCAddressTypeMethod =
            new Method<Stellar.SCAddressTypeEncodeRequest, Stellar.SCAddressTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCAddressType",
                XdrProtoServiceGrpcMarshaller.SCAddressTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCAddressTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCAddressType</summary>
        public static readonly Method<Stellar.SCAddressTypeDecodeRequest, Stellar.SCAddressTypeDecodeResponse> DecodeSCAddressTypeMethod =
            new Method<Stellar.SCAddressTypeDecodeRequest, Stellar.SCAddressTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCAddressType",
                XdrProtoServiceGrpcMarshaller.SCAddressTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCAddressTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCAddress</summary>
        public static readonly Method<Stellar.SCAddressEncodeRequest, Stellar.SCAddressEncodeResponse> EncodeSCAddressMethod =
            new Method<Stellar.SCAddressEncodeRequest, Stellar.SCAddressEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCAddress",
                XdrProtoServiceGrpcMarshaller.SCAddressEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCAddressEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCAddress</summary>
        public static readonly Method<Stellar.SCAddressDecodeRequest, Stellar.SCAddressDecodeResponse> DecodeSCAddressMethod =
            new Method<Stellar.SCAddressDecodeRequest, Stellar.SCAddressDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCAddress",
                XdrProtoServiceGrpcMarshaller.SCAddressDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCAddressDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCVec</summary>
        public static readonly Method<Stellar.SCVecEncodeRequest, Stellar.SCVecEncodeResponse> EncodeSCVecMethod =
            new Method<Stellar.SCVecEncodeRequest, Stellar.SCVecEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCVec",
                XdrProtoServiceGrpcMarshaller.SCVecEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCVecEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCVec</summary>
        public static readonly Method<Stellar.SCVecDecodeRequest, Stellar.SCVecDecodeResponse> DecodeSCVecMethod =
            new Method<Stellar.SCVecDecodeRequest, Stellar.SCVecDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCVec",
                XdrProtoServiceGrpcMarshaller.SCVecDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCVecDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCMap</summary>
        public static readonly Method<Stellar.SCMapEncodeRequest, Stellar.SCMapEncodeResponse> EncodeSCMapMethod =
            new Method<Stellar.SCMapEncodeRequest, Stellar.SCMapEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCMap",
                XdrProtoServiceGrpcMarshaller.SCMapEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCMapEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCMap</summary>
        public static readonly Method<Stellar.SCMapDecodeRequest, Stellar.SCMapDecodeResponse> DecodeSCMapMethod =
            new Method<Stellar.SCMapDecodeRequest, Stellar.SCMapDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCMap",
                XdrProtoServiceGrpcMarshaller.SCMapDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCMapDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCBytes</summary>
        public static readonly Method<Stellar.SCBytesEncodeRequest, Stellar.SCBytesEncodeResponse> EncodeSCBytesMethod =
            new Method<Stellar.SCBytesEncodeRequest, Stellar.SCBytesEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCBytes",
                XdrProtoServiceGrpcMarshaller.SCBytesEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCBytesEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCBytes</summary>
        public static readonly Method<Stellar.SCBytesDecodeRequest, Stellar.SCBytesDecodeResponse> DecodeSCBytesMethod =
            new Method<Stellar.SCBytesDecodeRequest, Stellar.SCBytesDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCBytes",
                XdrProtoServiceGrpcMarshaller.SCBytesDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCBytesDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCString</summary>
        public static readonly Method<Stellar.SCStringEncodeRequest, Stellar.SCStringEncodeResponse> EncodeSCStringMethod =
            new Method<Stellar.SCStringEncodeRequest, Stellar.SCStringEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCString",
                XdrProtoServiceGrpcMarshaller.SCStringEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCStringEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCString</summary>
        public static readonly Method<Stellar.SCStringDecodeRequest, Stellar.SCStringDecodeResponse> DecodeSCStringMethod =
            new Method<Stellar.SCStringDecodeRequest, Stellar.SCStringDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCString",
                XdrProtoServiceGrpcMarshaller.SCStringDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCStringDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCSymbol</summary>
        public static readonly Method<Stellar.SCSymbolEncodeRequest, Stellar.SCSymbolEncodeResponse> EncodeSCSymbolMethod =
            new Method<Stellar.SCSymbolEncodeRequest, Stellar.SCSymbolEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCSymbol",
                XdrProtoServiceGrpcMarshaller.SCSymbolEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSymbolEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCSymbol</summary>
        public static readonly Method<Stellar.SCSymbolDecodeRequest, Stellar.SCSymbolDecodeResponse> DecodeSCSymbolMethod =
            new Method<Stellar.SCSymbolDecodeRequest, Stellar.SCSymbolDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCSymbol",
                XdrProtoServiceGrpcMarshaller.SCSymbolDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCSymbolDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCNonceKey</summary>
        public static readonly Method<Stellar.SCNonceKeyEncodeRequest, Stellar.SCNonceKeyEncodeResponse> EncodeSCNonceKeyMethod =
            new Method<Stellar.SCNonceKeyEncodeRequest, Stellar.SCNonceKeyEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCNonceKey",
                XdrProtoServiceGrpcMarshaller.SCNonceKeyEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCNonceKeyEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCNonceKey</summary>
        public static readonly Method<Stellar.SCNonceKeyDecodeRequest, Stellar.SCNonceKeyDecodeResponse> DecodeSCNonceKeyMethod =
            new Method<Stellar.SCNonceKeyDecodeRequest, Stellar.SCNonceKeyDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCNonceKey",
                XdrProtoServiceGrpcMarshaller.SCNonceKeyDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCNonceKeyDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCContractInstance</summary>
        public static readonly Method<Stellar.SCContractInstanceEncodeRequest, Stellar.SCContractInstanceEncodeResponse> EncodeSCContractInstanceMethod =
            new Method<Stellar.SCContractInstanceEncodeRequest, Stellar.SCContractInstanceEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCContractInstance",
                XdrProtoServiceGrpcMarshaller.SCContractInstanceEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCContractInstanceEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCContractInstance</summary>
        public static readonly Method<Stellar.SCContractInstanceDecodeRequest, Stellar.SCContractInstanceDecodeResponse> DecodeSCContractInstanceMethod =
            new Method<Stellar.SCContractInstanceDecodeRequest, Stellar.SCContractInstanceDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCContractInstance",
                XdrProtoServiceGrpcMarshaller.SCContractInstanceDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCContractInstanceDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCVal</summary>
        public static readonly Method<Stellar.SCValEncodeRequest, Stellar.SCValEncodeResponse> EncodeSCValMethod =
            new Method<Stellar.SCValEncodeRequest, Stellar.SCValEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCVal",
                XdrProtoServiceGrpcMarshaller.SCValEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCValEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCVal</summary>
        public static readonly Method<Stellar.SCValDecodeRequest, Stellar.SCValDecodeResponse> DecodeSCValMethod =
            new Method<Stellar.SCValDecodeRequest, Stellar.SCValDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCVal",
                XdrProtoServiceGrpcMarshaller.SCValDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCValDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCMapEntry</summary>
        public static readonly Method<Stellar.SCMapEntryEncodeRequest, Stellar.SCMapEntryEncodeResponse> EncodeSCMapEntryMethod =
            new Method<Stellar.SCMapEntryEncodeRequest, Stellar.SCMapEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCMapEntry",
                XdrProtoServiceGrpcMarshaller.SCMapEntryEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCMapEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCMapEntry</summary>
        public static readonly Method<Stellar.SCMapEntryDecodeRequest, Stellar.SCMapEntryDecodeResponse> DecodeSCMapEntryMethod =
            new Method<Stellar.SCMapEntryDecodeRequest, Stellar.SCMapEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCMapEntry",
                XdrProtoServiceGrpcMarshaller.SCMapEntryDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCMapEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeStoredTransactionSet</summary>
        public static readonly Method<Stellar.StoredTransactionSetEncodeRequest, Stellar.StoredTransactionSetEncodeResponse> EncodeStoredTransactionSetMethod =
            new Method<Stellar.StoredTransactionSetEncodeRequest, Stellar.StoredTransactionSetEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeStoredTransactionSet",
                XdrProtoServiceGrpcMarshaller.StoredTransactionSetEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.StoredTransactionSetEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeStoredTransactionSet</summary>
        public static readonly Method<Stellar.StoredTransactionSetDecodeRequest, Stellar.StoredTransactionSetDecodeResponse> DecodeStoredTransactionSetMethod =
            new Method<Stellar.StoredTransactionSetDecodeRequest, Stellar.StoredTransactionSetDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeStoredTransactionSet",
                XdrProtoServiceGrpcMarshaller.StoredTransactionSetDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.StoredTransactionSetDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeStoredDebugTransactionSet</summary>
        public static readonly Method<Stellar.StoredDebugTransactionSetEncodeRequest, Stellar.StoredDebugTransactionSetEncodeResponse> EncodeStoredDebugTransactionSetMethod =
            new Method<Stellar.StoredDebugTransactionSetEncodeRequest, Stellar.StoredDebugTransactionSetEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeStoredDebugTransactionSet",
                XdrProtoServiceGrpcMarshaller.StoredDebugTransactionSetEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.StoredDebugTransactionSetEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeStoredDebugTransactionSet</summary>
        public static readonly Method<Stellar.StoredDebugTransactionSetDecodeRequest, Stellar.StoredDebugTransactionSetDecodeResponse> DecodeStoredDebugTransactionSetMethod =
            new Method<Stellar.StoredDebugTransactionSetDecodeRequest, Stellar.StoredDebugTransactionSetDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeStoredDebugTransactionSet",
                XdrProtoServiceGrpcMarshaller.StoredDebugTransactionSetDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.StoredDebugTransactionSetDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePersistedSCPStateV0</summary>
        public static readonly Method<Stellar.PersistedSCPStateV0EncodeRequest, Stellar.PersistedSCPStateV0EncodeResponse> EncodePersistedSCPStateV0Method =
            new Method<Stellar.PersistedSCPStateV0EncodeRequest, Stellar.PersistedSCPStateV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePersistedSCPStateV0",
                XdrProtoServiceGrpcMarshaller.PersistedSCPStateV0EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PersistedSCPStateV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePersistedSCPStateV0</summary>
        public static readonly Method<Stellar.PersistedSCPStateV0DecodeRequest, Stellar.PersistedSCPStateV0DecodeResponse> DecodePersistedSCPStateV0Method =
            new Method<Stellar.PersistedSCPStateV0DecodeRequest, Stellar.PersistedSCPStateV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePersistedSCPStateV0",
                XdrProtoServiceGrpcMarshaller.PersistedSCPStateV0DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PersistedSCPStateV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePersistedSCPStateV1</summary>
        public static readonly Method<Stellar.PersistedSCPStateV1EncodeRequest, Stellar.PersistedSCPStateV1EncodeResponse> EncodePersistedSCPStateV1Method =
            new Method<Stellar.PersistedSCPStateV1EncodeRequest, Stellar.PersistedSCPStateV1EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePersistedSCPStateV1",
                XdrProtoServiceGrpcMarshaller.PersistedSCPStateV1EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PersistedSCPStateV1EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePersistedSCPStateV1</summary>
        public static readonly Method<Stellar.PersistedSCPStateV1DecodeRequest, Stellar.PersistedSCPStateV1DecodeResponse> DecodePersistedSCPStateV1Method =
            new Method<Stellar.PersistedSCPStateV1DecodeRequest, Stellar.PersistedSCPStateV1DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePersistedSCPStateV1",
                XdrProtoServiceGrpcMarshaller.PersistedSCPStateV1DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PersistedSCPStateV1DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePersistedSCPState</summary>
        public static readonly Method<Stellar.PersistedSCPStateEncodeRequest, Stellar.PersistedSCPStateEncodeResponse> EncodePersistedSCPStateMethod =
            new Method<Stellar.PersistedSCPStateEncodeRequest, Stellar.PersistedSCPStateEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePersistedSCPState",
                XdrProtoServiceGrpcMarshaller.PersistedSCPStateEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PersistedSCPStateEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePersistedSCPState</summary>
        public static readonly Method<Stellar.PersistedSCPStateDecodeRequest, Stellar.PersistedSCPStateDecodeResponse> DecodePersistedSCPStateMethod =
            new Method<Stellar.PersistedSCPStateDecodeRequest, Stellar.PersistedSCPStateDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePersistedSCPState",
                XdrProtoServiceGrpcMarshaller.PersistedSCPStateDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PersistedSCPStateDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeThresholds</summary>
        public static readonly Method<Stellar.ThresholdsEncodeRequest, Stellar.ThresholdsEncodeResponse> EncodeThresholdsMethod =
            new Method<Stellar.ThresholdsEncodeRequest, Stellar.ThresholdsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeThresholds",
                XdrProtoServiceGrpcMarshaller.ThresholdsEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ThresholdsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeThresholds</summary>
        public static readonly Method<Stellar.ThresholdsDecodeRequest, Stellar.ThresholdsDecodeResponse> DecodeThresholdsMethod =
            new Method<Stellar.ThresholdsDecodeRequest, Stellar.ThresholdsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeThresholds",
                XdrProtoServiceGrpcMarshaller.ThresholdsDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ThresholdsDecodeResponseMarshaller);

        /// <summary>Method descriptor for Encodestring32</summary>
        public static readonly Method<Stellar.string32EncodeRequest, Stellar.string32EncodeResponse> Encodestring32Method =
            new Method<Stellar.string32EncodeRequest, Stellar.string32EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Encodestring32",
                XdrProtoServiceGrpcMarshaller.string32EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.string32EncodeResponseMarshaller);

        /// <summary>Method descriptor for Decodestring32</summary>
        public static readonly Method<Stellar.string32DecodeRequest, Stellar.string32DecodeResponse> Decodestring32Method =
            new Method<Stellar.string32DecodeRequest, Stellar.string32DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Decodestring32",
                XdrProtoServiceGrpcMarshaller.string32DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.string32DecodeResponseMarshaller);

        /// <summary>Method descriptor for Encodestring64</summary>
        public static readonly Method<Stellar.string64EncodeRequest, Stellar.string64EncodeResponse> Encodestring64Method =
            new Method<Stellar.string64EncodeRequest, Stellar.string64EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Encodestring64",
                XdrProtoServiceGrpcMarshaller.string64EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.string64EncodeResponseMarshaller);

        /// <summary>Method descriptor for Decodestring64</summary>
        public static readonly Method<Stellar.string64DecodeRequest, Stellar.string64DecodeResponse> Decodestring64Method =
            new Method<Stellar.string64DecodeRequest, Stellar.string64DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Decodestring64",
                XdrProtoServiceGrpcMarshaller.string64DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.string64DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSequenceNumber</summary>
        public static readonly Method<Stellar.SequenceNumberEncodeRequest, Stellar.SequenceNumberEncodeResponse> EncodeSequenceNumberMethod =
            new Method<Stellar.SequenceNumberEncodeRequest, Stellar.SequenceNumberEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSequenceNumber",
                XdrProtoServiceGrpcMarshaller.SequenceNumberEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SequenceNumberEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSequenceNumber</summary>
        public static readonly Method<Stellar.SequenceNumberDecodeRequest, Stellar.SequenceNumberDecodeResponse> DecodeSequenceNumberMethod =
            new Method<Stellar.SequenceNumberDecodeRequest, Stellar.SequenceNumberDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSequenceNumber",
                XdrProtoServiceGrpcMarshaller.SequenceNumberDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SequenceNumberDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeDataValue</summary>
        public static readonly Method<Stellar.DataValueEncodeRequest, Stellar.DataValueEncodeResponse> EncodeDataValueMethod =
            new Method<Stellar.DataValueEncodeRequest, Stellar.DataValueEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeDataValue",
                XdrProtoServiceGrpcMarshaller.DataValueEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.DataValueEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeDataValue</summary>
        public static readonly Method<Stellar.DataValueDecodeRequest, Stellar.DataValueDecodeResponse> DecodeDataValueMethod =
            new Method<Stellar.DataValueDecodeRequest, Stellar.DataValueDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeDataValue",
                XdrProtoServiceGrpcMarshaller.DataValueDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.DataValueDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePoolID</summary>
        public static readonly Method<Stellar.PoolIDEncodeRequest, Stellar.PoolIDEncodeResponse> EncodePoolIDMethod =
            new Method<Stellar.PoolIDEncodeRequest, Stellar.PoolIDEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePoolID",
                XdrProtoServiceGrpcMarshaller.PoolIDEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PoolIDEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePoolID</summary>
        public static readonly Method<Stellar.PoolIDDecodeRequest, Stellar.PoolIDDecodeResponse> DecodePoolIDMethod =
            new Method<Stellar.PoolIDDecodeRequest, Stellar.PoolIDDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePoolID",
                XdrProtoServiceGrpcMarshaller.PoolIDDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PoolIDDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAssetCode4</summary>
        public static readonly Method<Stellar.AssetCode4EncodeRequest, Stellar.AssetCode4EncodeResponse> EncodeAssetCode4Method =
            new Method<Stellar.AssetCode4EncodeRequest, Stellar.AssetCode4EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAssetCode4",
                XdrProtoServiceGrpcMarshaller.AssetCode4EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AssetCode4EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAssetCode4</summary>
        public static readonly Method<Stellar.AssetCode4DecodeRequest, Stellar.AssetCode4DecodeResponse> DecodeAssetCode4Method =
            new Method<Stellar.AssetCode4DecodeRequest, Stellar.AssetCode4DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAssetCode4",
                XdrProtoServiceGrpcMarshaller.AssetCode4DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AssetCode4DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAssetCode12</summary>
        public static readonly Method<Stellar.AssetCode12EncodeRequest, Stellar.AssetCode12EncodeResponse> EncodeAssetCode12Method =
            new Method<Stellar.AssetCode12EncodeRequest, Stellar.AssetCode12EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAssetCode12",
                XdrProtoServiceGrpcMarshaller.AssetCode12EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AssetCode12EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAssetCode12</summary>
        public static readonly Method<Stellar.AssetCode12DecodeRequest, Stellar.AssetCode12DecodeResponse> DecodeAssetCode12Method =
            new Method<Stellar.AssetCode12DecodeRequest, Stellar.AssetCode12DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAssetCode12",
                XdrProtoServiceGrpcMarshaller.AssetCode12DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AssetCode12DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAssetType</summary>
        public static readonly Method<Stellar.AssetTypeEncodeRequest, Stellar.AssetTypeEncodeResponse> EncodeAssetTypeMethod =
            new Method<Stellar.AssetTypeEncodeRequest, Stellar.AssetTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAssetType",
                XdrProtoServiceGrpcMarshaller.AssetTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AssetTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAssetType</summary>
        public static readonly Method<Stellar.AssetTypeDecodeRequest, Stellar.AssetTypeDecodeResponse> DecodeAssetTypeMethod =
            new Method<Stellar.AssetTypeDecodeRequest, Stellar.AssetTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAssetType",
                XdrProtoServiceGrpcMarshaller.AssetTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AssetTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAssetCode</summary>
        public static readonly Method<Stellar.AssetCodeEncodeRequest, Stellar.AssetCodeEncodeResponse> EncodeAssetCodeMethod =
            new Method<Stellar.AssetCodeEncodeRequest, Stellar.AssetCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAssetCode",
                XdrProtoServiceGrpcMarshaller.AssetCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AssetCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAssetCode</summary>
        public static readonly Method<Stellar.AssetCodeDecodeRequest, Stellar.AssetCodeDecodeResponse> DecodeAssetCodeMethod =
            new Method<Stellar.AssetCodeDecodeRequest, Stellar.AssetCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAssetCode",
                XdrProtoServiceGrpcMarshaller.AssetCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AssetCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAlphaNum4</summary>
        public static readonly Method<Stellar.AlphaNum4EncodeRequest, Stellar.AlphaNum4EncodeResponse> EncodeAlphaNum4Method =
            new Method<Stellar.AlphaNum4EncodeRequest, Stellar.AlphaNum4EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAlphaNum4",
                XdrProtoServiceGrpcMarshaller.AlphaNum4EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AlphaNum4EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAlphaNum4</summary>
        public static readonly Method<Stellar.AlphaNum4DecodeRequest, Stellar.AlphaNum4DecodeResponse> DecodeAlphaNum4Method =
            new Method<Stellar.AlphaNum4DecodeRequest, Stellar.AlphaNum4DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAlphaNum4",
                XdrProtoServiceGrpcMarshaller.AlphaNum4DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AlphaNum4DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAlphaNum12</summary>
        public static readonly Method<Stellar.AlphaNum12EncodeRequest, Stellar.AlphaNum12EncodeResponse> EncodeAlphaNum12Method =
            new Method<Stellar.AlphaNum12EncodeRequest, Stellar.AlphaNum12EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAlphaNum12",
                XdrProtoServiceGrpcMarshaller.AlphaNum12EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AlphaNum12EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAlphaNum12</summary>
        public static readonly Method<Stellar.AlphaNum12DecodeRequest, Stellar.AlphaNum12DecodeResponse> DecodeAlphaNum12Method =
            new Method<Stellar.AlphaNum12DecodeRequest, Stellar.AlphaNum12DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAlphaNum12",
                XdrProtoServiceGrpcMarshaller.AlphaNum12DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AlphaNum12DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAsset</summary>
        public static readonly Method<Stellar.AssetEncodeRequest, Stellar.AssetEncodeResponse> EncodeAssetMethod =
            new Method<Stellar.AssetEncodeRequest, Stellar.AssetEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAsset",
                XdrProtoServiceGrpcMarshaller.AssetEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AssetEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAsset</summary>
        public static readonly Method<Stellar.AssetDecodeRequest, Stellar.AssetDecodeResponse> DecodeAssetMethod =
            new Method<Stellar.AssetDecodeRequest, Stellar.AssetDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAsset",
                XdrProtoServiceGrpcMarshaller.AssetDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AssetDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePrice</summary>
        public static readonly Method<Stellar.PriceEncodeRequest, Stellar.PriceEncodeResponse> EncodePriceMethod =
            new Method<Stellar.PriceEncodeRequest, Stellar.PriceEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePrice",
                XdrProtoServiceGrpcMarshaller.PriceEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PriceEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePrice</summary>
        public static readonly Method<Stellar.PriceDecodeRequest, Stellar.PriceDecodeResponse> DecodePriceMethod =
            new Method<Stellar.PriceDecodeRequest, Stellar.PriceDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePrice",
                XdrProtoServiceGrpcMarshaller.PriceDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PriceDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLiabilities</summary>
        public static readonly Method<Stellar.LiabilitiesEncodeRequest, Stellar.LiabilitiesEncodeResponse> EncodeLiabilitiesMethod =
            new Method<Stellar.LiabilitiesEncodeRequest, Stellar.LiabilitiesEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLiabilities",
                XdrProtoServiceGrpcMarshaller.LiabilitiesEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LiabilitiesEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLiabilities</summary>
        public static readonly Method<Stellar.LiabilitiesDecodeRequest, Stellar.LiabilitiesDecodeResponse> DecodeLiabilitiesMethod =
            new Method<Stellar.LiabilitiesDecodeRequest, Stellar.LiabilitiesDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLiabilities",
                XdrProtoServiceGrpcMarshaller.LiabilitiesDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LiabilitiesDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeThresholdIndexes</summary>
        public static readonly Method<Stellar.ThresholdIndexesEncodeRequest, Stellar.ThresholdIndexesEncodeResponse> EncodeThresholdIndexesMethod =
            new Method<Stellar.ThresholdIndexesEncodeRequest, Stellar.ThresholdIndexesEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeThresholdIndexes",
                XdrProtoServiceGrpcMarshaller.ThresholdIndexesEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ThresholdIndexesEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeThresholdIndexes</summary>
        public static readonly Method<Stellar.ThresholdIndexesDecodeRequest, Stellar.ThresholdIndexesDecodeResponse> DecodeThresholdIndexesMethod =
            new Method<Stellar.ThresholdIndexesDecodeRequest, Stellar.ThresholdIndexesDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeThresholdIndexes",
                XdrProtoServiceGrpcMarshaller.ThresholdIndexesDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ThresholdIndexesDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerEntryType</summary>
        public static readonly Method<Stellar.LedgerEntryTypeEncodeRequest, Stellar.LedgerEntryTypeEncodeResponse> EncodeLedgerEntryTypeMethod =
            new Method<Stellar.LedgerEntryTypeEncodeRequest, Stellar.LedgerEntryTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerEntryType",
                XdrProtoServiceGrpcMarshaller.LedgerEntryTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerEntryTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerEntryType</summary>
        public static readonly Method<Stellar.LedgerEntryTypeDecodeRequest, Stellar.LedgerEntryTypeDecodeResponse> DecodeLedgerEntryTypeMethod =
            new Method<Stellar.LedgerEntryTypeDecodeRequest, Stellar.LedgerEntryTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerEntryType",
                XdrProtoServiceGrpcMarshaller.LedgerEntryTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerEntryTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSigner</summary>
        public static readonly Method<Stellar.SignerEncodeRequest, Stellar.SignerEncodeResponse> EncodeSignerMethod =
            new Method<Stellar.SignerEncodeRequest, Stellar.SignerEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSigner",
                XdrProtoServiceGrpcMarshaller.SignerEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SignerEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSigner</summary>
        public static readonly Method<Stellar.SignerDecodeRequest, Stellar.SignerDecodeResponse> DecodeSignerMethod =
            new Method<Stellar.SignerDecodeRequest, Stellar.SignerDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSigner",
                XdrProtoServiceGrpcMarshaller.SignerDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SignerDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAccountFlags</summary>
        public static readonly Method<Stellar.AccountFlagsEncodeRequest, Stellar.AccountFlagsEncodeResponse> EncodeAccountFlagsMethod =
            new Method<Stellar.AccountFlagsEncodeRequest, Stellar.AccountFlagsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAccountFlags",
                XdrProtoServiceGrpcMarshaller.AccountFlagsEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AccountFlagsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAccountFlags</summary>
        public static readonly Method<Stellar.AccountFlagsDecodeRequest, Stellar.AccountFlagsDecodeResponse> DecodeAccountFlagsMethod =
            new Method<Stellar.AccountFlagsDecodeRequest, Stellar.AccountFlagsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAccountFlags",
                XdrProtoServiceGrpcMarshaller.AccountFlagsDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AccountFlagsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSponsorshipDescriptor</summary>
        public static readonly Method<Stellar.SponsorshipDescriptorEncodeRequest, Stellar.SponsorshipDescriptorEncodeResponse> EncodeSponsorshipDescriptorMethod =
            new Method<Stellar.SponsorshipDescriptorEncodeRequest, Stellar.SponsorshipDescriptorEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSponsorshipDescriptor",
                XdrProtoServiceGrpcMarshaller.SponsorshipDescriptorEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SponsorshipDescriptorEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSponsorshipDescriptor</summary>
        public static readonly Method<Stellar.SponsorshipDescriptorDecodeRequest, Stellar.SponsorshipDescriptorDecodeResponse> DecodeSponsorshipDescriptorMethod =
            new Method<Stellar.SponsorshipDescriptorDecodeRequest, Stellar.SponsorshipDescriptorDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSponsorshipDescriptor",
                XdrProtoServiceGrpcMarshaller.SponsorshipDescriptorDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SponsorshipDescriptorDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAccountEntryExtensionV3</summary>
        public static readonly Method<Stellar.AccountEntryExtensionV3EncodeRequest, Stellar.AccountEntryExtensionV3EncodeResponse> EncodeAccountEntryExtensionV3Method =
            new Method<Stellar.AccountEntryExtensionV3EncodeRequest, Stellar.AccountEntryExtensionV3EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAccountEntryExtensionV3",
                XdrProtoServiceGrpcMarshaller.AccountEntryExtensionV3EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AccountEntryExtensionV3EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAccountEntryExtensionV3</summary>
        public static readonly Method<Stellar.AccountEntryExtensionV3DecodeRequest, Stellar.AccountEntryExtensionV3DecodeResponse> DecodeAccountEntryExtensionV3Method =
            new Method<Stellar.AccountEntryExtensionV3DecodeRequest, Stellar.AccountEntryExtensionV3DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAccountEntryExtensionV3",
                XdrProtoServiceGrpcMarshaller.AccountEntryExtensionV3DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AccountEntryExtensionV3DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAccountEntryExtensionV2</summary>
        public static readonly Method<Stellar.AccountEntryExtensionV2EncodeRequest, Stellar.AccountEntryExtensionV2EncodeResponse> EncodeAccountEntryExtensionV2Method =
            new Method<Stellar.AccountEntryExtensionV2EncodeRequest, Stellar.AccountEntryExtensionV2EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAccountEntryExtensionV2",
                XdrProtoServiceGrpcMarshaller.AccountEntryExtensionV2EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AccountEntryExtensionV2EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAccountEntryExtensionV2</summary>
        public static readonly Method<Stellar.AccountEntryExtensionV2DecodeRequest, Stellar.AccountEntryExtensionV2DecodeResponse> DecodeAccountEntryExtensionV2Method =
            new Method<Stellar.AccountEntryExtensionV2DecodeRequest, Stellar.AccountEntryExtensionV2DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAccountEntryExtensionV2",
                XdrProtoServiceGrpcMarshaller.AccountEntryExtensionV2DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AccountEntryExtensionV2DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAccountEntryExtensionV1</summary>
        public static readonly Method<Stellar.AccountEntryExtensionV1EncodeRequest, Stellar.AccountEntryExtensionV1EncodeResponse> EncodeAccountEntryExtensionV1Method =
            new Method<Stellar.AccountEntryExtensionV1EncodeRequest, Stellar.AccountEntryExtensionV1EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAccountEntryExtensionV1",
                XdrProtoServiceGrpcMarshaller.AccountEntryExtensionV1EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AccountEntryExtensionV1EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAccountEntryExtensionV1</summary>
        public static readonly Method<Stellar.AccountEntryExtensionV1DecodeRequest, Stellar.AccountEntryExtensionV1DecodeResponse> DecodeAccountEntryExtensionV1Method =
            new Method<Stellar.AccountEntryExtensionV1DecodeRequest, Stellar.AccountEntryExtensionV1DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAccountEntryExtensionV1",
                XdrProtoServiceGrpcMarshaller.AccountEntryExtensionV1DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AccountEntryExtensionV1DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAccountEntry</summary>
        public static readonly Method<Stellar.AccountEntryEncodeRequest, Stellar.AccountEntryEncodeResponse> EncodeAccountEntryMethod =
            new Method<Stellar.AccountEntryEncodeRequest, Stellar.AccountEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAccountEntry",
                XdrProtoServiceGrpcMarshaller.AccountEntryEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AccountEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAccountEntry</summary>
        public static readonly Method<Stellar.AccountEntryDecodeRequest, Stellar.AccountEntryDecodeResponse> DecodeAccountEntryMethod =
            new Method<Stellar.AccountEntryDecodeRequest, Stellar.AccountEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAccountEntry",
                XdrProtoServiceGrpcMarshaller.AccountEntryDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AccountEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTrustLineFlags</summary>
        public static readonly Method<Stellar.TrustLineFlagsEncodeRequest, Stellar.TrustLineFlagsEncodeResponse> EncodeTrustLineFlagsMethod =
            new Method<Stellar.TrustLineFlagsEncodeRequest, Stellar.TrustLineFlagsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTrustLineFlags",
                XdrProtoServiceGrpcMarshaller.TrustLineFlagsEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TrustLineFlagsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTrustLineFlags</summary>
        public static readonly Method<Stellar.TrustLineFlagsDecodeRequest, Stellar.TrustLineFlagsDecodeResponse> DecodeTrustLineFlagsMethod =
            new Method<Stellar.TrustLineFlagsDecodeRequest, Stellar.TrustLineFlagsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTrustLineFlags",
                XdrProtoServiceGrpcMarshaller.TrustLineFlagsDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TrustLineFlagsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLiquidityPoolType</summary>
        public static readonly Method<Stellar.LiquidityPoolTypeEncodeRequest, Stellar.LiquidityPoolTypeEncodeResponse> EncodeLiquidityPoolTypeMethod =
            new Method<Stellar.LiquidityPoolTypeEncodeRequest, Stellar.LiquidityPoolTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLiquidityPoolType",
                XdrProtoServiceGrpcMarshaller.LiquidityPoolTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LiquidityPoolTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLiquidityPoolType</summary>
        public static readonly Method<Stellar.LiquidityPoolTypeDecodeRequest, Stellar.LiquidityPoolTypeDecodeResponse> DecodeLiquidityPoolTypeMethod =
            new Method<Stellar.LiquidityPoolTypeDecodeRequest, Stellar.LiquidityPoolTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLiquidityPoolType",
                XdrProtoServiceGrpcMarshaller.LiquidityPoolTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LiquidityPoolTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTrustLineAsset</summary>
        public static readonly Method<Stellar.TrustLineAssetEncodeRequest, Stellar.TrustLineAssetEncodeResponse> EncodeTrustLineAssetMethod =
            new Method<Stellar.TrustLineAssetEncodeRequest, Stellar.TrustLineAssetEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTrustLineAsset",
                XdrProtoServiceGrpcMarshaller.TrustLineAssetEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TrustLineAssetEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTrustLineAsset</summary>
        public static readonly Method<Stellar.TrustLineAssetDecodeRequest, Stellar.TrustLineAssetDecodeResponse> DecodeTrustLineAssetMethod =
            new Method<Stellar.TrustLineAssetDecodeRequest, Stellar.TrustLineAssetDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTrustLineAsset",
                XdrProtoServiceGrpcMarshaller.TrustLineAssetDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TrustLineAssetDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTrustLineEntryExtensionV2</summary>
        public static readonly Method<Stellar.TrustLineEntryExtensionV2EncodeRequest, Stellar.TrustLineEntryExtensionV2EncodeResponse> EncodeTrustLineEntryExtensionV2Method =
            new Method<Stellar.TrustLineEntryExtensionV2EncodeRequest, Stellar.TrustLineEntryExtensionV2EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTrustLineEntryExtensionV2",
                XdrProtoServiceGrpcMarshaller.TrustLineEntryExtensionV2EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TrustLineEntryExtensionV2EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTrustLineEntryExtensionV2</summary>
        public static readonly Method<Stellar.TrustLineEntryExtensionV2DecodeRequest, Stellar.TrustLineEntryExtensionV2DecodeResponse> DecodeTrustLineEntryExtensionV2Method =
            new Method<Stellar.TrustLineEntryExtensionV2DecodeRequest, Stellar.TrustLineEntryExtensionV2DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTrustLineEntryExtensionV2",
                XdrProtoServiceGrpcMarshaller.TrustLineEntryExtensionV2DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TrustLineEntryExtensionV2DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTrustLineEntry</summary>
        public static readonly Method<Stellar.TrustLineEntryEncodeRequest, Stellar.TrustLineEntryEncodeResponse> EncodeTrustLineEntryMethod =
            new Method<Stellar.TrustLineEntryEncodeRequest, Stellar.TrustLineEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTrustLineEntry",
                XdrProtoServiceGrpcMarshaller.TrustLineEntryEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TrustLineEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTrustLineEntry</summary>
        public static readonly Method<Stellar.TrustLineEntryDecodeRequest, Stellar.TrustLineEntryDecodeResponse> DecodeTrustLineEntryMethod =
            new Method<Stellar.TrustLineEntryDecodeRequest, Stellar.TrustLineEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTrustLineEntry",
                XdrProtoServiceGrpcMarshaller.TrustLineEntryDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TrustLineEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeOfferEntryFlags</summary>
        public static readonly Method<Stellar.OfferEntryFlagsEncodeRequest, Stellar.OfferEntryFlagsEncodeResponse> EncodeOfferEntryFlagsMethod =
            new Method<Stellar.OfferEntryFlagsEncodeRequest, Stellar.OfferEntryFlagsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeOfferEntryFlags",
                XdrProtoServiceGrpcMarshaller.OfferEntryFlagsEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.OfferEntryFlagsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeOfferEntryFlags</summary>
        public static readonly Method<Stellar.OfferEntryFlagsDecodeRequest, Stellar.OfferEntryFlagsDecodeResponse> DecodeOfferEntryFlagsMethod =
            new Method<Stellar.OfferEntryFlagsDecodeRequest, Stellar.OfferEntryFlagsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeOfferEntryFlags",
                XdrProtoServiceGrpcMarshaller.OfferEntryFlagsDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.OfferEntryFlagsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeOfferEntry</summary>
        public static readonly Method<Stellar.OfferEntryEncodeRequest, Stellar.OfferEntryEncodeResponse> EncodeOfferEntryMethod =
            new Method<Stellar.OfferEntryEncodeRequest, Stellar.OfferEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeOfferEntry",
                XdrProtoServiceGrpcMarshaller.OfferEntryEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.OfferEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeOfferEntry</summary>
        public static readonly Method<Stellar.OfferEntryDecodeRequest, Stellar.OfferEntryDecodeResponse> DecodeOfferEntryMethod =
            new Method<Stellar.OfferEntryDecodeRequest, Stellar.OfferEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeOfferEntry",
                XdrProtoServiceGrpcMarshaller.OfferEntryDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.OfferEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeDataEntry</summary>
        public static readonly Method<Stellar.DataEntryEncodeRequest, Stellar.DataEntryEncodeResponse> EncodeDataEntryMethod =
            new Method<Stellar.DataEntryEncodeRequest, Stellar.DataEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeDataEntry",
                XdrProtoServiceGrpcMarshaller.DataEntryEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.DataEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeDataEntry</summary>
        public static readonly Method<Stellar.DataEntryDecodeRequest, Stellar.DataEntryDecodeResponse> DecodeDataEntryMethod =
            new Method<Stellar.DataEntryDecodeRequest, Stellar.DataEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeDataEntry",
                XdrProtoServiceGrpcMarshaller.DataEntryDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.DataEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimPredicateType</summary>
        public static readonly Method<Stellar.ClaimPredicateTypeEncodeRequest, Stellar.ClaimPredicateTypeEncodeResponse> EncodeClaimPredicateTypeMethod =
            new Method<Stellar.ClaimPredicateTypeEncodeRequest, Stellar.ClaimPredicateTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimPredicateType",
                XdrProtoServiceGrpcMarshaller.ClaimPredicateTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimPredicateTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimPredicateType</summary>
        public static readonly Method<Stellar.ClaimPredicateTypeDecodeRequest, Stellar.ClaimPredicateTypeDecodeResponse> DecodeClaimPredicateTypeMethod =
            new Method<Stellar.ClaimPredicateTypeDecodeRequest, Stellar.ClaimPredicateTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimPredicateType",
                XdrProtoServiceGrpcMarshaller.ClaimPredicateTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimPredicateTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimPredicate</summary>
        public static readonly Method<Stellar.ClaimPredicateEncodeRequest, Stellar.ClaimPredicateEncodeResponse> EncodeClaimPredicateMethod =
            new Method<Stellar.ClaimPredicateEncodeRequest, Stellar.ClaimPredicateEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimPredicate",
                XdrProtoServiceGrpcMarshaller.ClaimPredicateEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimPredicateEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimPredicate</summary>
        public static readonly Method<Stellar.ClaimPredicateDecodeRequest, Stellar.ClaimPredicateDecodeResponse> DecodeClaimPredicateMethod =
            new Method<Stellar.ClaimPredicateDecodeRequest, Stellar.ClaimPredicateDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimPredicate",
                XdrProtoServiceGrpcMarshaller.ClaimPredicateDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimPredicateDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimantType</summary>
        public static readonly Method<Stellar.ClaimantTypeEncodeRequest, Stellar.ClaimantTypeEncodeResponse> EncodeClaimantTypeMethod =
            new Method<Stellar.ClaimantTypeEncodeRequest, Stellar.ClaimantTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimantType",
                XdrProtoServiceGrpcMarshaller.ClaimantTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimantTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimantType</summary>
        public static readonly Method<Stellar.ClaimantTypeDecodeRequest, Stellar.ClaimantTypeDecodeResponse> DecodeClaimantTypeMethod =
            new Method<Stellar.ClaimantTypeDecodeRequest, Stellar.ClaimantTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimantType",
                XdrProtoServiceGrpcMarshaller.ClaimantTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimantTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimant</summary>
        public static readonly Method<Stellar.ClaimantEncodeRequest, Stellar.ClaimantEncodeResponse> EncodeClaimantMethod =
            new Method<Stellar.ClaimantEncodeRequest, Stellar.ClaimantEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimant",
                XdrProtoServiceGrpcMarshaller.ClaimantEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimantEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimant</summary>
        public static readonly Method<Stellar.ClaimantDecodeRequest, Stellar.ClaimantDecodeResponse> DecodeClaimantMethod =
            new Method<Stellar.ClaimantDecodeRequest, Stellar.ClaimantDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimant",
                XdrProtoServiceGrpcMarshaller.ClaimantDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimantDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimableBalanceIDType</summary>
        public static readonly Method<Stellar.ClaimableBalanceIDTypeEncodeRequest, Stellar.ClaimableBalanceIDTypeEncodeResponse> EncodeClaimableBalanceIDTypeMethod =
            new Method<Stellar.ClaimableBalanceIDTypeEncodeRequest, Stellar.ClaimableBalanceIDTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimableBalanceIDType",
                XdrProtoServiceGrpcMarshaller.ClaimableBalanceIDTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimableBalanceIDTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimableBalanceIDType</summary>
        public static readonly Method<Stellar.ClaimableBalanceIDTypeDecodeRequest, Stellar.ClaimableBalanceIDTypeDecodeResponse> DecodeClaimableBalanceIDTypeMethod =
            new Method<Stellar.ClaimableBalanceIDTypeDecodeRequest, Stellar.ClaimableBalanceIDTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimableBalanceIDType",
                XdrProtoServiceGrpcMarshaller.ClaimableBalanceIDTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimableBalanceIDTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimableBalanceID</summary>
        public static readonly Method<Stellar.ClaimableBalanceIDEncodeRequest, Stellar.ClaimableBalanceIDEncodeResponse> EncodeClaimableBalanceIDMethod =
            new Method<Stellar.ClaimableBalanceIDEncodeRequest, Stellar.ClaimableBalanceIDEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimableBalanceID",
                XdrProtoServiceGrpcMarshaller.ClaimableBalanceIDEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimableBalanceIDEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimableBalanceID</summary>
        public static readonly Method<Stellar.ClaimableBalanceIDDecodeRequest, Stellar.ClaimableBalanceIDDecodeResponse> DecodeClaimableBalanceIDMethod =
            new Method<Stellar.ClaimableBalanceIDDecodeRequest, Stellar.ClaimableBalanceIDDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimableBalanceID",
                XdrProtoServiceGrpcMarshaller.ClaimableBalanceIDDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimableBalanceIDDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimableBalanceFlags</summary>
        public static readonly Method<Stellar.ClaimableBalanceFlagsEncodeRequest, Stellar.ClaimableBalanceFlagsEncodeResponse> EncodeClaimableBalanceFlagsMethod =
            new Method<Stellar.ClaimableBalanceFlagsEncodeRequest, Stellar.ClaimableBalanceFlagsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimableBalanceFlags",
                XdrProtoServiceGrpcMarshaller.ClaimableBalanceFlagsEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimableBalanceFlagsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimableBalanceFlags</summary>
        public static readonly Method<Stellar.ClaimableBalanceFlagsDecodeRequest, Stellar.ClaimableBalanceFlagsDecodeResponse> DecodeClaimableBalanceFlagsMethod =
            new Method<Stellar.ClaimableBalanceFlagsDecodeRequest, Stellar.ClaimableBalanceFlagsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimableBalanceFlags",
                XdrProtoServiceGrpcMarshaller.ClaimableBalanceFlagsDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimableBalanceFlagsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimableBalanceEntryExtensionV1</summary>
        public static readonly Method<Stellar.ClaimableBalanceEntryExtensionV1EncodeRequest, Stellar.ClaimableBalanceEntryExtensionV1EncodeResponse> EncodeClaimableBalanceEntryExtensionV1Method =
            new Method<Stellar.ClaimableBalanceEntryExtensionV1EncodeRequest, Stellar.ClaimableBalanceEntryExtensionV1EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimableBalanceEntryExtensionV1",
                XdrProtoServiceGrpcMarshaller.ClaimableBalanceEntryExtensionV1EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimableBalanceEntryExtensionV1EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimableBalanceEntryExtensionV1</summary>
        public static readonly Method<Stellar.ClaimableBalanceEntryExtensionV1DecodeRequest, Stellar.ClaimableBalanceEntryExtensionV1DecodeResponse> DecodeClaimableBalanceEntryExtensionV1Method =
            new Method<Stellar.ClaimableBalanceEntryExtensionV1DecodeRequest, Stellar.ClaimableBalanceEntryExtensionV1DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimableBalanceEntryExtensionV1",
                XdrProtoServiceGrpcMarshaller.ClaimableBalanceEntryExtensionV1DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimableBalanceEntryExtensionV1DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimableBalanceEntry</summary>
        public static readonly Method<Stellar.ClaimableBalanceEntryEncodeRequest, Stellar.ClaimableBalanceEntryEncodeResponse> EncodeClaimableBalanceEntryMethod =
            new Method<Stellar.ClaimableBalanceEntryEncodeRequest, Stellar.ClaimableBalanceEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimableBalanceEntry",
                XdrProtoServiceGrpcMarshaller.ClaimableBalanceEntryEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimableBalanceEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimableBalanceEntry</summary>
        public static readonly Method<Stellar.ClaimableBalanceEntryDecodeRequest, Stellar.ClaimableBalanceEntryDecodeResponse> DecodeClaimableBalanceEntryMethod =
            new Method<Stellar.ClaimableBalanceEntryDecodeRequest, Stellar.ClaimableBalanceEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimableBalanceEntry",
                XdrProtoServiceGrpcMarshaller.ClaimableBalanceEntryDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimableBalanceEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLiquidityPoolConstantProductParameters</summary>
        public static readonly Method<Stellar.LiquidityPoolConstantProductParametersEncodeRequest, Stellar.LiquidityPoolConstantProductParametersEncodeResponse> EncodeLiquidityPoolConstantProductParametersMethod =
            new Method<Stellar.LiquidityPoolConstantProductParametersEncodeRequest, Stellar.LiquidityPoolConstantProductParametersEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLiquidityPoolConstantProductParameters",
                XdrProtoServiceGrpcMarshaller.LiquidityPoolConstantProductParametersEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LiquidityPoolConstantProductParametersEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLiquidityPoolConstantProductParameters</summary>
        public static readonly Method<Stellar.LiquidityPoolConstantProductParametersDecodeRequest, Stellar.LiquidityPoolConstantProductParametersDecodeResponse> DecodeLiquidityPoolConstantProductParametersMethod =
            new Method<Stellar.LiquidityPoolConstantProductParametersDecodeRequest, Stellar.LiquidityPoolConstantProductParametersDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLiquidityPoolConstantProductParameters",
                XdrProtoServiceGrpcMarshaller.LiquidityPoolConstantProductParametersDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LiquidityPoolConstantProductParametersDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLiquidityPoolEntry</summary>
        public static readonly Method<Stellar.LiquidityPoolEntryEncodeRequest, Stellar.LiquidityPoolEntryEncodeResponse> EncodeLiquidityPoolEntryMethod =
            new Method<Stellar.LiquidityPoolEntryEncodeRequest, Stellar.LiquidityPoolEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLiquidityPoolEntry",
                XdrProtoServiceGrpcMarshaller.LiquidityPoolEntryEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LiquidityPoolEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLiquidityPoolEntry</summary>
        public static readonly Method<Stellar.LiquidityPoolEntryDecodeRequest, Stellar.LiquidityPoolEntryDecodeResponse> DecodeLiquidityPoolEntryMethod =
            new Method<Stellar.LiquidityPoolEntryDecodeRequest, Stellar.LiquidityPoolEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLiquidityPoolEntry",
                XdrProtoServiceGrpcMarshaller.LiquidityPoolEntryDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LiquidityPoolEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeContractDataDurability</summary>
        public static readonly Method<Stellar.ContractDataDurabilityEncodeRequest, Stellar.ContractDataDurabilityEncodeResponse> EncodeContractDataDurabilityMethod =
            new Method<Stellar.ContractDataDurabilityEncodeRequest, Stellar.ContractDataDurabilityEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeContractDataDurability",
                XdrProtoServiceGrpcMarshaller.ContractDataDurabilityEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ContractDataDurabilityEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeContractDataDurability</summary>
        public static readonly Method<Stellar.ContractDataDurabilityDecodeRequest, Stellar.ContractDataDurabilityDecodeResponse> DecodeContractDataDurabilityMethod =
            new Method<Stellar.ContractDataDurabilityDecodeRequest, Stellar.ContractDataDurabilityDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeContractDataDurability",
                XdrProtoServiceGrpcMarshaller.ContractDataDurabilityDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ContractDataDurabilityDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeContractDataEntry</summary>
        public static readonly Method<Stellar.ContractDataEntryEncodeRequest, Stellar.ContractDataEntryEncodeResponse> EncodeContractDataEntryMethod =
            new Method<Stellar.ContractDataEntryEncodeRequest, Stellar.ContractDataEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeContractDataEntry",
                XdrProtoServiceGrpcMarshaller.ContractDataEntryEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ContractDataEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeContractDataEntry</summary>
        public static readonly Method<Stellar.ContractDataEntryDecodeRequest, Stellar.ContractDataEntryDecodeResponse> DecodeContractDataEntryMethod =
            new Method<Stellar.ContractDataEntryDecodeRequest, Stellar.ContractDataEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeContractDataEntry",
                XdrProtoServiceGrpcMarshaller.ContractDataEntryDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ContractDataEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeContractCodeCostInputs</summary>
        public static readonly Method<Stellar.ContractCodeCostInputsEncodeRequest, Stellar.ContractCodeCostInputsEncodeResponse> EncodeContractCodeCostInputsMethod =
            new Method<Stellar.ContractCodeCostInputsEncodeRequest, Stellar.ContractCodeCostInputsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeContractCodeCostInputs",
                XdrProtoServiceGrpcMarshaller.ContractCodeCostInputsEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ContractCodeCostInputsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeContractCodeCostInputs</summary>
        public static readonly Method<Stellar.ContractCodeCostInputsDecodeRequest, Stellar.ContractCodeCostInputsDecodeResponse> DecodeContractCodeCostInputsMethod =
            new Method<Stellar.ContractCodeCostInputsDecodeRequest, Stellar.ContractCodeCostInputsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeContractCodeCostInputs",
                XdrProtoServiceGrpcMarshaller.ContractCodeCostInputsDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ContractCodeCostInputsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeContractCodeEntry</summary>
        public static readonly Method<Stellar.ContractCodeEntryEncodeRequest, Stellar.ContractCodeEntryEncodeResponse> EncodeContractCodeEntryMethod =
            new Method<Stellar.ContractCodeEntryEncodeRequest, Stellar.ContractCodeEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeContractCodeEntry",
                XdrProtoServiceGrpcMarshaller.ContractCodeEntryEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ContractCodeEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeContractCodeEntry</summary>
        public static readonly Method<Stellar.ContractCodeEntryDecodeRequest, Stellar.ContractCodeEntryDecodeResponse> DecodeContractCodeEntryMethod =
            new Method<Stellar.ContractCodeEntryDecodeRequest, Stellar.ContractCodeEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeContractCodeEntry",
                XdrProtoServiceGrpcMarshaller.ContractCodeEntryDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ContractCodeEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTTLEntry</summary>
        public static readonly Method<Stellar.TTLEntryEncodeRequest, Stellar.TTLEntryEncodeResponse> EncodeTTLEntryMethod =
            new Method<Stellar.TTLEntryEncodeRequest, Stellar.TTLEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTTLEntry",
                XdrProtoServiceGrpcMarshaller.TTLEntryEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TTLEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTTLEntry</summary>
        public static readonly Method<Stellar.TTLEntryDecodeRequest, Stellar.TTLEntryDecodeResponse> DecodeTTLEntryMethod =
            new Method<Stellar.TTLEntryDecodeRequest, Stellar.TTLEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTTLEntry",
                XdrProtoServiceGrpcMarshaller.TTLEntryDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TTLEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerEntryExtensionV1</summary>
        public static readonly Method<Stellar.LedgerEntryExtensionV1EncodeRequest, Stellar.LedgerEntryExtensionV1EncodeResponse> EncodeLedgerEntryExtensionV1Method =
            new Method<Stellar.LedgerEntryExtensionV1EncodeRequest, Stellar.LedgerEntryExtensionV1EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerEntryExtensionV1",
                XdrProtoServiceGrpcMarshaller.LedgerEntryExtensionV1EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerEntryExtensionV1EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerEntryExtensionV1</summary>
        public static readonly Method<Stellar.LedgerEntryExtensionV1DecodeRequest, Stellar.LedgerEntryExtensionV1DecodeResponse> DecodeLedgerEntryExtensionV1Method =
            new Method<Stellar.LedgerEntryExtensionV1DecodeRequest, Stellar.LedgerEntryExtensionV1DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerEntryExtensionV1",
                XdrProtoServiceGrpcMarshaller.LedgerEntryExtensionV1DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerEntryExtensionV1DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerEntry</summary>
        public static readonly Method<Stellar.LedgerEntryEncodeRequest, Stellar.LedgerEntryEncodeResponse> EncodeLedgerEntryMethod =
            new Method<Stellar.LedgerEntryEncodeRequest, Stellar.LedgerEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerEntry",
                XdrProtoServiceGrpcMarshaller.LedgerEntryEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerEntry</summary>
        public static readonly Method<Stellar.LedgerEntryDecodeRequest, Stellar.LedgerEntryDecodeResponse> DecodeLedgerEntryMethod =
            new Method<Stellar.LedgerEntryDecodeRequest, Stellar.LedgerEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerEntry",
                XdrProtoServiceGrpcMarshaller.LedgerEntryDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerKey</summary>
        public static readonly Method<Stellar.LedgerKeyEncodeRequest, Stellar.LedgerKeyEncodeResponse> EncodeLedgerKeyMethod =
            new Method<Stellar.LedgerKeyEncodeRequest, Stellar.LedgerKeyEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerKey",
                XdrProtoServiceGrpcMarshaller.LedgerKeyEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerKeyEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerKey</summary>
        public static readonly Method<Stellar.LedgerKeyDecodeRequest, Stellar.LedgerKeyDecodeResponse> DecodeLedgerKeyMethod =
            new Method<Stellar.LedgerKeyDecodeRequest, Stellar.LedgerKeyDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerKey",
                XdrProtoServiceGrpcMarshaller.LedgerKeyDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerKeyDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeEnvelopeType</summary>
        public static readonly Method<Stellar.EnvelopeTypeEncodeRequest, Stellar.EnvelopeTypeEncodeResponse> EncodeEnvelopeTypeMethod =
            new Method<Stellar.EnvelopeTypeEncodeRequest, Stellar.EnvelopeTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeEnvelopeType",
                XdrProtoServiceGrpcMarshaller.EnvelopeTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.EnvelopeTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeEnvelopeType</summary>
        public static readonly Method<Stellar.EnvelopeTypeDecodeRequest, Stellar.EnvelopeTypeDecodeResponse> DecodeEnvelopeTypeMethod =
            new Method<Stellar.EnvelopeTypeDecodeRequest, Stellar.EnvelopeTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeEnvelopeType",
                XdrProtoServiceGrpcMarshaller.EnvelopeTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.EnvelopeTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeBucketListType</summary>
        public static readonly Method<Stellar.BucketListTypeEncodeRequest, Stellar.BucketListTypeEncodeResponse> EncodeBucketListTypeMethod =
            new Method<Stellar.BucketListTypeEncodeRequest, Stellar.BucketListTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeBucketListType",
                XdrProtoServiceGrpcMarshaller.BucketListTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.BucketListTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeBucketListType</summary>
        public static readonly Method<Stellar.BucketListTypeDecodeRequest, Stellar.BucketListTypeDecodeResponse> DecodeBucketListTypeMethod =
            new Method<Stellar.BucketListTypeDecodeRequest, Stellar.BucketListTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeBucketListType",
                XdrProtoServiceGrpcMarshaller.BucketListTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.BucketListTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeBucketEntryType</summary>
        public static readonly Method<Stellar.BucketEntryTypeEncodeRequest, Stellar.BucketEntryTypeEncodeResponse> EncodeBucketEntryTypeMethod =
            new Method<Stellar.BucketEntryTypeEncodeRequest, Stellar.BucketEntryTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeBucketEntryType",
                XdrProtoServiceGrpcMarshaller.BucketEntryTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.BucketEntryTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeBucketEntryType</summary>
        public static readonly Method<Stellar.BucketEntryTypeDecodeRequest, Stellar.BucketEntryTypeDecodeResponse> DecodeBucketEntryTypeMethod =
            new Method<Stellar.BucketEntryTypeDecodeRequest, Stellar.BucketEntryTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeBucketEntryType",
                XdrProtoServiceGrpcMarshaller.BucketEntryTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.BucketEntryTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeHotArchiveBucketEntryType</summary>
        public static readonly Method<Stellar.HotArchiveBucketEntryTypeEncodeRequest, Stellar.HotArchiveBucketEntryTypeEncodeResponse> EncodeHotArchiveBucketEntryTypeMethod =
            new Method<Stellar.HotArchiveBucketEntryTypeEncodeRequest, Stellar.HotArchiveBucketEntryTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeHotArchiveBucketEntryType",
                XdrProtoServiceGrpcMarshaller.HotArchiveBucketEntryTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.HotArchiveBucketEntryTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeHotArchiveBucketEntryType</summary>
        public static readonly Method<Stellar.HotArchiveBucketEntryTypeDecodeRequest, Stellar.HotArchiveBucketEntryTypeDecodeResponse> DecodeHotArchiveBucketEntryTypeMethod =
            new Method<Stellar.HotArchiveBucketEntryTypeDecodeRequest, Stellar.HotArchiveBucketEntryTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeHotArchiveBucketEntryType",
                XdrProtoServiceGrpcMarshaller.HotArchiveBucketEntryTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.HotArchiveBucketEntryTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeColdArchiveBucketEntryType</summary>
        public static readonly Method<Stellar.ColdArchiveBucketEntryTypeEncodeRequest, Stellar.ColdArchiveBucketEntryTypeEncodeResponse> EncodeColdArchiveBucketEntryTypeMethod =
            new Method<Stellar.ColdArchiveBucketEntryTypeEncodeRequest, Stellar.ColdArchiveBucketEntryTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeColdArchiveBucketEntryType",
                XdrProtoServiceGrpcMarshaller.ColdArchiveBucketEntryTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ColdArchiveBucketEntryTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeColdArchiveBucketEntryType</summary>
        public static readonly Method<Stellar.ColdArchiveBucketEntryTypeDecodeRequest, Stellar.ColdArchiveBucketEntryTypeDecodeResponse> DecodeColdArchiveBucketEntryTypeMethod =
            new Method<Stellar.ColdArchiveBucketEntryTypeDecodeRequest, Stellar.ColdArchiveBucketEntryTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeColdArchiveBucketEntryType",
                XdrProtoServiceGrpcMarshaller.ColdArchiveBucketEntryTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ColdArchiveBucketEntryTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeBucketMetadata</summary>
        public static readonly Method<Stellar.BucketMetadataEncodeRequest, Stellar.BucketMetadataEncodeResponse> EncodeBucketMetadataMethod =
            new Method<Stellar.BucketMetadataEncodeRequest, Stellar.BucketMetadataEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeBucketMetadata",
                XdrProtoServiceGrpcMarshaller.BucketMetadataEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.BucketMetadataEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeBucketMetadata</summary>
        public static readonly Method<Stellar.BucketMetadataDecodeRequest, Stellar.BucketMetadataDecodeResponse> DecodeBucketMetadataMethod =
            new Method<Stellar.BucketMetadataDecodeRequest, Stellar.BucketMetadataDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeBucketMetadata",
                XdrProtoServiceGrpcMarshaller.BucketMetadataDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.BucketMetadataDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeBucketEntry</summary>
        public static readonly Method<Stellar.BucketEntryEncodeRequest, Stellar.BucketEntryEncodeResponse> EncodeBucketEntryMethod =
            new Method<Stellar.BucketEntryEncodeRequest, Stellar.BucketEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeBucketEntry",
                XdrProtoServiceGrpcMarshaller.BucketEntryEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.BucketEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeBucketEntry</summary>
        public static readonly Method<Stellar.BucketEntryDecodeRequest, Stellar.BucketEntryDecodeResponse> DecodeBucketEntryMethod =
            new Method<Stellar.BucketEntryDecodeRequest, Stellar.BucketEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeBucketEntry",
                XdrProtoServiceGrpcMarshaller.BucketEntryDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.BucketEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeHotArchiveBucketEntry</summary>
        public static readonly Method<Stellar.HotArchiveBucketEntryEncodeRequest, Stellar.HotArchiveBucketEntryEncodeResponse> EncodeHotArchiveBucketEntryMethod =
            new Method<Stellar.HotArchiveBucketEntryEncodeRequest, Stellar.HotArchiveBucketEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeHotArchiveBucketEntry",
                XdrProtoServiceGrpcMarshaller.HotArchiveBucketEntryEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.HotArchiveBucketEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeHotArchiveBucketEntry</summary>
        public static readonly Method<Stellar.HotArchiveBucketEntryDecodeRequest, Stellar.HotArchiveBucketEntryDecodeResponse> DecodeHotArchiveBucketEntryMethod =
            new Method<Stellar.HotArchiveBucketEntryDecodeRequest, Stellar.HotArchiveBucketEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeHotArchiveBucketEntry",
                XdrProtoServiceGrpcMarshaller.HotArchiveBucketEntryDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.HotArchiveBucketEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeColdArchiveArchivedLeaf</summary>
        public static readonly Method<Stellar.ColdArchiveArchivedLeafEncodeRequest, Stellar.ColdArchiveArchivedLeafEncodeResponse> EncodeColdArchiveArchivedLeafMethod =
            new Method<Stellar.ColdArchiveArchivedLeafEncodeRequest, Stellar.ColdArchiveArchivedLeafEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeColdArchiveArchivedLeaf",
                XdrProtoServiceGrpcMarshaller.ColdArchiveArchivedLeafEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ColdArchiveArchivedLeafEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeColdArchiveArchivedLeaf</summary>
        public static readonly Method<Stellar.ColdArchiveArchivedLeafDecodeRequest, Stellar.ColdArchiveArchivedLeafDecodeResponse> DecodeColdArchiveArchivedLeafMethod =
            new Method<Stellar.ColdArchiveArchivedLeafDecodeRequest, Stellar.ColdArchiveArchivedLeafDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeColdArchiveArchivedLeaf",
                XdrProtoServiceGrpcMarshaller.ColdArchiveArchivedLeafDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ColdArchiveArchivedLeafDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeColdArchiveDeletedLeaf</summary>
        public static readonly Method<Stellar.ColdArchiveDeletedLeafEncodeRequest, Stellar.ColdArchiveDeletedLeafEncodeResponse> EncodeColdArchiveDeletedLeafMethod =
            new Method<Stellar.ColdArchiveDeletedLeafEncodeRequest, Stellar.ColdArchiveDeletedLeafEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeColdArchiveDeletedLeaf",
                XdrProtoServiceGrpcMarshaller.ColdArchiveDeletedLeafEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ColdArchiveDeletedLeafEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeColdArchiveDeletedLeaf</summary>
        public static readonly Method<Stellar.ColdArchiveDeletedLeafDecodeRequest, Stellar.ColdArchiveDeletedLeafDecodeResponse> DecodeColdArchiveDeletedLeafMethod =
            new Method<Stellar.ColdArchiveDeletedLeafDecodeRequest, Stellar.ColdArchiveDeletedLeafDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeColdArchiveDeletedLeaf",
                XdrProtoServiceGrpcMarshaller.ColdArchiveDeletedLeafDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ColdArchiveDeletedLeafDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeColdArchiveBoundaryLeaf</summary>
        public static readonly Method<Stellar.ColdArchiveBoundaryLeafEncodeRequest, Stellar.ColdArchiveBoundaryLeafEncodeResponse> EncodeColdArchiveBoundaryLeafMethod =
            new Method<Stellar.ColdArchiveBoundaryLeafEncodeRequest, Stellar.ColdArchiveBoundaryLeafEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeColdArchiveBoundaryLeaf",
                XdrProtoServiceGrpcMarshaller.ColdArchiveBoundaryLeafEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ColdArchiveBoundaryLeafEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeColdArchiveBoundaryLeaf</summary>
        public static readonly Method<Stellar.ColdArchiveBoundaryLeafDecodeRequest, Stellar.ColdArchiveBoundaryLeafDecodeResponse> DecodeColdArchiveBoundaryLeafMethod =
            new Method<Stellar.ColdArchiveBoundaryLeafDecodeRequest, Stellar.ColdArchiveBoundaryLeafDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeColdArchiveBoundaryLeaf",
                XdrProtoServiceGrpcMarshaller.ColdArchiveBoundaryLeafDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ColdArchiveBoundaryLeafDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeColdArchiveHashEntry</summary>
        public static readonly Method<Stellar.ColdArchiveHashEntryEncodeRequest, Stellar.ColdArchiveHashEntryEncodeResponse> EncodeColdArchiveHashEntryMethod =
            new Method<Stellar.ColdArchiveHashEntryEncodeRequest, Stellar.ColdArchiveHashEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeColdArchiveHashEntry",
                XdrProtoServiceGrpcMarshaller.ColdArchiveHashEntryEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ColdArchiveHashEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeColdArchiveHashEntry</summary>
        public static readonly Method<Stellar.ColdArchiveHashEntryDecodeRequest, Stellar.ColdArchiveHashEntryDecodeResponse> DecodeColdArchiveHashEntryMethod =
            new Method<Stellar.ColdArchiveHashEntryDecodeRequest, Stellar.ColdArchiveHashEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeColdArchiveHashEntry",
                XdrProtoServiceGrpcMarshaller.ColdArchiveHashEntryDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ColdArchiveHashEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeColdArchiveBucketEntry</summary>
        public static readonly Method<Stellar.ColdArchiveBucketEntryEncodeRequest, Stellar.ColdArchiveBucketEntryEncodeResponse> EncodeColdArchiveBucketEntryMethod =
            new Method<Stellar.ColdArchiveBucketEntryEncodeRequest, Stellar.ColdArchiveBucketEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeColdArchiveBucketEntry",
                XdrProtoServiceGrpcMarshaller.ColdArchiveBucketEntryEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ColdArchiveBucketEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeColdArchiveBucketEntry</summary>
        public static readonly Method<Stellar.ColdArchiveBucketEntryDecodeRequest, Stellar.ColdArchiveBucketEntryDecodeResponse> DecodeColdArchiveBucketEntryMethod =
            new Method<Stellar.ColdArchiveBucketEntryDecodeRequest, Stellar.ColdArchiveBucketEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeColdArchiveBucketEntry",
                XdrProtoServiceGrpcMarshaller.ColdArchiveBucketEntryDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ColdArchiveBucketEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeUpgradeType</summary>
        public static readonly Method<Stellar.UpgradeTypeEncodeRequest, Stellar.UpgradeTypeEncodeResponse> EncodeUpgradeTypeMethod =
            new Method<Stellar.UpgradeTypeEncodeRequest, Stellar.UpgradeTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeUpgradeType",
                XdrProtoServiceGrpcMarshaller.UpgradeTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.UpgradeTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeUpgradeType</summary>
        public static readonly Method<Stellar.UpgradeTypeDecodeRequest, Stellar.UpgradeTypeDecodeResponse> DecodeUpgradeTypeMethod =
            new Method<Stellar.UpgradeTypeDecodeRequest, Stellar.UpgradeTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeUpgradeType",
                XdrProtoServiceGrpcMarshaller.UpgradeTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.UpgradeTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeStellarValueType</summary>
        public static readonly Method<Stellar.StellarValueTypeEncodeRequest, Stellar.StellarValueTypeEncodeResponse> EncodeStellarValueTypeMethod =
            new Method<Stellar.StellarValueTypeEncodeRequest, Stellar.StellarValueTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeStellarValueType",
                XdrProtoServiceGrpcMarshaller.StellarValueTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.StellarValueTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeStellarValueType</summary>
        public static readonly Method<Stellar.StellarValueTypeDecodeRequest, Stellar.StellarValueTypeDecodeResponse> DecodeStellarValueTypeMethod =
            new Method<Stellar.StellarValueTypeDecodeRequest, Stellar.StellarValueTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeStellarValueType",
                XdrProtoServiceGrpcMarshaller.StellarValueTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.StellarValueTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerCloseValueSignature</summary>
        public static readonly Method<Stellar.LedgerCloseValueSignatureEncodeRequest, Stellar.LedgerCloseValueSignatureEncodeResponse> EncodeLedgerCloseValueSignatureMethod =
            new Method<Stellar.LedgerCloseValueSignatureEncodeRequest, Stellar.LedgerCloseValueSignatureEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerCloseValueSignature",
                XdrProtoServiceGrpcMarshaller.LedgerCloseValueSignatureEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerCloseValueSignatureEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerCloseValueSignature</summary>
        public static readonly Method<Stellar.LedgerCloseValueSignatureDecodeRequest, Stellar.LedgerCloseValueSignatureDecodeResponse> DecodeLedgerCloseValueSignatureMethod =
            new Method<Stellar.LedgerCloseValueSignatureDecodeRequest, Stellar.LedgerCloseValueSignatureDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerCloseValueSignature",
                XdrProtoServiceGrpcMarshaller.LedgerCloseValueSignatureDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerCloseValueSignatureDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeStellarValue</summary>
        public static readonly Method<Stellar.StellarValueEncodeRequest, Stellar.StellarValueEncodeResponse> EncodeStellarValueMethod =
            new Method<Stellar.StellarValueEncodeRequest, Stellar.StellarValueEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeStellarValue",
                XdrProtoServiceGrpcMarshaller.StellarValueEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.StellarValueEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeStellarValue</summary>
        public static readonly Method<Stellar.StellarValueDecodeRequest, Stellar.StellarValueDecodeResponse> DecodeStellarValueMethod =
            new Method<Stellar.StellarValueDecodeRequest, Stellar.StellarValueDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeStellarValue",
                XdrProtoServiceGrpcMarshaller.StellarValueDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.StellarValueDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerHeaderFlags</summary>
        public static readonly Method<Stellar.LedgerHeaderFlagsEncodeRequest, Stellar.LedgerHeaderFlagsEncodeResponse> EncodeLedgerHeaderFlagsMethod =
            new Method<Stellar.LedgerHeaderFlagsEncodeRequest, Stellar.LedgerHeaderFlagsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerHeaderFlags",
                XdrProtoServiceGrpcMarshaller.LedgerHeaderFlagsEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerHeaderFlagsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerHeaderFlags</summary>
        public static readonly Method<Stellar.LedgerHeaderFlagsDecodeRequest, Stellar.LedgerHeaderFlagsDecodeResponse> DecodeLedgerHeaderFlagsMethod =
            new Method<Stellar.LedgerHeaderFlagsDecodeRequest, Stellar.LedgerHeaderFlagsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerHeaderFlags",
                XdrProtoServiceGrpcMarshaller.LedgerHeaderFlagsDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerHeaderFlagsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerHeaderExtensionV1</summary>
        public static readonly Method<Stellar.LedgerHeaderExtensionV1EncodeRequest, Stellar.LedgerHeaderExtensionV1EncodeResponse> EncodeLedgerHeaderExtensionV1Method =
            new Method<Stellar.LedgerHeaderExtensionV1EncodeRequest, Stellar.LedgerHeaderExtensionV1EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerHeaderExtensionV1",
                XdrProtoServiceGrpcMarshaller.LedgerHeaderExtensionV1EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerHeaderExtensionV1EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerHeaderExtensionV1</summary>
        public static readonly Method<Stellar.LedgerHeaderExtensionV1DecodeRequest, Stellar.LedgerHeaderExtensionV1DecodeResponse> DecodeLedgerHeaderExtensionV1Method =
            new Method<Stellar.LedgerHeaderExtensionV1DecodeRequest, Stellar.LedgerHeaderExtensionV1DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerHeaderExtensionV1",
                XdrProtoServiceGrpcMarshaller.LedgerHeaderExtensionV1DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerHeaderExtensionV1DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerHeader</summary>
        public static readonly Method<Stellar.LedgerHeaderEncodeRequest, Stellar.LedgerHeaderEncodeResponse> EncodeLedgerHeaderMethod =
            new Method<Stellar.LedgerHeaderEncodeRequest, Stellar.LedgerHeaderEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerHeader",
                XdrProtoServiceGrpcMarshaller.LedgerHeaderEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerHeaderEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerHeader</summary>
        public static readonly Method<Stellar.LedgerHeaderDecodeRequest, Stellar.LedgerHeaderDecodeResponse> DecodeLedgerHeaderMethod =
            new Method<Stellar.LedgerHeaderDecodeRequest, Stellar.LedgerHeaderDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerHeader",
                XdrProtoServiceGrpcMarshaller.LedgerHeaderDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerHeaderDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerUpgradeType</summary>
        public static readonly Method<Stellar.LedgerUpgradeTypeEncodeRequest, Stellar.LedgerUpgradeTypeEncodeResponse> EncodeLedgerUpgradeTypeMethod =
            new Method<Stellar.LedgerUpgradeTypeEncodeRequest, Stellar.LedgerUpgradeTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerUpgradeType",
                XdrProtoServiceGrpcMarshaller.LedgerUpgradeTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerUpgradeTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerUpgradeType</summary>
        public static readonly Method<Stellar.LedgerUpgradeTypeDecodeRequest, Stellar.LedgerUpgradeTypeDecodeResponse> DecodeLedgerUpgradeTypeMethod =
            new Method<Stellar.LedgerUpgradeTypeDecodeRequest, Stellar.LedgerUpgradeTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerUpgradeType",
                XdrProtoServiceGrpcMarshaller.LedgerUpgradeTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerUpgradeTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeConfigUpgradeSetKey</summary>
        public static readonly Method<Stellar.ConfigUpgradeSetKeyEncodeRequest, Stellar.ConfigUpgradeSetKeyEncodeResponse> EncodeConfigUpgradeSetKeyMethod =
            new Method<Stellar.ConfigUpgradeSetKeyEncodeRequest, Stellar.ConfigUpgradeSetKeyEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeConfigUpgradeSetKey",
                XdrProtoServiceGrpcMarshaller.ConfigUpgradeSetKeyEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ConfigUpgradeSetKeyEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeConfigUpgradeSetKey</summary>
        public static readonly Method<Stellar.ConfigUpgradeSetKeyDecodeRequest, Stellar.ConfigUpgradeSetKeyDecodeResponse> DecodeConfigUpgradeSetKeyMethod =
            new Method<Stellar.ConfigUpgradeSetKeyDecodeRequest, Stellar.ConfigUpgradeSetKeyDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeConfigUpgradeSetKey",
                XdrProtoServiceGrpcMarshaller.ConfigUpgradeSetKeyDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ConfigUpgradeSetKeyDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerUpgrade</summary>
        public static readonly Method<Stellar.LedgerUpgradeEncodeRequest, Stellar.LedgerUpgradeEncodeResponse> EncodeLedgerUpgradeMethod =
            new Method<Stellar.LedgerUpgradeEncodeRequest, Stellar.LedgerUpgradeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerUpgrade",
                XdrProtoServiceGrpcMarshaller.LedgerUpgradeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerUpgradeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerUpgrade</summary>
        public static readonly Method<Stellar.LedgerUpgradeDecodeRequest, Stellar.LedgerUpgradeDecodeResponse> DecodeLedgerUpgradeMethod =
            new Method<Stellar.LedgerUpgradeDecodeRequest, Stellar.LedgerUpgradeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerUpgrade",
                XdrProtoServiceGrpcMarshaller.LedgerUpgradeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerUpgradeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeConfigUpgradeSet</summary>
        public static readonly Method<Stellar.ConfigUpgradeSetEncodeRequest, Stellar.ConfigUpgradeSetEncodeResponse> EncodeConfigUpgradeSetMethod =
            new Method<Stellar.ConfigUpgradeSetEncodeRequest, Stellar.ConfigUpgradeSetEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeConfigUpgradeSet",
                XdrProtoServiceGrpcMarshaller.ConfigUpgradeSetEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ConfigUpgradeSetEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeConfigUpgradeSet</summary>
        public static readonly Method<Stellar.ConfigUpgradeSetDecodeRequest, Stellar.ConfigUpgradeSetDecodeResponse> DecodeConfigUpgradeSetMethod =
            new Method<Stellar.ConfigUpgradeSetDecodeRequest, Stellar.ConfigUpgradeSetDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeConfigUpgradeSet",
                XdrProtoServiceGrpcMarshaller.ConfigUpgradeSetDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ConfigUpgradeSetDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTxSetComponentType</summary>
        public static readonly Method<Stellar.TxSetComponentTypeEncodeRequest, Stellar.TxSetComponentTypeEncodeResponse> EncodeTxSetComponentTypeMethod =
            new Method<Stellar.TxSetComponentTypeEncodeRequest, Stellar.TxSetComponentTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTxSetComponentType",
                XdrProtoServiceGrpcMarshaller.TxSetComponentTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TxSetComponentTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTxSetComponentType</summary>
        public static readonly Method<Stellar.TxSetComponentTypeDecodeRequest, Stellar.TxSetComponentTypeDecodeResponse> DecodeTxSetComponentTypeMethod =
            new Method<Stellar.TxSetComponentTypeDecodeRequest, Stellar.TxSetComponentTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTxSetComponentType",
                XdrProtoServiceGrpcMarshaller.TxSetComponentTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TxSetComponentTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTxSetComponent</summary>
        public static readonly Method<Stellar.TxSetComponentEncodeRequest, Stellar.TxSetComponentEncodeResponse> EncodeTxSetComponentMethod =
            new Method<Stellar.TxSetComponentEncodeRequest, Stellar.TxSetComponentEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTxSetComponent",
                XdrProtoServiceGrpcMarshaller.TxSetComponentEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TxSetComponentEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTxSetComponent</summary>
        public static readonly Method<Stellar.TxSetComponentDecodeRequest, Stellar.TxSetComponentDecodeResponse> DecodeTxSetComponentMethod =
            new Method<Stellar.TxSetComponentDecodeRequest, Stellar.TxSetComponentDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTxSetComponent",
                XdrProtoServiceGrpcMarshaller.TxSetComponentDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TxSetComponentDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionPhase</summary>
        public static readonly Method<Stellar.TransactionPhaseEncodeRequest, Stellar.TransactionPhaseEncodeResponse> EncodeTransactionPhaseMethod =
            new Method<Stellar.TransactionPhaseEncodeRequest, Stellar.TransactionPhaseEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionPhase",
                XdrProtoServiceGrpcMarshaller.TransactionPhaseEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionPhaseEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionPhase</summary>
        public static readonly Method<Stellar.TransactionPhaseDecodeRequest, Stellar.TransactionPhaseDecodeResponse> DecodeTransactionPhaseMethod =
            new Method<Stellar.TransactionPhaseDecodeRequest, Stellar.TransactionPhaseDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionPhase",
                XdrProtoServiceGrpcMarshaller.TransactionPhaseDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionPhaseDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionSet</summary>
        public static readonly Method<Stellar.TransactionSetEncodeRequest, Stellar.TransactionSetEncodeResponse> EncodeTransactionSetMethod =
            new Method<Stellar.TransactionSetEncodeRequest, Stellar.TransactionSetEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionSet",
                XdrProtoServiceGrpcMarshaller.TransactionSetEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionSetEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionSet</summary>
        public static readonly Method<Stellar.TransactionSetDecodeRequest, Stellar.TransactionSetDecodeResponse> DecodeTransactionSetMethod =
            new Method<Stellar.TransactionSetDecodeRequest, Stellar.TransactionSetDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionSet",
                XdrProtoServiceGrpcMarshaller.TransactionSetDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionSetDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionSetV1</summary>
        public static readonly Method<Stellar.TransactionSetV1EncodeRequest, Stellar.TransactionSetV1EncodeResponse> EncodeTransactionSetV1Method =
            new Method<Stellar.TransactionSetV1EncodeRequest, Stellar.TransactionSetV1EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionSetV1",
                XdrProtoServiceGrpcMarshaller.TransactionSetV1EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionSetV1EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionSetV1</summary>
        public static readonly Method<Stellar.TransactionSetV1DecodeRequest, Stellar.TransactionSetV1DecodeResponse> DecodeTransactionSetV1Method =
            new Method<Stellar.TransactionSetV1DecodeRequest, Stellar.TransactionSetV1DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionSetV1",
                XdrProtoServiceGrpcMarshaller.TransactionSetV1DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionSetV1DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeGeneralizedTransactionSet</summary>
        public static readonly Method<Stellar.GeneralizedTransactionSetEncodeRequest, Stellar.GeneralizedTransactionSetEncodeResponse> EncodeGeneralizedTransactionSetMethod =
            new Method<Stellar.GeneralizedTransactionSetEncodeRequest, Stellar.GeneralizedTransactionSetEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeGeneralizedTransactionSet",
                XdrProtoServiceGrpcMarshaller.GeneralizedTransactionSetEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.GeneralizedTransactionSetEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeGeneralizedTransactionSet</summary>
        public static readonly Method<Stellar.GeneralizedTransactionSetDecodeRequest, Stellar.GeneralizedTransactionSetDecodeResponse> DecodeGeneralizedTransactionSetMethod =
            new Method<Stellar.GeneralizedTransactionSetDecodeRequest, Stellar.GeneralizedTransactionSetDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeGeneralizedTransactionSet",
                XdrProtoServiceGrpcMarshaller.GeneralizedTransactionSetDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.GeneralizedTransactionSetDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionResultPair</summary>
        public static readonly Method<Stellar.TransactionResultPairEncodeRequest, Stellar.TransactionResultPairEncodeResponse> EncodeTransactionResultPairMethod =
            new Method<Stellar.TransactionResultPairEncodeRequest, Stellar.TransactionResultPairEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionResultPair",
                XdrProtoServiceGrpcMarshaller.TransactionResultPairEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionResultPairEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionResultPair</summary>
        public static readonly Method<Stellar.TransactionResultPairDecodeRequest, Stellar.TransactionResultPairDecodeResponse> DecodeTransactionResultPairMethod =
            new Method<Stellar.TransactionResultPairDecodeRequest, Stellar.TransactionResultPairDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionResultPair",
                XdrProtoServiceGrpcMarshaller.TransactionResultPairDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionResultPairDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionResultSet</summary>
        public static readonly Method<Stellar.TransactionResultSetEncodeRequest, Stellar.TransactionResultSetEncodeResponse> EncodeTransactionResultSetMethod =
            new Method<Stellar.TransactionResultSetEncodeRequest, Stellar.TransactionResultSetEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionResultSet",
                XdrProtoServiceGrpcMarshaller.TransactionResultSetEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionResultSetEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionResultSet</summary>
        public static readonly Method<Stellar.TransactionResultSetDecodeRequest, Stellar.TransactionResultSetDecodeResponse> DecodeTransactionResultSetMethod =
            new Method<Stellar.TransactionResultSetDecodeRequest, Stellar.TransactionResultSetDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionResultSet",
                XdrProtoServiceGrpcMarshaller.TransactionResultSetDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionResultSetDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionHistoryEntry</summary>
        public static readonly Method<Stellar.TransactionHistoryEntryEncodeRequest, Stellar.TransactionHistoryEntryEncodeResponse> EncodeTransactionHistoryEntryMethod =
            new Method<Stellar.TransactionHistoryEntryEncodeRequest, Stellar.TransactionHistoryEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionHistoryEntry",
                XdrProtoServiceGrpcMarshaller.TransactionHistoryEntryEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionHistoryEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionHistoryEntry</summary>
        public static readonly Method<Stellar.TransactionHistoryEntryDecodeRequest, Stellar.TransactionHistoryEntryDecodeResponse> DecodeTransactionHistoryEntryMethod =
            new Method<Stellar.TransactionHistoryEntryDecodeRequest, Stellar.TransactionHistoryEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionHistoryEntry",
                XdrProtoServiceGrpcMarshaller.TransactionHistoryEntryDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionHistoryEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionHistoryResultEntry</summary>
        public static readonly Method<Stellar.TransactionHistoryResultEntryEncodeRequest, Stellar.TransactionHistoryResultEntryEncodeResponse> EncodeTransactionHistoryResultEntryMethod =
            new Method<Stellar.TransactionHistoryResultEntryEncodeRequest, Stellar.TransactionHistoryResultEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionHistoryResultEntry",
                XdrProtoServiceGrpcMarshaller.TransactionHistoryResultEntryEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionHistoryResultEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionHistoryResultEntry</summary>
        public static readonly Method<Stellar.TransactionHistoryResultEntryDecodeRequest, Stellar.TransactionHistoryResultEntryDecodeResponse> DecodeTransactionHistoryResultEntryMethod =
            new Method<Stellar.TransactionHistoryResultEntryDecodeRequest, Stellar.TransactionHistoryResultEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionHistoryResultEntry",
                XdrProtoServiceGrpcMarshaller.TransactionHistoryResultEntryDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionHistoryResultEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerHeaderHistoryEntry</summary>
        public static readonly Method<Stellar.LedgerHeaderHistoryEntryEncodeRequest, Stellar.LedgerHeaderHistoryEntryEncodeResponse> EncodeLedgerHeaderHistoryEntryMethod =
            new Method<Stellar.LedgerHeaderHistoryEntryEncodeRequest, Stellar.LedgerHeaderHistoryEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerHeaderHistoryEntry",
                XdrProtoServiceGrpcMarshaller.LedgerHeaderHistoryEntryEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerHeaderHistoryEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerHeaderHistoryEntry</summary>
        public static readonly Method<Stellar.LedgerHeaderHistoryEntryDecodeRequest, Stellar.LedgerHeaderHistoryEntryDecodeResponse> DecodeLedgerHeaderHistoryEntryMethod =
            new Method<Stellar.LedgerHeaderHistoryEntryDecodeRequest, Stellar.LedgerHeaderHistoryEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerHeaderHistoryEntry",
                XdrProtoServiceGrpcMarshaller.LedgerHeaderHistoryEntryDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerHeaderHistoryEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerSCPMessages</summary>
        public static readonly Method<Stellar.LedgerSCPMessagesEncodeRequest, Stellar.LedgerSCPMessagesEncodeResponse> EncodeLedgerSCPMessagesMethod =
            new Method<Stellar.LedgerSCPMessagesEncodeRequest, Stellar.LedgerSCPMessagesEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerSCPMessages",
                XdrProtoServiceGrpcMarshaller.LedgerSCPMessagesEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerSCPMessagesEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerSCPMessages</summary>
        public static readonly Method<Stellar.LedgerSCPMessagesDecodeRequest, Stellar.LedgerSCPMessagesDecodeResponse> DecodeLedgerSCPMessagesMethod =
            new Method<Stellar.LedgerSCPMessagesDecodeRequest, Stellar.LedgerSCPMessagesDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerSCPMessages",
                XdrProtoServiceGrpcMarshaller.LedgerSCPMessagesDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerSCPMessagesDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCPHistoryEntryV0</summary>
        public static readonly Method<Stellar.SCPHistoryEntryV0EncodeRequest, Stellar.SCPHistoryEntryV0EncodeResponse> EncodeSCPHistoryEntryV0Method =
            new Method<Stellar.SCPHistoryEntryV0EncodeRequest, Stellar.SCPHistoryEntryV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCPHistoryEntryV0",
                XdrProtoServiceGrpcMarshaller.SCPHistoryEntryV0EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCPHistoryEntryV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCPHistoryEntryV0</summary>
        public static readonly Method<Stellar.SCPHistoryEntryV0DecodeRequest, Stellar.SCPHistoryEntryV0DecodeResponse> DecodeSCPHistoryEntryV0Method =
            new Method<Stellar.SCPHistoryEntryV0DecodeRequest, Stellar.SCPHistoryEntryV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCPHistoryEntryV0",
                XdrProtoServiceGrpcMarshaller.SCPHistoryEntryV0DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCPHistoryEntryV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCPHistoryEntry</summary>
        public static readonly Method<Stellar.SCPHistoryEntryEncodeRequest, Stellar.SCPHistoryEntryEncodeResponse> EncodeSCPHistoryEntryMethod =
            new Method<Stellar.SCPHistoryEntryEncodeRequest, Stellar.SCPHistoryEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCPHistoryEntry",
                XdrProtoServiceGrpcMarshaller.SCPHistoryEntryEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCPHistoryEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCPHistoryEntry</summary>
        public static readonly Method<Stellar.SCPHistoryEntryDecodeRequest, Stellar.SCPHistoryEntryDecodeResponse> DecodeSCPHistoryEntryMethod =
            new Method<Stellar.SCPHistoryEntryDecodeRequest, Stellar.SCPHistoryEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCPHistoryEntry",
                XdrProtoServiceGrpcMarshaller.SCPHistoryEntryDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCPHistoryEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerEntryChangeType</summary>
        public static readonly Method<Stellar.LedgerEntryChangeTypeEncodeRequest, Stellar.LedgerEntryChangeTypeEncodeResponse> EncodeLedgerEntryChangeTypeMethod =
            new Method<Stellar.LedgerEntryChangeTypeEncodeRequest, Stellar.LedgerEntryChangeTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerEntryChangeType",
                XdrProtoServiceGrpcMarshaller.LedgerEntryChangeTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerEntryChangeTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerEntryChangeType</summary>
        public static readonly Method<Stellar.LedgerEntryChangeTypeDecodeRequest, Stellar.LedgerEntryChangeTypeDecodeResponse> DecodeLedgerEntryChangeTypeMethod =
            new Method<Stellar.LedgerEntryChangeTypeDecodeRequest, Stellar.LedgerEntryChangeTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerEntryChangeType",
                XdrProtoServiceGrpcMarshaller.LedgerEntryChangeTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerEntryChangeTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerEntryChange</summary>
        public static readonly Method<Stellar.LedgerEntryChangeEncodeRequest, Stellar.LedgerEntryChangeEncodeResponse> EncodeLedgerEntryChangeMethod =
            new Method<Stellar.LedgerEntryChangeEncodeRequest, Stellar.LedgerEntryChangeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerEntryChange",
                XdrProtoServiceGrpcMarshaller.LedgerEntryChangeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerEntryChangeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerEntryChange</summary>
        public static readonly Method<Stellar.LedgerEntryChangeDecodeRequest, Stellar.LedgerEntryChangeDecodeResponse> DecodeLedgerEntryChangeMethod =
            new Method<Stellar.LedgerEntryChangeDecodeRequest, Stellar.LedgerEntryChangeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerEntryChange",
                XdrProtoServiceGrpcMarshaller.LedgerEntryChangeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerEntryChangeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerEntryChanges</summary>
        public static readonly Method<Stellar.LedgerEntryChangesEncodeRequest, Stellar.LedgerEntryChangesEncodeResponse> EncodeLedgerEntryChangesMethod =
            new Method<Stellar.LedgerEntryChangesEncodeRequest, Stellar.LedgerEntryChangesEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerEntryChanges",
                XdrProtoServiceGrpcMarshaller.LedgerEntryChangesEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerEntryChangesEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerEntryChanges</summary>
        public static readonly Method<Stellar.LedgerEntryChangesDecodeRequest, Stellar.LedgerEntryChangesDecodeResponse> DecodeLedgerEntryChangesMethod =
            new Method<Stellar.LedgerEntryChangesDecodeRequest, Stellar.LedgerEntryChangesDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerEntryChanges",
                XdrProtoServiceGrpcMarshaller.LedgerEntryChangesDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerEntryChangesDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeOperationMeta</summary>
        public static readonly Method<Stellar.OperationMetaEncodeRequest, Stellar.OperationMetaEncodeResponse> EncodeOperationMetaMethod =
            new Method<Stellar.OperationMetaEncodeRequest, Stellar.OperationMetaEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeOperationMeta",
                XdrProtoServiceGrpcMarshaller.OperationMetaEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.OperationMetaEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeOperationMeta</summary>
        public static readonly Method<Stellar.OperationMetaDecodeRequest, Stellar.OperationMetaDecodeResponse> DecodeOperationMetaMethod =
            new Method<Stellar.OperationMetaDecodeRequest, Stellar.OperationMetaDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeOperationMeta",
                XdrProtoServiceGrpcMarshaller.OperationMetaDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.OperationMetaDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionMetaV1</summary>
        public static readonly Method<Stellar.TransactionMetaV1EncodeRequest, Stellar.TransactionMetaV1EncodeResponse> EncodeTransactionMetaV1Method =
            new Method<Stellar.TransactionMetaV1EncodeRequest, Stellar.TransactionMetaV1EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionMetaV1",
                XdrProtoServiceGrpcMarshaller.TransactionMetaV1EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionMetaV1EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionMetaV1</summary>
        public static readonly Method<Stellar.TransactionMetaV1DecodeRequest, Stellar.TransactionMetaV1DecodeResponse> DecodeTransactionMetaV1Method =
            new Method<Stellar.TransactionMetaV1DecodeRequest, Stellar.TransactionMetaV1DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionMetaV1",
                XdrProtoServiceGrpcMarshaller.TransactionMetaV1DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionMetaV1DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionMetaV2</summary>
        public static readonly Method<Stellar.TransactionMetaV2EncodeRequest, Stellar.TransactionMetaV2EncodeResponse> EncodeTransactionMetaV2Method =
            new Method<Stellar.TransactionMetaV2EncodeRequest, Stellar.TransactionMetaV2EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionMetaV2",
                XdrProtoServiceGrpcMarshaller.TransactionMetaV2EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionMetaV2EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionMetaV2</summary>
        public static readonly Method<Stellar.TransactionMetaV2DecodeRequest, Stellar.TransactionMetaV2DecodeResponse> DecodeTransactionMetaV2Method =
            new Method<Stellar.TransactionMetaV2DecodeRequest, Stellar.TransactionMetaV2DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionMetaV2",
                XdrProtoServiceGrpcMarshaller.TransactionMetaV2DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionMetaV2DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeContractEventType</summary>
        public static readonly Method<Stellar.ContractEventTypeEncodeRequest, Stellar.ContractEventTypeEncodeResponse> EncodeContractEventTypeMethod =
            new Method<Stellar.ContractEventTypeEncodeRequest, Stellar.ContractEventTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeContractEventType",
                XdrProtoServiceGrpcMarshaller.ContractEventTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ContractEventTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeContractEventType</summary>
        public static readonly Method<Stellar.ContractEventTypeDecodeRequest, Stellar.ContractEventTypeDecodeResponse> DecodeContractEventTypeMethod =
            new Method<Stellar.ContractEventTypeDecodeRequest, Stellar.ContractEventTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeContractEventType",
                XdrProtoServiceGrpcMarshaller.ContractEventTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ContractEventTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeContractEvent</summary>
        public static readonly Method<Stellar.ContractEventEncodeRequest, Stellar.ContractEventEncodeResponse> EncodeContractEventMethod =
            new Method<Stellar.ContractEventEncodeRequest, Stellar.ContractEventEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeContractEvent",
                XdrProtoServiceGrpcMarshaller.ContractEventEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ContractEventEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeContractEvent</summary>
        public static readonly Method<Stellar.ContractEventDecodeRequest, Stellar.ContractEventDecodeResponse> DecodeContractEventMethod =
            new Method<Stellar.ContractEventDecodeRequest, Stellar.ContractEventDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeContractEvent",
                XdrProtoServiceGrpcMarshaller.ContractEventDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ContractEventDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeDiagnosticEvent</summary>
        public static readonly Method<Stellar.DiagnosticEventEncodeRequest, Stellar.DiagnosticEventEncodeResponse> EncodeDiagnosticEventMethod =
            new Method<Stellar.DiagnosticEventEncodeRequest, Stellar.DiagnosticEventEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeDiagnosticEvent",
                XdrProtoServiceGrpcMarshaller.DiagnosticEventEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.DiagnosticEventEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeDiagnosticEvent</summary>
        public static readonly Method<Stellar.DiagnosticEventDecodeRequest, Stellar.DiagnosticEventDecodeResponse> DecodeDiagnosticEventMethod =
            new Method<Stellar.DiagnosticEventDecodeRequest, Stellar.DiagnosticEventDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeDiagnosticEvent",
                XdrProtoServiceGrpcMarshaller.DiagnosticEventDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.DiagnosticEventDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeDiagnosticEvents</summary>
        public static readonly Method<Stellar.DiagnosticEventsEncodeRequest, Stellar.DiagnosticEventsEncodeResponse> EncodeDiagnosticEventsMethod =
            new Method<Stellar.DiagnosticEventsEncodeRequest, Stellar.DiagnosticEventsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeDiagnosticEvents",
                XdrProtoServiceGrpcMarshaller.DiagnosticEventsEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.DiagnosticEventsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeDiagnosticEvents</summary>
        public static readonly Method<Stellar.DiagnosticEventsDecodeRequest, Stellar.DiagnosticEventsDecodeResponse> DecodeDiagnosticEventsMethod =
            new Method<Stellar.DiagnosticEventsDecodeRequest, Stellar.DiagnosticEventsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeDiagnosticEvents",
                XdrProtoServiceGrpcMarshaller.DiagnosticEventsDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.DiagnosticEventsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSorobanTransactionMetaExtV1</summary>
        public static readonly Method<Stellar.SorobanTransactionMetaExtV1EncodeRequest, Stellar.SorobanTransactionMetaExtV1EncodeResponse> EncodeSorobanTransactionMetaExtV1Method =
            new Method<Stellar.SorobanTransactionMetaExtV1EncodeRequest, Stellar.SorobanTransactionMetaExtV1EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSorobanTransactionMetaExtV1",
                XdrProtoServiceGrpcMarshaller.SorobanTransactionMetaExtV1EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SorobanTransactionMetaExtV1EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSorobanTransactionMetaExtV1</summary>
        public static readonly Method<Stellar.SorobanTransactionMetaExtV1DecodeRequest, Stellar.SorobanTransactionMetaExtV1DecodeResponse> DecodeSorobanTransactionMetaExtV1Method =
            new Method<Stellar.SorobanTransactionMetaExtV1DecodeRequest, Stellar.SorobanTransactionMetaExtV1DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSorobanTransactionMetaExtV1",
                XdrProtoServiceGrpcMarshaller.SorobanTransactionMetaExtV1DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SorobanTransactionMetaExtV1DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSorobanTransactionMetaExt</summary>
        public static readonly Method<Stellar.SorobanTransactionMetaExtEncodeRequest, Stellar.SorobanTransactionMetaExtEncodeResponse> EncodeSorobanTransactionMetaExtMethod =
            new Method<Stellar.SorobanTransactionMetaExtEncodeRequest, Stellar.SorobanTransactionMetaExtEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSorobanTransactionMetaExt",
                XdrProtoServiceGrpcMarshaller.SorobanTransactionMetaExtEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SorobanTransactionMetaExtEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSorobanTransactionMetaExt</summary>
        public static readonly Method<Stellar.SorobanTransactionMetaExtDecodeRequest, Stellar.SorobanTransactionMetaExtDecodeResponse> DecodeSorobanTransactionMetaExtMethod =
            new Method<Stellar.SorobanTransactionMetaExtDecodeRequest, Stellar.SorobanTransactionMetaExtDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSorobanTransactionMetaExt",
                XdrProtoServiceGrpcMarshaller.SorobanTransactionMetaExtDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SorobanTransactionMetaExtDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSorobanTransactionMeta</summary>
        public static readonly Method<Stellar.SorobanTransactionMetaEncodeRequest, Stellar.SorobanTransactionMetaEncodeResponse> EncodeSorobanTransactionMetaMethod =
            new Method<Stellar.SorobanTransactionMetaEncodeRequest, Stellar.SorobanTransactionMetaEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSorobanTransactionMeta",
                XdrProtoServiceGrpcMarshaller.SorobanTransactionMetaEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SorobanTransactionMetaEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSorobanTransactionMeta</summary>
        public static readonly Method<Stellar.SorobanTransactionMetaDecodeRequest, Stellar.SorobanTransactionMetaDecodeResponse> DecodeSorobanTransactionMetaMethod =
            new Method<Stellar.SorobanTransactionMetaDecodeRequest, Stellar.SorobanTransactionMetaDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSorobanTransactionMeta",
                XdrProtoServiceGrpcMarshaller.SorobanTransactionMetaDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SorobanTransactionMetaDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionMetaV3</summary>
        public static readonly Method<Stellar.TransactionMetaV3EncodeRequest, Stellar.TransactionMetaV3EncodeResponse> EncodeTransactionMetaV3Method =
            new Method<Stellar.TransactionMetaV3EncodeRequest, Stellar.TransactionMetaV3EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionMetaV3",
                XdrProtoServiceGrpcMarshaller.TransactionMetaV3EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionMetaV3EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionMetaV3</summary>
        public static readonly Method<Stellar.TransactionMetaV3DecodeRequest, Stellar.TransactionMetaV3DecodeResponse> DecodeTransactionMetaV3Method =
            new Method<Stellar.TransactionMetaV3DecodeRequest, Stellar.TransactionMetaV3DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionMetaV3",
                XdrProtoServiceGrpcMarshaller.TransactionMetaV3DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionMetaV3DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeInvokeHostFunctionSuccessPreImage</summary>
        public static readonly Method<Stellar.InvokeHostFunctionSuccessPreImageEncodeRequest, Stellar.InvokeHostFunctionSuccessPreImageEncodeResponse> EncodeInvokeHostFunctionSuccessPreImageMethod =
            new Method<Stellar.InvokeHostFunctionSuccessPreImageEncodeRequest, Stellar.InvokeHostFunctionSuccessPreImageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeInvokeHostFunctionSuccessPreImage",
                XdrProtoServiceGrpcMarshaller.InvokeHostFunctionSuccessPreImageEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.InvokeHostFunctionSuccessPreImageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeInvokeHostFunctionSuccessPreImage</summary>
        public static readonly Method<Stellar.InvokeHostFunctionSuccessPreImageDecodeRequest, Stellar.InvokeHostFunctionSuccessPreImageDecodeResponse> DecodeInvokeHostFunctionSuccessPreImageMethod =
            new Method<Stellar.InvokeHostFunctionSuccessPreImageDecodeRequest, Stellar.InvokeHostFunctionSuccessPreImageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeInvokeHostFunctionSuccessPreImage",
                XdrProtoServiceGrpcMarshaller.InvokeHostFunctionSuccessPreImageDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.InvokeHostFunctionSuccessPreImageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionMeta</summary>
        public static readonly Method<Stellar.TransactionMetaEncodeRequest, Stellar.TransactionMetaEncodeResponse> EncodeTransactionMetaMethod =
            new Method<Stellar.TransactionMetaEncodeRequest, Stellar.TransactionMetaEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionMeta",
                XdrProtoServiceGrpcMarshaller.TransactionMetaEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionMetaEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionMeta</summary>
        public static readonly Method<Stellar.TransactionMetaDecodeRequest, Stellar.TransactionMetaDecodeResponse> DecodeTransactionMetaMethod =
            new Method<Stellar.TransactionMetaDecodeRequest, Stellar.TransactionMetaDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionMeta",
                XdrProtoServiceGrpcMarshaller.TransactionMetaDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionMetaDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionResultMeta</summary>
        public static readonly Method<Stellar.TransactionResultMetaEncodeRequest, Stellar.TransactionResultMetaEncodeResponse> EncodeTransactionResultMetaMethod =
            new Method<Stellar.TransactionResultMetaEncodeRequest, Stellar.TransactionResultMetaEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionResultMeta",
                XdrProtoServiceGrpcMarshaller.TransactionResultMetaEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionResultMetaEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionResultMeta</summary>
        public static readonly Method<Stellar.TransactionResultMetaDecodeRequest, Stellar.TransactionResultMetaDecodeResponse> DecodeTransactionResultMetaMethod =
            new Method<Stellar.TransactionResultMetaDecodeRequest, Stellar.TransactionResultMetaDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionResultMeta",
                XdrProtoServiceGrpcMarshaller.TransactionResultMetaDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionResultMetaDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeUpgradeEntryMeta</summary>
        public static readonly Method<Stellar.UpgradeEntryMetaEncodeRequest, Stellar.UpgradeEntryMetaEncodeResponse> EncodeUpgradeEntryMetaMethod =
            new Method<Stellar.UpgradeEntryMetaEncodeRequest, Stellar.UpgradeEntryMetaEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeUpgradeEntryMeta",
                XdrProtoServiceGrpcMarshaller.UpgradeEntryMetaEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.UpgradeEntryMetaEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeUpgradeEntryMeta</summary>
        public static readonly Method<Stellar.UpgradeEntryMetaDecodeRequest, Stellar.UpgradeEntryMetaDecodeResponse> DecodeUpgradeEntryMetaMethod =
            new Method<Stellar.UpgradeEntryMetaDecodeRequest, Stellar.UpgradeEntryMetaDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeUpgradeEntryMeta",
                XdrProtoServiceGrpcMarshaller.UpgradeEntryMetaDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.UpgradeEntryMetaDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerCloseMetaV0</summary>
        public static readonly Method<Stellar.LedgerCloseMetaV0EncodeRequest, Stellar.LedgerCloseMetaV0EncodeResponse> EncodeLedgerCloseMetaV0Method =
            new Method<Stellar.LedgerCloseMetaV0EncodeRequest, Stellar.LedgerCloseMetaV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerCloseMetaV0",
                XdrProtoServiceGrpcMarshaller.LedgerCloseMetaV0EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerCloseMetaV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerCloseMetaV0</summary>
        public static readonly Method<Stellar.LedgerCloseMetaV0DecodeRequest, Stellar.LedgerCloseMetaV0DecodeResponse> DecodeLedgerCloseMetaV0Method =
            new Method<Stellar.LedgerCloseMetaV0DecodeRequest, Stellar.LedgerCloseMetaV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerCloseMetaV0",
                XdrProtoServiceGrpcMarshaller.LedgerCloseMetaV0DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerCloseMetaV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerCloseMetaExtV1</summary>
        public static readonly Method<Stellar.LedgerCloseMetaExtV1EncodeRequest, Stellar.LedgerCloseMetaExtV1EncodeResponse> EncodeLedgerCloseMetaExtV1Method =
            new Method<Stellar.LedgerCloseMetaExtV1EncodeRequest, Stellar.LedgerCloseMetaExtV1EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerCloseMetaExtV1",
                XdrProtoServiceGrpcMarshaller.LedgerCloseMetaExtV1EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerCloseMetaExtV1EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerCloseMetaExtV1</summary>
        public static readonly Method<Stellar.LedgerCloseMetaExtV1DecodeRequest, Stellar.LedgerCloseMetaExtV1DecodeResponse> DecodeLedgerCloseMetaExtV1Method =
            new Method<Stellar.LedgerCloseMetaExtV1DecodeRequest, Stellar.LedgerCloseMetaExtV1DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerCloseMetaExtV1",
                XdrProtoServiceGrpcMarshaller.LedgerCloseMetaExtV1DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerCloseMetaExtV1DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerCloseMetaExt</summary>
        public static readonly Method<Stellar.LedgerCloseMetaExtEncodeRequest, Stellar.LedgerCloseMetaExtEncodeResponse> EncodeLedgerCloseMetaExtMethod =
            new Method<Stellar.LedgerCloseMetaExtEncodeRequest, Stellar.LedgerCloseMetaExtEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerCloseMetaExt",
                XdrProtoServiceGrpcMarshaller.LedgerCloseMetaExtEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerCloseMetaExtEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerCloseMetaExt</summary>
        public static readonly Method<Stellar.LedgerCloseMetaExtDecodeRequest, Stellar.LedgerCloseMetaExtDecodeResponse> DecodeLedgerCloseMetaExtMethod =
            new Method<Stellar.LedgerCloseMetaExtDecodeRequest, Stellar.LedgerCloseMetaExtDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerCloseMetaExt",
                XdrProtoServiceGrpcMarshaller.LedgerCloseMetaExtDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerCloseMetaExtDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerCloseMetaV1</summary>
        public static readonly Method<Stellar.LedgerCloseMetaV1EncodeRequest, Stellar.LedgerCloseMetaV1EncodeResponse> EncodeLedgerCloseMetaV1Method =
            new Method<Stellar.LedgerCloseMetaV1EncodeRequest, Stellar.LedgerCloseMetaV1EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerCloseMetaV1",
                XdrProtoServiceGrpcMarshaller.LedgerCloseMetaV1EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerCloseMetaV1EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerCloseMetaV1</summary>
        public static readonly Method<Stellar.LedgerCloseMetaV1DecodeRequest, Stellar.LedgerCloseMetaV1DecodeResponse> DecodeLedgerCloseMetaV1Method =
            new Method<Stellar.LedgerCloseMetaV1DecodeRequest, Stellar.LedgerCloseMetaV1DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerCloseMetaV1",
                XdrProtoServiceGrpcMarshaller.LedgerCloseMetaV1DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerCloseMetaV1DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerCloseMeta</summary>
        public static readonly Method<Stellar.LedgerCloseMetaEncodeRequest, Stellar.LedgerCloseMetaEncodeResponse> EncodeLedgerCloseMetaMethod =
            new Method<Stellar.LedgerCloseMetaEncodeRequest, Stellar.LedgerCloseMetaEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerCloseMeta",
                XdrProtoServiceGrpcMarshaller.LedgerCloseMetaEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerCloseMetaEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerCloseMeta</summary>
        public static readonly Method<Stellar.LedgerCloseMetaDecodeRequest, Stellar.LedgerCloseMetaDecodeResponse> DecodeLedgerCloseMetaMethod =
            new Method<Stellar.LedgerCloseMetaDecodeRequest, Stellar.LedgerCloseMetaDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerCloseMeta",
                XdrProtoServiceGrpcMarshaller.LedgerCloseMetaDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerCloseMetaDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeErrorCode</summary>
        public static readonly Method<Stellar.ErrorCodeEncodeRequest, Stellar.ErrorCodeEncodeResponse> EncodeErrorCodeMethod =
            new Method<Stellar.ErrorCodeEncodeRequest, Stellar.ErrorCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeErrorCode",
                XdrProtoServiceGrpcMarshaller.ErrorCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ErrorCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeErrorCode</summary>
        public static readonly Method<Stellar.ErrorCodeDecodeRequest, Stellar.ErrorCodeDecodeResponse> DecodeErrorCodeMethod =
            new Method<Stellar.ErrorCodeDecodeRequest, Stellar.ErrorCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeErrorCode",
                XdrProtoServiceGrpcMarshaller.ErrorCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ErrorCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeError</summary>
        public static readonly Method<Stellar.ErrorEncodeRequest, Stellar.ErrorEncodeResponse> EncodeErrorMethod =
            new Method<Stellar.ErrorEncodeRequest, Stellar.ErrorEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeError",
                XdrProtoServiceGrpcMarshaller.ErrorEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ErrorEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeError</summary>
        public static readonly Method<Stellar.ErrorDecodeRequest, Stellar.ErrorDecodeResponse> DecodeErrorMethod =
            new Method<Stellar.ErrorDecodeRequest, Stellar.ErrorDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeError",
                XdrProtoServiceGrpcMarshaller.ErrorDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ErrorDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSendMore</summary>
        public static readonly Method<Stellar.SendMoreEncodeRequest, Stellar.SendMoreEncodeResponse> EncodeSendMoreMethod =
            new Method<Stellar.SendMoreEncodeRequest, Stellar.SendMoreEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSendMore",
                XdrProtoServiceGrpcMarshaller.SendMoreEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SendMoreEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSendMore</summary>
        public static readonly Method<Stellar.SendMoreDecodeRequest, Stellar.SendMoreDecodeResponse> DecodeSendMoreMethod =
            new Method<Stellar.SendMoreDecodeRequest, Stellar.SendMoreDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSendMore",
                XdrProtoServiceGrpcMarshaller.SendMoreDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SendMoreDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSendMoreExtended</summary>
        public static readonly Method<Stellar.SendMoreExtendedEncodeRequest, Stellar.SendMoreExtendedEncodeResponse> EncodeSendMoreExtendedMethod =
            new Method<Stellar.SendMoreExtendedEncodeRequest, Stellar.SendMoreExtendedEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSendMoreExtended",
                XdrProtoServiceGrpcMarshaller.SendMoreExtendedEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SendMoreExtendedEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSendMoreExtended</summary>
        public static readonly Method<Stellar.SendMoreExtendedDecodeRequest, Stellar.SendMoreExtendedDecodeResponse> DecodeSendMoreExtendedMethod =
            new Method<Stellar.SendMoreExtendedDecodeRequest, Stellar.SendMoreExtendedDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSendMoreExtended",
                XdrProtoServiceGrpcMarshaller.SendMoreExtendedDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SendMoreExtendedDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAuthCert</summary>
        public static readonly Method<Stellar.AuthCertEncodeRequest, Stellar.AuthCertEncodeResponse> EncodeAuthCertMethod =
            new Method<Stellar.AuthCertEncodeRequest, Stellar.AuthCertEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAuthCert",
                XdrProtoServiceGrpcMarshaller.AuthCertEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AuthCertEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAuthCert</summary>
        public static readonly Method<Stellar.AuthCertDecodeRequest, Stellar.AuthCertDecodeResponse> DecodeAuthCertMethod =
            new Method<Stellar.AuthCertDecodeRequest, Stellar.AuthCertDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAuthCert",
                XdrProtoServiceGrpcMarshaller.AuthCertDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AuthCertDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeHello</summary>
        public static readonly Method<Stellar.HelloEncodeRequest, Stellar.HelloEncodeResponse> EncodeHelloMethod =
            new Method<Stellar.HelloEncodeRequest, Stellar.HelloEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeHello",
                XdrProtoServiceGrpcMarshaller.HelloEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.HelloEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeHello</summary>
        public static readonly Method<Stellar.HelloDecodeRequest, Stellar.HelloDecodeResponse> DecodeHelloMethod =
            new Method<Stellar.HelloDecodeRequest, Stellar.HelloDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeHello",
                XdrProtoServiceGrpcMarshaller.HelloDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.HelloDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAuth</summary>
        public static readonly Method<Stellar.AuthEncodeRequest, Stellar.AuthEncodeResponse> EncodeAuthMethod =
            new Method<Stellar.AuthEncodeRequest, Stellar.AuthEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAuth",
                XdrProtoServiceGrpcMarshaller.AuthEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AuthEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAuth</summary>
        public static readonly Method<Stellar.AuthDecodeRequest, Stellar.AuthDecodeResponse> DecodeAuthMethod =
            new Method<Stellar.AuthDecodeRequest, Stellar.AuthDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAuth",
                XdrProtoServiceGrpcMarshaller.AuthDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AuthDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeIPAddrType</summary>
        public static readonly Method<Stellar.IPAddrTypeEncodeRequest, Stellar.IPAddrTypeEncodeResponse> EncodeIPAddrTypeMethod =
            new Method<Stellar.IPAddrTypeEncodeRequest, Stellar.IPAddrTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeIPAddrType",
                XdrProtoServiceGrpcMarshaller.IPAddrTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.IPAddrTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeIPAddrType</summary>
        public static readonly Method<Stellar.IPAddrTypeDecodeRequest, Stellar.IPAddrTypeDecodeResponse> DecodeIPAddrTypeMethod =
            new Method<Stellar.IPAddrTypeDecodeRequest, Stellar.IPAddrTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeIPAddrType",
                XdrProtoServiceGrpcMarshaller.IPAddrTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.IPAddrTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePeerAddress</summary>
        public static readonly Method<Stellar.PeerAddressEncodeRequest, Stellar.PeerAddressEncodeResponse> EncodePeerAddressMethod =
            new Method<Stellar.PeerAddressEncodeRequest, Stellar.PeerAddressEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePeerAddress",
                XdrProtoServiceGrpcMarshaller.PeerAddressEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PeerAddressEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePeerAddress</summary>
        public static readonly Method<Stellar.PeerAddressDecodeRequest, Stellar.PeerAddressDecodeResponse> DecodePeerAddressMethod =
            new Method<Stellar.PeerAddressDecodeRequest, Stellar.PeerAddressDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePeerAddress",
                XdrProtoServiceGrpcMarshaller.PeerAddressDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PeerAddressDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeMessageType</summary>
        public static readonly Method<Stellar.MessageTypeEncodeRequest, Stellar.MessageTypeEncodeResponse> EncodeMessageTypeMethod =
            new Method<Stellar.MessageTypeEncodeRequest, Stellar.MessageTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeMessageType",
                XdrProtoServiceGrpcMarshaller.MessageTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.MessageTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeMessageType</summary>
        public static readonly Method<Stellar.MessageTypeDecodeRequest, Stellar.MessageTypeDecodeResponse> DecodeMessageTypeMethod =
            new Method<Stellar.MessageTypeDecodeRequest, Stellar.MessageTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeMessageType",
                XdrProtoServiceGrpcMarshaller.MessageTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.MessageTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeDontHave</summary>
        public static readonly Method<Stellar.DontHaveEncodeRequest, Stellar.DontHaveEncodeResponse> EncodeDontHaveMethod =
            new Method<Stellar.DontHaveEncodeRequest, Stellar.DontHaveEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeDontHave",
                XdrProtoServiceGrpcMarshaller.DontHaveEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.DontHaveEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeDontHave</summary>
        public static readonly Method<Stellar.DontHaveDecodeRequest, Stellar.DontHaveDecodeResponse> DecodeDontHaveMethod =
            new Method<Stellar.DontHaveDecodeRequest, Stellar.DontHaveDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeDontHave",
                XdrProtoServiceGrpcMarshaller.DontHaveDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.DontHaveDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSurveyMessageCommandType</summary>
        public static readonly Method<Stellar.SurveyMessageCommandTypeEncodeRequest, Stellar.SurveyMessageCommandTypeEncodeResponse> EncodeSurveyMessageCommandTypeMethod =
            new Method<Stellar.SurveyMessageCommandTypeEncodeRequest, Stellar.SurveyMessageCommandTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSurveyMessageCommandType",
                XdrProtoServiceGrpcMarshaller.SurveyMessageCommandTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SurveyMessageCommandTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSurveyMessageCommandType</summary>
        public static readonly Method<Stellar.SurveyMessageCommandTypeDecodeRequest, Stellar.SurveyMessageCommandTypeDecodeResponse> DecodeSurveyMessageCommandTypeMethod =
            new Method<Stellar.SurveyMessageCommandTypeDecodeRequest, Stellar.SurveyMessageCommandTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSurveyMessageCommandType",
                XdrProtoServiceGrpcMarshaller.SurveyMessageCommandTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SurveyMessageCommandTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSurveyMessageResponseType</summary>
        public static readonly Method<Stellar.SurveyMessageResponseTypeEncodeRequest, Stellar.SurveyMessageResponseTypeEncodeResponse> EncodeSurveyMessageResponseTypeMethod =
            new Method<Stellar.SurveyMessageResponseTypeEncodeRequest, Stellar.SurveyMessageResponseTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSurveyMessageResponseType",
                XdrProtoServiceGrpcMarshaller.SurveyMessageResponseTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SurveyMessageResponseTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSurveyMessageResponseType</summary>
        public static readonly Method<Stellar.SurveyMessageResponseTypeDecodeRequest, Stellar.SurveyMessageResponseTypeDecodeResponse> DecodeSurveyMessageResponseTypeMethod =
            new Method<Stellar.SurveyMessageResponseTypeDecodeRequest, Stellar.SurveyMessageResponseTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSurveyMessageResponseType",
                XdrProtoServiceGrpcMarshaller.SurveyMessageResponseTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SurveyMessageResponseTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTimeSlicedSurveyStartCollectingMessage</summary>
        public static readonly Method<Stellar.TimeSlicedSurveyStartCollectingMessageEncodeRequest, Stellar.TimeSlicedSurveyStartCollectingMessageEncodeResponse> EncodeTimeSlicedSurveyStartCollectingMessageMethod =
            new Method<Stellar.TimeSlicedSurveyStartCollectingMessageEncodeRequest, Stellar.TimeSlicedSurveyStartCollectingMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTimeSlicedSurveyStartCollectingMessage",
                XdrProtoServiceGrpcMarshaller.TimeSlicedSurveyStartCollectingMessageEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TimeSlicedSurveyStartCollectingMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTimeSlicedSurveyStartCollectingMessage</summary>
        public static readonly Method<Stellar.TimeSlicedSurveyStartCollectingMessageDecodeRequest, Stellar.TimeSlicedSurveyStartCollectingMessageDecodeResponse> DecodeTimeSlicedSurveyStartCollectingMessageMethod =
            new Method<Stellar.TimeSlicedSurveyStartCollectingMessageDecodeRequest, Stellar.TimeSlicedSurveyStartCollectingMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTimeSlicedSurveyStartCollectingMessage",
                XdrProtoServiceGrpcMarshaller.TimeSlicedSurveyStartCollectingMessageDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TimeSlicedSurveyStartCollectingMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSignedTimeSlicedSurveyStartCollectingMessage</summary>
        public static readonly Method<Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeRequest, Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeResponse> EncodeSignedTimeSlicedSurveyStartCollectingMessageMethod =
            new Method<Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeRequest, Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSignedTimeSlicedSurveyStartCollectingMessage",
                XdrProtoServiceGrpcMarshaller.SignedTimeSlicedSurveyStartCollectingMessageEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SignedTimeSlicedSurveyStartCollectingMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSignedTimeSlicedSurveyStartCollectingMessage</summary>
        public static readonly Method<Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeRequest, Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeResponse> DecodeSignedTimeSlicedSurveyStartCollectingMessageMethod =
            new Method<Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeRequest, Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSignedTimeSlicedSurveyStartCollectingMessage",
                XdrProtoServiceGrpcMarshaller.SignedTimeSlicedSurveyStartCollectingMessageDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SignedTimeSlicedSurveyStartCollectingMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTimeSlicedSurveyStopCollectingMessage</summary>
        public static readonly Method<Stellar.TimeSlicedSurveyStopCollectingMessageEncodeRequest, Stellar.TimeSlicedSurveyStopCollectingMessageEncodeResponse> EncodeTimeSlicedSurveyStopCollectingMessageMethod =
            new Method<Stellar.TimeSlicedSurveyStopCollectingMessageEncodeRequest, Stellar.TimeSlicedSurveyStopCollectingMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTimeSlicedSurveyStopCollectingMessage",
                XdrProtoServiceGrpcMarshaller.TimeSlicedSurveyStopCollectingMessageEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TimeSlicedSurveyStopCollectingMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTimeSlicedSurveyStopCollectingMessage</summary>
        public static readonly Method<Stellar.TimeSlicedSurveyStopCollectingMessageDecodeRequest, Stellar.TimeSlicedSurveyStopCollectingMessageDecodeResponse> DecodeTimeSlicedSurveyStopCollectingMessageMethod =
            new Method<Stellar.TimeSlicedSurveyStopCollectingMessageDecodeRequest, Stellar.TimeSlicedSurveyStopCollectingMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTimeSlicedSurveyStopCollectingMessage",
                XdrProtoServiceGrpcMarshaller.TimeSlicedSurveyStopCollectingMessageDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TimeSlicedSurveyStopCollectingMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSignedTimeSlicedSurveyStopCollectingMessage</summary>
        public static readonly Method<Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeRequest, Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeResponse> EncodeSignedTimeSlicedSurveyStopCollectingMessageMethod =
            new Method<Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeRequest, Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSignedTimeSlicedSurveyStopCollectingMessage",
                XdrProtoServiceGrpcMarshaller.SignedTimeSlicedSurveyStopCollectingMessageEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SignedTimeSlicedSurveyStopCollectingMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSignedTimeSlicedSurveyStopCollectingMessage</summary>
        public static readonly Method<Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeRequest, Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeResponse> DecodeSignedTimeSlicedSurveyStopCollectingMessageMethod =
            new Method<Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeRequest, Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSignedTimeSlicedSurveyStopCollectingMessage",
                XdrProtoServiceGrpcMarshaller.SignedTimeSlicedSurveyStopCollectingMessageDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SignedTimeSlicedSurveyStopCollectingMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSurveyRequestMessage</summary>
        public static readonly Method<Stellar.SurveyRequestMessageEncodeRequest, Stellar.SurveyRequestMessageEncodeResponse> EncodeSurveyRequestMessageMethod =
            new Method<Stellar.SurveyRequestMessageEncodeRequest, Stellar.SurveyRequestMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSurveyRequestMessage",
                XdrProtoServiceGrpcMarshaller.SurveyRequestMessageEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SurveyRequestMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSurveyRequestMessage</summary>
        public static readonly Method<Stellar.SurveyRequestMessageDecodeRequest, Stellar.SurveyRequestMessageDecodeResponse> DecodeSurveyRequestMessageMethod =
            new Method<Stellar.SurveyRequestMessageDecodeRequest, Stellar.SurveyRequestMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSurveyRequestMessage",
                XdrProtoServiceGrpcMarshaller.SurveyRequestMessageDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SurveyRequestMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTimeSlicedSurveyRequestMessage</summary>
        public static readonly Method<Stellar.TimeSlicedSurveyRequestMessageEncodeRequest, Stellar.TimeSlicedSurveyRequestMessageEncodeResponse> EncodeTimeSlicedSurveyRequestMessageMethod =
            new Method<Stellar.TimeSlicedSurveyRequestMessageEncodeRequest, Stellar.TimeSlicedSurveyRequestMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTimeSlicedSurveyRequestMessage",
                XdrProtoServiceGrpcMarshaller.TimeSlicedSurveyRequestMessageEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TimeSlicedSurveyRequestMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTimeSlicedSurveyRequestMessage</summary>
        public static readonly Method<Stellar.TimeSlicedSurveyRequestMessageDecodeRequest, Stellar.TimeSlicedSurveyRequestMessageDecodeResponse> DecodeTimeSlicedSurveyRequestMessageMethod =
            new Method<Stellar.TimeSlicedSurveyRequestMessageDecodeRequest, Stellar.TimeSlicedSurveyRequestMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTimeSlicedSurveyRequestMessage",
                XdrProtoServiceGrpcMarshaller.TimeSlicedSurveyRequestMessageDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TimeSlicedSurveyRequestMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSignedSurveyRequestMessage</summary>
        public static readonly Method<Stellar.SignedSurveyRequestMessageEncodeRequest, Stellar.SignedSurveyRequestMessageEncodeResponse> EncodeSignedSurveyRequestMessageMethod =
            new Method<Stellar.SignedSurveyRequestMessageEncodeRequest, Stellar.SignedSurveyRequestMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSignedSurveyRequestMessage",
                XdrProtoServiceGrpcMarshaller.SignedSurveyRequestMessageEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SignedSurveyRequestMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSignedSurveyRequestMessage</summary>
        public static readonly Method<Stellar.SignedSurveyRequestMessageDecodeRequest, Stellar.SignedSurveyRequestMessageDecodeResponse> DecodeSignedSurveyRequestMessageMethod =
            new Method<Stellar.SignedSurveyRequestMessageDecodeRequest, Stellar.SignedSurveyRequestMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSignedSurveyRequestMessage",
                XdrProtoServiceGrpcMarshaller.SignedSurveyRequestMessageDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SignedSurveyRequestMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSignedTimeSlicedSurveyRequestMessage</summary>
        public static readonly Method<Stellar.SignedTimeSlicedSurveyRequestMessageEncodeRequest, Stellar.SignedTimeSlicedSurveyRequestMessageEncodeResponse> EncodeSignedTimeSlicedSurveyRequestMessageMethod =
            new Method<Stellar.SignedTimeSlicedSurveyRequestMessageEncodeRequest, Stellar.SignedTimeSlicedSurveyRequestMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSignedTimeSlicedSurveyRequestMessage",
                XdrProtoServiceGrpcMarshaller.SignedTimeSlicedSurveyRequestMessageEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SignedTimeSlicedSurveyRequestMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSignedTimeSlicedSurveyRequestMessage</summary>
        public static readonly Method<Stellar.SignedTimeSlicedSurveyRequestMessageDecodeRequest, Stellar.SignedTimeSlicedSurveyRequestMessageDecodeResponse> DecodeSignedTimeSlicedSurveyRequestMessageMethod =
            new Method<Stellar.SignedTimeSlicedSurveyRequestMessageDecodeRequest, Stellar.SignedTimeSlicedSurveyRequestMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSignedTimeSlicedSurveyRequestMessage",
                XdrProtoServiceGrpcMarshaller.SignedTimeSlicedSurveyRequestMessageDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SignedTimeSlicedSurveyRequestMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeEncryptedBody</summary>
        public static readonly Method<Stellar.EncryptedBodyEncodeRequest, Stellar.EncryptedBodyEncodeResponse> EncodeEncryptedBodyMethod =
            new Method<Stellar.EncryptedBodyEncodeRequest, Stellar.EncryptedBodyEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeEncryptedBody",
                XdrProtoServiceGrpcMarshaller.EncryptedBodyEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.EncryptedBodyEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeEncryptedBody</summary>
        public static readonly Method<Stellar.EncryptedBodyDecodeRequest, Stellar.EncryptedBodyDecodeResponse> DecodeEncryptedBodyMethod =
            new Method<Stellar.EncryptedBodyDecodeRequest, Stellar.EncryptedBodyDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeEncryptedBody",
                XdrProtoServiceGrpcMarshaller.EncryptedBodyDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.EncryptedBodyDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSurveyResponseMessage</summary>
        public static readonly Method<Stellar.SurveyResponseMessageEncodeRequest, Stellar.SurveyResponseMessageEncodeResponse> EncodeSurveyResponseMessageMethod =
            new Method<Stellar.SurveyResponseMessageEncodeRequest, Stellar.SurveyResponseMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSurveyResponseMessage",
                XdrProtoServiceGrpcMarshaller.SurveyResponseMessageEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SurveyResponseMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSurveyResponseMessage</summary>
        public static readonly Method<Stellar.SurveyResponseMessageDecodeRequest, Stellar.SurveyResponseMessageDecodeResponse> DecodeSurveyResponseMessageMethod =
            new Method<Stellar.SurveyResponseMessageDecodeRequest, Stellar.SurveyResponseMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSurveyResponseMessage",
                XdrProtoServiceGrpcMarshaller.SurveyResponseMessageDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SurveyResponseMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTimeSlicedSurveyResponseMessage</summary>
        public static readonly Method<Stellar.TimeSlicedSurveyResponseMessageEncodeRequest, Stellar.TimeSlicedSurveyResponseMessageEncodeResponse> EncodeTimeSlicedSurveyResponseMessageMethod =
            new Method<Stellar.TimeSlicedSurveyResponseMessageEncodeRequest, Stellar.TimeSlicedSurveyResponseMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTimeSlicedSurveyResponseMessage",
                XdrProtoServiceGrpcMarshaller.TimeSlicedSurveyResponseMessageEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TimeSlicedSurveyResponseMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTimeSlicedSurveyResponseMessage</summary>
        public static readonly Method<Stellar.TimeSlicedSurveyResponseMessageDecodeRequest, Stellar.TimeSlicedSurveyResponseMessageDecodeResponse> DecodeTimeSlicedSurveyResponseMessageMethod =
            new Method<Stellar.TimeSlicedSurveyResponseMessageDecodeRequest, Stellar.TimeSlicedSurveyResponseMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTimeSlicedSurveyResponseMessage",
                XdrProtoServiceGrpcMarshaller.TimeSlicedSurveyResponseMessageDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TimeSlicedSurveyResponseMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSignedSurveyResponseMessage</summary>
        public static readonly Method<Stellar.SignedSurveyResponseMessageEncodeRequest, Stellar.SignedSurveyResponseMessageEncodeResponse> EncodeSignedSurveyResponseMessageMethod =
            new Method<Stellar.SignedSurveyResponseMessageEncodeRequest, Stellar.SignedSurveyResponseMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSignedSurveyResponseMessage",
                XdrProtoServiceGrpcMarshaller.SignedSurveyResponseMessageEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SignedSurveyResponseMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSignedSurveyResponseMessage</summary>
        public static readonly Method<Stellar.SignedSurveyResponseMessageDecodeRequest, Stellar.SignedSurveyResponseMessageDecodeResponse> DecodeSignedSurveyResponseMessageMethod =
            new Method<Stellar.SignedSurveyResponseMessageDecodeRequest, Stellar.SignedSurveyResponseMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSignedSurveyResponseMessage",
                XdrProtoServiceGrpcMarshaller.SignedSurveyResponseMessageDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SignedSurveyResponseMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSignedTimeSlicedSurveyResponseMessage</summary>
        public static readonly Method<Stellar.SignedTimeSlicedSurveyResponseMessageEncodeRequest, Stellar.SignedTimeSlicedSurveyResponseMessageEncodeResponse> EncodeSignedTimeSlicedSurveyResponseMessageMethod =
            new Method<Stellar.SignedTimeSlicedSurveyResponseMessageEncodeRequest, Stellar.SignedTimeSlicedSurveyResponseMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSignedTimeSlicedSurveyResponseMessage",
                XdrProtoServiceGrpcMarshaller.SignedTimeSlicedSurveyResponseMessageEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SignedTimeSlicedSurveyResponseMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSignedTimeSlicedSurveyResponseMessage</summary>
        public static readonly Method<Stellar.SignedTimeSlicedSurveyResponseMessageDecodeRequest, Stellar.SignedTimeSlicedSurveyResponseMessageDecodeResponse> DecodeSignedTimeSlicedSurveyResponseMessageMethod =
            new Method<Stellar.SignedTimeSlicedSurveyResponseMessageDecodeRequest, Stellar.SignedTimeSlicedSurveyResponseMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSignedTimeSlicedSurveyResponseMessage",
                XdrProtoServiceGrpcMarshaller.SignedTimeSlicedSurveyResponseMessageDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SignedTimeSlicedSurveyResponseMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePeerStats</summary>
        public static readonly Method<Stellar.PeerStatsEncodeRequest, Stellar.PeerStatsEncodeResponse> EncodePeerStatsMethod =
            new Method<Stellar.PeerStatsEncodeRequest, Stellar.PeerStatsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePeerStats",
                XdrProtoServiceGrpcMarshaller.PeerStatsEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PeerStatsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePeerStats</summary>
        public static readonly Method<Stellar.PeerStatsDecodeRequest, Stellar.PeerStatsDecodeResponse> DecodePeerStatsMethod =
            new Method<Stellar.PeerStatsDecodeRequest, Stellar.PeerStatsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePeerStats",
                XdrProtoServiceGrpcMarshaller.PeerStatsDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PeerStatsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePeerStatList</summary>
        public static readonly Method<Stellar.PeerStatListEncodeRequest, Stellar.PeerStatListEncodeResponse> EncodePeerStatListMethod =
            new Method<Stellar.PeerStatListEncodeRequest, Stellar.PeerStatListEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePeerStatList",
                XdrProtoServiceGrpcMarshaller.PeerStatListEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PeerStatListEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePeerStatList</summary>
        public static readonly Method<Stellar.PeerStatListDecodeRequest, Stellar.PeerStatListDecodeResponse> DecodePeerStatListMethod =
            new Method<Stellar.PeerStatListDecodeRequest, Stellar.PeerStatListDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePeerStatList",
                XdrProtoServiceGrpcMarshaller.PeerStatListDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PeerStatListDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTimeSlicedNodeData</summary>
        public static readonly Method<Stellar.TimeSlicedNodeDataEncodeRequest, Stellar.TimeSlicedNodeDataEncodeResponse> EncodeTimeSlicedNodeDataMethod =
            new Method<Stellar.TimeSlicedNodeDataEncodeRequest, Stellar.TimeSlicedNodeDataEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTimeSlicedNodeData",
                XdrProtoServiceGrpcMarshaller.TimeSlicedNodeDataEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TimeSlicedNodeDataEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTimeSlicedNodeData</summary>
        public static readonly Method<Stellar.TimeSlicedNodeDataDecodeRequest, Stellar.TimeSlicedNodeDataDecodeResponse> DecodeTimeSlicedNodeDataMethod =
            new Method<Stellar.TimeSlicedNodeDataDecodeRequest, Stellar.TimeSlicedNodeDataDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTimeSlicedNodeData",
                XdrProtoServiceGrpcMarshaller.TimeSlicedNodeDataDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TimeSlicedNodeDataDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTimeSlicedPeerData</summary>
        public static readonly Method<Stellar.TimeSlicedPeerDataEncodeRequest, Stellar.TimeSlicedPeerDataEncodeResponse> EncodeTimeSlicedPeerDataMethod =
            new Method<Stellar.TimeSlicedPeerDataEncodeRequest, Stellar.TimeSlicedPeerDataEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTimeSlicedPeerData",
                XdrProtoServiceGrpcMarshaller.TimeSlicedPeerDataEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TimeSlicedPeerDataEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTimeSlicedPeerData</summary>
        public static readonly Method<Stellar.TimeSlicedPeerDataDecodeRequest, Stellar.TimeSlicedPeerDataDecodeResponse> DecodeTimeSlicedPeerDataMethod =
            new Method<Stellar.TimeSlicedPeerDataDecodeRequest, Stellar.TimeSlicedPeerDataDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTimeSlicedPeerData",
                XdrProtoServiceGrpcMarshaller.TimeSlicedPeerDataDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TimeSlicedPeerDataDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTimeSlicedPeerDataList</summary>
        public static readonly Method<Stellar.TimeSlicedPeerDataListEncodeRequest, Stellar.TimeSlicedPeerDataListEncodeResponse> EncodeTimeSlicedPeerDataListMethod =
            new Method<Stellar.TimeSlicedPeerDataListEncodeRequest, Stellar.TimeSlicedPeerDataListEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTimeSlicedPeerDataList",
                XdrProtoServiceGrpcMarshaller.TimeSlicedPeerDataListEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TimeSlicedPeerDataListEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTimeSlicedPeerDataList</summary>
        public static readonly Method<Stellar.TimeSlicedPeerDataListDecodeRequest, Stellar.TimeSlicedPeerDataListDecodeResponse> DecodeTimeSlicedPeerDataListMethod =
            new Method<Stellar.TimeSlicedPeerDataListDecodeRequest, Stellar.TimeSlicedPeerDataListDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTimeSlicedPeerDataList",
                XdrProtoServiceGrpcMarshaller.TimeSlicedPeerDataListDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TimeSlicedPeerDataListDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTopologyResponseBodyV0</summary>
        public static readonly Method<Stellar.TopologyResponseBodyV0EncodeRequest, Stellar.TopologyResponseBodyV0EncodeResponse> EncodeTopologyResponseBodyV0Method =
            new Method<Stellar.TopologyResponseBodyV0EncodeRequest, Stellar.TopologyResponseBodyV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTopologyResponseBodyV0",
                XdrProtoServiceGrpcMarshaller.TopologyResponseBodyV0EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TopologyResponseBodyV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTopologyResponseBodyV0</summary>
        public static readonly Method<Stellar.TopologyResponseBodyV0DecodeRequest, Stellar.TopologyResponseBodyV0DecodeResponse> DecodeTopologyResponseBodyV0Method =
            new Method<Stellar.TopologyResponseBodyV0DecodeRequest, Stellar.TopologyResponseBodyV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTopologyResponseBodyV0",
                XdrProtoServiceGrpcMarshaller.TopologyResponseBodyV0DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TopologyResponseBodyV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTopologyResponseBodyV1</summary>
        public static readonly Method<Stellar.TopologyResponseBodyV1EncodeRequest, Stellar.TopologyResponseBodyV1EncodeResponse> EncodeTopologyResponseBodyV1Method =
            new Method<Stellar.TopologyResponseBodyV1EncodeRequest, Stellar.TopologyResponseBodyV1EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTopologyResponseBodyV1",
                XdrProtoServiceGrpcMarshaller.TopologyResponseBodyV1EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TopologyResponseBodyV1EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTopologyResponseBodyV1</summary>
        public static readonly Method<Stellar.TopologyResponseBodyV1DecodeRequest, Stellar.TopologyResponseBodyV1DecodeResponse> DecodeTopologyResponseBodyV1Method =
            new Method<Stellar.TopologyResponseBodyV1DecodeRequest, Stellar.TopologyResponseBodyV1DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTopologyResponseBodyV1",
                XdrProtoServiceGrpcMarshaller.TopologyResponseBodyV1DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TopologyResponseBodyV1DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTopologyResponseBodyV2</summary>
        public static readonly Method<Stellar.TopologyResponseBodyV2EncodeRequest, Stellar.TopologyResponseBodyV2EncodeResponse> EncodeTopologyResponseBodyV2Method =
            new Method<Stellar.TopologyResponseBodyV2EncodeRequest, Stellar.TopologyResponseBodyV2EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTopologyResponseBodyV2",
                XdrProtoServiceGrpcMarshaller.TopologyResponseBodyV2EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TopologyResponseBodyV2EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTopologyResponseBodyV2</summary>
        public static readonly Method<Stellar.TopologyResponseBodyV2DecodeRequest, Stellar.TopologyResponseBodyV2DecodeResponse> DecodeTopologyResponseBodyV2Method =
            new Method<Stellar.TopologyResponseBodyV2DecodeRequest, Stellar.TopologyResponseBodyV2DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTopologyResponseBodyV2",
                XdrProtoServiceGrpcMarshaller.TopologyResponseBodyV2DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TopologyResponseBodyV2DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSurveyResponseBody</summary>
        public static readonly Method<Stellar.SurveyResponseBodyEncodeRequest, Stellar.SurveyResponseBodyEncodeResponse> EncodeSurveyResponseBodyMethod =
            new Method<Stellar.SurveyResponseBodyEncodeRequest, Stellar.SurveyResponseBodyEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSurveyResponseBody",
                XdrProtoServiceGrpcMarshaller.SurveyResponseBodyEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SurveyResponseBodyEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSurveyResponseBody</summary>
        public static readonly Method<Stellar.SurveyResponseBodyDecodeRequest, Stellar.SurveyResponseBodyDecodeResponse> DecodeSurveyResponseBodyMethod =
            new Method<Stellar.SurveyResponseBodyDecodeRequest, Stellar.SurveyResponseBodyDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSurveyResponseBody",
                XdrProtoServiceGrpcMarshaller.SurveyResponseBodyDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SurveyResponseBodyDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTxAdvertVector</summary>
        public static readonly Method<Stellar.TxAdvertVectorEncodeRequest, Stellar.TxAdvertVectorEncodeResponse> EncodeTxAdvertVectorMethod =
            new Method<Stellar.TxAdvertVectorEncodeRequest, Stellar.TxAdvertVectorEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTxAdvertVector",
                XdrProtoServiceGrpcMarshaller.TxAdvertVectorEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TxAdvertVectorEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTxAdvertVector</summary>
        public static readonly Method<Stellar.TxAdvertVectorDecodeRequest, Stellar.TxAdvertVectorDecodeResponse> DecodeTxAdvertVectorMethod =
            new Method<Stellar.TxAdvertVectorDecodeRequest, Stellar.TxAdvertVectorDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTxAdvertVector",
                XdrProtoServiceGrpcMarshaller.TxAdvertVectorDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TxAdvertVectorDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeFloodAdvert</summary>
        public static readonly Method<Stellar.FloodAdvertEncodeRequest, Stellar.FloodAdvertEncodeResponse> EncodeFloodAdvertMethod =
            new Method<Stellar.FloodAdvertEncodeRequest, Stellar.FloodAdvertEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeFloodAdvert",
                XdrProtoServiceGrpcMarshaller.FloodAdvertEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.FloodAdvertEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeFloodAdvert</summary>
        public static readonly Method<Stellar.FloodAdvertDecodeRequest, Stellar.FloodAdvertDecodeResponse> DecodeFloodAdvertMethod =
            new Method<Stellar.FloodAdvertDecodeRequest, Stellar.FloodAdvertDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeFloodAdvert",
                XdrProtoServiceGrpcMarshaller.FloodAdvertDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.FloodAdvertDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTxDemandVector</summary>
        public static readonly Method<Stellar.TxDemandVectorEncodeRequest, Stellar.TxDemandVectorEncodeResponse> EncodeTxDemandVectorMethod =
            new Method<Stellar.TxDemandVectorEncodeRequest, Stellar.TxDemandVectorEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTxDemandVector",
                XdrProtoServiceGrpcMarshaller.TxDemandVectorEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TxDemandVectorEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTxDemandVector</summary>
        public static readonly Method<Stellar.TxDemandVectorDecodeRequest, Stellar.TxDemandVectorDecodeResponse> DecodeTxDemandVectorMethod =
            new Method<Stellar.TxDemandVectorDecodeRequest, Stellar.TxDemandVectorDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTxDemandVector",
                XdrProtoServiceGrpcMarshaller.TxDemandVectorDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TxDemandVectorDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeFloodDemand</summary>
        public static readonly Method<Stellar.FloodDemandEncodeRequest, Stellar.FloodDemandEncodeResponse> EncodeFloodDemandMethod =
            new Method<Stellar.FloodDemandEncodeRequest, Stellar.FloodDemandEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeFloodDemand",
                XdrProtoServiceGrpcMarshaller.FloodDemandEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.FloodDemandEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeFloodDemand</summary>
        public static readonly Method<Stellar.FloodDemandDecodeRequest, Stellar.FloodDemandDecodeResponse> DecodeFloodDemandMethod =
            new Method<Stellar.FloodDemandDecodeRequest, Stellar.FloodDemandDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeFloodDemand",
                XdrProtoServiceGrpcMarshaller.FloodDemandDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.FloodDemandDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeStellarMessage</summary>
        public static readonly Method<Stellar.StellarMessageEncodeRequest, Stellar.StellarMessageEncodeResponse> EncodeStellarMessageMethod =
            new Method<Stellar.StellarMessageEncodeRequest, Stellar.StellarMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeStellarMessage",
                XdrProtoServiceGrpcMarshaller.StellarMessageEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.StellarMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeStellarMessage</summary>
        public static readonly Method<Stellar.StellarMessageDecodeRequest, Stellar.StellarMessageDecodeResponse> DecodeStellarMessageMethod =
            new Method<Stellar.StellarMessageDecodeRequest, Stellar.StellarMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeStellarMessage",
                XdrProtoServiceGrpcMarshaller.StellarMessageDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.StellarMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAuthenticatedMessage</summary>
        public static readonly Method<Stellar.AuthenticatedMessageEncodeRequest, Stellar.AuthenticatedMessageEncodeResponse> EncodeAuthenticatedMessageMethod =
            new Method<Stellar.AuthenticatedMessageEncodeRequest, Stellar.AuthenticatedMessageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAuthenticatedMessage",
                XdrProtoServiceGrpcMarshaller.AuthenticatedMessageEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AuthenticatedMessageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAuthenticatedMessage</summary>
        public static readonly Method<Stellar.AuthenticatedMessageDecodeRequest, Stellar.AuthenticatedMessageDecodeResponse> DecodeAuthenticatedMessageMethod =
            new Method<Stellar.AuthenticatedMessageDecodeRequest, Stellar.AuthenticatedMessageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAuthenticatedMessage",
                XdrProtoServiceGrpcMarshaller.AuthenticatedMessageDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AuthenticatedMessageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeValue</summary>
        public static readonly Method<Stellar.ValueEncodeRequest, Stellar.ValueEncodeResponse> EncodeValueMethod =
            new Method<Stellar.ValueEncodeRequest, Stellar.ValueEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeValue",
                XdrProtoServiceGrpcMarshaller.ValueEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ValueEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeValue</summary>
        public static readonly Method<Stellar.ValueDecodeRequest, Stellar.ValueDecodeResponse> DecodeValueMethod =
            new Method<Stellar.ValueDecodeRequest, Stellar.ValueDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeValue",
                XdrProtoServiceGrpcMarshaller.ValueDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ValueDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCPBallot</summary>
        public static readonly Method<Stellar.SCPBallotEncodeRequest, Stellar.SCPBallotEncodeResponse> EncodeSCPBallotMethod =
            new Method<Stellar.SCPBallotEncodeRequest, Stellar.SCPBallotEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCPBallot",
                XdrProtoServiceGrpcMarshaller.SCPBallotEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCPBallotEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCPBallot</summary>
        public static readonly Method<Stellar.SCPBallotDecodeRequest, Stellar.SCPBallotDecodeResponse> DecodeSCPBallotMethod =
            new Method<Stellar.SCPBallotDecodeRequest, Stellar.SCPBallotDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCPBallot",
                XdrProtoServiceGrpcMarshaller.SCPBallotDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCPBallotDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCPStatementType</summary>
        public static readonly Method<Stellar.SCPStatementTypeEncodeRequest, Stellar.SCPStatementTypeEncodeResponse> EncodeSCPStatementTypeMethod =
            new Method<Stellar.SCPStatementTypeEncodeRequest, Stellar.SCPStatementTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCPStatementType",
                XdrProtoServiceGrpcMarshaller.SCPStatementTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCPStatementTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCPStatementType</summary>
        public static readonly Method<Stellar.SCPStatementTypeDecodeRequest, Stellar.SCPStatementTypeDecodeResponse> DecodeSCPStatementTypeMethod =
            new Method<Stellar.SCPStatementTypeDecodeRequest, Stellar.SCPStatementTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCPStatementType",
                XdrProtoServiceGrpcMarshaller.SCPStatementTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCPStatementTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCPNomination</summary>
        public static readonly Method<Stellar.SCPNominationEncodeRequest, Stellar.SCPNominationEncodeResponse> EncodeSCPNominationMethod =
            new Method<Stellar.SCPNominationEncodeRequest, Stellar.SCPNominationEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCPNomination",
                XdrProtoServiceGrpcMarshaller.SCPNominationEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCPNominationEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCPNomination</summary>
        public static readonly Method<Stellar.SCPNominationDecodeRequest, Stellar.SCPNominationDecodeResponse> DecodeSCPNominationMethod =
            new Method<Stellar.SCPNominationDecodeRequest, Stellar.SCPNominationDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCPNomination",
                XdrProtoServiceGrpcMarshaller.SCPNominationDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCPNominationDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCPStatement</summary>
        public static readonly Method<Stellar.SCPStatementEncodeRequest, Stellar.SCPStatementEncodeResponse> EncodeSCPStatementMethod =
            new Method<Stellar.SCPStatementEncodeRequest, Stellar.SCPStatementEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCPStatement",
                XdrProtoServiceGrpcMarshaller.SCPStatementEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCPStatementEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCPStatement</summary>
        public static readonly Method<Stellar.SCPStatementDecodeRequest, Stellar.SCPStatementDecodeResponse> DecodeSCPStatementMethod =
            new Method<Stellar.SCPStatementDecodeRequest, Stellar.SCPStatementDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCPStatement",
                XdrProtoServiceGrpcMarshaller.SCPStatementDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCPStatementDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCPEnvelope</summary>
        public static readonly Method<Stellar.SCPEnvelopeEncodeRequest, Stellar.SCPEnvelopeEncodeResponse> EncodeSCPEnvelopeMethod =
            new Method<Stellar.SCPEnvelopeEncodeRequest, Stellar.SCPEnvelopeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCPEnvelope",
                XdrProtoServiceGrpcMarshaller.SCPEnvelopeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCPEnvelopeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCPEnvelope</summary>
        public static readonly Method<Stellar.SCPEnvelopeDecodeRequest, Stellar.SCPEnvelopeDecodeResponse> DecodeSCPEnvelopeMethod =
            new Method<Stellar.SCPEnvelopeDecodeRequest, Stellar.SCPEnvelopeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCPEnvelope",
                XdrProtoServiceGrpcMarshaller.SCPEnvelopeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCPEnvelopeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSCPQuorumSet</summary>
        public static readonly Method<Stellar.SCPQuorumSetEncodeRequest, Stellar.SCPQuorumSetEncodeResponse> EncodeSCPQuorumSetMethod =
            new Method<Stellar.SCPQuorumSetEncodeRequest, Stellar.SCPQuorumSetEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSCPQuorumSet",
                XdrProtoServiceGrpcMarshaller.SCPQuorumSetEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCPQuorumSetEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSCPQuorumSet</summary>
        public static readonly Method<Stellar.SCPQuorumSetDecodeRequest, Stellar.SCPQuorumSetDecodeResponse> DecodeSCPQuorumSetMethod =
            new Method<Stellar.SCPQuorumSetDecodeRequest, Stellar.SCPQuorumSetDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSCPQuorumSet",
                XdrProtoServiceGrpcMarshaller.SCPQuorumSetDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SCPQuorumSetDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLiquidityPoolParameters</summary>
        public static readonly Method<Stellar.LiquidityPoolParametersEncodeRequest, Stellar.LiquidityPoolParametersEncodeResponse> EncodeLiquidityPoolParametersMethod =
            new Method<Stellar.LiquidityPoolParametersEncodeRequest, Stellar.LiquidityPoolParametersEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLiquidityPoolParameters",
                XdrProtoServiceGrpcMarshaller.LiquidityPoolParametersEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LiquidityPoolParametersEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLiquidityPoolParameters</summary>
        public static readonly Method<Stellar.LiquidityPoolParametersDecodeRequest, Stellar.LiquidityPoolParametersDecodeResponse> DecodeLiquidityPoolParametersMethod =
            new Method<Stellar.LiquidityPoolParametersDecodeRequest, Stellar.LiquidityPoolParametersDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLiquidityPoolParameters",
                XdrProtoServiceGrpcMarshaller.LiquidityPoolParametersDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LiquidityPoolParametersDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeMuxedAccount</summary>
        public static readonly Method<Stellar.MuxedAccountEncodeRequest, Stellar.MuxedAccountEncodeResponse> EncodeMuxedAccountMethod =
            new Method<Stellar.MuxedAccountEncodeRequest, Stellar.MuxedAccountEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeMuxedAccount",
                XdrProtoServiceGrpcMarshaller.MuxedAccountEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.MuxedAccountEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeMuxedAccount</summary>
        public static readonly Method<Stellar.MuxedAccountDecodeRequest, Stellar.MuxedAccountDecodeResponse> DecodeMuxedAccountMethod =
            new Method<Stellar.MuxedAccountDecodeRequest, Stellar.MuxedAccountDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeMuxedAccount",
                XdrProtoServiceGrpcMarshaller.MuxedAccountDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.MuxedAccountDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeDecoratedSignature</summary>
        public static readonly Method<Stellar.DecoratedSignatureEncodeRequest, Stellar.DecoratedSignatureEncodeResponse> EncodeDecoratedSignatureMethod =
            new Method<Stellar.DecoratedSignatureEncodeRequest, Stellar.DecoratedSignatureEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeDecoratedSignature",
                XdrProtoServiceGrpcMarshaller.DecoratedSignatureEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.DecoratedSignatureEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeDecoratedSignature</summary>
        public static readonly Method<Stellar.DecoratedSignatureDecodeRequest, Stellar.DecoratedSignatureDecodeResponse> DecodeDecoratedSignatureMethod =
            new Method<Stellar.DecoratedSignatureDecodeRequest, Stellar.DecoratedSignatureDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeDecoratedSignature",
                XdrProtoServiceGrpcMarshaller.DecoratedSignatureDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.DecoratedSignatureDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeOperationType</summary>
        public static readonly Method<Stellar.OperationTypeEncodeRequest, Stellar.OperationTypeEncodeResponse> EncodeOperationTypeMethod =
            new Method<Stellar.OperationTypeEncodeRequest, Stellar.OperationTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeOperationType",
                XdrProtoServiceGrpcMarshaller.OperationTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.OperationTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeOperationType</summary>
        public static readonly Method<Stellar.OperationTypeDecodeRequest, Stellar.OperationTypeDecodeResponse> DecodeOperationTypeMethod =
            new Method<Stellar.OperationTypeDecodeRequest, Stellar.OperationTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeOperationType",
                XdrProtoServiceGrpcMarshaller.OperationTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.OperationTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeCreateAccountOp</summary>
        public static readonly Method<Stellar.CreateAccountOpEncodeRequest, Stellar.CreateAccountOpEncodeResponse> EncodeCreateAccountOpMethod =
            new Method<Stellar.CreateAccountOpEncodeRequest, Stellar.CreateAccountOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeCreateAccountOp",
                XdrProtoServiceGrpcMarshaller.CreateAccountOpEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.CreateAccountOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeCreateAccountOp</summary>
        public static readonly Method<Stellar.CreateAccountOpDecodeRequest, Stellar.CreateAccountOpDecodeResponse> DecodeCreateAccountOpMethod =
            new Method<Stellar.CreateAccountOpDecodeRequest, Stellar.CreateAccountOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeCreateAccountOp",
                XdrProtoServiceGrpcMarshaller.CreateAccountOpDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.CreateAccountOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePaymentOp</summary>
        public static readonly Method<Stellar.PaymentOpEncodeRequest, Stellar.PaymentOpEncodeResponse> EncodePaymentOpMethod =
            new Method<Stellar.PaymentOpEncodeRequest, Stellar.PaymentOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePaymentOp",
                XdrProtoServiceGrpcMarshaller.PaymentOpEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PaymentOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePaymentOp</summary>
        public static readonly Method<Stellar.PaymentOpDecodeRequest, Stellar.PaymentOpDecodeResponse> DecodePaymentOpMethod =
            new Method<Stellar.PaymentOpDecodeRequest, Stellar.PaymentOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePaymentOp",
                XdrProtoServiceGrpcMarshaller.PaymentOpDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PaymentOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePathPaymentStrictReceiveOp</summary>
        public static readonly Method<Stellar.PathPaymentStrictReceiveOpEncodeRequest, Stellar.PathPaymentStrictReceiveOpEncodeResponse> EncodePathPaymentStrictReceiveOpMethod =
            new Method<Stellar.PathPaymentStrictReceiveOpEncodeRequest, Stellar.PathPaymentStrictReceiveOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePathPaymentStrictReceiveOp",
                XdrProtoServiceGrpcMarshaller.PathPaymentStrictReceiveOpEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PathPaymentStrictReceiveOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePathPaymentStrictReceiveOp</summary>
        public static readonly Method<Stellar.PathPaymentStrictReceiveOpDecodeRequest, Stellar.PathPaymentStrictReceiveOpDecodeResponse> DecodePathPaymentStrictReceiveOpMethod =
            new Method<Stellar.PathPaymentStrictReceiveOpDecodeRequest, Stellar.PathPaymentStrictReceiveOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePathPaymentStrictReceiveOp",
                XdrProtoServiceGrpcMarshaller.PathPaymentStrictReceiveOpDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PathPaymentStrictReceiveOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePathPaymentStrictSendOp</summary>
        public static readonly Method<Stellar.PathPaymentStrictSendOpEncodeRequest, Stellar.PathPaymentStrictSendOpEncodeResponse> EncodePathPaymentStrictSendOpMethod =
            new Method<Stellar.PathPaymentStrictSendOpEncodeRequest, Stellar.PathPaymentStrictSendOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePathPaymentStrictSendOp",
                XdrProtoServiceGrpcMarshaller.PathPaymentStrictSendOpEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PathPaymentStrictSendOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePathPaymentStrictSendOp</summary>
        public static readonly Method<Stellar.PathPaymentStrictSendOpDecodeRequest, Stellar.PathPaymentStrictSendOpDecodeResponse> DecodePathPaymentStrictSendOpMethod =
            new Method<Stellar.PathPaymentStrictSendOpDecodeRequest, Stellar.PathPaymentStrictSendOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePathPaymentStrictSendOp",
                XdrProtoServiceGrpcMarshaller.PathPaymentStrictSendOpDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PathPaymentStrictSendOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeManageSellOfferOp</summary>
        public static readonly Method<Stellar.ManageSellOfferOpEncodeRequest, Stellar.ManageSellOfferOpEncodeResponse> EncodeManageSellOfferOpMethod =
            new Method<Stellar.ManageSellOfferOpEncodeRequest, Stellar.ManageSellOfferOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeManageSellOfferOp",
                XdrProtoServiceGrpcMarshaller.ManageSellOfferOpEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ManageSellOfferOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeManageSellOfferOp</summary>
        public static readonly Method<Stellar.ManageSellOfferOpDecodeRequest, Stellar.ManageSellOfferOpDecodeResponse> DecodeManageSellOfferOpMethod =
            new Method<Stellar.ManageSellOfferOpDecodeRequest, Stellar.ManageSellOfferOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeManageSellOfferOp",
                XdrProtoServiceGrpcMarshaller.ManageSellOfferOpDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ManageSellOfferOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeManageBuyOfferOp</summary>
        public static readonly Method<Stellar.ManageBuyOfferOpEncodeRequest, Stellar.ManageBuyOfferOpEncodeResponse> EncodeManageBuyOfferOpMethod =
            new Method<Stellar.ManageBuyOfferOpEncodeRequest, Stellar.ManageBuyOfferOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeManageBuyOfferOp",
                XdrProtoServiceGrpcMarshaller.ManageBuyOfferOpEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ManageBuyOfferOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeManageBuyOfferOp</summary>
        public static readonly Method<Stellar.ManageBuyOfferOpDecodeRequest, Stellar.ManageBuyOfferOpDecodeResponse> DecodeManageBuyOfferOpMethod =
            new Method<Stellar.ManageBuyOfferOpDecodeRequest, Stellar.ManageBuyOfferOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeManageBuyOfferOp",
                XdrProtoServiceGrpcMarshaller.ManageBuyOfferOpDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ManageBuyOfferOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeCreatePassiveSellOfferOp</summary>
        public static readonly Method<Stellar.CreatePassiveSellOfferOpEncodeRequest, Stellar.CreatePassiveSellOfferOpEncodeResponse> EncodeCreatePassiveSellOfferOpMethod =
            new Method<Stellar.CreatePassiveSellOfferOpEncodeRequest, Stellar.CreatePassiveSellOfferOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeCreatePassiveSellOfferOp",
                XdrProtoServiceGrpcMarshaller.CreatePassiveSellOfferOpEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.CreatePassiveSellOfferOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeCreatePassiveSellOfferOp</summary>
        public static readonly Method<Stellar.CreatePassiveSellOfferOpDecodeRequest, Stellar.CreatePassiveSellOfferOpDecodeResponse> DecodeCreatePassiveSellOfferOpMethod =
            new Method<Stellar.CreatePassiveSellOfferOpDecodeRequest, Stellar.CreatePassiveSellOfferOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeCreatePassiveSellOfferOp",
                XdrProtoServiceGrpcMarshaller.CreatePassiveSellOfferOpDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.CreatePassiveSellOfferOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSetOptionsOp</summary>
        public static readonly Method<Stellar.SetOptionsOpEncodeRequest, Stellar.SetOptionsOpEncodeResponse> EncodeSetOptionsOpMethod =
            new Method<Stellar.SetOptionsOpEncodeRequest, Stellar.SetOptionsOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSetOptionsOp",
                XdrProtoServiceGrpcMarshaller.SetOptionsOpEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SetOptionsOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSetOptionsOp</summary>
        public static readonly Method<Stellar.SetOptionsOpDecodeRequest, Stellar.SetOptionsOpDecodeResponse> DecodeSetOptionsOpMethod =
            new Method<Stellar.SetOptionsOpDecodeRequest, Stellar.SetOptionsOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSetOptionsOp",
                XdrProtoServiceGrpcMarshaller.SetOptionsOpDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SetOptionsOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeChangeTrustAsset</summary>
        public static readonly Method<Stellar.ChangeTrustAssetEncodeRequest, Stellar.ChangeTrustAssetEncodeResponse> EncodeChangeTrustAssetMethod =
            new Method<Stellar.ChangeTrustAssetEncodeRequest, Stellar.ChangeTrustAssetEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeChangeTrustAsset",
                XdrProtoServiceGrpcMarshaller.ChangeTrustAssetEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ChangeTrustAssetEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeChangeTrustAsset</summary>
        public static readonly Method<Stellar.ChangeTrustAssetDecodeRequest, Stellar.ChangeTrustAssetDecodeResponse> DecodeChangeTrustAssetMethod =
            new Method<Stellar.ChangeTrustAssetDecodeRequest, Stellar.ChangeTrustAssetDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeChangeTrustAsset",
                XdrProtoServiceGrpcMarshaller.ChangeTrustAssetDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ChangeTrustAssetDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeChangeTrustOp</summary>
        public static readonly Method<Stellar.ChangeTrustOpEncodeRequest, Stellar.ChangeTrustOpEncodeResponse> EncodeChangeTrustOpMethod =
            new Method<Stellar.ChangeTrustOpEncodeRequest, Stellar.ChangeTrustOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeChangeTrustOp",
                XdrProtoServiceGrpcMarshaller.ChangeTrustOpEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ChangeTrustOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeChangeTrustOp</summary>
        public static readonly Method<Stellar.ChangeTrustOpDecodeRequest, Stellar.ChangeTrustOpDecodeResponse> DecodeChangeTrustOpMethod =
            new Method<Stellar.ChangeTrustOpDecodeRequest, Stellar.ChangeTrustOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeChangeTrustOp",
                XdrProtoServiceGrpcMarshaller.ChangeTrustOpDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ChangeTrustOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAllowTrustOp</summary>
        public static readonly Method<Stellar.AllowTrustOpEncodeRequest, Stellar.AllowTrustOpEncodeResponse> EncodeAllowTrustOpMethod =
            new Method<Stellar.AllowTrustOpEncodeRequest, Stellar.AllowTrustOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAllowTrustOp",
                XdrProtoServiceGrpcMarshaller.AllowTrustOpEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AllowTrustOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAllowTrustOp</summary>
        public static readonly Method<Stellar.AllowTrustOpDecodeRequest, Stellar.AllowTrustOpDecodeResponse> DecodeAllowTrustOpMethod =
            new Method<Stellar.AllowTrustOpDecodeRequest, Stellar.AllowTrustOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAllowTrustOp",
                XdrProtoServiceGrpcMarshaller.AllowTrustOpDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AllowTrustOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeManageDataOp</summary>
        public static readonly Method<Stellar.ManageDataOpEncodeRequest, Stellar.ManageDataOpEncodeResponse> EncodeManageDataOpMethod =
            new Method<Stellar.ManageDataOpEncodeRequest, Stellar.ManageDataOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeManageDataOp",
                XdrProtoServiceGrpcMarshaller.ManageDataOpEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ManageDataOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeManageDataOp</summary>
        public static readonly Method<Stellar.ManageDataOpDecodeRequest, Stellar.ManageDataOpDecodeResponse> DecodeManageDataOpMethod =
            new Method<Stellar.ManageDataOpDecodeRequest, Stellar.ManageDataOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeManageDataOp",
                XdrProtoServiceGrpcMarshaller.ManageDataOpDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ManageDataOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeBumpSequenceOp</summary>
        public static readonly Method<Stellar.BumpSequenceOpEncodeRequest, Stellar.BumpSequenceOpEncodeResponse> EncodeBumpSequenceOpMethod =
            new Method<Stellar.BumpSequenceOpEncodeRequest, Stellar.BumpSequenceOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeBumpSequenceOp",
                XdrProtoServiceGrpcMarshaller.BumpSequenceOpEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.BumpSequenceOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeBumpSequenceOp</summary>
        public static readonly Method<Stellar.BumpSequenceOpDecodeRequest, Stellar.BumpSequenceOpDecodeResponse> DecodeBumpSequenceOpMethod =
            new Method<Stellar.BumpSequenceOpDecodeRequest, Stellar.BumpSequenceOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeBumpSequenceOp",
                XdrProtoServiceGrpcMarshaller.BumpSequenceOpDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.BumpSequenceOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeCreateClaimableBalanceOp</summary>
        public static readonly Method<Stellar.CreateClaimableBalanceOpEncodeRequest, Stellar.CreateClaimableBalanceOpEncodeResponse> EncodeCreateClaimableBalanceOpMethod =
            new Method<Stellar.CreateClaimableBalanceOpEncodeRequest, Stellar.CreateClaimableBalanceOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeCreateClaimableBalanceOp",
                XdrProtoServiceGrpcMarshaller.CreateClaimableBalanceOpEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.CreateClaimableBalanceOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeCreateClaimableBalanceOp</summary>
        public static readonly Method<Stellar.CreateClaimableBalanceOpDecodeRequest, Stellar.CreateClaimableBalanceOpDecodeResponse> DecodeCreateClaimableBalanceOpMethod =
            new Method<Stellar.CreateClaimableBalanceOpDecodeRequest, Stellar.CreateClaimableBalanceOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeCreateClaimableBalanceOp",
                XdrProtoServiceGrpcMarshaller.CreateClaimableBalanceOpDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.CreateClaimableBalanceOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimClaimableBalanceOp</summary>
        public static readonly Method<Stellar.ClaimClaimableBalanceOpEncodeRequest, Stellar.ClaimClaimableBalanceOpEncodeResponse> EncodeClaimClaimableBalanceOpMethod =
            new Method<Stellar.ClaimClaimableBalanceOpEncodeRequest, Stellar.ClaimClaimableBalanceOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimClaimableBalanceOp",
                XdrProtoServiceGrpcMarshaller.ClaimClaimableBalanceOpEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimClaimableBalanceOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimClaimableBalanceOp</summary>
        public static readonly Method<Stellar.ClaimClaimableBalanceOpDecodeRequest, Stellar.ClaimClaimableBalanceOpDecodeResponse> DecodeClaimClaimableBalanceOpMethod =
            new Method<Stellar.ClaimClaimableBalanceOpDecodeRequest, Stellar.ClaimClaimableBalanceOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimClaimableBalanceOp",
                XdrProtoServiceGrpcMarshaller.ClaimClaimableBalanceOpDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimClaimableBalanceOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeBeginSponsoringFutureReservesOp</summary>
        public static readonly Method<Stellar.BeginSponsoringFutureReservesOpEncodeRequest, Stellar.BeginSponsoringFutureReservesOpEncodeResponse> EncodeBeginSponsoringFutureReservesOpMethod =
            new Method<Stellar.BeginSponsoringFutureReservesOpEncodeRequest, Stellar.BeginSponsoringFutureReservesOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeBeginSponsoringFutureReservesOp",
                XdrProtoServiceGrpcMarshaller.BeginSponsoringFutureReservesOpEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.BeginSponsoringFutureReservesOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeBeginSponsoringFutureReservesOp</summary>
        public static readonly Method<Stellar.BeginSponsoringFutureReservesOpDecodeRequest, Stellar.BeginSponsoringFutureReservesOpDecodeResponse> DecodeBeginSponsoringFutureReservesOpMethod =
            new Method<Stellar.BeginSponsoringFutureReservesOpDecodeRequest, Stellar.BeginSponsoringFutureReservesOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeBeginSponsoringFutureReservesOp",
                XdrProtoServiceGrpcMarshaller.BeginSponsoringFutureReservesOpDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.BeginSponsoringFutureReservesOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeRevokeSponsorshipType</summary>
        public static readonly Method<Stellar.RevokeSponsorshipTypeEncodeRequest, Stellar.RevokeSponsorshipTypeEncodeResponse> EncodeRevokeSponsorshipTypeMethod =
            new Method<Stellar.RevokeSponsorshipTypeEncodeRequest, Stellar.RevokeSponsorshipTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeRevokeSponsorshipType",
                XdrProtoServiceGrpcMarshaller.RevokeSponsorshipTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.RevokeSponsorshipTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeRevokeSponsorshipType</summary>
        public static readonly Method<Stellar.RevokeSponsorshipTypeDecodeRequest, Stellar.RevokeSponsorshipTypeDecodeResponse> DecodeRevokeSponsorshipTypeMethod =
            new Method<Stellar.RevokeSponsorshipTypeDecodeRequest, Stellar.RevokeSponsorshipTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeRevokeSponsorshipType",
                XdrProtoServiceGrpcMarshaller.RevokeSponsorshipTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.RevokeSponsorshipTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeRevokeSponsorshipOp</summary>
        public static readonly Method<Stellar.RevokeSponsorshipOpEncodeRequest, Stellar.RevokeSponsorshipOpEncodeResponse> EncodeRevokeSponsorshipOpMethod =
            new Method<Stellar.RevokeSponsorshipOpEncodeRequest, Stellar.RevokeSponsorshipOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeRevokeSponsorshipOp",
                XdrProtoServiceGrpcMarshaller.RevokeSponsorshipOpEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.RevokeSponsorshipOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeRevokeSponsorshipOp</summary>
        public static readonly Method<Stellar.RevokeSponsorshipOpDecodeRequest, Stellar.RevokeSponsorshipOpDecodeResponse> DecodeRevokeSponsorshipOpMethod =
            new Method<Stellar.RevokeSponsorshipOpDecodeRequest, Stellar.RevokeSponsorshipOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeRevokeSponsorshipOp",
                XdrProtoServiceGrpcMarshaller.RevokeSponsorshipOpDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.RevokeSponsorshipOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClawbackOp</summary>
        public static readonly Method<Stellar.ClawbackOpEncodeRequest, Stellar.ClawbackOpEncodeResponse> EncodeClawbackOpMethod =
            new Method<Stellar.ClawbackOpEncodeRequest, Stellar.ClawbackOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClawbackOp",
                XdrProtoServiceGrpcMarshaller.ClawbackOpEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClawbackOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClawbackOp</summary>
        public static readonly Method<Stellar.ClawbackOpDecodeRequest, Stellar.ClawbackOpDecodeResponse> DecodeClawbackOpMethod =
            new Method<Stellar.ClawbackOpDecodeRequest, Stellar.ClawbackOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClawbackOp",
                XdrProtoServiceGrpcMarshaller.ClawbackOpDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClawbackOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClawbackClaimableBalanceOp</summary>
        public static readonly Method<Stellar.ClawbackClaimableBalanceOpEncodeRequest, Stellar.ClawbackClaimableBalanceOpEncodeResponse> EncodeClawbackClaimableBalanceOpMethod =
            new Method<Stellar.ClawbackClaimableBalanceOpEncodeRequest, Stellar.ClawbackClaimableBalanceOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClawbackClaimableBalanceOp",
                XdrProtoServiceGrpcMarshaller.ClawbackClaimableBalanceOpEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClawbackClaimableBalanceOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClawbackClaimableBalanceOp</summary>
        public static readonly Method<Stellar.ClawbackClaimableBalanceOpDecodeRequest, Stellar.ClawbackClaimableBalanceOpDecodeResponse> DecodeClawbackClaimableBalanceOpMethod =
            new Method<Stellar.ClawbackClaimableBalanceOpDecodeRequest, Stellar.ClawbackClaimableBalanceOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClawbackClaimableBalanceOp",
                XdrProtoServiceGrpcMarshaller.ClawbackClaimableBalanceOpDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClawbackClaimableBalanceOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSetTrustLineFlagsOp</summary>
        public static readonly Method<Stellar.SetTrustLineFlagsOpEncodeRequest, Stellar.SetTrustLineFlagsOpEncodeResponse> EncodeSetTrustLineFlagsOpMethod =
            new Method<Stellar.SetTrustLineFlagsOpEncodeRequest, Stellar.SetTrustLineFlagsOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSetTrustLineFlagsOp",
                XdrProtoServiceGrpcMarshaller.SetTrustLineFlagsOpEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SetTrustLineFlagsOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSetTrustLineFlagsOp</summary>
        public static readonly Method<Stellar.SetTrustLineFlagsOpDecodeRequest, Stellar.SetTrustLineFlagsOpDecodeResponse> DecodeSetTrustLineFlagsOpMethod =
            new Method<Stellar.SetTrustLineFlagsOpDecodeRequest, Stellar.SetTrustLineFlagsOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSetTrustLineFlagsOp",
                XdrProtoServiceGrpcMarshaller.SetTrustLineFlagsOpDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SetTrustLineFlagsOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLiquidityPoolDepositOp</summary>
        public static readonly Method<Stellar.LiquidityPoolDepositOpEncodeRequest, Stellar.LiquidityPoolDepositOpEncodeResponse> EncodeLiquidityPoolDepositOpMethod =
            new Method<Stellar.LiquidityPoolDepositOpEncodeRequest, Stellar.LiquidityPoolDepositOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLiquidityPoolDepositOp",
                XdrProtoServiceGrpcMarshaller.LiquidityPoolDepositOpEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LiquidityPoolDepositOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLiquidityPoolDepositOp</summary>
        public static readonly Method<Stellar.LiquidityPoolDepositOpDecodeRequest, Stellar.LiquidityPoolDepositOpDecodeResponse> DecodeLiquidityPoolDepositOpMethod =
            new Method<Stellar.LiquidityPoolDepositOpDecodeRequest, Stellar.LiquidityPoolDepositOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLiquidityPoolDepositOp",
                XdrProtoServiceGrpcMarshaller.LiquidityPoolDepositOpDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LiquidityPoolDepositOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLiquidityPoolWithdrawOp</summary>
        public static readonly Method<Stellar.LiquidityPoolWithdrawOpEncodeRequest, Stellar.LiquidityPoolWithdrawOpEncodeResponse> EncodeLiquidityPoolWithdrawOpMethod =
            new Method<Stellar.LiquidityPoolWithdrawOpEncodeRequest, Stellar.LiquidityPoolWithdrawOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLiquidityPoolWithdrawOp",
                XdrProtoServiceGrpcMarshaller.LiquidityPoolWithdrawOpEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LiquidityPoolWithdrawOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLiquidityPoolWithdrawOp</summary>
        public static readonly Method<Stellar.LiquidityPoolWithdrawOpDecodeRequest, Stellar.LiquidityPoolWithdrawOpDecodeResponse> DecodeLiquidityPoolWithdrawOpMethod =
            new Method<Stellar.LiquidityPoolWithdrawOpDecodeRequest, Stellar.LiquidityPoolWithdrawOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLiquidityPoolWithdrawOp",
                XdrProtoServiceGrpcMarshaller.LiquidityPoolWithdrawOpDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LiquidityPoolWithdrawOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeHostFunctionType</summary>
        public static readonly Method<Stellar.HostFunctionTypeEncodeRequest, Stellar.HostFunctionTypeEncodeResponse> EncodeHostFunctionTypeMethod =
            new Method<Stellar.HostFunctionTypeEncodeRequest, Stellar.HostFunctionTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeHostFunctionType",
                XdrProtoServiceGrpcMarshaller.HostFunctionTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.HostFunctionTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeHostFunctionType</summary>
        public static readonly Method<Stellar.HostFunctionTypeDecodeRequest, Stellar.HostFunctionTypeDecodeResponse> DecodeHostFunctionTypeMethod =
            new Method<Stellar.HostFunctionTypeDecodeRequest, Stellar.HostFunctionTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeHostFunctionType",
                XdrProtoServiceGrpcMarshaller.HostFunctionTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.HostFunctionTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeContractIDPreimageType</summary>
        public static readonly Method<Stellar.ContractIDPreimageTypeEncodeRequest, Stellar.ContractIDPreimageTypeEncodeResponse> EncodeContractIDPreimageTypeMethod =
            new Method<Stellar.ContractIDPreimageTypeEncodeRequest, Stellar.ContractIDPreimageTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeContractIDPreimageType",
                XdrProtoServiceGrpcMarshaller.ContractIDPreimageTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ContractIDPreimageTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeContractIDPreimageType</summary>
        public static readonly Method<Stellar.ContractIDPreimageTypeDecodeRequest, Stellar.ContractIDPreimageTypeDecodeResponse> DecodeContractIDPreimageTypeMethod =
            new Method<Stellar.ContractIDPreimageTypeDecodeRequest, Stellar.ContractIDPreimageTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeContractIDPreimageType",
                XdrProtoServiceGrpcMarshaller.ContractIDPreimageTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ContractIDPreimageTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeContractIDPreimage</summary>
        public static readonly Method<Stellar.ContractIDPreimageEncodeRequest, Stellar.ContractIDPreimageEncodeResponse> EncodeContractIDPreimageMethod =
            new Method<Stellar.ContractIDPreimageEncodeRequest, Stellar.ContractIDPreimageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeContractIDPreimage",
                XdrProtoServiceGrpcMarshaller.ContractIDPreimageEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ContractIDPreimageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeContractIDPreimage</summary>
        public static readonly Method<Stellar.ContractIDPreimageDecodeRequest, Stellar.ContractIDPreimageDecodeResponse> DecodeContractIDPreimageMethod =
            new Method<Stellar.ContractIDPreimageDecodeRequest, Stellar.ContractIDPreimageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeContractIDPreimage",
                XdrProtoServiceGrpcMarshaller.ContractIDPreimageDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ContractIDPreimageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeCreateContractArgs</summary>
        public static readonly Method<Stellar.CreateContractArgsEncodeRequest, Stellar.CreateContractArgsEncodeResponse> EncodeCreateContractArgsMethod =
            new Method<Stellar.CreateContractArgsEncodeRequest, Stellar.CreateContractArgsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeCreateContractArgs",
                XdrProtoServiceGrpcMarshaller.CreateContractArgsEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.CreateContractArgsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeCreateContractArgs</summary>
        public static readonly Method<Stellar.CreateContractArgsDecodeRequest, Stellar.CreateContractArgsDecodeResponse> DecodeCreateContractArgsMethod =
            new Method<Stellar.CreateContractArgsDecodeRequest, Stellar.CreateContractArgsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeCreateContractArgs",
                XdrProtoServiceGrpcMarshaller.CreateContractArgsDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.CreateContractArgsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeCreateContractArgsV2</summary>
        public static readonly Method<Stellar.CreateContractArgsV2EncodeRequest, Stellar.CreateContractArgsV2EncodeResponse> EncodeCreateContractArgsV2Method =
            new Method<Stellar.CreateContractArgsV2EncodeRequest, Stellar.CreateContractArgsV2EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeCreateContractArgsV2",
                XdrProtoServiceGrpcMarshaller.CreateContractArgsV2EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.CreateContractArgsV2EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeCreateContractArgsV2</summary>
        public static readonly Method<Stellar.CreateContractArgsV2DecodeRequest, Stellar.CreateContractArgsV2DecodeResponse> DecodeCreateContractArgsV2Method =
            new Method<Stellar.CreateContractArgsV2DecodeRequest, Stellar.CreateContractArgsV2DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeCreateContractArgsV2",
                XdrProtoServiceGrpcMarshaller.CreateContractArgsV2DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.CreateContractArgsV2DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeInvokeContractArgs</summary>
        public static readonly Method<Stellar.InvokeContractArgsEncodeRequest, Stellar.InvokeContractArgsEncodeResponse> EncodeInvokeContractArgsMethod =
            new Method<Stellar.InvokeContractArgsEncodeRequest, Stellar.InvokeContractArgsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeInvokeContractArgs",
                XdrProtoServiceGrpcMarshaller.InvokeContractArgsEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.InvokeContractArgsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeInvokeContractArgs</summary>
        public static readonly Method<Stellar.InvokeContractArgsDecodeRequest, Stellar.InvokeContractArgsDecodeResponse> DecodeInvokeContractArgsMethod =
            new Method<Stellar.InvokeContractArgsDecodeRequest, Stellar.InvokeContractArgsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeInvokeContractArgs",
                XdrProtoServiceGrpcMarshaller.InvokeContractArgsDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.InvokeContractArgsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeHostFunction</summary>
        public static readonly Method<Stellar.HostFunctionEncodeRequest, Stellar.HostFunctionEncodeResponse> EncodeHostFunctionMethod =
            new Method<Stellar.HostFunctionEncodeRequest, Stellar.HostFunctionEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeHostFunction",
                XdrProtoServiceGrpcMarshaller.HostFunctionEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.HostFunctionEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeHostFunction</summary>
        public static readonly Method<Stellar.HostFunctionDecodeRequest, Stellar.HostFunctionDecodeResponse> DecodeHostFunctionMethod =
            new Method<Stellar.HostFunctionDecodeRequest, Stellar.HostFunctionDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeHostFunction",
                XdrProtoServiceGrpcMarshaller.HostFunctionDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.HostFunctionDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSorobanAuthorizedFunctionType</summary>
        public static readonly Method<Stellar.SorobanAuthorizedFunctionTypeEncodeRequest, Stellar.SorobanAuthorizedFunctionTypeEncodeResponse> EncodeSorobanAuthorizedFunctionTypeMethod =
            new Method<Stellar.SorobanAuthorizedFunctionTypeEncodeRequest, Stellar.SorobanAuthorizedFunctionTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSorobanAuthorizedFunctionType",
                XdrProtoServiceGrpcMarshaller.SorobanAuthorizedFunctionTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SorobanAuthorizedFunctionTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSorobanAuthorizedFunctionType</summary>
        public static readonly Method<Stellar.SorobanAuthorizedFunctionTypeDecodeRequest, Stellar.SorobanAuthorizedFunctionTypeDecodeResponse> DecodeSorobanAuthorizedFunctionTypeMethod =
            new Method<Stellar.SorobanAuthorizedFunctionTypeDecodeRequest, Stellar.SorobanAuthorizedFunctionTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSorobanAuthorizedFunctionType",
                XdrProtoServiceGrpcMarshaller.SorobanAuthorizedFunctionTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SorobanAuthorizedFunctionTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSorobanAuthorizedFunction</summary>
        public static readonly Method<Stellar.SorobanAuthorizedFunctionEncodeRequest, Stellar.SorobanAuthorizedFunctionEncodeResponse> EncodeSorobanAuthorizedFunctionMethod =
            new Method<Stellar.SorobanAuthorizedFunctionEncodeRequest, Stellar.SorobanAuthorizedFunctionEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSorobanAuthorizedFunction",
                XdrProtoServiceGrpcMarshaller.SorobanAuthorizedFunctionEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SorobanAuthorizedFunctionEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSorobanAuthorizedFunction</summary>
        public static readonly Method<Stellar.SorobanAuthorizedFunctionDecodeRequest, Stellar.SorobanAuthorizedFunctionDecodeResponse> DecodeSorobanAuthorizedFunctionMethod =
            new Method<Stellar.SorobanAuthorizedFunctionDecodeRequest, Stellar.SorobanAuthorizedFunctionDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSorobanAuthorizedFunction",
                XdrProtoServiceGrpcMarshaller.SorobanAuthorizedFunctionDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SorobanAuthorizedFunctionDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSorobanAuthorizedInvocation</summary>
        public static readonly Method<Stellar.SorobanAuthorizedInvocationEncodeRequest, Stellar.SorobanAuthorizedInvocationEncodeResponse> EncodeSorobanAuthorizedInvocationMethod =
            new Method<Stellar.SorobanAuthorizedInvocationEncodeRequest, Stellar.SorobanAuthorizedInvocationEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSorobanAuthorizedInvocation",
                XdrProtoServiceGrpcMarshaller.SorobanAuthorizedInvocationEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SorobanAuthorizedInvocationEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSorobanAuthorizedInvocation</summary>
        public static readonly Method<Stellar.SorobanAuthorizedInvocationDecodeRequest, Stellar.SorobanAuthorizedInvocationDecodeResponse> DecodeSorobanAuthorizedInvocationMethod =
            new Method<Stellar.SorobanAuthorizedInvocationDecodeRequest, Stellar.SorobanAuthorizedInvocationDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSorobanAuthorizedInvocation",
                XdrProtoServiceGrpcMarshaller.SorobanAuthorizedInvocationDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SorobanAuthorizedInvocationDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSorobanAddressCredentials</summary>
        public static readonly Method<Stellar.SorobanAddressCredentialsEncodeRequest, Stellar.SorobanAddressCredentialsEncodeResponse> EncodeSorobanAddressCredentialsMethod =
            new Method<Stellar.SorobanAddressCredentialsEncodeRequest, Stellar.SorobanAddressCredentialsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSorobanAddressCredentials",
                XdrProtoServiceGrpcMarshaller.SorobanAddressCredentialsEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SorobanAddressCredentialsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSorobanAddressCredentials</summary>
        public static readonly Method<Stellar.SorobanAddressCredentialsDecodeRequest, Stellar.SorobanAddressCredentialsDecodeResponse> DecodeSorobanAddressCredentialsMethod =
            new Method<Stellar.SorobanAddressCredentialsDecodeRequest, Stellar.SorobanAddressCredentialsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSorobanAddressCredentials",
                XdrProtoServiceGrpcMarshaller.SorobanAddressCredentialsDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SorobanAddressCredentialsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSorobanCredentialsType</summary>
        public static readonly Method<Stellar.SorobanCredentialsTypeEncodeRequest, Stellar.SorobanCredentialsTypeEncodeResponse> EncodeSorobanCredentialsTypeMethod =
            new Method<Stellar.SorobanCredentialsTypeEncodeRequest, Stellar.SorobanCredentialsTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSorobanCredentialsType",
                XdrProtoServiceGrpcMarshaller.SorobanCredentialsTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SorobanCredentialsTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSorobanCredentialsType</summary>
        public static readonly Method<Stellar.SorobanCredentialsTypeDecodeRequest, Stellar.SorobanCredentialsTypeDecodeResponse> DecodeSorobanCredentialsTypeMethod =
            new Method<Stellar.SorobanCredentialsTypeDecodeRequest, Stellar.SorobanCredentialsTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSorobanCredentialsType",
                XdrProtoServiceGrpcMarshaller.SorobanCredentialsTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SorobanCredentialsTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSorobanCredentials</summary>
        public static readonly Method<Stellar.SorobanCredentialsEncodeRequest, Stellar.SorobanCredentialsEncodeResponse> EncodeSorobanCredentialsMethod =
            new Method<Stellar.SorobanCredentialsEncodeRequest, Stellar.SorobanCredentialsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSorobanCredentials",
                XdrProtoServiceGrpcMarshaller.SorobanCredentialsEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SorobanCredentialsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSorobanCredentials</summary>
        public static readonly Method<Stellar.SorobanCredentialsDecodeRequest, Stellar.SorobanCredentialsDecodeResponse> DecodeSorobanCredentialsMethod =
            new Method<Stellar.SorobanCredentialsDecodeRequest, Stellar.SorobanCredentialsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSorobanCredentials",
                XdrProtoServiceGrpcMarshaller.SorobanCredentialsDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SorobanCredentialsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSorobanAuthorizationEntry</summary>
        public static readonly Method<Stellar.SorobanAuthorizationEntryEncodeRequest, Stellar.SorobanAuthorizationEntryEncodeResponse> EncodeSorobanAuthorizationEntryMethod =
            new Method<Stellar.SorobanAuthorizationEntryEncodeRequest, Stellar.SorobanAuthorizationEntryEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSorobanAuthorizationEntry",
                XdrProtoServiceGrpcMarshaller.SorobanAuthorizationEntryEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SorobanAuthorizationEntryEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSorobanAuthorizationEntry</summary>
        public static readonly Method<Stellar.SorobanAuthorizationEntryDecodeRequest, Stellar.SorobanAuthorizationEntryDecodeResponse> DecodeSorobanAuthorizationEntryMethod =
            new Method<Stellar.SorobanAuthorizationEntryDecodeRequest, Stellar.SorobanAuthorizationEntryDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSorobanAuthorizationEntry",
                XdrProtoServiceGrpcMarshaller.SorobanAuthorizationEntryDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SorobanAuthorizationEntryDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeInvokeHostFunctionOp</summary>
        public static readonly Method<Stellar.InvokeHostFunctionOpEncodeRequest, Stellar.InvokeHostFunctionOpEncodeResponse> EncodeInvokeHostFunctionOpMethod =
            new Method<Stellar.InvokeHostFunctionOpEncodeRequest, Stellar.InvokeHostFunctionOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeInvokeHostFunctionOp",
                XdrProtoServiceGrpcMarshaller.InvokeHostFunctionOpEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.InvokeHostFunctionOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeInvokeHostFunctionOp</summary>
        public static readonly Method<Stellar.InvokeHostFunctionOpDecodeRequest, Stellar.InvokeHostFunctionOpDecodeResponse> DecodeInvokeHostFunctionOpMethod =
            new Method<Stellar.InvokeHostFunctionOpDecodeRequest, Stellar.InvokeHostFunctionOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeInvokeHostFunctionOp",
                XdrProtoServiceGrpcMarshaller.InvokeHostFunctionOpDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.InvokeHostFunctionOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeExtendFootprintTTLOp</summary>
        public static readonly Method<Stellar.ExtendFootprintTTLOpEncodeRequest, Stellar.ExtendFootprintTTLOpEncodeResponse> EncodeExtendFootprintTTLOpMethod =
            new Method<Stellar.ExtendFootprintTTLOpEncodeRequest, Stellar.ExtendFootprintTTLOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeExtendFootprintTTLOp",
                XdrProtoServiceGrpcMarshaller.ExtendFootprintTTLOpEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ExtendFootprintTTLOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeExtendFootprintTTLOp</summary>
        public static readonly Method<Stellar.ExtendFootprintTTLOpDecodeRequest, Stellar.ExtendFootprintTTLOpDecodeResponse> DecodeExtendFootprintTTLOpMethod =
            new Method<Stellar.ExtendFootprintTTLOpDecodeRequest, Stellar.ExtendFootprintTTLOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeExtendFootprintTTLOp",
                XdrProtoServiceGrpcMarshaller.ExtendFootprintTTLOpDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ExtendFootprintTTLOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeRestoreFootprintOp</summary>
        public static readonly Method<Stellar.RestoreFootprintOpEncodeRequest, Stellar.RestoreFootprintOpEncodeResponse> EncodeRestoreFootprintOpMethod =
            new Method<Stellar.RestoreFootprintOpEncodeRequest, Stellar.RestoreFootprintOpEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeRestoreFootprintOp",
                XdrProtoServiceGrpcMarshaller.RestoreFootprintOpEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.RestoreFootprintOpEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeRestoreFootprintOp</summary>
        public static readonly Method<Stellar.RestoreFootprintOpDecodeRequest, Stellar.RestoreFootprintOpDecodeResponse> DecodeRestoreFootprintOpMethod =
            new Method<Stellar.RestoreFootprintOpDecodeRequest, Stellar.RestoreFootprintOpDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeRestoreFootprintOp",
                XdrProtoServiceGrpcMarshaller.RestoreFootprintOpDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.RestoreFootprintOpDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeOperation</summary>
        public static readonly Method<Stellar.OperationEncodeRequest, Stellar.OperationEncodeResponse> EncodeOperationMethod =
            new Method<Stellar.OperationEncodeRequest, Stellar.OperationEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeOperation",
                XdrProtoServiceGrpcMarshaller.OperationEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.OperationEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeOperation</summary>
        public static readonly Method<Stellar.OperationDecodeRequest, Stellar.OperationDecodeResponse> DecodeOperationMethod =
            new Method<Stellar.OperationDecodeRequest, Stellar.OperationDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeOperation",
                XdrProtoServiceGrpcMarshaller.OperationDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.OperationDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeHashIDPreimage</summary>
        public static readonly Method<Stellar.HashIDPreimageEncodeRequest, Stellar.HashIDPreimageEncodeResponse> EncodeHashIDPreimageMethod =
            new Method<Stellar.HashIDPreimageEncodeRequest, Stellar.HashIDPreimageEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeHashIDPreimage",
                XdrProtoServiceGrpcMarshaller.HashIDPreimageEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.HashIDPreimageEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeHashIDPreimage</summary>
        public static readonly Method<Stellar.HashIDPreimageDecodeRequest, Stellar.HashIDPreimageDecodeResponse> DecodeHashIDPreimageMethod =
            new Method<Stellar.HashIDPreimageDecodeRequest, Stellar.HashIDPreimageDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeHashIDPreimage",
                XdrProtoServiceGrpcMarshaller.HashIDPreimageDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.HashIDPreimageDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeMemoType</summary>
        public static readonly Method<Stellar.MemoTypeEncodeRequest, Stellar.MemoTypeEncodeResponse> EncodeMemoTypeMethod =
            new Method<Stellar.MemoTypeEncodeRequest, Stellar.MemoTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeMemoType",
                XdrProtoServiceGrpcMarshaller.MemoTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.MemoTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeMemoType</summary>
        public static readonly Method<Stellar.MemoTypeDecodeRequest, Stellar.MemoTypeDecodeResponse> DecodeMemoTypeMethod =
            new Method<Stellar.MemoTypeDecodeRequest, Stellar.MemoTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeMemoType",
                XdrProtoServiceGrpcMarshaller.MemoTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.MemoTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeMemo</summary>
        public static readonly Method<Stellar.MemoEncodeRequest, Stellar.MemoEncodeResponse> EncodeMemoMethod =
            new Method<Stellar.MemoEncodeRequest, Stellar.MemoEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeMemo",
                XdrProtoServiceGrpcMarshaller.MemoEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.MemoEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeMemo</summary>
        public static readonly Method<Stellar.MemoDecodeRequest, Stellar.MemoDecodeResponse> DecodeMemoMethod =
            new Method<Stellar.MemoDecodeRequest, Stellar.MemoDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeMemo",
                XdrProtoServiceGrpcMarshaller.MemoDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.MemoDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTimeBounds</summary>
        public static readonly Method<Stellar.TimeBoundsEncodeRequest, Stellar.TimeBoundsEncodeResponse> EncodeTimeBoundsMethod =
            new Method<Stellar.TimeBoundsEncodeRequest, Stellar.TimeBoundsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTimeBounds",
                XdrProtoServiceGrpcMarshaller.TimeBoundsEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TimeBoundsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTimeBounds</summary>
        public static readonly Method<Stellar.TimeBoundsDecodeRequest, Stellar.TimeBoundsDecodeResponse> DecodeTimeBoundsMethod =
            new Method<Stellar.TimeBoundsDecodeRequest, Stellar.TimeBoundsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTimeBounds",
                XdrProtoServiceGrpcMarshaller.TimeBoundsDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TimeBoundsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerBounds</summary>
        public static readonly Method<Stellar.LedgerBoundsEncodeRequest, Stellar.LedgerBoundsEncodeResponse> EncodeLedgerBoundsMethod =
            new Method<Stellar.LedgerBoundsEncodeRequest, Stellar.LedgerBoundsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerBounds",
                XdrProtoServiceGrpcMarshaller.LedgerBoundsEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerBoundsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerBounds</summary>
        public static readonly Method<Stellar.LedgerBoundsDecodeRequest, Stellar.LedgerBoundsDecodeResponse> DecodeLedgerBoundsMethod =
            new Method<Stellar.LedgerBoundsDecodeRequest, Stellar.LedgerBoundsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerBounds",
                XdrProtoServiceGrpcMarshaller.LedgerBoundsDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerBoundsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePreconditionsV2</summary>
        public static readonly Method<Stellar.PreconditionsV2EncodeRequest, Stellar.PreconditionsV2EncodeResponse> EncodePreconditionsV2Method =
            new Method<Stellar.PreconditionsV2EncodeRequest, Stellar.PreconditionsV2EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePreconditionsV2",
                XdrProtoServiceGrpcMarshaller.PreconditionsV2EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PreconditionsV2EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePreconditionsV2</summary>
        public static readonly Method<Stellar.PreconditionsV2DecodeRequest, Stellar.PreconditionsV2DecodeResponse> DecodePreconditionsV2Method =
            new Method<Stellar.PreconditionsV2DecodeRequest, Stellar.PreconditionsV2DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePreconditionsV2",
                XdrProtoServiceGrpcMarshaller.PreconditionsV2DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PreconditionsV2DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePreconditionType</summary>
        public static readonly Method<Stellar.PreconditionTypeEncodeRequest, Stellar.PreconditionTypeEncodeResponse> EncodePreconditionTypeMethod =
            new Method<Stellar.PreconditionTypeEncodeRequest, Stellar.PreconditionTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePreconditionType",
                XdrProtoServiceGrpcMarshaller.PreconditionTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PreconditionTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePreconditionType</summary>
        public static readonly Method<Stellar.PreconditionTypeDecodeRequest, Stellar.PreconditionTypeDecodeResponse> DecodePreconditionTypeMethod =
            new Method<Stellar.PreconditionTypeDecodeRequest, Stellar.PreconditionTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePreconditionType",
                XdrProtoServiceGrpcMarshaller.PreconditionTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PreconditionTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePreconditions</summary>
        public static readonly Method<Stellar.PreconditionsEncodeRequest, Stellar.PreconditionsEncodeResponse> EncodePreconditionsMethod =
            new Method<Stellar.PreconditionsEncodeRequest, Stellar.PreconditionsEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePreconditions",
                XdrProtoServiceGrpcMarshaller.PreconditionsEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PreconditionsEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePreconditions</summary>
        public static readonly Method<Stellar.PreconditionsDecodeRequest, Stellar.PreconditionsDecodeResponse> DecodePreconditionsMethod =
            new Method<Stellar.PreconditionsDecodeRequest, Stellar.PreconditionsDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePreconditions",
                XdrProtoServiceGrpcMarshaller.PreconditionsDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PreconditionsDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLedgerFootprint</summary>
        public static readonly Method<Stellar.LedgerFootprintEncodeRequest, Stellar.LedgerFootprintEncodeResponse> EncodeLedgerFootprintMethod =
            new Method<Stellar.LedgerFootprintEncodeRequest, Stellar.LedgerFootprintEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLedgerFootprint",
                XdrProtoServiceGrpcMarshaller.LedgerFootprintEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerFootprintEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLedgerFootprint</summary>
        public static readonly Method<Stellar.LedgerFootprintDecodeRequest, Stellar.LedgerFootprintDecodeResponse> DecodeLedgerFootprintMethod =
            new Method<Stellar.LedgerFootprintDecodeRequest, Stellar.LedgerFootprintDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLedgerFootprint",
                XdrProtoServiceGrpcMarshaller.LedgerFootprintDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LedgerFootprintDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeArchivalProofType</summary>
        public static readonly Method<Stellar.ArchivalProofTypeEncodeRequest, Stellar.ArchivalProofTypeEncodeResponse> EncodeArchivalProofTypeMethod =
            new Method<Stellar.ArchivalProofTypeEncodeRequest, Stellar.ArchivalProofTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeArchivalProofType",
                XdrProtoServiceGrpcMarshaller.ArchivalProofTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ArchivalProofTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeArchivalProofType</summary>
        public static readonly Method<Stellar.ArchivalProofTypeDecodeRequest, Stellar.ArchivalProofTypeDecodeResponse> DecodeArchivalProofTypeMethod =
            new Method<Stellar.ArchivalProofTypeDecodeRequest, Stellar.ArchivalProofTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeArchivalProofType",
                XdrProtoServiceGrpcMarshaller.ArchivalProofTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ArchivalProofTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeArchivalProofNode</summary>
        public static readonly Method<Stellar.ArchivalProofNodeEncodeRequest, Stellar.ArchivalProofNodeEncodeResponse> EncodeArchivalProofNodeMethod =
            new Method<Stellar.ArchivalProofNodeEncodeRequest, Stellar.ArchivalProofNodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeArchivalProofNode",
                XdrProtoServiceGrpcMarshaller.ArchivalProofNodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ArchivalProofNodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeArchivalProofNode</summary>
        public static readonly Method<Stellar.ArchivalProofNodeDecodeRequest, Stellar.ArchivalProofNodeDecodeResponse> DecodeArchivalProofNodeMethod =
            new Method<Stellar.ArchivalProofNodeDecodeRequest, Stellar.ArchivalProofNodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeArchivalProofNode",
                XdrProtoServiceGrpcMarshaller.ArchivalProofNodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ArchivalProofNodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeProofLevel</summary>
        public static readonly Method<Stellar.ProofLevelEncodeRequest, Stellar.ProofLevelEncodeResponse> EncodeProofLevelMethod =
            new Method<Stellar.ProofLevelEncodeRequest, Stellar.ProofLevelEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeProofLevel",
                XdrProtoServiceGrpcMarshaller.ProofLevelEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ProofLevelEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeProofLevel</summary>
        public static readonly Method<Stellar.ProofLevelDecodeRequest, Stellar.ProofLevelDecodeResponse> DecodeProofLevelMethod =
            new Method<Stellar.ProofLevelDecodeRequest, Stellar.ProofLevelDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeProofLevel",
                XdrProtoServiceGrpcMarshaller.ProofLevelDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ProofLevelDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeNonexistenceProofBody</summary>
        public static readonly Method<Stellar.NonexistenceProofBodyEncodeRequest, Stellar.NonexistenceProofBodyEncodeResponse> EncodeNonexistenceProofBodyMethod =
            new Method<Stellar.NonexistenceProofBodyEncodeRequest, Stellar.NonexistenceProofBodyEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeNonexistenceProofBody",
                XdrProtoServiceGrpcMarshaller.NonexistenceProofBodyEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.NonexistenceProofBodyEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeNonexistenceProofBody</summary>
        public static readonly Method<Stellar.NonexistenceProofBodyDecodeRequest, Stellar.NonexistenceProofBodyDecodeResponse> DecodeNonexistenceProofBodyMethod =
            new Method<Stellar.NonexistenceProofBodyDecodeRequest, Stellar.NonexistenceProofBodyDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeNonexistenceProofBody",
                XdrProtoServiceGrpcMarshaller.NonexistenceProofBodyDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.NonexistenceProofBodyDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeExistenceProofBody</summary>
        public static readonly Method<Stellar.ExistenceProofBodyEncodeRequest, Stellar.ExistenceProofBodyEncodeResponse> EncodeExistenceProofBodyMethod =
            new Method<Stellar.ExistenceProofBodyEncodeRequest, Stellar.ExistenceProofBodyEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeExistenceProofBody",
                XdrProtoServiceGrpcMarshaller.ExistenceProofBodyEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ExistenceProofBodyEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeExistenceProofBody</summary>
        public static readonly Method<Stellar.ExistenceProofBodyDecodeRequest, Stellar.ExistenceProofBodyDecodeResponse> DecodeExistenceProofBodyMethod =
            new Method<Stellar.ExistenceProofBodyDecodeRequest, Stellar.ExistenceProofBodyDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeExistenceProofBody",
                XdrProtoServiceGrpcMarshaller.ExistenceProofBodyDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ExistenceProofBodyDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeArchivalProof</summary>
        public static readonly Method<Stellar.ArchivalProofEncodeRequest, Stellar.ArchivalProofEncodeResponse> EncodeArchivalProofMethod =
            new Method<Stellar.ArchivalProofEncodeRequest, Stellar.ArchivalProofEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeArchivalProof",
                XdrProtoServiceGrpcMarshaller.ArchivalProofEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ArchivalProofEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeArchivalProof</summary>
        public static readonly Method<Stellar.ArchivalProofDecodeRequest, Stellar.ArchivalProofDecodeResponse> DecodeArchivalProofMethod =
            new Method<Stellar.ArchivalProofDecodeRequest, Stellar.ArchivalProofDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeArchivalProof",
                XdrProtoServiceGrpcMarshaller.ArchivalProofDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ArchivalProofDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSorobanResources</summary>
        public static readonly Method<Stellar.SorobanResourcesEncodeRequest, Stellar.SorobanResourcesEncodeResponse> EncodeSorobanResourcesMethod =
            new Method<Stellar.SorobanResourcesEncodeRequest, Stellar.SorobanResourcesEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSorobanResources",
                XdrProtoServiceGrpcMarshaller.SorobanResourcesEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SorobanResourcesEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSorobanResources</summary>
        public static readonly Method<Stellar.SorobanResourcesDecodeRequest, Stellar.SorobanResourcesDecodeResponse> DecodeSorobanResourcesMethod =
            new Method<Stellar.SorobanResourcesDecodeRequest, Stellar.SorobanResourcesDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSorobanResources",
                XdrProtoServiceGrpcMarshaller.SorobanResourcesDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SorobanResourcesDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSorobanTransactionData</summary>
        public static readonly Method<Stellar.SorobanTransactionDataEncodeRequest, Stellar.SorobanTransactionDataEncodeResponse> EncodeSorobanTransactionDataMethod =
            new Method<Stellar.SorobanTransactionDataEncodeRequest, Stellar.SorobanTransactionDataEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSorobanTransactionData",
                XdrProtoServiceGrpcMarshaller.SorobanTransactionDataEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SorobanTransactionDataEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSorobanTransactionData</summary>
        public static readonly Method<Stellar.SorobanTransactionDataDecodeRequest, Stellar.SorobanTransactionDataDecodeResponse> DecodeSorobanTransactionDataMethod =
            new Method<Stellar.SorobanTransactionDataDecodeRequest, Stellar.SorobanTransactionDataDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSorobanTransactionData",
                XdrProtoServiceGrpcMarshaller.SorobanTransactionDataDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SorobanTransactionDataDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionV0</summary>
        public static readonly Method<Stellar.TransactionV0EncodeRequest, Stellar.TransactionV0EncodeResponse> EncodeTransactionV0Method =
            new Method<Stellar.TransactionV0EncodeRequest, Stellar.TransactionV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionV0",
                XdrProtoServiceGrpcMarshaller.TransactionV0EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionV0</summary>
        public static readonly Method<Stellar.TransactionV0DecodeRequest, Stellar.TransactionV0DecodeResponse> DecodeTransactionV0Method =
            new Method<Stellar.TransactionV0DecodeRequest, Stellar.TransactionV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionV0",
                XdrProtoServiceGrpcMarshaller.TransactionV0DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionV0Envelope</summary>
        public static readonly Method<Stellar.TransactionV0EnvelopeEncodeRequest, Stellar.TransactionV0EnvelopeEncodeResponse> EncodeTransactionV0EnvelopeMethod =
            new Method<Stellar.TransactionV0EnvelopeEncodeRequest, Stellar.TransactionV0EnvelopeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionV0Envelope",
                XdrProtoServiceGrpcMarshaller.TransactionV0EnvelopeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionV0EnvelopeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionV0Envelope</summary>
        public static readonly Method<Stellar.TransactionV0EnvelopeDecodeRequest, Stellar.TransactionV0EnvelopeDecodeResponse> DecodeTransactionV0EnvelopeMethod =
            new Method<Stellar.TransactionV0EnvelopeDecodeRequest, Stellar.TransactionV0EnvelopeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionV0Envelope",
                XdrProtoServiceGrpcMarshaller.TransactionV0EnvelopeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionV0EnvelopeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransaction</summary>
        public static readonly Method<Stellar.TransactionEncodeRequest, Stellar.TransactionEncodeResponse> EncodeTransactionMethod =
            new Method<Stellar.TransactionEncodeRequest, Stellar.TransactionEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransaction",
                XdrProtoServiceGrpcMarshaller.TransactionEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransaction</summary>
        public static readonly Method<Stellar.TransactionDecodeRequest, Stellar.TransactionDecodeResponse> DecodeTransactionMethod =
            new Method<Stellar.TransactionDecodeRequest, Stellar.TransactionDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransaction",
                XdrProtoServiceGrpcMarshaller.TransactionDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionV1Envelope</summary>
        public static readonly Method<Stellar.TransactionV1EnvelopeEncodeRequest, Stellar.TransactionV1EnvelopeEncodeResponse> EncodeTransactionV1EnvelopeMethod =
            new Method<Stellar.TransactionV1EnvelopeEncodeRequest, Stellar.TransactionV1EnvelopeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionV1Envelope",
                XdrProtoServiceGrpcMarshaller.TransactionV1EnvelopeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionV1EnvelopeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionV1Envelope</summary>
        public static readonly Method<Stellar.TransactionV1EnvelopeDecodeRequest, Stellar.TransactionV1EnvelopeDecodeResponse> DecodeTransactionV1EnvelopeMethod =
            new Method<Stellar.TransactionV1EnvelopeDecodeRequest, Stellar.TransactionV1EnvelopeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionV1Envelope",
                XdrProtoServiceGrpcMarshaller.TransactionV1EnvelopeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionV1EnvelopeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeFeeBumpTransaction</summary>
        public static readonly Method<Stellar.FeeBumpTransactionEncodeRequest, Stellar.FeeBumpTransactionEncodeResponse> EncodeFeeBumpTransactionMethod =
            new Method<Stellar.FeeBumpTransactionEncodeRequest, Stellar.FeeBumpTransactionEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeFeeBumpTransaction",
                XdrProtoServiceGrpcMarshaller.FeeBumpTransactionEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.FeeBumpTransactionEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeFeeBumpTransaction</summary>
        public static readonly Method<Stellar.FeeBumpTransactionDecodeRequest, Stellar.FeeBumpTransactionDecodeResponse> DecodeFeeBumpTransactionMethod =
            new Method<Stellar.FeeBumpTransactionDecodeRequest, Stellar.FeeBumpTransactionDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeFeeBumpTransaction",
                XdrProtoServiceGrpcMarshaller.FeeBumpTransactionDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.FeeBumpTransactionDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeFeeBumpTransactionEnvelope</summary>
        public static readonly Method<Stellar.FeeBumpTransactionEnvelopeEncodeRequest, Stellar.FeeBumpTransactionEnvelopeEncodeResponse> EncodeFeeBumpTransactionEnvelopeMethod =
            new Method<Stellar.FeeBumpTransactionEnvelopeEncodeRequest, Stellar.FeeBumpTransactionEnvelopeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeFeeBumpTransactionEnvelope",
                XdrProtoServiceGrpcMarshaller.FeeBumpTransactionEnvelopeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.FeeBumpTransactionEnvelopeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeFeeBumpTransactionEnvelope</summary>
        public static readonly Method<Stellar.FeeBumpTransactionEnvelopeDecodeRequest, Stellar.FeeBumpTransactionEnvelopeDecodeResponse> DecodeFeeBumpTransactionEnvelopeMethod =
            new Method<Stellar.FeeBumpTransactionEnvelopeDecodeRequest, Stellar.FeeBumpTransactionEnvelopeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeFeeBumpTransactionEnvelope",
                XdrProtoServiceGrpcMarshaller.FeeBumpTransactionEnvelopeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.FeeBumpTransactionEnvelopeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionEnvelope</summary>
        public static readonly Method<Stellar.TransactionEnvelopeEncodeRequest, Stellar.TransactionEnvelopeEncodeResponse> EncodeTransactionEnvelopeMethod =
            new Method<Stellar.TransactionEnvelopeEncodeRequest, Stellar.TransactionEnvelopeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionEnvelope",
                XdrProtoServiceGrpcMarshaller.TransactionEnvelopeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionEnvelopeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionEnvelope</summary>
        public static readonly Method<Stellar.TransactionEnvelopeDecodeRequest, Stellar.TransactionEnvelopeDecodeResponse> DecodeTransactionEnvelopeMethod =
            new Method<Stellar.TransactionEnvelopeDecodeRequest, Stellar.TransactionEnvelopeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionEnvelope",
                XdrProtoServiceGrpcMarshaller.TransactionEnvelopeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionEnvelopeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionSignaturePayload</summary>
        public static readonly Method<Stellar.TransactionSignaturePayloadEncodeRequest, Stellar.TransactionSignaturePayloadEncodeResponse> EncodeTransactionSignaturePayloadMethod =
            new Method<Stellar.TransactionSignaturePayloadEncodeRequest, Stellar.TransactionSignaturePayloadEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionSignaturePayload",
                XdrProtoServiceGrpcMarshaller.TransactionSignaturePayloadEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionSignaturePayloadEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionSignaturePayload</summary>
        public static readonly Method<Stellar.TransactionSignaturePayloadDecodeRequest, Stellar.TransactionSignaturePayloadDecodeResponse> DecodeTransactionSignaturePayloadMethod =
            new Method<Stellar.TransactionSignaturePayloadDecodeRequest, Stellar.TransactionSignaturePayloadDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionSignaturePayload",
                XdrProtoServiceGrpcMarshaller.TransactionSignaturePayloadDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionSignaturePayloadDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimAtomType</summary>
        public static readonly Method<Stellar.ClaimAtomTypeEncodeRequest, Stellar.ClaimAtomTypeEncodeResponse> EncodeClaimAtomTypeMethod =
            new Method<Stellar.ClaimAtomTypeEncodeRequest, Stellar.ClaimAtomTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimAtomType",
                XdrProtoServiceGrpcMarshaller.ClaimAtomTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimAtomTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimAtomType</summary>
        public static readonly Method<Stellar.ClaimAtomTypeDecodeRequest, Stellar.ClaimAtomTypeDecodeResponse> DecodeClaimAtomTypeMethod =
            new Method<Stellar.ClaimAtomTypeDecodeRequest, Stellar.ClaimAtomTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimAtomType",
                XdrProtoServiceGrpcMarshaller.ClaimAtomTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimAtomTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimOfferAtomV0</summary>
        public static readonly Method<Stellar.ClaimOfferAtomV0EncodeRequest, Stellar.ClaimOfferAtomV0EncodeResponse> EncodeClaimOfferAtomV0Method =
            new Method<Stellar.ClaimOfferAtomV0EncodeRequest, Stellar.ClaimOfferAtomV0EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimOfferAtomV0",
                XdrProtoServiceGrpcMarshaller.ClaimOfferAtomV0EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimOfferAtomV0EncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimOfferAtomV0</summary>
        public static readonly Method<Stellar.ClaimOfferAtomV0DecodeRequest, Stellar.ClaimOfferAtomV0DecodeResponse> DecodeClaimOfferAtomV0Method =
            new Method<Stellar.ClaimOfferAtomV0DecodeRequest, Stellar.ClaimOfferAtomV0DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimOfferAtomV0",
                XdrProtoServiceGrpcMarshaller.ClaimOfferAtomV0DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimOfferAtomV0DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimOfferAtom</summary>
        public static readonly Method<Stellar.ClaimOfferAtomEncodeRequest, Stellar.ClaimOfferAtomEncodeResponse> EncodeClaimOfferAtomMethod =
            new Method<Stellar.ClaimOfferAtomEncodeRequest, Stellar.ClaimOfferAtomEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimOfferAtom",
                XdrProtoServiceGrpcMarshaller.ClaimOfferAtomEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimOfferAtomEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimOfferAtom</summary>
        public static readonly Method<Stellar.ClaimOfferAtomDecodeRequest, Stellar.ClaimOfferAtomDecodeResponse> DecodeClaimOfferAtomMethod =
            new Method<Stellar.ClaimOfferAtomDecodeRequest, Stellar.ClaimOfferAtomDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimOfferAtom",
                XdrProtoServiceGrpcMarshaller.ClaimOfferAtomDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimOfferAtomDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimLiquidityAtom</summary>
        public static readonly Method<Stellar.ClaimLiquidityAtomEncodeRequest, Stellar.ClaimLiquidityAtomEncodeResponse> EncodeClaimLiquidityAtomMethod =
            new Method<Stellar.ClaimLiquidityAtomEncodeRequest, Stellar.ClaimLiquidityAtomEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimLiquidityAtom",
                XdrProtoServiceGrpcMarshaller.ClaimLiquidityAtomEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimLiquidityAtomEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimLiquidityAtom</summary>
        public static readonly Method<Stellar.ClaimLiquidityAtomDecodeRequest, Stellar.ClaimLiquidityAtomDecodeResponse> DecodeClaimLiquidityAtomMethod =
            new Method<Stellar.ClaimLiquidityAtomDecodeRequest, Stellar.ClaimLiquidityAtomDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimLiquidityAtom",
                XdrProtoServiceGrpcMarshaller.ClaimLiquidityAtomDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimLiquidityAtomDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimAtom</summary>
        public static readonly Method<Stellar.ClaimAtomEncodeRequest, Stellar.ClaimAtomEncodeResponse> EncodeClaimAtomMethod =
            new Method<Stellar.ClaimAtomEncodeRequest, Stellar.ClaimAtomEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimAtom",
                XdrProtoServiceGrpcMarshaller.ClaimAtomEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimAtomEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimAtom</summary>
        public static readonly Method<Stellar.ClaimAtomDecodeRequest, Stellar.ClaimAtomDecodeResponse> DecodeClaimAtomMethod =
            new Method<Stellar.ClaimAtomDecodeRequest, Stellar.ClaimAtomDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimAtom",
                XdrProtoServiceGrpcMarshaller.ClaimAtomDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimAtomDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeCreateAccountResultCode</summary>
        public static readonly Method<Stellar.CreateAccountResultCodeEncodeRequest, Stellar.CreateAccountResultCodeEncodeResponse> EncodeCreateAccountResultCodeMethod =
            new Method<Stellar.CreateAccountResultCodeEncodeRequest, Stellar.CreateAccountResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeCreateAccountResultCode",
                XdrProtoServiceGrpcMarshaller.CreateAccountResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.CreateAccountResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeCreateAccountResultCode</summary>
        public static readonly Method<Stellar.CreateAccountResultCodeDecodeRequest, Stellar.CreateAccountResultCodeDecodeResponse> DecodeCreateAccountResultCodeMethod =
            new Method<Stellar.CreateAccountResultCodeDecodeRequest, Stellar.CreateAccountResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeCreateAccountResultCode",
                XdrProtoServiceGrpcMarshaller.CreateAccountResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.CreateAccountResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeCreateAccountResult</summary>
        public static readonly Method<Stellar.CreateAccountResultEncodeRequest, Stellar.CreateAccountResultEncodeResponse> EncodeCreateAccountResultMethod =
            new Method<Stellar.CreateAccountResultEncodeRequest, Stellar.CreateAccountResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeCreateAccountResult",
                XdrProtoServiceGrpcMarshaller.CreateAccountResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.CreateAccountResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeCreateAccountResult</summary>
        public static readonly Method<Stellar.CreateAccountResultDecodeRequest, Stellar.CreateAccountResultDecodeResponse> DecodeCreateAccountResultMethod =
            new Method<Stellar.CreateAccountResultDecodeRequest, Stellar.CreateAccountResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeCreateAccountResult",
                XdrProtoServiceGrpcMarshaller.CreateAccountResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.CreateAccountResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePaymentResultCode</summary>
        public static readonly Method<Stellar.PaymentResultCodeEncodeRequest, Stellar.PaymentResultCodeEncodeResponse> EncodePaymentResultCodeMethod =
            new Method<Stellar.PaymentResultCodeEncodeRequest, Stellar.PaymentResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePaymentResultCode",
                XdrProtoServiceGrpcMarshaller.PaymentResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PaymentResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePaymentResultCode</summary>
        public static readonly Method<Stellar.PaymentResultCodeDecodeRequest, Stellar.PaymentResultCodeDecodeResponse> DecodePaymentResultCodeMethod =
            new Method<Stellar.PaymentResultCodeDecodeRequest, Stellar.PaymentResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePaymentResultCode",
                XdrProtoServiceGrpcMarshaller.PaymentResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PaymentResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePaymentResult</summary>
        public static readonly Method<Stellar.PaymentResultEncodeRequest, Stellar.PaymentResultEncodeResponse> EncodePaymentResultMethod =
            new Method<Stellar.PaymentResultEncodeRequest, Stellar.PaymentResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePaymentResult",
                XdrProtoServiceGrpcMarshaller.PaymentResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PaymentResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePaymentResult</summary>
        public static readonly Method<Stellar.PaymentResultDecodeRequest, Stellar.PaymentResultDecodeResponse> DecodePaymentResultMethod =
            new Method<Stellar.PaymentResultDecodeRequest, Stellar.PaymentResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePaymentResult",
                XdrProtoServiceGrpcMarshaller.PaymentResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PaymentResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePathPaymentStrictReceiveResultCode</summary>
        public static readonly Method<Stellar.PathPaymentStrictReceiveResultCodeEncodeRequest, Stellar.PathPaymentStrictReceiveResultCodeEncodeResponse> EncodePathPaymentStrictReceiveResultCodeMethod =
            new Method<Stellar.PathPaymentStrictReceiveResultCodeEncodeRequest, Stellar.PathPaymentStrictReceiveResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePathPaymentStrictReceiveResultCode",
                XdrProtoServiceGrpcMarshaller.PathPaymentStrictReceiveResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PathPaymentStrictReceiveResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePathPaymentStrictReceiveResultCode</summary>
        public static readonly Method<Stellar.PathPaymentStrictReceiveResultCodeDecodeRequest, Stellar.PathPaymentStrictReceiveResultCodeDecodeResponse> DecodePathPaymentStrictReceiveResultCodeMethod =
            new Method<Stellar.PathPaymentStrictReceiveResultCodeDecodeRequest, Stellar.PathPaymentStrictReceiveResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePathPaymentStrictReceiveResultCode",
                XdrProtoServiceGrpcMarshaller.PathPaymentStrictReceiveResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PathPaymentStrictReceiveResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSimplePaymentResult</summary>
        public static readonly Method<Stellar.SimplePaymentResultEncodeRequest, Stellar.SimplePaymentResultEncodeResponse> EncodeSimplePaymentResultMethod =
            new Method<Stellar.SimplePaymentResultEncodeRequest, Stellar.SimplePaymentResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSimplePaymentResult",
                XdrProtoServiceGrpcMarshaller.SimplePaymentResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SimplePaymentResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSimplePaymentResult</summary>
        public static readonly Method<Stellar.SimplePaymentResultDecodeRequest, Stellar.SimplePaymentResultDecodeResponse> DecodeSimplePaymentResultMethod =
            new Method<Stellar.SimplePaymentResultDecodeRequest, Stellar.SimplePaymentResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSimplePaymentResult",
                XdrProtoServiceGrpcMarshaller.SimplePaymentResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SimplePaymentResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePathPaymentStrictReceiveResult</summary>
        public static readonly Method<Stellar.PathPaymentStrictReceiveResultEncodeRequest, Stellar.PathPaymentStrictReceiveResultEncodeResponse> EncodePathPaymentStrictReceiveResultMethod =
            new Method<Stellar.PathPaymentStrictReceiveResultEncodeRequest, Stellar.PathPaymentStrictReceiveResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePathPaymentStrictReceiveResult",
                XdrProtoServiceGrpcMarshaller.PathPaymentStrictReceiveResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PathPaymentStrictReceiveResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePathPaymentStrictReceiveResult</summary>
        public static readonly Method<Stellar.PathPaymentStrictReceiveResultDecodeRequest, Stellar.PathPaymentStrictReceiveResultDecodeResponse> DecodePathPaymentStrictReceiveResultMethod =
            new Method<Stellar.PathPaymentStrictReceiveResultDecodeRequest, Stellar.PathPaymentStrictReceiveResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePathPaymentStrictReceiveResult",
                XdrProtoServiceGrpcMarshaller.PathPaymentStrictReceiveResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PathPaymentStrictReceiveResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePathPaymentStrictSendResultCode</summary>
        public static readonly Method<Stellar.PathPaymentStrictSendResultCodeEncodeRequest, Stellar.PathPaymentStrictSendResultCodeEncodeResponse> EncodePathPaymentStrictSendResultCodeMethod =
            new Method<Stellar.PathPaymentStrictSendResultCodeEncodeRequest, Stellar.PathPaymentStrictSendResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePathPaymentStrictSendResultCode",
                XdrProtoServiceGrpcMarshaller.PathPaymentStrictSendResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PathPaymentStrictSendResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePathPaymentStrictSendResultCode</summary>
        public static readonly Method<Stellar.PathPaymentStrictSendResultCodeDecodeRequest, Stellar.PathPaymentStrictSendResultCodeDecodeResponse> DecodePathPaymentStrictSendResultCodeMethod =
            new Method<Stellar.PathPaymentStrictSendResultCodeDecodeRequest, Stellar.PathPaymentStrictSendResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePathPaymentStrictSendResultCode",
                XdrProtoServiceGrpcMarshaller.PathPaymentStrictSendResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PathPaymentStrictSendResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePathPaymentStrictSendResult</summary>
        public static readonly Method<Stellar.PathPaymentStrictSendResultEncodeRequest, Stellar.PathPaymentStrictSendResultEncodeResponse> EncodePathPaymentStrictSendResultMethod =
            new Method<Stellar.PathPaymentStrictSendResultEncodeRequest, Stellar.PathPaymentStrictSendResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePathPaymentStrictSendResult",
                XdrProtoServiceGrpcMarshaller.PathPaymentStrictSendResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PathPaymentStrictSendResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePathPaymentStrictSendResult</summary>
        public static readonly Method<Stellar.PathPaymentStrictSendResultDecodeRequest, Stellar.PathPaymentStrictSendResultDecodeResponse> DecodePathPaymentStrictSendResultMethod =
            new Method<Stellar.PathPaymentStrictSendResultDecodeRequest, Stellar.PathPaymentStrictSendResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePathPaymentStrictSendResult",
                XdrProtoServiceGrpcMarshaller.PathPaymentStrictSendResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PathPaymentStrictSendResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeManageSellOfferResultCode</summary>
        public static readonly Method<Stellar.ManageSellOfferResultCodeEncodeRequest, Stellar.ManageSellOfferResultCodeEncodeResponse> EncodeManageSellOfferResultCodeMethod =
            new Method<Stellar.ManageSellOfferResultCodeEncodeRequest, Stellar.ManageSellOfferResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeManageSellOfferResultCode",
                XdrProtoServiceGrpcMarshaller.ManageSellOfferResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ManageSellOfferResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeManageSellOfferResultCode</summary>
        public static readonly Method<Stellar.ManageSellOfferResultCodeDecodeRequest, Stellar.ManageSellOfferResultCodeDecodeResponse> DecodeManageSellOfferResultCodeMethod =
            new Method<Stellar.ManageSellOfferResultCodeDecodeRequest, Stellar.ManageSellOfferResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeManageSellOfferResultCode",
                XdrProtoServiceGrpcMarshaller.ManageSellOfferResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ManageSellOfferResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeManageOfferEffect</summary>
        public static readonly Method<Stellar.ManageOfferEffectEncodeRequest, Stellar.ManageOfferEffectEncodeResponse> EncodeManageOfferEffectMethod =
            new Method<Stellar.ManageOfferEffectEncodeRequest, Stellar.ManageOfferEffectEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeManageOfferEffect",
                XdrProtoServiceGrpcMarshaller.ManageOfferEffectEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ManageOfferEffectEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeManageOfferEffect</summary>
        public static readonly Method<Stellar.ManageOfferEffectDecodeRequest, Stellar.ManageOfferEffectDecodeResponse> DecodeManageOfferEffectMethod =
            new Method<Stellar.ManageOfferEffectDecodeRequest, Stellar.ManageOfferEffectDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeManageOfferEffect",
                XdrProtoServiceGrpcMarshaller.ManageOfferEffectDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ManageOfferEffectDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeManageOfferSuccessResult</summary>
        public static readonly Method<Stellar.ManageOfferSuccessResultEncodeRequest, Stellar.ManageOfferSuccessResultEncodeResponse> EncodeManageOfferSuccessResultMethod =
            new Method<Stellar.ManageOfferSuccessResultEncodeRequest, Stellar.ManageOfferSuccessResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeManageOfferSuccessResult",
                XdrProtoServiceGrpcMarshaller.ManageOfferSuccessResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ManageOfferSuccessResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeManageOfferSuccessResult</summary>
        public static readonly Method<Stellar.ManageOfferSuccessResultDecodeRequest, Stellar.ManageOfferSuccessResultDecodeResponse> DecodeManageOfferSuccessResultMethod =
            new Method<Stellar.ManageOfferSuccessResultDecodeRequest, Stellar.ManageOfferSuccessResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeManageOfferSuccessResult",
                XdrProtoServiceGrpcMarshaller.ManageOfferSuccessResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ManageOfferSuccessResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeManageSellOfferResult</summary>
        public static readonly Method<Stellar.ManageSellOfferResultEncodeRequest, Stellar.ManageSellOfferResultEncodeResponse> EncodeManageSellOfferResultMethod =
            new Method<Stellar.ManageSellOfferResultEncodeRequest, Stellar.ManageSellOfferResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeManageSellOfferResult",
                XdrProtoServiceGrpcMarshaller.ManageSellOfferResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ManageSellOfferResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeManageSellOfferResult</summary>
        public static readonly Method<Stellar.ManageSellOfferResultDecodeRequest, Stellar.ManageSellOfferResultDecodeResponse> DecodeManageSellOfferResultMethod =
            new Method<Stellar.ManageSellOfferResultDecodeRequest, Stellar.ManageSellOfferResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeManageSellOfferResult",
                XdrProtoServiceGrpcMarshaller.ManageSellOfferResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ManageSellOfferResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeManageBuyOfferResultCode</summary>
        public static readonly Method<Stellar.ManageBuyOfferResultCodeEncodeRequest, Stellar.ManageBuyOfferResultCodeEncodeResponse> EncodeManageBuyOfferResultCodeMethod =
            new Method<Stellar.ManageBuyOfferResultCodeEncodeRequest, Stellar.ManageBuyOfferResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeManageBuyOfferResultCode",
                XdrProtoServiceGrpcMarshaller.ManageBuyOfferResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ManageBuyOfferResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeManageBuyOfferResultCode</summary>
        public static readonly Method<Stellar.ManageBuyOfferResultCodeDecodeRequest, Stellar.ManageBuyOfferResultCodeDecodeResponse> DecodeManageBuyOfferResultCodeMethod =
            new Method<Stellar.ManageBuyOfferResultCodeDecodeRequest, Stellar.ManageBuyOfferResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeManageBuyOfferResultCode",
                XdrProtoServiceGrpcMarshaller.ManageBuyOfferResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ManageBuyOfferResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeManageBuyOfferResult</summary>
        public static readonly Method<Stellar.ManageBuyOfferResultEncodeRequest, Stellar.ManageBuyOfferResultEncodeResponse> EncodeManageBuyOfferResultMethod =
            new Method<Stellar.ManageBuyOfferResultEncodeRequest, Stellar.ManageBuyOfferResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeManageBuyOfferResult",
                XdrProtoServiceGrpcMarshaller.ManageBuyOfferResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ManageBuyOfferResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeManageBuyOfferResult</summary>
        public static readonly Method<Stellar.ManageBuyOfferResultDecodeRequest, Stellar.ManageBuyOfferResultDecodeResponse> DecodeManageBuyOfferResultMethod =
            new Method<Stellar.ManageBuyOfferResultDecodeRequest, Stellar.ManageBuyOfferResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeManageBuyOfferResult",
                XdrProtoServiceGrpcMarshaller.ManageBuyOfferResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ManageBuyOfferResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSetOptionsResultCode</summary>
        public static readonly Method<Stellar.SetOptionsResultCodeEncodeRequest, Stellar.SetOptionsResultCodeEncodeResponse> EncodeSetOptionsResultCodeMethod =
            new Method<Stellar.SetOptionsResultCodeEncodeRequest, Stellar.SetOptionsResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSetOptionsResultCode",
                XdrProtoServiceGrpcMarshaller.SetOptionsResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SetOptionsResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSetOptionsResultCode</summary>
        public static readonly Method<Stellar.SetOptionsResultCodeDecodeRequest, Stellar.SetOptionsResultCodeDecodeResponse> DecodeSetOptionsResultCodeMethod =
            new Method<Stellar.SetOptionsResultCodeDecodeRequest, Stellar.SetOptionsResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSetOptionsResultCode",
                XdrProtoServiceGrpcMarshaller.SetOptionsResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SetOptionsResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSetOptionsResult</summary>
        public static readonly Method<Stellar.SetOptionsResultEncodeRequest, Stellar.SetOptionsResultEncodeResponse> EncodeSetOptionsResultMethod =
            new Method<Stellar.SetOptionsResultEncodeRequest, Stellar.SetOptionsResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSetOptionsResult",
                XdrProtoServiceGrpcMarshaller.SetOptionsResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SetOptionsResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSetOptionsResult</summary>
        public static readonly Method<Stellar.SetOptionsResultDecodeRequest, Stellar.SetOptionsResultDecodeResponse> DecodeSetOptionsResultMethod =
            new Method<Stellar.SetOptionsResultDecodeRequest, Stellar.SetOptionsResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSetOptionsResult",
                XdrProtoServiceGrpcMarshaller.SetOptionsResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SetOptionsResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeChangeTrustResultCode</summary>
        public static readonly Method<Stellar.ChangeTrustResultCodeEncodeRequest, Stellar.ChangeTrustResultCodeEncodeResponse> EncodeChangeTrustResultCodeMethod =
            new Method<Stellar.ChangeTrustResultCodeEncodeRequest, Stellar.ChangeTrustResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeChangeTrustResultCode",
                XdrProtoServiceGrpcMarshaller.ChangeTrustResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ChangeTrustResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeChangeTrustResultCode</summary>
        public static readonly Method<Stellar.ChangeTrustResultCodeDecodeRequest, Stellar.ChangeTrustResultCodeDecodeResponse> DecodeChangeTrustResultCodeMethod =
            new Method<Stellar.ChangeTrustResultCodeDecodeRequest, Stellar.ChangeTrustResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeChangeTrustResultCode",
                XdrProtoServiceGrpcMarshaller.ChangeTrustResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ChangeTrustResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeChangeTrustResult</summary>
        public static readonly Method<Stellar.ChangeTrustResultEncodeRequest, Stellar.ChangeTrustResultEncodeResponse> EncodeChangeTrustResultMethod =
            new Method<Stellar.ChangeTrustResultEncodeRequest, Stellar.ChangeTrustResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeChangeTrustResult",
                XdrProtoServiceGrpcMarshaller.ChangeTrustResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ChangeTrustResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeChangeTrustResult</summary>
        public static readonly Method<Stellar.ChangeTrustResultDecodeRequest, Stellar.ChangeTrustResultDecodeResponse> DecodeChangeTrustResultMethod =
            new Method<Stellar.ChangeTrustResultDecodeRequest, Stellar.ChangeTrustResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeChangeTrustResult",
                XdrProtoServiceGrpcMarshaller.ChangeTrustResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ChangeTrustResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAllowTrustResultCode</summary>
        public static readonly Method<Stellar.AllowTrustResultCodeEncodeRequest, Stellar.AllowTrustResultCodeEncodeResponse> EncodeAllowTrustResultCodeMethod =
            new Method<Stellar.AllowTrustResultCodeEncodeRequest, Stellar.AllowTrustResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAllowTrustResultCode",
                XdrProtoServiceGrpcMarshaller.AllowTrustResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AllowTrustResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAllowTrustResultCode</summary>
        public static readonly Method<Stellar.AllowTrustResultCodeDecodeRequest, Stellar.AllowTrustResultCodeDecodeResponse> DecodeAllowTrustResultCodeMethod =
            new Method<Stellar.AllowTrustResultCodeDecodeRequest, Stellar.AllowTrustResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAllowTrustResultCode",
                XdrProtoServiceGrpcMarshaller.AllowTrustResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AllowTrustResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAllowTrustResult</summary>
        public static readonly Method<Stellar.AllowTrustResultEncodeRequest, Stellar.AllowTrustResultEncodeResponse> EncodeAllowTrustResultMethod =
            new Method<Stellar.AllowTrustResultEncodeRequest, Stellar.AllowTrustResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAllowTrustResult",
                XdrProtoServiceGrpcMarshaller.AllowTrustResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AllowTrustResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAllowTrustResult</summary>
        public static readonly Method<Stellar.AllowTrustResultDecodeRequest, Stellar.AllowTrustResultDecodeResponse> DecodeAllowTrustResultMethod =
            new Method<Stellar.AllowTrustResultDecodeRequest, Stellar.AllowTrustResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAllowTrustResult",
                XdrProtoServiceGrpcMarshaller.AllowTrustResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AllowTrustResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAccountMergeResultCode</summary>
        public static readonly Method<Stellar.AccountMergeResultCodeEncodeRequest, Stellar.AccountMergeResultCodeEncodeResponse> EncodeAccountMergeResultCodeMethod =
            new Method<Stellar.AccountMergeResultCodeEncodeRequest, Stellar.AccountMergeResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAccountMergeResultCode",
                XdrProtoServiceGrpcMarshaller.AccountMergeResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AccountMergeResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAccountMergeResultCode</summary>
        public static readonly Method<Stellar.AccountMergeResultCodeDecodeRequest, Stellar.AccountMergeResultCodeDecodeResponse> DecodeAccountMergeResultCodeMethod =
            new Method<Stellar.AccountMergeResultCodeDecodeRequest, Stellar.AccountMergeResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAccountMergeResultCode",
                XdrProtoServiceGrpcMarshaller.AccountMergeResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AccountMergeResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAccountMergeResult</summary>
        public static readonly Method<Stellar.AccountMergeResultEncodeRequest, Stellar.AccountMergeResultEncodeResponse> EncodeAccountMergeResultMethod =
            new Method<Stellar.AccountMergeResultEncodeRequest, Stellar.AccountMergeResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAccountMergeResult",
                XdrProtoServiceGrpcMarshaller.AccountMergeResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AccountMergeResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAccountMergeResult</summary>
        public static readonly Method<Stellar.AccountMergeResultDecodeRequest, Stellar.AccountMergeResultDecodeResponse> DecodeAccountMergeResultMethod =
            new Method<Stellar.AccountMergeResultDecodeRequest, Stellar.AccountMergeResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAccountMergeResult",
                XdrProtoServiceGrpcMarshaller.AccountMergeResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AccountMergeResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeInflationResultCode</summary>
        public static readonly Method<Stellar.InflationResultCodeEncodeRequest, Stellar.InflationResultCodeEncodeResponse> EncodeInflationResultCodeMethod =
            new Method<Stellar.InflationResultCodeEncodeRequest, Stellar.InflationResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeInflationResultCode",
                XdrProtoServiceGrpcMarshaller.InflationResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.InflationResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeInflationResultCode</summary>
        public static readonly Method<Stellar.InflationResultCodeDecodeRequest, Stellar.InflationResultCodeDecodeResponse> DecodeInflationResultCodeMethod =
            new Method<Stellar.InflationResultCodeDecodeRequest, Stellar.InflationResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeInflationResultCode",
                XdrProtoServiceGrpcMarshaller.InflationResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.InflationResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeInflationPayout</summary>
        public static readonly Method<Stellar.InflationPayoutEncodeRequest, Stellar.InflationPayoutEncodeResponse> EncodeInflationPayoutMethod =
            new Method<Stellar.InflationPayoutEncodeRequest, Stellar.InflationPayoutEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeInflationPayout",
                XdrProtoServiceGrpcMarshaller.InflationPayoutEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.InflationPayoutEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeInflationPayout</summary>
        public static readonly Method<Stellar.InflationPayoutDecodeRequest, Stellar.InflationPayoutDecodeResponse> DecodeInflationPayoutMethod =
            new Method<Stellar.InflationPayoutDecodeRequest, Stellar.InflationPayoutDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeInflationPayout",
                XdrProtoServiceGrpcMarshaller.InflationPayoutDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.InflationPayoutDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeInflationResult</summary>
        public static readonly Method<Stellar.InflationResultEncodeRequest, Stellar.InflationResultEncodeResponse> EncodeInflationResultMethod =
            new Method<Stellar.InflationResultEncodeRequest, Stellar.InflationResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeInflationResult",
                XdrProtoServiceGrpcMarshaller.InflationResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.InflationResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeInflationResult</summary>
        public static readonly Method<Stellar.InflationResultDecodeRequest, Stellar.InflationResultDecodeResponse> DecodeInflationResultMethod =
            new Method<Stellar.InflationResultDecodeRequest, Stellar.InflationResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeInflationResult",
                XdrProtoServiceGrpcMarshaller.InflationResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.InflationResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeManageDataResultCode</summary>
        public static readonly Method<Stellar.ManageDataResultCodeEncodeRequest, Stellar.ManageDataResultCodeEncodeResponse> EncodeManageDataResultCodeMethod =
            new Method<Stellar.ManageDataResultCodeEncodeRequest, Stellar.ManageDataResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeManageDataResultCode",
                XdrProtoServiceGrpcMarshaller.ManageDataResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ManageDataResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeManageDataResultCode</summary>
        public static readonly Method<Stellar.ManageDataResultCodeDecodeRequest, Stellar.ManageDataResultCodeDecodeResponse> DecodeManageDataResultCodeMethod =
            new Method<Stellar.ManageDataResultCodeDecodeRequest, Stellar.ManageDataResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeManageDataResultCode",
                XdrProtoServiceGrpcMarshaller.ManageDataResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ManageDataResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeManageDataResult</summary>
        public static readonly Method<Stellar.ManageDataResultEncodeRequest, Stellar.ManageDataResultEncodeResponse> EncodeManageDataResultMethod =
            new Method<Stellar.ManageDataResultEncodeRequest, Stellar.ManageDataResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeManageDataResult",
                XdrProtoServiceGrpcMarshaller.ManageDataResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ManageDataResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeManageDataResult</summary>
        public static readonly Method<Stellar.ManageDataResultDecodeRequest, Stellar.ManageDataResultDecodeResponse> DecodeManageDataResultMethod =
            new Method<Stellar.ManageDataResultDecodeRequest, Stellar.ManageDataResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeManageDataResult",
                XdrProtoServiceGrpcMarshaller.ManageDataResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ManageDataResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeBumpSequenceResultCode</summary>
        public static readonly Method<Stellar.BumpSequenceResultCodeEncodeRequest, Stellar.BumpSequenceResultCodeEncodeResponse> EncodeBumpSequenceResultCodeMethod =
            new Method<Stellar.BumpSequenceResultCodeEncodeRequest, Stellar.BumpSequenceResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeBumpSequenceResultCode",
                XdrProtoServiceGrpcMarshaller.BumpSequenceResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.BumpSequenceResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeBumpSequenceResultCode</summary>
        public static readonly Method<Stellar.BumpSequenceResultCodeDecodeRequest, Stellar.BumpSequenceResultCodeDecodeResponse> DecodeBumpSequenceResultCodeMethod =
            new Method<Stellar.BumpSequenceResultCodeDecodeRequest, Stellar.BumpSequenceResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeBumpSequenceResultCode",
                XdrProtoServiceGrpcMarshaller.BumpSequenceResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.BumpSequenceResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeBumpSequenceResult</summary>
        public static readonly Method<Stellar.BumpSequenceResultEncodeRequest, Stellar.BumpSequenceResultEncodeResponse> EncodeBumpSequenceResultMethod =
            new Method<Stellar.BumpSequenceResultEncodeRequest, Stellar.BumpSequenceResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeBumpSequenceResult",
                XdrProtoServiceGrpcMarshaller.BumpSequenceResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.BumpSequenceResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeBumpSequenceResult</summary>
        public static readonly Method<Stellar.BumpSequenceResultDecodeRequest, Stellar.BumpSequenceResultDecodeResponse> DecodeBumpSequenceResultMethod =
            new Method<Stellar.BumpSequenceResultDecodeRequest, Stellar.BumpSequenceResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeBumpSequenceResult",
                XdrProtoServiceGrpcMarshaller.BumpSequenceResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.BumpSequenceResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeCreateClaimableBalanceResultCode</summary>
        public static readonly Method<Stellar.CreateClaimableBalanceResultCodeEncodeRequest, Stellar.CreateClaimableBalanceResultCodeEncodeResponse> EncodeCreateClaimableBalanceResultCodeMethod =
            new Method<Stellar.CreateClaimableBalanceResultCodeEncodeRequest, Stellar.CreateClaimableBalanceResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeCreateClaimableBalanceResultCode",
                XdrProtoServiceGrpcMarshaller.CreateClaimableBalanceResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.CreateClaimableBalanceResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeCreateClaimableBalanceResultCode</summary>
        public static readonly Method<Stellar.CreateClaimableBalanceResultCodeDecodeRequest, Stellar.CreateClaimableBalanceResultCodeDecodeResponse> DecodeCreateClaimableBalanceResultCodeMethod =
            new Method<Stellar.CreateClaimableBalanceResultCodeDecodeRequest, Stellar.CreateClaimableBalanceResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeCreateClaimableBalanceResultCode",
                XdrProtoServiceGrpcMarshaller.CreateClaimableBalanceResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.CreateClaimableBalanceResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeCreateClaimableBalanceResult</summary>
        public static readonly Method<Stellar.CreateClaimableBalanceResultEncodeRequest, Stellar.CreateClaimableBalanceResultEncodeResponse> EncodeCreateClaimableBalanceResultMethod =
            new Method<Stellar.CreateClaimableBalanceResultEncodeRequest, Stellar.CreateClaimableBalanceResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeCreateClaimableBalanceResult",
                XdrProtoServiceGrpcMarshaller.CreateClaimableBalanceResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.CreateClaimableBalanceResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeCreateClaimableBalanceResult</summary>
        public static readonly Method<Stellar.CreateClaimableBalanceResultDecodeRequest, Stellar.CreateClaimableBalanceResultDecodeResponse> DecodeCreateClaimableBalanceResultMethod =
            new Method<Stellar.CreateClaimableBalanceResultDecodeRequest, Stellar.CreateClaimableBalanceResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeCreateClaimableBalanceResult",
                XdrProtoServiceGrpcMarshaller.CreateClaimableBalanceResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.CreateClaimableBalanceResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimClaimableBalanceResultCode</summary>
        public static readonly Method<Stellar.ClaimClaimableBalanceResultCodeEncodeRequest, Stellar.ClaimClaimableBalanceResultCodeEncodeResponse> EncodeClaimClaimableBalanceResultCodeMethod =
            new Method<Stellar.ClaimClaimableBalanceResultCodeEncodeRequest, Stellar.ClaimClaimableBalanceResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimClaimableBalanceResultCode",
                XdrProtoServiceGrpcMarshaller.ClaimClaimableBalanceResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimClaimableBalanceResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimClaimableBalanceResultCode</summary>
        public static readonly Method<Stellar.ClaimClaimableBalanceResultCodeDecodeRequest, Stellar.ClaimClaimableBalanceResultCodeDecodeResponse> DecodeClaimClaimableBalanceResultCodeMethod =
            new Method<Stellar.ClaimClaimableBalanceResultCodeDecodeRequest, Stellar.ClaimClaimableBalanceResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimClaimableBalanceResultCode",
                XdrProtoServiceGrpcMarshaller.ClaimClaimableBalanceResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimClaimableBalanceResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClaimClaimableBalanceResult</summary>
        public static readonly Method<Stellar.ClaimClaimableBalanceResultEncodeRequest, Stellar.ClaimClaimableBalanceResultEncodeResponse> EncodeClaimClaimableBalanceResultMethod =
            new Method<Stellar.ClaimClaimableBalanceResultEncodeRequest, Stellar.ClaimClaimableBalanceResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClaimClaimableBalanceResult",
                XdrProtoServiceGrpcMarshaller.ClaimClaimableBalanceResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimClaimableBalanceResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClaimClaimableBalanceResult</summary>
        public static readonly Method<Stellar.ClaimClaimableBalanceResultDecodeRequest, Stellar.ClaimClaimableBalanceResultDecodeResponse> DecodeClaimClaimableBalanceResultMethod =
            new Method<Stellar.ClaimClaimableBalanceResultDecodeRequest, Stellar.ClaimClaimableBalanceResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClaimClaimableBalanceResult",
                XdrProtoServiceGrpcMarshaller.ClaimClaimableBalanceResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClaimClaimableBalanceResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeBeginSponsoringFutureReservesResultCode</summary>
        public static readonly Method<Stellar.BeginSponsoringFutureReservesResultCodeEncodeRequest, Stellar.BeginSponsoringFutureReservesResultCodeEncodeResponse> EncodeBeginSponsoringFutureReservesResultCodeMethod =
            new Method<Stellar.BeginSponsoringFutureReservesResultCodeEncodeRequest, Stellar.BeginSponsoringFutureReservesResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeBeginSponsoringFutureReservesResultCode",
                XdrProtoServiceGrpcMarshaller.BeginSponsoringFutureReservesResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.BeginSponsoringFutureReservesResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeBeginSponsoringFutureReservesResultCode</summary>
        public static readonly Method<Stellar.BeginSponsoringFutureReservesResultCodeDecodeRequest, Stellar.BeginSponsoringFutureReservesResultCodeDecodeResponse> DecodeBeginSponsoringFutureReservesResultCodeMethod =
            new Method<Stellar.BeginSponsoringFutureReservesResultCodeDecodeRequest, Stellar.BeginSponsoringFutureReservesResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeBeginSponsoringFutureReservesResultCode",
                XdrProtoServiceGrpcMarshaller.BeginSponsoringFutureReservesResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.BeginSponsoringFutureReservesResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeBeginSponsoringFutureReservesResult</summary>
        public static readonly Method<Stellar.BeginSponsoringFutureReservesResultEncodeRequest, Stellar.BeginSponsoringFutureReservesResultEncodeResponse> EncodeBeginSponsoringFutureReservesResultMethod =
            new Method<Stellar.BeginSponsoringFutureReservesResultEncodeRequest, Stellar.BeginSponsoringFutureReservesResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeBeginSponsoringFutureReservesResult",
                XdrProtoServiceGrpcMarshaller.BeginSponsoringFutureReservesResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.BeginSponsoringFutureReservesResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeBeginSponsoringFutureReservesResult</summary>
        public static readonly Method<Stellar.BeginSponsoringFutureReservesResultDecodeRequest, Stellar.BeginSponsoringFutureReservesResultDecodeResponse> DecodeBeginSponsoringFutureReservesResultMethod =
            new Method<Stellar.BeginSponsoringFutureReservesResultDecodeRequest, Stellar.BeginSponsoringFutureReservesResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeBeginSponsoringFutureReservesResult",
                XdrProtoServiceGrpcMarshaller.BeginSponsoringFutureReservesResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.BeginSponsoringFutureReservesResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeEndSponsoringFutureReservesResultCode</summary>
        public static readonly Method<Stellar.EndSponsoringFutureReservesResultCodeEncodeRequest, Stellar.EndSponsoringFutureReservesResultCodeEncodeResponse> EncodeEndSponsoringFutureReservesResultCodeMethod =
            new Method<Stellar.EndSponsoringFutureReservesResultCodeEncodeRequest, Stellar.EndSponsoringFutureReservesResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeEndSponsoringFutureReservesResultCode",
                XdrProtoServiceGrpcMarshaller.EndSponsoringFutureReservesResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.EndSponsoringFutureReservesResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeEndSponsoringFutureReservesResultCode</summary>
        public static readonly Method<Stellar.EndSponsoringFutureReservesResultCodeDecodeRequest, Stellar.EndSponsoringFutureReservesResultCodeDecodeResponse> DecodeEndSponsoringFutureReservesResultCodeMethod =
            new Method<Stellar.EndSponsoringFutureReservesResultCodeDecodeRequest, Stellar.EndSponsoringFutureReservesResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeEndSponsoringFutureReservesResultCode",
                XdrProtoServiceGrpcMarshaller.EndSponsoringFutureReservesResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.EndSponsoringFutureReservesResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeEndSponsoringFutureReservesResult</summary>
        public static readonly Method<Stellar.EndSponsoringFutureReservesResultEncodeRequest, Stellar.EndSponsoringFutureReservesResultEncodeResponse> EncodeEndSponsoringFutureReservesResultMethod =
            new Method<Stellar.EndSponsoringFutureReservesResultEncodeRequest, Stellar.EndSponsoringFutureReservesResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeEndSponsoringFutureReservesResult",
                XdrProtoServiceGrpcMarshaller.EndSponsoringFutureReservesResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.EndSponsoringFutureReservesResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeEndSponsoringFutureReservesResult</summary>
        public static readonly Method<Stellar.EndSponsoringFutureReservesResultDecodeRequest, Stellar.EndSponsoringFutureReservesResultDecodeResponse> DecodeEndSponsoringFutureReservesResultMethod =
            new Method<Stellar.EndSponsoringFutureReservesResultDecodeRequest, Stellar.EndSponsoringFutureReservesResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeEndSponsoringFutureReservesResult",
                XdrProtoServiceGrpcMarshaller.EndSponsoringFutureReservesResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.EndSponsoringFutureReservesResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeRevokeSponsorshipResultCode</summary>
        public static readonly Method<Stellar.RevokeSponsorshipResultCodeEncodeRequest, Stellar.RevokeSponsorshipResultCodeEncodeResponse> EncodeRevokeSponsorshipResultCodeMethod =
            new Method<Stellar.RevokeSponsorshipResultCodeEncodeRequest, Stellar.RevokeSponsorshipResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeRevokeSponsorshipResultCode",
                XdrProtoServiceGrpcMarshaller.RevokeSponsorshipResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.RevokeSponsorshipResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeRevokeSponsorshipResultCode</summary>
        public static readonly Method<Stellar.RevokeSponsorshipResultCodeDecodeRequest, Stellar.RevokeSponsorshipResultCodeDecodeResponse> DecodeRevokeSponsorshipResultCodeMethod =
            new Method<Stellar.RevokeSponsorshipResultCodeDecodeRequest, Stellar.RevokeSponsorshipResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeRevokeSponsorshipResultCode",
                XdrProtoServiceGrpcMarshaller.RevokeSponsorshipResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.RevokeSponsorshipResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeRevokeSponsorshipResult</summary>
        public static readonly Method<Stellar.RevokeSponsorshipResultEncodeRequest, Stellar.RevokeSponsorshipResultEncodeResponse> EncodeRevokeSponsorshipResultMethod =
            new Method<Stellar.RevokeSponsorshipResultEncodeRequest, Stellar.RevokeSponsorshipResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeRevokeSponsorshipResult",
                XdrProtoServiceGrpcMarshaller.RevokeSponsorshipResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.RevokeSponsorshipResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeRevokeSponsorshipResult</summary>
        public static readonly Method<Stellar.RevokeSponsorshipResultDecodeRequest, Stellar.RevokeSponsorshipResultDecodeResponse> DecodeRevokeSponsorshipResultMethod =
            new Method<Stellar.RevokeSponsorshipResultDecodeRequest, Stellar.RevokeSponsorshipResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeRevokeSponsorshipResult",
                XdrProtoServiceGrpcMarshaller.RevokeSponsorshipResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.RevokeSponsorshipResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClawbackResultCode</summary>
        public static readonly Method<Stellar.ClawbackResultCodeEncodeRequest, Stellar.ClawbackResultCodeEncodeResponse> EncodeClawbackResultCodeMethod =
            new Method<Stellar.ClawbackResultCodeEncodeRequest, Stellar.ClawbackResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClawbackResultCode",
                XdrProtoServiceGrpcMarshaller.ClawbackResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClawbackResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClawbackResultCode</summary>
        public static readonly Method<Stellar.ClawbackResultCodeDecodeRequest, Stellar.ClawbackResultCodeDecodeResponse> DecodeClawbackResultCodeMethod =
            new Method<Stellar.ClawbackResultCodeDecodeRequest, Stellar.ClawbackResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClawbackResultCode",
                XdrProtoServiceGrpcMarshaller.ClawbackResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClawbackResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClawbackResult</summary>
        public static readonly Method<Stellar.ClawbackResultEncodeRequest, Stellar.ClawbackResultEncodeResponse> EncodeClawbackResultMethod =
            new Method<Stellar.ClawbackResultEncodeRequest, Stellar.ClawbackResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClawbackResult",
                XdrProtoServiceGrpcMarshaller.ClawbackResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClawbackResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClawbackResult</summary>
        public static readonly Method<Stellar.ClawbackResultDecodeRequest, Stellar.ClawbackResultDecodeResponse> DecodeClawbackResultMethod =
            new Method<Stellar.ClawbackResultDecodeRequest, Stellar.ClawbackResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClawbackResult",
                XdrProtoServiceGrpcMarshaller.ClawbackResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClawbackResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClawbackClaimableBalanceResultCode</summary>
        public static readonly Method<Stellar.ClawbackClaimableBalanceResultCodeEncodeRequest, Stellar.ClawbackClaimableBalanceResultCodeEncodeResponse> EncodeClawbackClaimableBalanceResultCodeMethod =
            new Method<Stellar.ClawbackClaimableBalanceResultCodeEncodeRequest, Stellar.ClawbackClaimableBalanceResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClawbackClaimableBalanceResultCode",
                XdrProtoServiceGrpcMarshaller.ClawbackClaimableBalanceResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClawbackClaimableBalanceResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClawbackClaimableBalanceResultCode</summary>
        public static readonly Method<Stellar.ClawbackClaimableBalanceResultCodeDecodeRequest, Stellar.ClawbackClaimableBalanceResultCodeDecodeResponse> DecodeClawbackClaimableBalanceResultCodeMethod =
            new Method<Stellar.ClawbackClaimableBalanceResultCodeDecodeRequest, Stellar.ClawbackClaimableBalanceResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClawbackClaimableBalanceResultCode",
                XdrProtoServiceGrpcMarshaller.ClawbackClaimableBalanceResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClawbackClaimableBalanceResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeClawbackClaimableBalanceResult</summary>
        public static readonly Method<Stellar.ClawbackClaimableBalanceResultEncodeRequest, Stellar.ClawbackClaimableBalanceResultEncodeResponse> EncodeClawbackClaimableBalanceResultMethod =
            new Method<Stellar.ClawbackClaimableBalanceResultEncodeRequest, Stellar.ClawbackClaimableBalanceResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeClawbackClaimableBalanceResult",
                XdrProtoServiceGrpcMarshaller.ClawbackClaimableBalanceResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClawbackClaimableBalanceResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeClawbackClaimableBalanceResult</summary>
        public static readonly Method<Stellar.ClawbackClaimableBalanceResultDecodeRequest, Stellar.ClawbackClaimableBalanceResultDecodeResponse> DecodeClawbackClaimableBalanceResultMethod =
            new Method<Stellar.ClawbackClaimableBalanceResultDecodeRequest, Stellar.ClawbackClaimableBalanceResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeClawbackClaimableBalanceResult",
                XdrProtoServiceGrpcMarshaller.ClawbackClaimableBalanceResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ClawbackClaimableBalanceResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSetTrustLineFlagsResultCode</summary>
        public static readonly Method<Stellar.SetTrustLineFlagsResultCodeEncodeRequest, Stellar.SetTrustLineFlagsResultCodeEncodeResponse> EncodeSetTrustLineFlagsResultCodeMethod =
            new Method<Stellar.SetTrustLineFlagsResultCodeEncodeRequest, Stellar.SetTrustLineFlagsResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSetTrustLineFlagsResultCode",
                XdrProtoServiceGrpcMarshaller.SetTrustLineFlagsResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SetTrustLineFlagsResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSetTrustLineFlagsResultCode</summary>
        public static readonly Method<Stellar.SetTrustLineFlagsResultCodeDecodeRequest, Stellar.SetTrustLineFlagsResultCodeDecodeResponse> DecodeSetTrustLineFlagsResultCodeMethod =
            new Method<Stellar.SetTrustLineFlagsResultCodeDecodeRequest, Stellar.SetTrustLineFlagsResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSetTrustLineFlagsResultCode",
                XdrProtoServiceGrpcMarshaller.SetTrustLineFlagsResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SetTrustLineFlagsResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSetTrustLineFlagsResult</summary>
        public static readonly Method<Stellar.SetTrustLineFlagsResultEncodeRequest, Stellar.SetTrustLineFlagsResultEncodeResponse> EncodeSetTrustLineFlagsResultMethod =
            new Method<Stellar.SetTrustLineFlagsResultEncodeRequest, Stellar.SetTrustLineFlagsResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSetTrustLineFlagsResult",
                XdrProtoServiceGrpcMarshaller.SetTrustLineFlagsResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SetTrustLineFlagsResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSetTrustLineFlagsResult</summary>
        public static readonly Method<Stellar.SetTrustLineFlagsResultDecodeRequest, Stellar.SetTrustLineFlagsResultDecodeResponse> DecodeSetTrustLineFlagsResultMethod =
            new Method<Stellar.SetTrustLineFlagsResultDecodeRequest, Stellar.SetTrustLineFlagsResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSetTrustLineFlagsResult",
                XdrProtoServiceGrpcMarshaller.SetTrustLineFlagsResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SetTrustLineFlagsResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLiquidityPoolDepositResultCode</summary>
        public static readonly Method<Stellar.LiquidityPoolDepositResultCodeEncodeRequest, Stellar.LiquidityPoolDepositResultCodeEncodeResponse> EncodeLiquidityPoolDepositResultCodeMethod =
            new Method<Stellar.LiquidityPoolDepositResultCodeEncodeRequest, Stellar.LiquidityPoolDepositResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLiquidityPoolDepositResultCode",
                XdrProtoServiceGrpcMarshaller.LiquidityPoolDepositResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LiquidityPoolDepositResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLiquidityPoolDepositResultCode</summary>
        public static readonly Method<Stellar.LiquidityPoolDepositResultCodeDecodeRequest, Stellar.LiquidityPoolDepositResultCodeDecodeResponse> DecodeLiquidityPoolDepositResultCodeMethod =
            new Method<Stellar.LiquidityPoolDepositResultCodeDecodeRequest, Stellar.LiquidityPoolDepositResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLiquidityPoolDepositResultCode",
                XdrProtoServiceGrpcMarshaller.LiquidityPoolDepositResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LiquidityPoolDepositResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLiquidityPoolDepositResult</summary>
        public static readonly Method<Stellar.LiquidityPoolDepositResultEncodeRequest, Stellar.LiquidityPoolDepositResultEncodeResponse> EncodeLiquidityPoolDepositResultMethod =
            new Method<Stellar.LiquidityPoolDepositResultEncodeRequest, Stellar.LiquidityPoolDepositResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLiquidityPoolDepositResult",
                XdrProtoServiceGrpcMarshaller.LiquidityPoolDepositResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LiquidityPoolDepositResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLiquidityPoolDepositResult</summary>
        public static readonly Method<Stellar.LiquidityPoolDepositResultDecodeRequest, Stellar.LiquidityPoolDepositResultDecodeResponse> DecodeLiquidityPoolDepositResultMethod =
            new Method<Stellar.LiquidityPoolDepositResultDecodeRequest, Stellar.LiquidityPoolDepositResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLiquidityPoolDepositResult",
                XdrProtoServiceGrpcMarshaller.LiquidityPoolDepositResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LiquidityPoolDepositResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLiquidityPoolWithdrawResultCode</summary>
        public static readonly Method<Stellar.LiquidityPoolWithdrawResultCodeEncodeRequest, Stellar.LiquidityPoolWithdrawResultCodeEncodeResponse> EncodeLiquidityPoolWithdrawResultCodeMethod =
            new Method<Stellar.LiquidityPoolWithdrawResultCodeEncodeRequest, Stellar.LiquidityPoolWithdrawResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLiquidityPoolWithdrawResultCode",
                XdrProtoServiceGrpcMarshaller.LiquidityPoolWithdrawResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LiquidityPoolWithdrawResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLiquidityPoolWithdrawResultCode</summary>
        public static readonly Method<Stellar.LiquidityPoolWithdrawResultCodeDecodeRequest, Stellar.LiquidityPoolWithdrawResultCodeDecodeResponse> DecodeLiquidityPoolWithdrawResultCodeMethod =
            new Method<Stellar.LiquidityPoolWithdrawResultCodeDecodeRequest, Stellar.LiquidityPoolWithdrawResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLiquidityPoolWithdrawResultCode",
                XdrProtoServiceGrpcMarshaller.LiquidityPoolWithdrawResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LiquidityPoolWithdrawResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeLiquidityPoolWithdrawResult</summary>
        public static readonly Method<Stellar.LiquidityPoolWithdrawResultEncodeRequest, Stellar.LiquidityPoolWithdrawResultEncodeResponse> EncodeLiquidityPoolWithdrawResultMethod =
            new Method<Stellar.LiquidityPoolWithdrawResultEncodeRequest, Stellar.LiquidityPoolWithdrawResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeLiquidityPoolWithdrawResult",
                XdrProtoServiceGrpcMarshaller.LiquidityPoolWithdrawResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LiquidityPoolWithdrawResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeLiquidityPoolWithdrawResult</summary>
        public static readonly Method<Stellar.LiquidityPoolWithdrawResultDecodeRequest, Stellar.LiquidityPoolWithdrawResultDecodeResponse> DecodeLiquidityPoolWithdrawResultMethod =
            new Method<Stellar.LiquidityPoolWithdrawResultDecodeRequest, Stellar.LiquidityPoolWithdrawResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeLiquidityPoolWithdrawResult",
                XdrProtoServiceGrpcMarshaller.LiquidityPoolWithdrawResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.LiquidityPoolWithdrawResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeInvokeHostFunctionResultCode</summary>
        public static readonly Method<Stellar.InvokeHostFunctionResultCodeEncodeRequest, Stellar.InvokeHostFunctionResultCodeEncodeResponse> EncodeInvokeHostFunctionResultCodeMethod =
            new Method<Stellar.InvokeHostFunctionResultCodeEncodeRequest, Stellar.InvokeHostFunctionResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeInvokeHostFunctionResultCode",
                XdrProtoServiceGrpcMarshaller.InvokeHostFunctionResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.InvokeHostFunctionResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeInvokeHostFunctionResultCode</summary>
        public static readonly Method<Stellar.InvokeHostFunctionResultCodeDecodeRequest, Stellar.InvokeHostFunctionResultCodeDecodeResponse> DecodeInvokeHostFunctionResultCodeMethod =
            new Method<Stellar.InvokeHostFunctionResultCodeDecodeRequest, Stellar.InvokeHostFunctionResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeInvokeHostFunctionResultCode",
                XdrProtoServiceGrpcMarshaller.InvokeHostFunctionResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.InvokeHostFunctionResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeInvokeHostFunctionResult</summary>
        public static readonly Method<Stellar.InvokeHostFunctionResultEncodeRequest, Stellar.InvokeHostFunctionResultEncodeResponse> EncodeInvokeHostFunctionResultMethod =
            new Method<Stellar.InvokeHostFunctionResultEncodeRequest, Stellar.InvokeHostFunctionResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeInvokeHostFunctionResult",
                XdrProtoServiceGrpcMarshaller.InvokeHostFunctionResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.InvokeHostFunctionResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeInvokeHostFunctionResult</summary>
        public static readonly Method<Stellar.InvokeHostFunctionResultDecodeRequest, Stellar.InvokeHostFunctionResultDecodeResponse> DecodeInvokeHostFunctionResultMethod =
            new Method<Stellar.InvokeHostFunctionResultDecodeRequest, Stellar.InvokeHostFunctionResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeInvokeHostFunctionResult",
                XdrProtoServiceGrpcMarshaller.InvokeHostFunctionResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.InvokeHostFunctionResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeExtendFootprintTTLResultCode</summary>
        public static readonly Method<Stellar.ExtendFootprintTTLResultCodeEncodeRequest, Stellar.ExtendFootprintTTLResultCodeEncodeResponse> EncodeExtendFootprintTTLResultCodeMethod =
            new Method<Stellar.ExtendFootprintTTLResultCodeEncodeRequest, Stellar.ExtendFootprintTTLResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeExtendFootprintTTLResultCode",
                XdrProtoServiceGrpcMarshaller.ExtendFootprintTTLResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ExtendFootprintTTLResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeExtendFootprintTTLResultCode</summary>
        public static readonly Method<Stellar.ExtendFootprintTTLResultCodeDecodeRequest, Stellar.ExtendFootprintTTLResultCodeDecodeResponse> DecodeExtendFootprintTTLResultCodeMethod =
            new Method<Stellar.ExtendFootprintTTLResultCodeDecodeRequest, Stellar.ExtendFootprintTTLResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeExtendFootprintTTLResultCode",
                XdrProtoServiceGrpcMarshaller.ExtendFootprintTTLResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ExtendFootprintTTLResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeExtendFootprintTTLResult</summary>
        public static readonly Method<Stellar.ExtendFootprintTTLResultEncodeRequest, Stellar.ExtendFootprintTTLResultEncodeResponse> EncodeExtendFootprintTTLResultMethod =
            new Method<Stellar.ExtendFootprintTTLResultEncodeRequest, Stellar.ExtendFootprintTTLResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeExtendFootprintTTLResult",
                XdrProtoServiceGrpcMarshaller.ExtendFootprintTTLResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ExtendFootprintTTLResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeExtendFootprintTTLResult</summary>
        public static readonly Method<Stellar.ExtendFootprintTTLResultDecodeRequest, Stellar.ExtendFootprintTTLResultDecodeResponse> DecodeExtendFootprintTTLResultMethod =
            new Method<Stellar.ExtendFootprintTTLResultDecodeRequest, Stellar.ExtendFootprintTTLResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeExtendFootprintTTLResult",
                XdrProtoServiceGrpcMarshaller.ExtendFootprintTTLResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ExtendFootprintTTLResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeRestoreFootprintResultCode</summary>
        public static readonly Method<Stellar.RestoreFootprintResultCodeEncodeRequest, Stellar.RestoreFootprintResultCodeEncodeResponse> EncodeRestoreFootprintResultCodeMethod =
            new Method<Stellar.RestoreFootprintResultCodeEncodeRequest, Stellar.RestoreFootprintResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeRestoreFootprintResultCode",
                XdrProtoServiceGrpcMarshaller.RestoreFootprintResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.RestoreFootprintResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeRestoreFootprintResultCode</summary>
        public static readonly Method<Stellar.RestoreFootprintResultCodeDecodeRequest, Stellar.RestoreFootprintResultCodeDecodeResponse> DecodeRestoreFootprintResultCodeMethod =
            new Method<Stellar.RestoreFootprintResultCodeDecodeRequest, Stellar.RestoreFootprintResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeRestoreFootprintResultCode",
                XdrProtoServiceGrpcMarshaller.RestoreFootprintResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.RestoreFootprintResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeRestoreFootprintResult</summary>
        public static readonly Method<Stellar.RestoreFootprintResultEncodeRequest, Stellar.RestoreFootprintResultEncodeResponse> EncodeRestoreFootprintResultMethod =
            new Method<Stellar.RestoreFootprintResultEncodeRequest, Stellar.RestoreFootprintResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeRestoreFootprintResult",
                XdrProtoServiceGrpcMarshaller.RestoreFootprintResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.RestoreFootprintResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeRestoreFootprintResult</summary>
        public static readonly Method<Stellar.RestoreFootprintResultDecodeRequest, Stellar.RestoreFootprintResultDecodeResponse> DecodeRestoreFootprintResultMethod =
            new Method<Stellar.RestoreFootprintResultDecodeRequest, Stellar.RestoreFootprintResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeRestoreFootprintResult",
                XdrProtoServiceGrpcMarshaller.RestoreFootprintResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.RestoreFootprintResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeOperationResultCode</summary>
        public static readonly Method<Stellar.OperationResultCodeEncodeRequest, Stellar.OperationResultCodeEncodeResponse> EncodeOperationResultCodeMethod =
            new Method<Stellar.OperationResultCodeEncodeRequest, Stellar.OperationResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeOperationResultCode",
                XdrProtoServiceGrpcMarshaller.OperationResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.OperationResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeOperationResultCode</summary>
        public static readonly Method<Stellar.OperationResultCodeDecodeRequest, Stellar.OperationResultCodeDecodeResponse> DecodeOperationResultCodeMethod =
            new Method<Stellar.OperationResultCodeDecodeRequest, Stellar.OperationResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeOperationResultCode",
                XdrProtoServiceGrpcMarshaller.OperationResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.OperationResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeOperationResult</summary>
        public static readonly Method<Stellar.OperationResultEncodeRequest, Stellar.OperationResultEncodeResponse> EncodeOperationResultMethod =
            new Method<Stellar.OperationResultEncodeRequest, Stellar.OperationResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeOperationResult",
                XdrProtoServiceGrpcMarshaller.OperationResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.OperationResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeOperationResult</summary>
        public static readonly Method<Stellar.OperationResultDecodeRequest, Stellar.OperationResultDecodeResponse> DecodeOperationResultMethod =
            new Method<Stellar.OperationResultDecodeRequest, Stellar.OperationResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeOperationResult",
                XdrProtoServiceGrpcMarshaller.OperationResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.OperationResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionResultCode</summary>
        public static readonly Method<Stellar.TransactionResultCodeEncodeRequest, Stellar.TransactionResultCodeEncodeResponse> EncodeTransactionResultCodeMethod =
            new Method<Stellar.TransactionResultCodeEncodeRequest, Stellar.TransactionResultCodeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionResultCode",
                XdrProtoServiceGrpcMarshaller.TransactionResultCodeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionResultCodeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionResultCode</summary>
        public static readonly Method<Stellar.TransactionResultCodeDecodeRequest, Stellar.TransactionResultCodeDecodeResponse> DecodeTransactionResultCodeMethod =
            new Method<Stellar.TransactionResultCodeDecodeRequest, Stellar.TransactionResultCodeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionResultCode",
                XdrProtoServiceGrpcMarshaller.TransactionResultCodeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionResultCodeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeInnerTransactionResult</summary>
        public static readonly Method<Stellar.InnerTransactionResultEncodeRequest, Stellar.InnerTransactionResultEncodeResponse> EncodeInnerTransactionResultMethod =
            new Method<Stellar.InnerTransactionResultEncodeRequest, Stellar.InnerTransactionResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeInnerTransactionResult",
                XdrProtoServiceGrpcMarshaller.InnerTransactionResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.InnerTransactionResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeInnerTransactionResult</summary>
        public static readonly Method<Stellar.InnerTransactionResultDecodeRequest, Stellar.InnerTransactionResultDecodeResponse> DecodeInnerTransactionResultMethod =
            new Method<Stellar.InnerTransactionResultDecodeRequest, Stellar.InnerTransactionResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeInnerTransactionResult",
                XdrProtoServiceGrpcMarshaller.InnerTransactionResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.InnerTransactionResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeInnerTransactionResultPair</summary>
        public static readonly Method<Stellar.InnerTransactionResultPairEncodeRequest, Stellar.InnerTransactionResultPairEncodeResponse> EncodeInnerTransactionResultPairMethod =
            new Method<Stellar.InnerTransactionResultPairEncodeRequest, Stellar.InnerTransactionResultPairEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeInnerTransactionResultPair",
                XdrProtoServiceGrpcMarshaller.InnerTransactionResultPairEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.InnerTransactionResultPairEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeInnerTransactionResultPair</summary>
        public static readonly Method<Stellar.InnerTransactionResultPairDecodeRequest, Stellar.InnerTransactionResultPairDecodeResponse> DecodeInnerTransactionResultPairMethod =
            new Method<Stellar.InnerTransactionResultPairDecodeRequest, Stellar.InnerTransactionResultPairDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeInnerTransactionResultPair",
                XdrProtoServiceGrpcMarshaller.InnerTransactionResultPairDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.InnerTransactionResultPairDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTransactionResult</summary>
        public static readonly Method<Stellar.TransactionResultEncodeRequest, Stellar.TransactionResultEncodeResponse> EncodeTransactionResultMethod =
            new Method<Stellar.TransactionResultEncodeRequest, Stellar.TransactionResultEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTransactionResult",
                XdrProtoServiceGrpcMarshaller.TransactionResultEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionResultEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTransactionResult</summary>
        public static readonly Method<Stellar.TransactionResultDecodeRequest, Stellar.TransactionResultDecodeResponse> DecodeTransactionResultMethod =
            new Method<Stellar.TransactionResultDecodeRequest, Stellar.TransactionResultDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTransactionResult",
                XdrProtoServiceGrpcMarshaller.TransactionResultDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TransactionResultDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeHash</summary>
        public static readonly Method<Stellar.HashEncodeRequest, Stellar.HashEncodeResponse> EncodeHashMethod =
            new Method<Stellar.HashEncodeRequest, Stellar.HashEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeHash",
                XdrProtoServiceGrpcMarshaller.HashEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.HashEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeHash</summary>
        public static readonly Method<Stellar.HashDecodeRequest, Stellar.HashDecodeResponse> DecodeHashMethod =
            new Method<Stellar.HashDecodeRequest, Stellar.HashDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeHash",
                XdrProtoServiceGrpcMarshaller.HashDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.HashDecodeResponseMarshaller);

        /// <summary>Method descriptor for Encodeuint256</summary>
        public static readonly Method<Stellar.uint256EncodeRequest, Stellar.uint256EncodeResponse> Encodeuint256Method =
            new Method<Stellar.uint256EncodeRequest, Stellar.uint256EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Encodeuint256",
                XdrProtoServiceGrpcMarshaller.uint256EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.uint256EncodeResponseMarshaller);

        /// <summary>Method descriptor for Decodeuint256</summary>
        public static readonly Method<Stellar.uint256DecodeRequest, Stellar.uint256DecodeResponse> Decodeuint256Method =
            new Method<Stellar.uint256DecodeRequest, Stellar.uint256DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Decodeuint256",
                XdrProtoServiceGrpcMarshaller.uint256DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.uint256DecodeResponseMarshaller);

        /// <summary>Method descriptor for Encodeuint32</summary>
        public static readonly Method<Stellar.uint32EncodeRequest, Stellar.uint32EncodeResponse> Encodeuint32Method =
            new Method<Stellar.uint32EncodeRequest, Stellar.uint32EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Encodeuint32",
                XdrProtoServiceGrpcMarshaller.uint32EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.uint32EncodeResponseMarshaller);

        /// <summary>Method descriptor for Decodeuint32</summary>
        public static readonly Method<Stellar.uint32DecodeRequest, Stellar.uint32DecodeResponse> Decodeuint32Method =
            new Method<Stellar.uint32DecodeRequest, Stellar.uint32DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Decodeuint32",
                XdrProtoServiceGrpcMarshaller.uint32DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.uint32DecodeResponseMarshaller);

        /// <summary>Method descriptor for Encodeint32</summary>
        public static readonly Method<Stellar.int32EncodeRequest, Stellar.int32EncodeResponse> Encodeint32Method =
            new Method<Stellar.int32EncodeRequest, Stellar.int32EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Encodeint32",
                XdrProtoServiceGrpcMarshaller.int32EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.int32EncodeResponseMarshaller);

        /// <summary>Method descriptor for Decodeint32</summary>
        public static readonly Method<Stellar.int32DecodeRequest, Stellar.int32DecodeResponse> Decodeint32Method =
            new Method<Stellar.int32DecodeRequest, Stellar.int32DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Decodeint32",
                XdrProtoServiceGrpcMarshaller.int32DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.int32DecodeResponseMarshaller);

        /// <summary>Method descriptor for Encodeuint64</summary>
        public static readonly Method<Stellar.uint64EncodeRequest, Stellar.uint64EncodeResponse> Encodeuint64Method =
            new Method<Stellar.uint64EncodeRequest, Stellar.uint64EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Encodeuint64",
                XdrProtoServiceGrpcMarshaller.uint64EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.uint64EncodeResponseMarshaller);

        /// <summary>Method descriptor for Decodeuint64</summary>
        public static readonly Method<Stellar.uint64DecodeRequest, Stellar.uint64DecodeResponse> Decodeuint64Method =
            new Method<Stellar.uint64DecodeRequest, Stellar.uint64DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Decodeuint64",
                XdrProtoServiceGrpcMarshaller.uint64DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.uint64DecodeResponseMarshaller);

        /// <summary>Method descriptor for Encodeint64</summary>
        public static readonly Method<Stellar.int64EncodeRequest, Stellar.int64EncodeResponse> Encodeint64Method =
            new Method<Stellar.int64EncodeRequest, Stellar.int64EncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Encodeint64",
                XdrProtoServiceGrpcMarshaller.int64EncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.int64EncodeResponseMarshaller);

        /// <summary>Method descriptor for Decodeint64</summary>
        public static readonly Method<Stellar.int64DecodeRequest, Stellar.int64DecodeResponse> Decodeint64Method =
            new Method<Stellar.int64DecodeRequest, Stellar.int64DecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "Decodeint64",
                XdrProtoServiceGrpcMarshaller.int64DecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.int64DecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeTimePoint</summary>
        public static readonly Method<Stellar.TimePointEncodeRequest, Stellar.TimePointEncodeResponse> EncodeTimePointMethod =
            new Method<Stellar.TimePointEncodeRequest, Stellar.TimePointEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeTimePoint",
                XdrProtoServiceGrpcMarshaller.TimePointEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TimePointEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeTimePoint</summary>
        public static readonly Method<Stellar.TimePointDecodeRequest, Stellar.TimePointDecodeResponse> DecodeTimePointMethod =
            new Method<Stellar.TimePointDecodeRequest, Stellar.TimePointDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeTimePoint",
                XdrProtoServiceGrpcMarshaller.TimePointDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.TimePointDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeDuration</summary>
        public static readonly Method<Stellar.DurationEncodeRequest, Stellar.DurationEncodeResponse> EncodeDurationMethod =
            new Method<Stellar.DurationEncodeRequest, Stellar.DurationEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeDuration",
                XdrProtoServiceGrpcMarshaller.DurationEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.DurationEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeDuration</summary>
        public static readonly Method<Stellar.DurationDecodeRequest, Stellar.DurationDecodeResponse> DecodeDurationMethod =
            new Method<Stellar.DurationDecodeRequest, Stellar.DurationDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeDuration",
                XdrProtoServiceGrpcMarshaller.DurationDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.DurationDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeExtensionPoint</summary>
        public static readonly Method<Stellar.ExtensionPointEncodeRequest, Stellar.ExtensionPointEncodeResponse> EncodeExtensionPointMethod =
            new Method<Stellar.ExtensionPointEncodeRequest, Stellar.ExtensionPointEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeExtensionPoint",
                XdrProtoServiceGrpcMarshaller.ExtensionPointEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ExtensionPointEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeExtensionPoint</summary>
        public static readonly Method<Stellar.ExtensionPointDecodeRequest, Stellar.ExtensionPointDecodeResponse> DecodeExtensionPointMethod =
            new Method<Stellar.ExtensionPointDecodeRequest, Stellar.ExtensionPointDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeExtensionPoint",
                XdrProtoServiceGrpcMarshaller.ExtensionPointDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ExtensionPointDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeCryptoKeyType</summary>
        public static readonly Method<Stellar.CryptoKeyTypeEncodeRequest, Stellar.CryptoKeyTypeEncodeResponse> EncodeCryptoKeyTypeMethod =
            new Method<Stellar.CryptoKeyTypeEncodeRequest, Stellar.CryptoKeyTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeCryptoKeyType",
                XdrProtoServiceGrpcMarshaller.CryptoKeyTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.CryptoKeyTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeCryptoKeyType</summary>
        public static readonly Method<Stellar.CryptoKeyTypeDecodeRequest, Stellar.CryptoKeyTypeDecodeResponse> DecodeCryptoKeyTypeMethod =
            new Method<Stellar.CryptoKeyTypeDecodeRequest, Stellar.CryptoKeyTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeCryptoKeyType",
                XdrProtoServiceGrpcMarshaller.CryptoKeyTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.CryptoKeyTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePublicKeyType</summary>
        public static readonly Method<Stellar.PublicKeyTypeEncodeRequest, Stellar.PublicKeyTypeEncodeResponse> EncodePublicKeyTypeMethod =
            new Method<Stellar.PublicKeyTypeEncodeRequest, Stellar.PublicKeyTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePublicKeyType",
                XdrProtoServiceGrpcMarshaller.PublicKeyTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PublicKeyTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePublicKeyType</summary>
        public static readonly Method<Stellar.PublicKeyTypeDecodeRequest, Stellar.PublicKeyTypeDecodeResponse> DecodePublicKeyTypeMethod =
            new Method<Stellar.PublicKeyTypeDecodeRequest, Stellar.PublicKeyTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePublicKeyType",
                XdrProtoServiceGrpcMarshaller.PublicKeyTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PublicKeyTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSignerKeyType</summary>
        public static readonly Method<Stellar.SignerKeyTypeEncodeRequest, Stellar.SignerKeyTypeEncodeResponse> EncodeSignerKeyTypeMethod =
            new Method<Stellar.SignerKeyTypeEncodeRequest, Stellar.SignerKeyTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSignerKeyType",
                XdrProtoServiceGrpcMarshaller.SignerKeyTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SignerKeyTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSignerKeyType</summary>
        public static readonly Method<Stellar.SignerKeyTypeDecodeRequest, Stellar.SignerKeyTypeDecodeResponse> DecodeSignerKeyTypeMethod =
            new Method<Stellar.SignerKeyTypeDecodeRequest, Stellar.SignerKeyTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSignerKeyType",
                XdrProtoServiceGrpcMarshaller.SignerKeyTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SignerKeyTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodePublicKey</summary>
        public static readonly Method<Stellar.PublicKeyEncodeRequest, Stellar.PublicKeyEncodeResponse> EncodePublicKeyMethod =
            new Method<Stellar.PublicKeyEncodeRequest, Stellar.PublicKeyEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodePublicKey",
                XdrProtoServiceGrpcMarshaller.PublicKeyEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PublicKeyEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodePublicKey</summary>
        public static readonly Method<Stellar.PublicKeyDecodeRequest, Stellar.PublicKeyDecodeResponse> DecodePublicKeyMethod =
            new Method<Stellar.PublicKeyDecodeRequest, Stellar.PublicKeyDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodePublicKey",
                XdrProtoServiceGrpcMarshaller.PublicKeyDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.PublicKeyDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSignerKey</summary>
        public static readonly Method<Stellar.SignerKeyEncodeRequest, Stellar.SignerKeyEncodeResponse> EncodeSignerKeyMethod =
            new Method<Stellar.SignerKeyEncodeRequest, Stellar.SignerKeyEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSignerKey",
                XdrProtoServiceGrpcMarshaller.SignerKeyEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SignerKeyEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSignerKey</summary>
        public static readonly Method<Stellar.SignerKeyDecodeRequest, Stellar.SignerKeyDecodeResponse> DecodeSignerKeyMethod =
            new Method<Stellar.SignerKeyDecodeRequest, Stellar.SignerKeyDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSignerKey",
                XdrProtoServiceGrpcMarshaller.SignerKeyDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SignerKeyDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSignature</summary>
        public static readonly Method<Stellar.SignatureEncodeRequest, Stellar.SignatureEncodeResponse> EncodeSignatureMethod =
            new Method<Stellar.SignatureEncodeRequest, Stellar.SignatureEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSignature",
                XdrProtoServiceGrpcMarshaller.SignatureEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SignatureEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSignature</summary>
        public static readonly Method<Stellar.SignatureDecodeRequest, Stellar.SignatureDecodeResponse> DecodeSignatureMethod =
            new Method<Stellar.SignatureDecodeRequest, Stellar.SignatureDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSignature",
                XdrProtoServiceGrpcMarshaller.SignatureDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SignatureDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSignatureHint</summary>
        public static readonly Method<Stellar.SignatureHintEncodeRequest, Stellar.SignatureHintEncodeResponse> EncodeSignatureHintMethod =
            new Method<Stellar.SignatureHintEncodeRequest, Stellar.SignatureHintEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSignatureHint",
                XdrProtoServiceGrpcMarshaller.SignatureHintEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SignatureHintEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSignatureHint</summary>
        public static readonly Method<Stellar.SignatureHintDecodeRequest, Stellar.SignatureHintDecodeResponse> DecodeSignatureHintMethod =
            new Method<Stellar.SignatureHintDecodeRequest, Stellar.SignatureHintDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSignatureHint",
                XdrProtoServiceGrpcMarshaller.SignatureHintDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SignatureHintDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeNodeID</summary>
        public static readonly Method<Stellar.NodeIDEncodeRequest, Stellar.NodeIDEncodeResponse> EncodeNodeIDMethod =
            new Method<Stellar.NodeIDEncodeRequest, Stellar.NodeIDEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeNodeID",
                XdrProtoServiceGrpcMarshaller.NodeIDEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.NodeIDEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeNodeID</summary>
        public static readonly Method<Stellar.NodeIDDecodeRequest, Stellar.NodeIDDecodeResponse> DecodeNodeIDMethod =
            new Method<Stellar.NodeIDDecodeRequest, Stellar.NodeIDDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeNodeID",
                XdrProtoServiceGrpcMarshaller.NodeIDDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.NodeIDDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeAccountID</summary>
        public static readonly Method<Stellar.AccountIDEncodeRequest, Stellar.AccountIDEncodeResponse> EncodeAccountIDMethod =
            new Method<Stellar.AccountIDEncodeRequest, Stellar.AccountIDEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeAccountID",
                XdrProtoServiceGrpcMarshaller.AccountIDEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AccountIDEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeAccountID</summary>
        public static readonly Method<Stellar.AccountIDDecodeRequest, Stellar.AccountIDDecodeResponse> DecodeAccountIDMethod =
            new Method<Stellar.AccountIDDecodeRequest, Stellar.AccountIDDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeAccountID",
                XdrProtoServiceGrpcMarshaller.AccountIDDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.AccountIDDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeCurve25519Secret</summary>
        public static readonly Method<Stellar.Curve25519SecretEncodeRequest, Stellar.Curve25519SecretEncodeResponse> EncodeCurve25519SecretMethod =
            new Method<Stellar.Curve25519SecretEncodeRequest, Stellar.Curve25519SecretEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeCurve25519Secret",
                XdrProtoServiceGrpcMarshaller.Curve25519SecretEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.Curve25519SecretEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeCurve25519Secret</summary>
        public static readonly Method<Stellar.Curve25519SecretDecodeRequest, Stellar.Curve25519SecretDecodeResponse> DecodeCurve25519SecretMethod =
            new Method<Stellar.Curve25519SecretDecodeRequest, Stellar.Curve25519SecretDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeCurve25519Secret",
                XdrProtoServiceGrpcMarshaller.Curve25519SecretDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.Curve25519SecretDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeCurve25519Public</summary>
        public static readonly Method<Stellar.Curve25519PublicEncodeRequest, Stellar.Curve25519PublicEncodeResponse> EncodeCurve25519PublicMethod =
            new Method<Stellar.Curve25519PublicEncodeRequest, Stellar.Curve25519PublicEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeCurve25519Public",
                XdrProtoServiceGrpcMarshaller.Curve25519PublicEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.Curve25519PublicEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeCurve25519Public</summary>
        public static readonly Method<Stellar.Curve25519PublicDecodeRequest, Stellar.Curve25519PublicDecodeResponse> DecodeCurve25519PublicMethod =
            new Method<Stellar.Curve25519PublicDecodeRequest, Stellar.Curve25519PublicDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeCurve25519Public",
                XdrProtoServiceGrpcMarshaller.Curve25519PublicDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.Curve25519PublicDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeHmacSha256Key</summary>
        public static readonly Method<Stellar.HmacSha256KeyEncodeRequest, Stellar.HmacSha256KeyEncodeResponse> EncodeHmacSha256KeyMethod =
            new Method<Stellar.HmacSha256KeyEncodeRequest, Stellar.HmacSha256KeyEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeHmacSha256Key",
                XdrProtoServiceGrpcMarshaller.HmacSha256KeyEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.HmacSha256KeyEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeHmacSha256Key</summary>
        public static readonly Method<Stellar.HmacSha256KeyDecodeRequest, Stellar.HmacSha256KeyDecodeResponse> DecodeHmacSha256KeyMethod =
            new Method<Stellar.HmacSha256KeyDecodeRequest, Stellar.HmacSha256KeyDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeHmacSha256Key",
                XdrProtoServiceGrpcMarshaller.HmacSha256KeyDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.HmacSha256KeyDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeHmacSha256Mac</summary>
        public static readonly Method<Stellar.HmacSha256MacEncodeRequest, Stellar.HmacSha256MacEncodeResponse> EncodeHmacSha256MacMethod =
            new Method<Stellar.HmacSha256MacEncodeRequest, Stellar.HmacSha256MacEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeHmacSha256Mac",
                XdrProtoServiceGrpcMarshaller.HmacSha256MacEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.HmacSha256MacEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeHmacSha256Mac</summary>
        public static readonly Method<Stellar.HmacSha256MacDecodeRequest, Stellar.HmacSha256MacDecodeResponse> DecodeHmacSha256MacMethod =
            new Method<Stellar.HmacSha256MacDecodeRequest, Stellar.HmacSha256MacDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeHmacSha256Mac",
                XdrProtoServiceGrpcMarshaller.HmacSha256MacDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.HmacSha256MacDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeShortHashSeed</summary>
        public static readonly Method<Stellar.ShortHashSeedEncodeRequest, Stellar.ShortHashSeedEncodeResponse> EncodeShortHashSeedMethod =
            new Method<Stellar.ShortHashSeedEncodeRequest, Stellar.ShortHashSeedEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeShortHashSeed",
                XdrProtoServiceGrpcMarshaller.ShortHashSeedEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ShortHashSeedEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeShortHashSeed</summary>
        public static readonly Method<Stellar.ShortHashSeedDecodeRequest, Stellar.ShortHashSeedDecodeResponse> DecodeShortHashSeedMethod =
            new Method<Stellar.ShortHashSeedDecodeRequest, Stellar.ShortHashSeedDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeShortHashSeed",
                XdrProtoServiceGrpcMarshaller.ShortHashSeedDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.ShortHashSeedDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeBinaryFuseFilterType</summary>
        public static readonly Method<Stellar.BinaryFuseFilterTypeEncodeRequest, Stellar.BinaryFuseFilterTypeEncodeResponse> EncodeBinaryFuseFilterTypeMethod =
            new Method<Stellar.BinaryFuseFilterTypeEncodeRequest, Stellar.BinaryFuseFilterTypeEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeBinaryFuseFilterType",
                XdrProtoServiceGrpcMarshaller.BinaryFuseFilterTypeEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.BinaryFuseFilterTypeEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeBinaryFuseFilterType</summary>
        public static readonly Method<Stellar.BinaryFuseFilterTypeDecodeRequest, Stellar.BinaryFuseFilterTypeDecodeResponse> DecodeBinaryFuseFilterTypeMethod =
            new Method<Stellar.BinaryFuseFilterTypeDecodeRequest, Stellar.BinaryFuseFilterTypeDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeBinaryFuseFilterType",
                XdrProtoServiceGrpcMarshaller.BinaryFuseFilterTypeDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.BinaryFuseFilterTypeDecodeResponseMarshaller);

        /// <summary>Method descriptor for EncodeSerializedBinaryFuseFilter</summary>
        public static readonly Method<Stellar.SerializedBinaryFuseFilterEncodeRequest, Stellar.SerializedBinaryFuseFilterEncodeResponse> EncodeSerializedBinaryFuseFilterMethod =
            new Method<Stellar.SerializedBinaryFuseFilterEncodeRequest, Stellar.SerializedBinaryFuseFilterEncodeResponse>(
                MethodType.Unary,
                ServiceName,
                "EncodeSerializedBinaryFuseFilter",
                XdrProtoServiceGrpcMarshaller.SerializedBinaryFuseFilterEncodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SerializedBinaryFuseFilterEncodeResponseMarshaller);

        /// <summary>Method descriptor for DecodeSerializedBinaryFuseFilter</summary>
        public static readonly Method<Stellar.SerializedBinaryFuseFilterDecodeRequest, Stellar.SerializedBinaryFuseFilterDecodeResponse> DecodeSerializedBinaryFuseFilterMethod =
            new Method<Stellar.SerializedBinaryFuseFilterDecodeRequest, Stellar.SerializedBinaryFuseFilterDecodeResponse>(
                MethodType.Unary,
                ServiceName,
                "DecodeSerializedBinaryFuseFilter",
                XdrProtoServiceGrpcMarshaller.SerializedBinaryFuseFilterDecodeRequestMarshaller,
                XdrProtoServiceGrpcMarshaller.SerializedBinaryFuseFilterDecodeResponseMarshaller);

    }

    /// <summary>Custom marshallers for IXdrProtoService types</summary>
    public static class XdrProtoServiceGrpcMarshaller
    {
        // Configure protobuf-net serialization for all types
        static {serviceImplName}GrpcMarshaller()
        {
            ConfigureTypes();
        }

        /// <summary>Configure protobuf serialization for all types</summary>
        public static void ConfigureTypes()
        {
            // Preregister all types with RuntimeTypeModel
            var model = RuntimeTypeModel.Default;

            // Marshaller for ConfigSettingContractExecutionLanesV0EncodeRequest
            public static readonly Marshaller<Stellar.ConfigSettingContractExecutionLanesV0EncodeRequest> ConfigSettingContractExecutionLanesV0EncodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingContractExecutionLanesV0EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingContractExecutionLanesV0EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingContractExecutionLanesV0EncodeResponse
            public static readonly Marshaller<Stellar.ConfigSettingContractExecutionLanesV0EncodeResponse> ConfigSettingContractExecutionLanesV0EncodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingContractExecutionLanesV0EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingContractExecutionLanesV0EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingContractExecutionLanesV0DecodeRequest
            public static readonly Marshaller<Stellar.ConfigSettingContractExecutionLanesV0DecodeRequest> ConfigSettingContractExecutionLanesV0DecodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingContractExecutionLanesV0DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingContractExecutionLanesV0DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingContractExecutionLanesV0DecodeResponse
            public static readonly Marshaller<Stellar.ConfigSettingContractExecutionLanesV0DecodeResponse> ConfigSettingContractExecutionLanesV0DecodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingContractExecutionLanesV0DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingContractExecutionLanesV0DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingContractComputeV0EncodeRequest
            public static readonly Marshaller<Stellar.ConfigSettingContractComputeV0EncodeRequest> ConfigSettingContractComputeV0EncodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingContractComputeV0EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingContractComputeV0EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingContractComputeV0EncodeResponse
            public static readonly Marshaller<Stellar.ConfigSettingContractComputeV0EncodeResponse> ConfigSettingContractComputeV0EncodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingContractComputeV0EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingContractComputeV0EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingContractComputeV0DecodeRequest
            public static readonly Marshaller<Stellar.ConfigSettingContractComputeV0DecodeRequest> ConfigSettingContractComputeV0DecodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingContractComputeV0DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingContractComputeV0DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingContractComputeV0DecodeResponse
            public static readonly Marshaller<Stellar.ConfigSettingContractComputeV0DecodeResponse> ConfigSettingContractComputeV0DecodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingContractComputeV0DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingContractComputeV0DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingContractLedgerCostV0EncodeRequest
            public static readonly Marshaller<Stellar.ConfigSettingContractLedgerCostV0EncodeRequest> ConfigSettingContractLedgerCostV0EncodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingContractLedgerCostV0EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingContractLedgerCostV0EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingContractLedgerCostV0EncodeResponse
            public static readonly Marshaller<Stellar.ConfigSettingContractLedgerCostV0EncodeResponse> ConfigSettingContractLedgerCostV0EncodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingContractLedgerCostV0EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingContractLedgerCostV0EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingContractLedgerCostV0DecodeRequest
            public static readonly Marshaller<Stellar.ConfigSettingContractLedgerCostV0DecodeRequest> ConfigSettingContractLedgerCostV0DecodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingContractLedgerCostV0DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingContractLedgerCostV0DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingContractLedgerCostV0DecodeResponse
            public static readonly Marshaller<Stellar.ConfigSettingContractLedgerCostV0DecodeResponse> ConfigSettingContractLedgerCostV0DecodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingContractLedgerCostV0DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingContractLedgerCostV0DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingContractHistoricalDataV0EncodeRequest
            public static readonly Marshaller<Stellar.ConfigSettingContractHistoricalDataV0EncodeRequest> ConfigSettingContractHistoricalDataV0EncodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingContractHistoricalDataV0EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingContractHistoricalDataV0EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingContractHistoricalDataV0EncodeResponse
            public static readonly Marshaller<Stellar.ConfigSettingContractHistoricalDataV0EncodeResponse> ConfigSettingContractHistoricalDataV0EncodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingContractHistoricalDataV0EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingContractHistoricalDataV0EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingContractHistoricalDataV0DecodeRequest
            public static readonly Marshaller<Stellar.ConfigSettingContractHistoricalDataV0DecodeRequest> ConfigSettingContractHistoricalDataV0DecodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingContractHistoricalDataV0DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingContractHistoricalDataV0DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingContractHistoricalDataV0DecodeResponse
            public static readonly Marshaller<Stellar.ConfigSettingContractHistoricalDataV0DecodeResponse> ConfigSettingContractHistoricalDataV0DecodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingContractHistoricalDataV0DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingContractHistoricalDataV0DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingContractEventsV0EncodeRequest
            public static readonly Marshaller<Stellar.ConfigSettingContractEventsV0EncodeRequest> ConfigSettingContractEventsV0EncodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingContractEventsV0EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingContractEventsV0EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingContractEventsV0EncodeResponse
            public static readonly Marshaller<Stellar.ConfigSettingContractEventsV0EncodeResponse> ConfigSettingContractEventsV0EncodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingContractEventsV0EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingContractEventsV0EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingContractEventsV0DecodeRequest
            public static readonly Marshaller<Stellar.ConfigSettingContractEventsV0DecodeRequest> ConfigSettingContractEventsV0DecodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingContractEventsV0DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingContractEventsV0DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingContractEventsV0DecodeResponse
            public static readonly Marshaller<Stellar.ConfigSettingContractEventsV0DecodeResponse> ConfigSettingContractEventsV0DecodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingContractEventsV0DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingContractEventsV0DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingContractBandwidthV0EncodeRequest
            public static readonly Marshaller<Stellar.ConfigSettingContractBandwidthV0EncodeRequest> ConfigSettingContractBandwidthV0EncodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingContractBandwidthV0EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingContractBandwidthV0EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingContractBandwidthV0EncodeResponse
            public static readonly Marshaller<Stellar.ConfigSettingContractBandwidthV0EncodeResponse> ConfigSettingContractBandwidthV0EncodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingContractBandwidthV0EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingContractBandwidthV0EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingContractBandwidthV0DecodeRequest
            public static readonly Marshaller<Stellar.ConfigSettingContractBandwidthV0DecodeRequest> ConfigSettingContractBandwidthV0DecodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingContractBandwidthV0DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingContractBandwidthV0DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingContractBandwidthV0DecodeResponse
            public static readonly Marshaller<Stellar.ConfigSettingContractBandwidthV0DecodeResponse> ConfigSettingContractBandwidthV0DecodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingContractBandwidthV0DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingContractBandwidthV0DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractCostTypeEncodeRequest
            public static readonly Marshaller<Stellar.ContractCostTypeEncodeRequest> ContractCostTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.ContractCostTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractCostTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractCostTypeEncodeResponse
            public static readonly Marshaller<Stellar.ContractCostTypeEncodeResponse> ContractCostTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.ContractCostTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractCostTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractCostTypeDecodeRequest
            public static readonly Marshaller<Stellar.ContractCostTypeDecodeRequest> ContractCostTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.ContractCostTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractCostTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractCostTypeDecodeResponse
            public static readonly Marshaller<Stellar.ContractCostTypeDecodeResponse> ContractCostTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.ContractCostTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractCostTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractCostParamEntryEncodeRequest
            public static readonly Marshaller<Stellar.ContractCostParamEntryEncodeRequest> ContractCostParamEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.ContractCostParamEntryEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractCostParamEntryEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractCostParamEntryEncodeResponse
            public static readonly Marshaller<Stellar.ContractCostParamEntryEncodeResponse> ContractCostParamEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.ContractCostParamEntryEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractCostParamEntryEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractCostParamEntryDecodeRequest
            public static readonly Marshaller<Stellar.ContractCostParamEntryDecodeRequest> ContractCostParamEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.ContractCostParamEntryDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractCostParamEntryDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractCostParamEntryDecodeResponse
            public static readonly Marshaller<Stellar.ContractCostParamEntryDecodeResponse> ContractCostParamEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.ContractCostParamEntryDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractCostParamEntryDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for StateArchivalSettingsEncodeRequest
            public static readonly Marshaller<Stellar.StateArchivalSettingsEncodeRequest> StateArchivalSettingsEncodeRequestMarshaller = Marshallers.Create<Stellar.StateArchivalSettingsEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.StateArchivalSettingsEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for StateArchivalSettingsEncodeResponse
            public static readonly Marshaller<Stellar.StateArchivalSettingsEncodeResponse> StateArchivalSettingsEncodeResponseMarshaller = Marshallers.Create<Stellar.StateArchivalSettingsEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.StateArchivalSettingsEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for StateArchivalSettingsDecodeRequest
            public static readonly Marshaller<Stellar.StateArchivalSettingsDecodeRequest> StateArchivalSettingsDecodeRequestMarshaller = Marshallers.Create<Stellar.StateArchivalSettingsDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.StateArchivalSettingsDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for StateArchivalSettingsDecodeResponse
            public static readonly Marshaller<Stellar.StateArchivalSettingsDecodeResponse> StateArchivalSettingsDecodeResponseMarshaller = Marshallers.Create<Stellar.StateArchivalSettingsDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.StateArchivalSettingsDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for EvictionIteratorEncodeRequest
            public static readonly Marshaller<Stellar.EvictionIteratorEncodeRequest> EvictionIteratorEncodeRequestMarshaller = Marshallers.Create<Stellar.EvictionIteratorEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.EvictionIteratorEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for EvictionIteratorEncodeResponse
            public static readonly Marshaller<Stellar.EvictionIteratorEncodeResponse> EvictionIteratorEncodeResponseMarshaller = Marshallers.Create<Stellar.EvictionIteratorEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.EvictionIteratorEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for EvictionIteratorDecodeRequest
            public static readonly Marshaller<Stellar.EvictionIteratorDecodeRequest> EvictionIteratorDecodeRequestMarshaller = Marshallers.Create<Stellar.EvictionIteratorDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.EvictionIteratorDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for EvictionIteratorDecodeResponse
            public static readonly Marshaller<Stellar.EvictionIteratorDecodeResponse> EvictionIteratorDecodeResponseMarshaller = Marshallers.Create<Stellar.EvictionIteratorDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.EvictionIteratorDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractCostParamsEncodeRequest
            public static readonly Marshaller<Stellar.ContractCostParamsEncodeRequest> ContractCostParamsEncodeRequestMarshaller = Marshallers.Create<Stellar.ContractCostParamsEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractCostParamsEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractCostParamsEncodeResponse
            public static readonly Marshaller<Stellar.ContractCostParamsEncodeResponse> ContractCostParamsEncodeResponseMarshaller = Marshallers.Create<Stellar.ContractCostParamsEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractCostParamsEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractCostParamsDecodeRequest
            public static readonly Marshaller<Stellar.ContractCostParamsDecodeRequest> ContractCostParamsDecodeRequestMarshaller = Marshallers.Create<Stellar.ContractCostParamsDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractCostParamsDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractCostParamsDecodeResponse
            public static readonly Marshaller<Stellar.ContractCostParamsDecodeResponse> ContractCostParamsDecodeResponseMarshaller = Marshallers.Create<Stellar.ContractCostParamsDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractCostParamsDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingIDEncodeRequest
            public static readonly Marshaller<Stellar.ConfigSettingIDEncodeRequest> ConfigSettingIDEncodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingIDEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingIDEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingIDEncodeResponse
            public static readonly Marshaller<Stellar.ConfigSettingIDEncodeResponse> ConfigSettingIDEncodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingIDEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingIDEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingIDDecodeRequest
            public static readonly Marshaller<Stellar.ConfigSettingIDDecodeRequest> ConfigSettingIDDecodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingIDDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingIDDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingIDDecodeResponse
            public static readonly Marshaller<Stellar.ConfigSettingIDDecodeResponse> ConfigSettingIDDecodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingIDDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingIDDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingEntryEncodeRequest
            public static readonly Marshaller<Stellar.ConfigSettingEntryEncodeRequest> ConfigSettingEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingEntryEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingEntryEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingEntryEncodeResponse
            public static readonly Marshaller<Stellar.ConfigSettingEntryEncodeResponse> ConfigSettingEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingEntryEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingEntryEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingEntryDecodeRequest
            public static readonly Marshaller<Stellar.ConfigSettingEntryDecodeRequest> ConfigSettingEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.ConfigSettingEntryDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingEntryDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigSettingEntryDecodeResponse
            public static readonly Marshaller<Stellar.ConfigSettingEntryDecodeResponse> ConfigSettingEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.ConfigSettingEntryDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigSettingEntryDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCEnvMetaKindEncodeRequest
            public static readonly Marshaller<Stellar.SCEnvMetaKindEncodeRequest> SCEnvMetaKindEncodeRequestMarshaller = Marshallers.Create<Stellar.SCEnvMetaKindEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCEnvMetaKindEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCEnvMetaKindEncodeResponse
            public static readonly Marshaller<Stellar.SCEnvMetaKindEncodeResponse> SCEnvMetaKindEncodeResponseMarshaller = Marshallers.Create<Stellar.SCEnvMetaKindEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCEnvMetaKindEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCEnvMetaKindDecodeRequest
            public static readonly Marshaller<Stellar.SCEnvMetaKindDecodeRequest> SCEnvMetaKindDecodeRequestMarshaller = Marshallers.Create<Stellar.SCEnvMetaKindDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCEnvMetaKindDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCEnvMetaKindDecodeResponse
            public static readonly Marshaller<Stellar.SCEnvMetaKindDecodeResponse> SCEnvMetaKindDecodeResponseMarshaller = Marshallers.Create<Stellar.SCEnvMetaKindDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCEnvMetaKindDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCEnvMetaEntryEncodeRequest
            public static readonly Marshaller<Stellar.SCEnvMetaEntryEncodeRequest> SCEnvMetaEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.SCEnvMetaEntryEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCEnvMetaEntryEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCEnvMetaEntryEncodeResponse
            public static readonly Marshaller<Stellar.SCEnvMetaEntryEncodeResponse> SCEnvMetaEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.SCEnvMetaEntryEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCEnvMetaEntryEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCEnvMetaEntryDecodeRequest
            public static readonly Marshaller<Stellar.SCEnvMetaEntryDecodeRequest> SCEnvMetaEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.SCEnvMetaEntryDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCEnvMetaEntryDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCEnvMetaEntryDecodeResponse
            public static readonly Marshaller<Stellar.SCEnvMetaEntryDecodeResponse> SCEnvMetaEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.SCEnvMetaEntryDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCEnvMetaEntryDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCMetaV0EncodeRequest
            public static readonly Marshaller<Stellar.SCMetaV0EncodeRequest> SCMetaV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCMetaV0EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCMetaV0EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCMetaV0EncodeResponse
            public static readonly Marshaller<Stellar.SCMetaV0EncodeResponse> SCMetaV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCMetaV0EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCMetaV0EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCMetaV0DecodeRequest
            public static readonly Marshaller<Stellar.SCMetaV0DecodeRequest> SCMetaV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCMetaV0DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCMetaV0DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCMetaV0DecodeResponse
            public static readonly Marshaller<Stellar.SCMetaV0DecodeResponse> SCMetaV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCMetaV0DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCMetaV0DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCMetaKindEncodeRequest
            public static readonly Marshaller<Stellar.SCMetaKindEncodeRequest> SCMetaKindEncodeRequestMarshaller = Marshallers.Create<Stellar.SCMetaKindEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCMetaKindEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCMetaKindEncodeResponse
            public static readonly Marshaller<Stellar.SCMetaKindEncodeResponse> SCMetaKindEncodeResponseMarshaller = Marshallers.Create<Stellar.SCMetaKindEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCMetaKindEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCMetaKindDecodeRequest
            public static readonly Marshaller<Stellar.SCMetaKindDecodeRequest> SCMetaKindDecodeRequestMarshaller = Marshallers.Create<Stellar.SCMetaKindDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCMetaKindDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCMetaKindDecodeResponse
            public static readonly Marshaller<Stellar.SCMetaKindDecodeResponse> SCMetaKindDecodeResponseMarshaller = Marshallers.Create<Stellar.SCMetaKindDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCMetaKindDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCMetaEntryEncodeRequest
            public static readonly Marshaller<Stellar.SCMetaEntryEncodeRequest> SCMetaEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.SCMetaEntryEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCMetaEntryEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCMetaEntryEncodeResponse
            public static readonly Marshaller<Stellar.SCMetaEntryEncodeResponse> SCMetaEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.SCMetaEntryEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCMetaEntryEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCMetaEntryDecodeRequest
            public static readonly Marshaller<Stellar.SCMetaEntryDecodeRequest> SCMetaEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.SCMetaEntryDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCMetaEntryDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCMetaEntryDecodeResponse
            public static readonly Marshaller<Stellar.SCMetaEntryDecodeResponse> SCMetaEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.SCMetaEntryDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCMetaEntryDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeEncodeRequest
            public static readonly Marshaller<Stellar.SCSpecTypeEncodeRequest> SCSpecTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeEncodeResponse
            public static readonly Marshaller<Stellar.SCSpecTypeEncodeResponse> SCSpecTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeDecodeRequest
            public static readonly Marshaller<Stellar.SCSpecTypeDecodeRequest> SCSpecTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeDecodeResponse
            public static readonly Marshaller<Stellar.SCSpecTypeDecodeResponse> SCSpecTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeOptionEncodeRequest
            public static readonly Marshaller<Stellar.SCSpecTypeOptionEncodeRequest> SCSpecTypeOptionEncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeOptionEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeOptionEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeOptionEncodeResponse
            public static readonly Marshaller<Stellar.SCSpecTypeOptionEncodeResponse> SCSpecTypeOptionEncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeOptionEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeOptionEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeOptionDecodeRequest
            public static readonly Marshaller<Stellar.SCSpecTypeOptionDecodeRequest> SCSpecTypeOptionDecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeOptionDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeOptionDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeOptionDecodeResponse
            public static readonly Marshaller<Stellar.SCSpecTypeOptionDecodeResponse> SCSpecTypeOptionDecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeOptionDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeOptionDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeResultEncodeRequest
            public static readonly Marshaller<Stellar.SCSpecTypeResultEncodeRequest> SCSpecTypeResultEncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeResultEncodeResponse
            public static readonly Marshaller<Stellar.SCSpecTypeResultEncodeResponse> SCSpecTypeResultEncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeResultDecodeRequest
            public static readonly Marshaller<Stellar.SCSpecTypeResultDecodeRequest> SCSpecTypeResultDecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeResultDecodeResponse
            public static readonly Marshaller<Stellar.SCSpecTypeResultDecodeResponse> SCSpecTypeResultDecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeVecEncodeRequest
            public static readonly Marshaller<Stellar.SCSpecTypeVecEncodeRequest> SCSpecTypeVecEncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeVecEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeVecEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeVecEncodeResponse
            public static readonly Marshaller<Stellar.SCSpecTypeVecEncodeResponse> SCSpecTypeVecEncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeVecEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeVecEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeVecDecodeRequest
            public static readonly Marshaller<Stellar.SCSpecTypeVecDecodeRequest> SCSpecTypeVecDecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeVecDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeVecDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeVecDecodeResponse
            public static readonly Marshaller<Stellar.SCSpecTypeVecDecodeResponse> SCSpecTypeVecDecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeVecDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeVecDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeMapEncodeRequest
            public static readonly Marshaller<Stellar.SCSpecTypeMapEncodeRequest> SCSpecTypeMapEncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeMapEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeMapEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeMapEncodeResponse
            public static readonly Marshaller<Stellar.SCSpecTypeMapEncodeResponse> SCSpecTypeMapEncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeMapEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeMapEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeMapDecodeRequest
            public static readonly Marshaller<Stellar.SCSpecTypeMapDecodeRequest> SCSpecTypeMapDecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeMapDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeMapDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeMapDecodeResponse
            public static readonly Marshaller<Stellar.SCSpecTypeMapDecodeResponse> SCSpecTypeMapDecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeMapDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeMapDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeTupleEncodeRequest
            public static readonly Marshaller<Stellar.SCSpecTypeTupleEncodeRequest> SCSpecTypeTupleEncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeTupleEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeTupleEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeTupleEncodeResponse
            public static readonly Marshaller<Stellar.SCSpecTypeTupleEncodeResponse> SCSpecTypeTupleEncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeTupleEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeTupleEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeTupleDecodeRequest
            public static readonly Marshaller<Stellar.SCSpecTypeTupleDecodeRequest> SCSpecTypeTupleDecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeTupleDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeTupleDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeTupleDecodeResponse
            public static readonly Marshaller<Stellar.SCSpecTypeTupleDecodeResponse> SCSpecTypeTupleDecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeTupleDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeTupleDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeBytesNEncodeRequest
            public static readonly Marshaller<Stellar.SCSpecTypeBytesNEncodeRequest> SCSpecTypeBytesNEncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeBytesNEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeBytesNEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeBytesNEncodeResponse
            public static readonly Marshaller<Stellar.SCSpecTypeBytesNEncodeResponse> SCSpecTypeBytesNEncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeBytesNEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeBytesNEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeBytesNDecodeRequest
            public static readonly Marshaller<Stellar.SCSpecTypeBytesNDecodeRequest> SCSpecTypeBytesNDecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeBytesNDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeBytesNDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeBytesNDecodeResponse
            public static readonly Marshaller<Stellar.SCSpecTypeBytesNDecodeResponse> SCSpecTypeBytesNDecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeBytesNDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeBytesNDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeUDTEncodeRequest
            public static readonly Marshaller<Stellar.SCSpecTypeUDTEncodeRequest> SCSpecTypeUDTEncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeUDTEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeUDTEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeUDTEncodeResponse
            public static readonly Marshaller<Stellar.SCSpecTypeUDTEncodeResponse> SCSpecTypeUDTEncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeUDTEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeUDTEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeUDTDecodeRequest
            public static readonly Marshaller<Stellar.SCSpecTypeUDTDecodeRequest> SCSpecTypeUDTDecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeUDTDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeUDTDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeUDTDecodeResponse
            public static readonly Marshaller<Stellar.SCSpecTypeUDTDecodeResponse> SCSpecTypeUDTDecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeUDTDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeUDTDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeDefEncodeRequest
            public static readonly Marshaller<Stellar.SCSpecTypeDefEncodeRequest> SCSpecTypeDefEncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeDefEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeDefEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeDefEncodeResponse
            public static readonly Marshaller<Stellar.SCSpecTypeDefEncodeResponse> SCSpecTypeDefEncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeDefEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeDefEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeDefDecodeRequest
            public static readonly Marshaller<Stellar.SCSpecTypeDefDecodeRequest> SCSpecTypeDefDecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecTypeDefDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeDefDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecTypeDefDecodeResponse
            public static readonly Marshaller<Stellar.SCSpecTypeDefDecodeResponse> SCSpecTypeDefDecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecTypeDefDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecTypeDefDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTStructFieldV0EncodeRequest
            public static readonly Marshaller<Stellar.SCSpecUDTStructFieldV0EncodeRequest> SCSpecUDTStructFieldV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTStructFieldV0EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTStructFieldV0EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTStructFieldV0EncodeResponse
            public static readonly Marshaller<Stellar.SCSpecUDTStructFieldV0EncodeResponse> SCSpecUDTStructFieldV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTStructFieldV0EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTStructFieldV0EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTStructFieldV0DecodeRequest
            public static readonly Marshaller<Stellar.SCSpecUDTStructFieldV0DecodeRequest> SCSpecUDTStructFieldV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTStructFieldV0DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTStructFieldV0DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTStructFieldV0DecodeResponse
            public static readonly Marshaller<Stellar.SCSpecUDTStructFieldV0DecodeResponse> SCSpecUDTStructFieldV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTStructFieldV0DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTStructFieldV0DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTStructV0EncodeRequest
            public static readonly Marshaller<Stellar.SCSpecUDTStructV0EncodeRequest> SCSpecUDTStructV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTStructV0EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTStructV0EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTStructV0EncodeResponse
            public static readonly Marshaller<Stellar.SCSpecUDTStructV0EncodeResponse> SCSpecUDTStructV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTStructV0EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTStructV0EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTStructV0DecodeRequest
            public static readonly Marshaller<Stellar.SCSpecUDTStructV0DecodeRequest> SCSpecUDTStructV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTStructV0DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTStructV0DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTStructV0DecodeResponse
            public static readonly Marshaller<Stellar.SCSpecUDTStructV0DecodeResponse> SCSpecUDTStructV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTStructV0DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTStructV0DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTUnionCaseVoidV0EncodeRequest
            public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseVoidV0EncodeRequest> SCSpecUDTUnionCaseVoidV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseVoidV0EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseVoidV0EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTUnionCaseVoidV0EncodeResponse
            public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseVoidV0EncodeResponse> SCSpecUDTUnionCaseVoidV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseVoidV0EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseVoidV0EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTUnionCaseVoidV0DecodeRequest
            public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseVoidV0DecodeRequest> SCSpecUDTUnionCaseVoidV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseVoidV0DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseVoidV0DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTUnionCaseVoidV0DecodeResponse
            public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseVoidV0DecodeResponse> SCSpecUDTUnionCaseVoidV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseVoidV0DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseVoidV0DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTUnionCaseTupleV0EncodeRequest
            public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseTupleV0EncodeRequest> SCSpecUDTUnionCaseTupleV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseTupleV0EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseTupleV0EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTUnionCaseTupleV0EncodeResponse
            public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseTupleV0EncodeResponse> SCSpecUDTUnionCaseTupleV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseTupleV0EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseTupleV0EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTUnionCaseTupleV0DecodeRequest
            public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseTupleV0DecodeRequest> SCSpecUDTUnionCaseTupleV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseTupleV0DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseTupleV0DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTUnionCaseTupleV0DecodeResponse
            public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseTupleV0DecodeResponse> SCSpecUDTUnionCaseTupleV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseTupleV0DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseTupleV0DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTUnionCaseV0KindEncodeRequest
            public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseV0KindEncodeRequest> SCSpecUDTUnionCaseV0KindEncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseV0KindEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseV0KindEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTUnionCaseV0KindEncodeResponse
            public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseV0KindEncodeResponse> SCSpecUDTUnionCaseV0KindEncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseV0KindEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseV0KindEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTUnionCaseV0KindDecodeRequest
            public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseV0KindDecodeRequest> SCSpecUDTUnionCaseV0KindDecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseV0KindDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseV0KindDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTUnionCaseV0KindDecodeResponse
            public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseV0KindDecodeResponse> SCSpecUDTUnionCaseV0KindDecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseV0KindDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseV0KindDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTUnionCaseV0EncodeRequest
            public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseV0EncodeRequest> SCSpecUDTUnionCaseV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseV0EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseV0EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTUnionCaseV0EncodeResponse
            public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseV0EncodeResponse> SCSpecUDTUnionCaseV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseV0EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseV0EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTUnionCaseV0DecodeRequest
            public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseV0DecodeRequest> SCSpecUDTUnionCaseV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseV0DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseV0DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTUnionCaseV0DecodeResponse
            public static readonly Marshaller<Stellar.SCSpecUDTUnionCaseV0DecodeResponse> SCSpecUDTUnionCaseV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionCaseV0DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTUnionCaseV0DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTUnionV0EncodeRequest
            public static readonly Marshaller<Stellar.SCSpecUDTUnionV0EncodeRequest> SCSpecUDTUnionV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionV0EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTUnionV0EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTUnionV0EncodeResponse
            public static readonly Marshaller<Stellar.SCSpecUDTUnionV0EncodeResponse> SCSpecUDTUnionV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionV0EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTUnionV0EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTUnionV0DecodeRequest
            public static readonly Marshaller<Stellar.SCSpecUDTUnionV0DecodeRequest> SCSpecUDTUnionV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionV0DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTUnionV0DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTUnionV0DecodeResponse
            public static readonly Marshaller<Stellar.SCSpecUDTUnionV0DecodeResponse> SCSpecUDTUnionV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTUnionV0DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTUnionV0DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTEnumCaseV0EncodeRequest
            public static readonly Marshaller<Stellar.SCSpecUDTEnumCaseV0EncodeRequest> SCSpecUDTEnumCaseV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTEnumCaseV0EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTEnumCaseV0EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTEnumCaseV0EncodeResponse
            public static readonly Marshaller<Stellar.SCSpecUDTEnumCaseV0EncodeResponse> SCSpecUDTEnumCaseV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTEnumCaseV0EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTEnumCaseV0EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTEnumCaseV0DecodeRequest
            public static readonly Marshaller<Stellar.SCSpecUDTEnumCaseV0DecodeRequest> SCSpecUDTEnumCaseV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTEnumCaseV0DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTEnumCaseV0DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTEnumCaseV0DecodeResponse
            public static readonly Marshaller<Stellar.SCSpecUDTEnumCaseV0DecodeResponse> SCSpecUDTEnumCaseV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTEnumCaseV0DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTEnumCaseV0DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTEnumV0EncodeRequest
            public static readonly Marshaller<Stellar.SCSpecUDTEnumV0EncodeRequest> SCSpecUDTEnumV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTEnumV0EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTEnumV0EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTEnumV0EncodeResponse
            public static readonly Marshaller<Stellar.SCSpecUDTEnumV0EncodeResponse> SCSpecUDTEnumV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTEnumV0EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTEnumV0EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTEnumV0DecodeRequest
            public static readonly Marshaller<Stellar.SCSpecUDTEnumV0DecodeRequest> SCSpecUDTEnumV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTEnumV0DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTEnumV0DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTEnumV0DecodeResponse
            public static readonly Marshaller<Stellar.SCSpecUDTEnumV0DecodeResponse> SCSpecUDTEnumV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTEnumV0DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTEnumV0DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTErrorEnumCaseV0EncodeRequest
            public static readonly Marshaller<Stellar.SCSpecUDTErrorEnumCaseV0EncodeRequest> SCSpecUDTErrorEnumCaseV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTErrorEnumCaseV0EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTErrorEnumCaseV0EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTErrorEnumCaseV0EncodeResponse
            public static readonly Marshaller<Stellar.SCSpecUDTErrorEnumCaseV0EncodeResponse> SCSpecUDTErrorEnumCaseV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTErrorEnumCaseV0EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTErrorEnumCaseV0EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTErrorEnumCaseV0DecodeRequest
            public static readonly Marshaller<Stellar.SCSpecUDTErrorEnumCaseV0DecodeRequest> SCSpecUDTErrorEnumCaseV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTErrorEnumCaseV0DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTErrorEnumCaseV0DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTErrorEnumCaseV0DecodeResponse
            public static readonly Marshaller<Stellar.SCSpecUDTErrorEnumCaseV0DecodeResponse> SCSpecUDTErrorEnumCaseV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTErrorEnumCaseV0DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTErrorEnumCaseV0DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTErrorEnumV0EncodeRequest
            public static readonly Marshaller<Stellar.SCSpecUDTErrorEnumV0EncodeRequest> SCSpecUDTErrorEnumV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTErrorEnumV0EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTErrorEnumV0EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTErrorEnumV0EncodeResponse
            public static readonly Marshaller<Stellar.SCSpecUDTErrorEnumV0EncodeResponse> SCSpecUDTErrorEnumV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTErrorEnumV0EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTErrorEnumV0EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTErrorEnumV0DecodeRequest
            public static readonly Marshaller<Stellar.SCSpecUDTErrorEnumV0DecodeRequest> SCSpecUDTErrorEnumV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecUDTErrorEnumV0DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTErrorEnumV0DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecUDTErrorEnumV0DecodeResponse
            public static readonly Marshaller<Stellar.SCSpecUDTErrorEnumV0DecodeResponse> SCSpecUDTErrorEnumV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecUDTErrorEnumV0DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecUDTErrorEnumV0DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecFunctionInputV0EncodeRequest
            public static readonly Marshaller<Stellar.SCSpecFunctionInputV0EncodeRequest> SCSpecFunctionInputV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecFunctionInputV0EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecFunctionInputV0EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecFunctionInputV0EncodeResponse
            public static readonly Marshaller<Stellar.SCSpecFunctionInputV0EncodeResponse> SCSpecFunctionInputV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecFunctionInputV0EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecFunctionInputV0EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecFunctionInputV0DecodeRequest
            public static readonly Marshaller<Stellar.SCSpecFunctionInputV0DecodeRequest> SCSpecFunctionInputV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecFunctionInputV0DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecFunctionInputV0DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecFunctionInputV0DecodeResponse
            public static readonly Marshaller<Stellar.SCSpecFunctionInputV0DecodeResponse> SCSpecFunctionInputV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecFunctionInputV0DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecFunctionInputV0DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecFunctionV0EncodeRequest
            public static readonly Marshaller<Stellar.SCSpecFunctionV0EncodeRequest> SCSpecFunctionV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecFunctionV0EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecFunctionV0EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecFunctionV0EncodeResponse
            public static readonly Marshaller<Stellar.SCSpecFunctionV0EncodeResponse> SCSpecFunctionV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecFunctionV0EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecFunctionV0EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecFunctionV0DecodeRequest
            public static readonly Marshaller<Stellar.SCSpecFunctionV0DecodeRequest> SCSpecFunctionV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecFunctionV0DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecFunctionV0DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecFunctionV0DecodeResponse
            public static readonly Marshaller<Stellar.SCSpecFunctionV0DecodeResponse> SCSpecFunctionV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecFunctionV0DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecFunctionV0DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecEntryKindEncodeRequest
            public static readonly Marshaller<Stellar.SCSpecEntryKindEncodeRequest> SCSpecEntryKindEncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecEntryKindEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecEntryKindEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecEntryKindEncodeResponse
            public static readonly Marshaller<Stellar.SCSpecEntryKindEncodeResponse> SCSpecEntryKindEncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecEntryKindEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecEntryKindEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecEntryKindDecodeRequest
            public static readonly Marshaller<Stellar.SCSpecEntryKindDecodeRequest> SCSpecEntryKindDecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecEntryKindDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecEntryKindDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecEntryKindDecodeResponse
            public static readonly Marshaller<Stellar.SCSpecEntryKindDecodeResponse> SCSpecEntryKindDecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecEntryKindDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecEntryKindDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecEntryEncodeRequest
            public static readonly Marshaller<Stellar.SCSpecEntryEncodeRequest> SCSpecEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecEntryEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecEntryEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecEntryEncodeResponse
            public static readonly Marshaller<Stellar.SCSpecEntryEncodeResponse> SCSpecEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecEntryEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecEntryEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecEntryDecodeRequest
            public static readonly Marshaller<Stellar.SCSpecEntryDecodeRequest> SCSpecEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.SCSpecEntryDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecEntryDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSpecEntryDecodeResponse
            public static readonly Marshaller<Stellar.SCSpecEntryDecodeResponse> SCSpecEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.SCSpecEntryDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSpecEntryDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCValTypeEncodeRequest
            public static readonly Marshaller<Stellar.SCValTypeEncodeRequest> SCValTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.SCValTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCValTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCValTypeEncodeResponse
            public static readonly Marshaller<Stellar.SCValTypeEncodeResponse> SCValTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.SCValTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCValTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCValTypeDecodeRequest
            public static readonly Marshaller<Stellar.SCValTypeDecodeRequest> SCValTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.SCValTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCValTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCValTypeDecodeResponse
            public static readonly Marshaller<Stellar.SCValTypeDecodeResponse> SCValTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.SCValTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCValTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCErrorTypeEncodeRequest
            public static readonly Marshaller<Stellar.SCErrorTypeEncodeRequest> SCErrorTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.SCErrorTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCErrorTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCErrorTypeEncodeResponse
            public static readonly Marshaller<Stellar.SCErrorTypeEncodeResponse> SCErrorTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.SCErrorTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCErrorTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCErrorTypeDecodeRequest
            public static readonly Marshaller<Stellar.SCErrorTypeDecodeRequest> SCErrorTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.SCErrorTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCErrorTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCErrorTypeDecodeResponse
            public static readonly Marshaller<Stellar.SCErrorTypeDecodeResponse> SCErrorTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.SCErrorTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCErrorTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCErrorCodeEncodeRequest
            public static readonly Marshaller<Stellar.SCErrorCodeEncodeRequest> SCErrorCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.SCErrorCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCErrorCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCErrorCodeEncodeResponse
            public static readonly Marshaller<Stellar.SCErrorCodeEncodeResponse> SCErrorCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.SCErrorCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCErrorCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCErrorCodeDecodeRequest
            public static readonly Marshaller<Stellar.SCErrorCodeDecodeRequest> SCErrorCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.SCErrorCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCErrorCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCErrorCodeDecodeResponse
            public static readonly Marshaller<Stellar.SCErrorCodeDecodeResponse> SCErrorCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.SCErrorCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCErrorCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCErrorEncodeRequest
            public static readonly Marshaller<Stellar.SCErrorEncodeRequest> SCErrorEncodeRequestMarshaller = Marshallers.Create<Stellar.SCErrorEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCErrorEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCErrorEncodeResponse
            public static readonly Marshaller<Stellar.SCErrorEncodeResponse> SCErrorEncodeResponseMarshaller = Marshallers.Create<Stellar.SCErrorEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCErrorEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCErrorDecodeRequest
            public static readonly Marshaller<Stellar.SCErrorDecodeRequest> SCErrorDecodeRequestMarshaller = Marshallers.Create<Stellar.SCErrorDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCErrorDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCErrorDecodeResponse
            public static readonly Marshaller<Stellar.SCErrorDecodeResponse> SCErrorDecodeResponseMarshaller = Marshallers.Create<Stellar.SCErrorDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCErrorDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for UInt128PartsEncodeRequest
            public static readonly Marshaller<Stellar.UInt128PartsEncodeRequest> UInt128PartsEncodeRequestMarshaller = Marshallers.Create<Stellar.UInt128PartsEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.UInt128PartsEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for UInt128PartsEncodeResponse
            public static readonly Marshaller<Stellar.UInt128PartsEncodeResponse> UInt128PartsEncodeResponseMarshaller = Marshallers.Create<Stellar.UInt128PartsEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.UInt128PartsEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for UInt128PartsDecodeRequest
            public static readonly Marshaller<Stellar.UInt128PartsDecodeRequest> UInt128PartsDecodeRequestMarshaller = Marshallers.Create<Stellar.UInt128PartsDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.UInt128PartsDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for UInt128PartsDecodeResponse
            public static readonly Marshaller<Stellar.UInt128PartsDecodeResponse> UInt128PartsDecodeResponseMarshaller = Marshallers.Create<Stellar.UInt128PartsDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.UInt128PartsDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for Int128PartsEncodeRequest
            public static readonly Marshaller<Stellar.Int128PartsEncodeRequest> Int128PartsEncodeRequestMarshaller = Marshallers.Create<Stellar.Int128PartsEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.Int128PartsEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for Int128PartsEncodeResponse
            public static readonly Marshaller<Stellar.Int128PartsEncodeResponse> Int128PartsEncodeResponseMarshaller = Marshallers.Create<Stellar.Int128PartsEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.Int128PartsEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for Int128PartsDecodeRequest
            public static readonly Marshaller<Stellar.Int128PartsDecodeRequest> Int128PartsDecodeRequestMarshaller = Marshallers.Create<Stellar.Int128PartsDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.Int128PartsDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for Int128PartsDecodeResponse
            public static readonly Marshaller<Stellar.Int128PartsDecodeResponse> Int128PartsDecodeResponseMarshaller = Marshallers.Create<Stellar.Int128PartsDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.Int128PartsDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for UInt256PartsEncodeRequest
            public static readonly Marshaller<Stellar.UInt256PartsEncodeRequest> UInt256PartsEncodeRequestMarshaller = Marshallers.Create<Stellar.UInt256PartsEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.UInt256PartsEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for UInt256PartsEncodeResponse
            public static readonly Marshaller<Stellar.UInt256PartsEncodeResponse> UInt256PartsEncodeResponseMarshaller = Marshallers.Create<Stellar.UInt256PartsEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.UInt256PartsEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for UInt256PartsDecodeRequest
            public static readonly Marshaller<Stellar.UInt256PartsDecodeRequest> UInt256PartsDecodeRequestMarshaller = Marshallers.Create<Stellar.UInt256PartsDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.UInt256PartsDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for UInt256PartsDecodeResponse
            public static readonly Marshaller<Stellar.UInt256PartsDecodeResponse> UInt256PartsDecodeResponseMarshaller = Marshallers.Create<Stellar.UInt256PartsDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.UInt256PartsDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for Int256PartsEncodeRequest
            public static readonly Marshaller<Stellar.Int256PartsEncodeRequest> Int256PartsEncodeRequestMarshaller = Marshallers.Create<Stellar.Int256PartsEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.Int256PartsEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for Int256PartsEncodeResponse
            public static readonly Marshaller<Stellar.Int256PartsEncodeResponse> Int256PartsEncodeResponseMarshaller = Marshallers.Create<Stellar.Int256PartsEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.Int256PartsEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for Int256PartsDecodeRequest
            public static readonly Marshaller<Stellar.Int256PartsDecodeRequest> Int256PartsDecodeRequestMarshaller = Marshallers.Create<Stellar.Int256PartsDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.Int256PartsDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for Int256PartsDecodeResponse
            public static readonly Marshaller<Stellar.Int256PartsDecodeResponse> Int256PartsDecodeResponseMarshaller = Marshallers.Create<Stellar.Int256PartsDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.Int256PartsDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractExecutableTypeEncodeRequest
            public static readonly Marshaller<Stellar.ContractExecutableTypeEncodeRequest> ContractExecutableTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.ContractExecutableTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractExecutableTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractExecutableTypeEncodeResponse
            public static readonly Marshaller<Stellar.ContractExecutableTypeEncodeResponse> ContractExecutableTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.ContractExecutableTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractExecutableTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractExecutableTypeDecodeRequest
            public static readonly Marshaller<Stellar.ContractExecutableTypeDecodeRequest> ContractExecutableTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.ContractExecutableTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractExecutableTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractExecutableTypeDecodeResponse
            public static readonly Marshaller<Stellar.ContractExecutableTypeDecodeResponse> ContractExecutableTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.ContractExecutableTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractExecutableTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractExecutableEncodeRequest
            public static readonly Marshaller<Stellar.ContractExecutableEncodeRequest> ContractExecutableEncodeRequestMarshaller = Marshallers.Create<Stellar.ContractExecutableEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractExecutableEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractExecutableEncodeResponse
            public static readonly Marshaller<Stellar.ContractExecutableEncodeResponse> ContractExecutableEncodeResponseMarshaller = Marshallers.Create<Stellar.ContractExecutableEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractExecutableEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractExecutableDecodeRequest
            public static readonly Marshaller<Stellar.ContractExecutableDecodeRequest> ContractExecutableDecodeRequestMarshaller = Marshallers.Create<Stellar.ContractExecutableDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractExecutableDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractExecutableDecodeResponse
            public static readonly Marshaller<Stellar.ContractExecutableDecodeResponse> ContractExecutableDecodeResponseMarshaller = Marshallers.Create<Stellar.ContractExecutableDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractExecutableDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCAddressTypeEncodeRequest
            public static readonly Marshaller<Stellar.SCAddressTypeEncodeRequest> SCAddressTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.SCAddressTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCAddressTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCAddressTypeEncodeResponse
            public static readonly Marshaller<Stellar.SCAddressTypeEncodeResponse> SCAddressTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.SCAddressTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCAddressTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCAddressTypeDecodeRequest
            public static readonly Marshaller<Stellar.SCAddressTypeDecodeRequest> SCAddressTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.SCAddressTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCAddressTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCAddressTypeDecodeResponse
            public static readonly Marshaller<Stellar.SCAddressTypeDecodeResponse> SCAddressTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.SCAddressTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCAddressTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCAddressEncodeRequest
            public static readonly Marshaller<Stellar.SCAddressEncodeRequest> SCAddressEncodeRequestMarshaller = Marshallers.Create<Stellar.SCAddressEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCAddressEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCAddressEncodeResponse
            public static readonly Marshaller<Stellar.SCAddressEncodeResponse> SCAddressEncodeResponseMarshaller = Marshallers.Create<Stellar.SCAddressEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCAddressEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCAddressDecodeRequest
            public static readonly Marshaller<Stellar.SCAddressDecodeRequest> SCAddressDecodeRequestMarshaller = Marshallers.Create<Stellar.SCAddressDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCAddressDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCAddressDecodeResponse
            public static readonly Marshaller<Stellar.SCAddressDecodeResponse> SCAddressDecodeResponseMarshaller = Marshallers.Create<Stellar.SCAddressDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCAddressDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCVecEncodeRequest
            public static readonly Marshaller<Stellar.SCVecEncodeRequest> SCVecEncodeRequestMarshaller = Marshallers.Create<Stellar.SCVecEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCVecEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCVecEncodeResponse
            public static readonly Marshaller<Stellar.SCVecEncodeResponse> SCVecEncodeResponseMarshaller = Marshallers.Create<Stellar.SCVecEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCVecEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCVecDecodeRequest
            public static readonly Marshaller<Stellar.SCVecDecodeRequest> SCVecDecodeRequestMarshaller = Marshallers.Create<Stellar.SCVecDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCVecDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCVecDecodeResponse
            public static readonly Marshaller<Stellar.SCVecDecodeResponse> SCVecDecodeResponseMarshaller = Marshallers.Create<Stellar.SCVecDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCVecDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCMapEncodeRequest
            public static readonly Marshaller<Stellar.SCMapEncodeRequest> SCMapEncodeRequestMarshaller = Marshallers.Create<Stellar.SCMapEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCMapEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCMapEncodeResponse
            public static readonly Marshaller<Stellar.SCMapEncodeResponse> SCMapEncodeResponseMarshaller = Marshallers.Create<Stellar.SCMapEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCMapEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCMapDecodeRequest
            public static readonly Marshaller<Stellar.SCMapDecodeRequest> SCMapDecodeRequestMarshaller = Marshallers.Create<Stellar.SCMapDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCMapDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCMapDecodeResponse
            public static readonly Marshaller<Stellar.SCMapDecodeResponse> SCMapDecodeResponseMarshaller = Marshallers.Create<Stellar.SCMapDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCMapDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCBytesEncodeRequest
            public static readonly Marshaller<Stellar.SCBytesEncodeRequest> SCBytesEncodeRequestMarshaller = Marshallers.Create<Stellar.SCBytesEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCBytesEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCBytesEncodeResponse
            public static readonly Marshaller<Stellar.SCBytesEncodeResponse> SCBytesEncodeResponseMarshaller = Marshallers.Create<Stellar.SCBytesEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCBytesEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCBytesDecodeRequest
            public static readonly Marshaller<Stellar.SCBytesDecodeRequest> SCBytesDecodeRequestMarshaller = Marshallers.Create<Stellar.SCBytesDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCBytesDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCBytesDecodeResponse
            public static readonly Marshaller<Stellar.SCBytesDecodeResponse> SCBytesDecodeResponseMarshaller = Marshallers.Create<Stellar.SCBytesDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCBytesDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCStringEncodeRequest
            public static readonly Marshaller<Stellar.SCStringEncodeRequest> SCStringEncodeRequestMarshaller = Marshallers.Create<Stellar.SCStringEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCStringEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCStringEncodeResponse
            public static readonly Marshaller<Stellar.SCStringEncodeResponse> SCStringEncodeResponseMarshaller = Marshallers.Create<Stellar.SCStringEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCStringEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCStringDecodeRequest
            public static readonly Marshaller<Stellar.SCStringDecodeRequest> SCStringDecodeRequestMarshaller = Marshallers.Create<Stellar.SCStringDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCStringDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCStringDecodeResponse
            public static readonly Marshaller<Stellar.SCStringDecodeResponse> SCStringDecodeResponseMarshaller = Marshallers.Create<Stellar.SCStringDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCStringDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSymbolEncodeRequest
            public static readonly Marshaller<Stellar.SCSymbolEncodeRequest> SCSymbolEncodeRequestMarshaller = Marshallers.Create<Stellar.SCSymbolEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSymbolEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSymbolEncodeResponse
            public static readonly Marshaller<Stellar.SCSymbolEncodeResponse> SCSymbolEncodeResponseMarshaller = Marshallers.Create<Stellar.SCSymbolEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSymbolEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSymbolDecodeRequest
            public static readonly Marshaller<Stellar.SCSymbolDecodeRequest> SCSymbolDecodeRequestMarshaller = Marshallers.Create<Stellar.SCSymbolDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSymbolDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCSymbolDecodeResponse
            public static readonly Marshaller<Stellar.SCSymbolDecodeResponse> SCSymbolDecodeResponseMarshaller = Marshallers.Create<Stellar.SCSymbolDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCSymbolDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCNonceKeyEncodeRequest
            public static readonly Marshaller<Stellar.SCNonceKeyEncodeRequest> SCNonceKeyEncodeRequestMarshaller = Marshallers.Create<Stellar.SCNonceKeyEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCNonceKeyEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCNonceKeyEncodeResponse
            public static readonly Marshaller<Stellar.SCNonceKeyEncodeResponse> SCNonceKeyEncodeResponseMarshaller = Marshallers.Create<Stellar.SCNonceKeyEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCNonceKeyEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCNonceKeyDecodeRequest
            public static readonly Marshaller<Stellar.SCNonceKeyDecodeRequest> SCNonceKeyDecodeRequestMarshaller = Marshallers.Create<Stellar.SCNonceKeyDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCNonceKeyDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCNonceKeyDecodeResponse
            public static readonly Marshaller<Stellar.SCNonceKeyDecodeResponse> SCNonceKeyDecodeResponseMarshaller = Marshallers.Create<Stellar.SCNonceKeyDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCNonceKeyDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCContractInstanceEncodeRequest
            public static readonly Marshaller<Stellar.SCContractInstanceEncodeRequest> SCContractInstanceEncodeRequestMarshaller = Marshallers.Create<Stellar.SCContractInstanceEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCContractInstanceEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCContractInstanceEncodeResponse
            public static readonly Marshaller<Stellar.SCContractInstanceEncodeResponse> SCContractInstanceEncodeResponseMarshaller = Marshallers.Create<Stellar.SCContractInstanceEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCContractInstanceEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCContractInstanceDecodeRequest
            public static readonly Marshaller<Stellar.SCContractInstanceDecodeRequest> SCContractInstanceDecodeRequestMarshaller = Marshallers.Create<Stellar.SCContractInstanceDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCContractInstanceDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCContractInstanceDecodeResponse
            public static readonly Marshaller<Stellar.SCContractInstanceDecodeResponse> SCContractInstanceDecodeResponseMarshaller = Marshallers.Create<Stellar.SCContractInstanceDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCContractInstanceDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCValEncodeRequest
            public static readonly Marshaller<Stellar.SCValEncodeRequest> SCValEncodeRequestMarshaller = Marshallers.Create<Stellar.SCValEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCValEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCValEncodeResponse
            public static readonly Marshaller<Stellar.SCValEncodeResponse> SCValEncodeResponseMarshaller = Marshallers.Create<Stellar.SCValEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCValEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCValDecodeRequest
            public static readonly Marshaller<Stellar.SCValDecodeRequest> SCValDecodeRequestMarshaller = Marshallers.Create<Stellar.SCValDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCValDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCValDecodeResponse
            public static readonly Marshaller<Stellar.SCValDecodeResponse> SCValDecodeResponseMarshaller = Marshallers.Create<Stellar.SCValDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCValDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCMapEntryEncodeRequest
            public static readonly Marshaller<Stellar.SCMapEntryEncodeRequest> SCMapEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.SCMapEntryEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCMapEntryEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCMapEntryEncodeResponse
            public static readonly Marshaller<Stellar.SCMapEntryEncodeResponse> SCMapEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.SCMapEntryEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCMapEntryEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCMapEntryDecodeRequest
            public static readonly Marshaller<Stellar.SCMapEntryDecodeRequest> SCMapEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.SCMapEntryDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCMapEntryDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCMapEntryDecodeResponse
            public static readonly Marshaller<Stellar.SCMapEntryDecodeResponse> SCMapEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.SCMapEntryDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCMapEntryDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for StoredTransactionSetEncodeRequest
            public static readonly Marshaller<Stellar.StoredTransactionSetEncodeRequest> StoredTransactionSetEncodeRequestMarshaller = Marshallers.Create<Stellar.StoredTransactionSetEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.StoredTransactionSetEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for StoredTransactionSetEncodeResponse
            public static readonly Marshaller<Stellar.StoredTransactionSetEncodeResponse> StoredTransactionSetEncodeResponseMarshaller = Marshallers.Create<Stellar.StoredTransactionSetEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.StoredTransactionSetEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for StoredTransactionSetDecodeRequest
            public static readonly Marshaller<Stellar.StoredTransactionSetDecodeRequest> StoredTransactionSetDecodeRequestMarshaller = Marshallers.Create<Stellar.StoredTransactionSetDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.StoredTransactionSetDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for StoredTransactionSetDecodeResponse
            public static readonly Marshaller<Stellar.StoredTransactionSetDecodeResponse> StoredTransactionSetDecodeResponseMarshaller = Marshallers.Create<Stellar.StoredTransactionSetDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.StoredTransactionSetDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for StoredDebugTransactionSetEncodeRequest
            public static readonly Marshaller<Stellar.StoredDebugTransactionSetEncodeRequest> StoredDebugTransactionSetEncodeRequestMarshaller = Marshallers.Create<Stellar.StoredDebugTransactionSetEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.StoredDebugTransactionSetEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for StoredDebugTransactionSetEncodeResponse
            public static readonly Marshaller<Stellar.StoredDebugTransactionSetEncodeResponse> StoredDebugTransactionSetEncodeResponseMarshaller = Marshallers.Create<Stellar.StoredDebugTransactionSetEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.StoredDebugTransactionSetEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for StoredDebugTransactionSetDecodeRequest
            public static readonly Marshaller<Stellar.StoredDebugTransactionSetDecodeRequest> StoredDebugTransactionSetDecodeRequestMarshaller = Marshallers.Create<Stellar.StoredDebugTransactionSetDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.StoredDebugTransactionSetDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for StoredDebugTransactionSetDecodeResponse
            public static readonly Marshaller<Stellar.StoredDebugTransactionSetDecodeResponse> StoredDebugTransactionSetDecodeResponseMarshaller = Marshallers.Create<Stellar.StoredDebugTransactionSetDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.StoredDebugTransactionSetDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PersistedSCPStateV0EncodeRequest
            public static readonly Marshaller<Stellar.PersistedSCPStateV0EncodeRequest> PersistedSCPStateV0EncodeRequestMarshaller = Marshallers.Create<Stellar.PersistedSCPStateV0EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PersistedSCPStateV0EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PersistedSCPStateV0EncodeResponse
            public static readonly Marshaller<Stellar.PersistedSCPStateV0EncodeResponse> PersistedSCPStateV0EncodeResponseMarshaller = Marshallers.Create<Stellar.PersistedSCPStateV0EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PersistedSCPStateV0EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PersistedSCPStateV0DecodeRequest
            public static readonly Marshaller<Stellar.PersistedSCPStateV0DecodeRequest> PersistedSCPStateV0DecodeRequestMarshaller = Marshallers.Create<Stellar.PersistedSCPStateV0DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PersistedSCPStateV0DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PersistedSCPStateV0DecodeResponse
            public static readonly Marshaller<Stellar.PersistedSCPStateV0DecodeResponse> PersistedSCPStateV0DecodeResponseMarshaller = Marshallers.Create<Stellar.PersistedSCPStateV0DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PersistedSCPStateV0DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PersistedSCPStateV1EncodeRequest
            public static readonly Marshaller<Stellar.PersistedSCPStateV1EncodeRequest> PersistedSCPStateV1EncodeRequestMarshaller = Marshallers.Create<Stellar.PersistedSCPStateV1EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PersistedSCPStateV1EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PersistedSCPStateV1EncodeResponse
            public static readonly Marshaller<Stellar.PersistedSCPStateV1EncodeResponse> PersistedSCPStateV1EncodeResponseMarshaller = Marshallers.Create<Stellar.PersistedSCPStateV1EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PersistedSCPStateV1EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PersistedSCPStateV1DecodeRequest
            public static readonly Marshaller<Stellar.PersistedSCPStateV1DecodeRequest> PersistedSCPStateV1DecodeRequestMarshaller = Marshallers.Create<Stellar.PersistedSCPStateV1DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PersistedSCPStateV1DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PersistedSCPStateV1DecodeResponse
            public static readonly Marshaller<Stellar.PersistedSCPStateV1DecodeResponse> PersistedSCPStateV1DecodeResponseMarshaller = Marshallers.Create<Stellar.PersistedSCPStateV1DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PersistedSCPStateV1DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PersistedSCPStateEncodeRequest
            public static readonly Marshaller<Stellar.PersistedSCPStateEncodeRequest> PersistedSCPStateEncodeRequestMarshaller = Marshallers.Create<Stellar.PersistedSCPStateEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PersistedSCPStateEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PersistedSCPStateEncodeResponse
            public static readonly Marshaller<Stellar.PersistedSCPStateEncodeResponse> PersistedSCPStateEncodeResponseMarshaller = Marshallers.Create<Stellar.PersistedSCPStateEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PersistedSCPStateEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PersistedSCPStateDecodeRequest
            public static readonly Marshaller<Stellar.PersistedSCPStateDecodeRequest> PersistedSCPStateDecodeRequestMarshaller = Marshallers.Create<Stellar.PersistedSCPStateDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PersistedSCPStateDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PersistedSCPStateDecodeResponse
            public static readonly Marshaller<Stellar.PersistedSCPStateDecodeResponse> PersistedSCPStateDecodeResponseMarshaller = Marshallers.Create<Stellar.PersistedSCPStateDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PersistedSCPStateDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ThresholdsEncodeRequest
            public static readonly Marshaller<Stellar.ThresholdsEncodeRequest> ThresholdsEncodeRequestMarshaller = Marshallers.Create<Stellar.ThresholdsEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ThresholdsEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ThresholdsEncodeResponse
            public static readonly Marshaller<Stellar.ThresholdsEncodeResponse> ThresholdsEncodeResponseMarshaller = Marshallers.Create<Stellar.ThresholdsEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ThresholdsEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ThresholdsDecodeRequest
            public static readonly Marshaller<Stellar.ThresholdsDecodeRequest> ThresholdsDecodeRequestMarshaller = Marshallers.Create<Stellar.ThresholdsDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ThresholdsDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ThresholdsDecodeResponse
            public static readonly Marshaller<Stellar.ThresholdsDecodeResponse> ThresholdsDecodeResponseMarshaller = Marshallers.Create<Stellar.ThresholdsDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ThresholdsDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for string32EncodeRequest
            public static readonly Marshaller<Stellar.string32EncodeRequest> string32EncodeRequestMarshaller = Marshallers.Create<Stellar.string32EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.string32EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for string32EncodeResponse
            public static readonly Marshaller<Stellar.string32EncodeResponse> string32EncodeResponseMarshaller = Marshallers.Create<Stellar.string32EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.string32EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for string32DecodeRequest
            public static readonly Marshaller<Stellar.string32DecodeRequest> string32DecodeRequestMarshaller = Marshallers.Create<Stellar.string32DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.string32DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for string32DecodeResponse
            public static readonly Marshaller<Stellar.string32DecodeResponse> string32DecodeResponseMarshaller = Marshallers.Create<Stellar.string32DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.string32DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for string64EncodeRequest
            public static readonly Marshaller<Stellar.string64EncodeRequest> string64EncodeRequestMarshaller = Marshallers.Create<Stellar.string64EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.string64EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for string64EncodeResponse
            public static readonly Marshaller<Stellar.string64EncodeResponse> string64EncodeResponseMarshaller = Marshallers.Create<Stellar.string64EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.string64EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for string64DecodeRequest
            public static readonly Marshaller<Stellar.string64DecodeRequest> string64DecodeRequestMarshaller = Marshallers.Create<Stellar.string64DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.string64DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for string64DecodeResponse
            public static readonly Marshaller<Stellar.string64DecodeResponse> string64DecodeResponseMarshaller = Marshallers.Create<Stellar.string64DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.string64DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SequenceNumberEncodeRequest
            public static readonly Marshaller<Stellar.SequenceNumberEncodeRequest> SequenceNumberEncodeRequestMarshaller = Marshallers.Create<Stellar.SequenceNumberEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SequenceNumberEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SequenceNumberEncodeResponse
            public static readonly Marshaller<Stellar.SequenceNumberEncodeResponse> SequenceNumberEncodeResponseMarshaller = Marshallers.Create<Stellar.SequenceNumberEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SequenceNumberEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SequenceNumberDecodeRequest
            public static readonly Marshaller<Stellar.SequenceNumberDecodeRequest> SequenceNumberDecodeRequestMarshaller = Marshallers.Create<Stellar.SequenceNumberDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SequenceNumberDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SequenceNumberDecodeResponse
            public static readonly Marshaller<Stellar.SequenceNumberDecodeResponse> SequenceNumberDecodeResponseMarshaller = Marshallers.Create<Stellar.SequenceNumberDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SequenceNumberDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DataValueEncodeRequest
            public static readonly Marshaller<Stellar.DataValueEncodeRequest> DataValueEncodeRequestMarshaller = Marshallers.Create<Stellar.DataValueEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DataValueEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DataValueEncodeResponse
            public static readonly Marshaller<Stellar.DataValueEncodeResponse> DataValueEncodeResponseMarshaller = Marshallers.Create<Stellar.DataValueEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DataValueEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DataValueDecodeRequest
            public static readonly Marshaller<Stellar.DataValueDecodeRequest> DataValueDecodeRequestMarshaller = Marshallers.Create<Stellar.DataValueDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DataValueDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DataValueDecodeResponse
            public static readonly Marshaller<Stellar.DataValueDecodeResponse> DataValueDecodeResponseMarshaller = Marshallers.Create<Stellar.DataValueDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DataValueDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PoolIDEncodeRequest
            public static readonly Marshaller<Stellar.PoolIDEncodeRequest> PoolIDEncodeRequestMarshaller = Marshallers.Create<Stellar.PoolIDEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PoolIDEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PoolIDEncodeResponse
            public static readonly Marshaller<Stellar.PoolIDEncodeResponse> PoolIDEncodeResponseMarshaller = Marshallers.Create<Stellar.PoolIDEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PoolIDEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PoolIDDecodeRequest
            public static readonly Marshaller<Stellar.PoolIDDecodeRequest> PoolIDDecodeRequestMarshaller = Marshallers.Create<Stellar.PoolIDDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PoolIDDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PoolIDDecodeResponse
            public static readonly Marshaller<Stellar.PoolIDDecodeResponse> PoolIDDecodeResponseMarshaller = Marshallers.Create<Stellar.PoolIDDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PoolIDDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AssetCode4EncodeRequest
            public static readonly Marshaller<Stellar.AssetCode4EncodeRequest> AssetCode4EncodeRequestMarshaller = Marshallers.Create<Stellar.AssetCode4EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AssetCode4EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AssetCode4EncodeResponse
            public static readonly Marshaller<Stellar.AssetCode4EncodeResponse> AssetCode4EncodeResponseMarshaller = Marshallers.Create<Stellar.AssetCode4EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AssetCode4EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AssetCode4DecodeRequest
            public static readonly Marshaller<Stellar.AssetCode4DecodeRequest> AssetCode4DecodeRequestMarshaller = Marshallers.Create<Stellar.AssetCode4DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AssetCode4DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AssetCode4DecodeResponse
            public static readonly Marshaller<Stellar.AssetCode4DecodeResponse> AssetCode4DecodeResponseMarshaller = Marshallers.Create<Stellar.AssetCode4DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AssetCode4DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AssetCode12EncodeRequest
            public static readonly Marshaller<Stellar.AssetCode12EncodeRequest> AssetCode12EncodeRequestMarshaller = Marshallers.Create<Stellar.AssetCode12EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AssetCode12EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AssetCode12EncodeResponse
            public static readonly Marshaller<Stellar.AssetCode12EncodeResponse> AssetCode12EncodeResponseMarshaller = Marshallers.Create<Stellar.AssetCode12EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AssetCode12EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AssetCode12DecodeRequest
            public static readonly Marshaller<Stellar.AssetCode12DecodeRequest> AssetCode12DecodeRequestMarshaller = Marshallers.Create<Stellar.AssetCode12DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AssetCode12DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AssetCode12DecodeResponse
            public static readonly Marshaller<Stellar.AssetCode12DecodeResponse> AssetCode12DecodeResponseMarshaller = Marshallers.Create<Stellar.AssetCode12DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AssetCode12DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AssetTypeEncodeRequest
            public static readonly Marshaller<Stellar.AssetTypeEncodeRequest> AssetTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.AssetTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AssetTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AssetTypeEncodeResponse
            public static readonly Marshaller<Stellar.AssetTypeEncodeResponse> AssetTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.AssetTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AssetTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AssetTypeDecodeRequest
            public static readonly Marshaller<Stellar.AssetTypeDecodeRequest> AssetTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.AssetTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AssetTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AssetTypeDecodeResponse
            public static readonly Marshaller<Stellar.AssetTypeDecodeResponse> AssetTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.AssetTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AssetTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AssetCodeEncodeRequest
            public static readonly Marshaller<Stellar.AssetCodeEncodeRequest> AssetCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.AssetCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AssetCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AssetCodeEncodeResponse
            public static readonly Marshaller<Stellar.AssetCodeEncodeResponse> AssetCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.AssetCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AssetCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AssetCodeDecodeRequest
            public static readonly Marshaller<Stellar.AssetCodeDecodeRequest> AssetCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.AssetCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AssetCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AssetCodeDecodeResponse
            public static readonly Marshaller<Stellar.AssetCodeDecodeResponse> AssetCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.AssetCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AssetCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AlphaNum4EncodeRequest
            public static readonly Marshaller<Stellar.AlphaNum4EncodeRequest> AlphaNum4EncodeRequestMarshaller = Marshallers.Create<Stellar.AlphaNum4EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AlphaNum4EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AlphaNum4EncodeResponse
            public static readonly Marshaller<Stellar.AlphaNum4EncodeResponse> AlphaNum4EncodeResponseMarshaller = Marshallers.Create<Stellar.AlphaNum4EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AlphaNum4EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AlphaNum4DecodeRequest
            public static readonly Marshaller<Stellar.AlphaNum4DecodeRequest> AlphaNum4DecodeRequestMarshaller = Marshallers.Create<Stellar.AlphaNum4DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AlphaNum4DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AlphaNum4DecodeResponse
            public static readonly Marshaller<Stellar.AlphaNum4DecodeResponse> AlphaNum4DecodeResponseMarshaller = Marshallers.Create<Stellar.AlphaNum4DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AlphaNum4DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AlphaNum12EncodeRequest
            public static readonly Marshaller<Stellar.AlphaNum12EncodeRequest> AlphaNum12EncodeRequestMarshaller = Marshallers.Create<Stellar.AlphaNum12EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AlphaNum12EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AlphaNum12EncodeResponse
            public static readonly Marshaller<Stellar.AlphaNum12EncodeResponse> AlphaNum12EncodeResponseMarshaller = Marshallers.Create<Stellar.AlphaNum12EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AlphaNum12EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AlphaNum12DecodeRequest
            public static readonly Marshaller<Stellar.AlphaNum12DecodeRequest> AlphaNum12DecodeRequestMarshaller = Marshallers.Create<Stellar.AlphaNum12DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AlphaNum12DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AlphaNum12DecodeResponse
            public static readonly Marshaller<Stellar.AlphaNum12DecodeResponse> AlphaNum12DecodeResponseMarshaller = Marshallers.Create<Stellar.AlphaNum12DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AlphaNum12DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AssetEncodeRequest
            public static readonly Marshaller<Stellar.AssetEncodeRequest> AssetEncodeRequestMarshaller = Marshallers.Create<Stellar.AssetEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AssetEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AssetEncodeResponse
            public static readonly Marshaller<Stellar.AssetEncodeResponse> AssetEncodeResponseMarshaller = Marshallers.Create<Stellar.AssetEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AssetEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AssetDecodeRequest
            public static readonly Marshaller<Stellar.AssetDecodeRequest> AssetDecodeRequestMarshaller = Marshallers.Create<Stellar.AssetDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AssetDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AssetDecodeResponse
            public static readonly Marshaller<Stellar.AssetDecodeResponse> AssetDecodeResponseMarshaller = Marshallers.Create<Stellar.AssetDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AssetDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PriceEncodeRequest
            public static readonly Marshaller<Stellar.PriceEncodeRequest> PriceEncodeRequestMarshaller = Marshallers.Create<Stellar.PriceEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PriceEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PriceEncodeResponse
            public static readonly Marshaller<Stellar.PriceEncodeResponse> PriceEncodeResponseMarshaller = Marshallers.Create<Stellar.PriceEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PriceEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PriceDecodeRequest
            public static readonly Marshaller<Stellar.PriceDecodeRequest> PriceDecodeRequestMarshaller = Marshallers.Create<Stellar.PriceDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PriceDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PriceDecodeResponse
            public static readonly Marshaller<Stellar.PriceDecodeResponse> PriceDecodeResponseMarshaller = Marshallers.Create<Stellar.PriceDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PriceDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiabilitiesEncodeRequest
            public static readonly Marshaller<Stellar.LiabilitiesEncodeRequest> LiabilitiesEncodeRequestMarshaller = Marshallers.Create<Stellar.LiabilitiesEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiabilitiesEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiabilitiesEncodeResponse
            public static readonly Marshaller<Stellar.LiabilitiesEncodeResponse> LiabilitiesEncodeResponseMarshaller = Marshallers.Create<Stellar.LiabilitiesEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiabilitiesEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiabilitiesDecodeRequest
            public static readonly Marshaller<Stellar.LiabilitiesDecodeRequest> LiabilitiesDecodeRequestMarshaller = Marshallers.Create<Stellar.LiabilitiesDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiabilitiesDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiabilitiesDecodeResponse
            public static readonly Marshaller<Stellar.LiabilitiesDecodeResponse> LiabilitiesDecodeResponseMarshaller = Marshallers.Create<Stellar.LiabilitiesDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiabilitiesDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ThresholdIndexesEncodeRequest
            public static readonly Marshaller<Stellar.ThresholdIndexesEncodeRequest> ThresholdIndexesEncodeRequestMarshaller = Marshallers.Create<Stellar.ThresholdIndexesEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ThresholdIndexesEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ThresholdIndexesEncodeResponse
            public static readonly Marshaller<Stellar.ThresholdIndexesEncodeResponse> ThresholdIndexesEncodeResponseMarshaller = Marshallers.Create<Stellar.ThresholdIndexesEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ThresholdIndexesEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ThresholdIndexesDecodeRequest
            public static readonly Marshaller<Stellar.ThresholdIndexesDecodeRequest> ThresholdIndexesDecodeRequestMarshaller = Marshallers.Create<Stellar.ThresholdIndexesDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ThresholdIndexesDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ThresholdIndexesDecodeResponse
            public static readonly Marshaller<Stellar.ThresholdIndexesDecodeResponse> ThresholdIndexesDecodeResponseMarshaller = Marshallers.Create<Stellar.ThresholdIndexesDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ThresholdIndexesDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerEntryTypeEncodeRequest
            public static readonly Marshaller<Stellar.LedgerEntryTypeEncodeRequest> LedgerEntryTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerEntryTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerEntryTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerEntryTypeEncodeResponse
            public static readonly Marshaller<Stellar.LedgerEntryTypeEncodeResponse> LedgerEntryTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerEntryTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerEntryTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerEntryTypeDecodeRequest
            public static readonly Marshaller<Stellar.LedgerEntryTypeDecodeRequest> LedgerEntryTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerEntryTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerEntryTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerEntryTypeDecodeResponse
            public static readonly Marshaller<Stellar.LedgerEntryTypeDecodeResponse> LedgerEntryTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerEntryTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerEntryTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignerEncodeRequest
            public static readonly Marshaller<Stellar.SignerEncodeRequest> SignerEncodeRequestMarshaller = Marshallers.Create<Stellar.SignerEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignerEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignerEncodeResponse
            public static readonly Marshaller<Stellar.SignerEncodeResponse> SignerEncodeResponseMarshaller = Marshallers.Create<Stellar.SignerEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignerEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignerDecodeRequest
            public static readonly Marshaller<Stellar.SignerDecodeRequest> SignerDecodeRequestMarshaller = Marshallers.Create<Stellar.SignerDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignerDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignerDecodeResponse
            public static readonly Marshaller<Stellar.SignerDecodeResponse> SignerDecodeResponseMarshaller = Marshallers.Create<Stellar.SignerDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignerDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountFlagsEncodeRequest
            public static readonly Marshaller<Stellar.AccountFlagsEncodeRequest> AccountFlagsEncodeRequestMarshaller = Marshallers.Create<Stellar.AccountFlagsEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountFlagsEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountFlagsEncodeResponse
            public static readonly Marshaller<Stellar.AccountFlagsEncodeResponse> AccountFlagsEncodeResponseMarshaller = Marshallers.Create<Stellar.AccountFlagsEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountFlagsEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountFlagsDecodeRequest
            public static readonly Marshaller<Stellar.AccountFlagsDecodeRequest> AccountFlagsDecodeRequestMarshaller = Marshallers.Create<Stellar.AccountFlagsDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountFlagsDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountFlagsDecodeResponse
            public static readonly Marshaller<Stellar.AccountFlagsDecodeResponse> AccountFlagsDecodeResponseMarshaller = Marshallers.Create<Stellar.AccountFlagsDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountFlagsDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SponsorshipDescriptorEncodeRequest
            public static readonly Marshaller<Stellar.SponsorshipDescriptorEncodeRequest> SponsorshipDescriptorEncodeRequestMarshaller = Marshallers.Create<Stellar.SponsorshipDescriptorEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SponsorshipDescriptorEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SponsorshipDescriptorEncodeResponse
            public static readonly Marshaller<Stellar.SponsorshipDescriptorEncodeResponse> SponsorshipDescriptorEncodeResponseMarshaller = Marshallers.Create<Stellar.SponsorshipDescriptorEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SponsorshipDescriptorEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SponsorshipDescriptorDecodeRequest
            public static readonly Marshaller<Stellar.SponsorshipDescriptorDecodeRequest> SponsorshipDescriptorDecodeRequestMarshaller = Marshallers.Create<Stellar.SponsorshipDescriptorDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SponsorshipDescriptorDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SponsorshipDescriptorDecodeResponse
            public static readonly Marshaller<Stellar.SponsorshipDescriptorDecodeResponse> SponsorshipDescriptorDecodeResponseMarshaller = Marshallers.Create<Stellar.SponsorshipDescriptorDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SponsorshipDescriptorDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountEntryExtensionV3EncodeRequest
            public static readonly Marshaller<Stellar.AccountEntryExtensionV3EncodeRequest> AccountEntryExtensionV3EncodeRequestMarshaller = Marshallers.Create<Stellar.AccountEntryExtensionV3EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountEntryExtensionV3EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountEntryExtensionV3EncodeResponse
            public static readonly Marshaller<Stellar.AccountEntryExtensionV3EncodeResponse> AccountEntryExtensionV3EncodeResponseMarshaller = Marshallers.Create<Stellar.AccountEntryExtensionV3EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountEntryExtensionV3EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountEntryExtensionV3DecodeRequest
            public static readonly Marshaller<Stellar.AccountEntryExtensionV3DecodeRequest> AccountEntryExtensionV3DecodeRequestMarshaller = Marshallers.Create<Stellar.AccountEntryExtensionV3DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountEntryExtensionV3DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountEntryExtensionV3DecodeResponse
            public static readonly Marshaller<Stellar.AccountEntryExtensionV3DecodeResponse> AccountEntryExtensionV3DecodeResponseMarshaller = Marshallers.Create<Stellar.AccountEntryExtensionV3DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountEntryExtensionV3DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountEntryExtensionV2EncodeRequest
            public static readonly Marshaller<Stellar.AccountEntryExtensionV2EncodeRequest> AccountEntryExtensionV2EncodeRequestMarshaller = Marshallers.Create<Stellar.AccountEntryExtensionV2EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountEntryExtensionV2EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountEntryExtensionV2EncodeResponse
            public static readonly Marshaller<Stellar.AccountEntryExtensionV2EncodeResponse> AccountEntryExtensionV2EncodeResponseMarshaller = Marshallers.Create<Stellar.AccountEntryExtensionV2EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountEntryExtensionV2EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountEntryExtensionV2DecodeRequest
            public static readonly Marshaller<Stellar.AccountEntryExtensionV2DecodeRequest> AccountEntryExtensionV2DecodeRequestMarshaller = Marshallers.Create<Stellar.AccountEntryExtensionV2DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountEntryExtensionV2DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountEntryExtensionV2DecodeResponse
            public static readonly Marshaller<Stellar.AccountEntryExtensionV2DecodeResponse> AccountEntryExtensionV2DecodeResponseMarshaller = Marshallers.Create<Stellar.AccountEntryExtensionV2DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountEntryExtensionV2DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountEntryExtensionV1EncodeRequest
            public static readonly Marshaller<Stellar.AccountEntryExtensionV1EncodeRequest> AccountEntryExtensionV1EncodeRequestMarshaller = Marshallers.Create<Stellar.AccountEntryExtensionV1EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountEntryExtensionV1EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountEntryExtensionV1EncodeResponse
            public static readonly Marshaller<Stellar.AccountEntryExtensionV1EncodeResponse> AccountEntryExtensionV1EncodeResponseMarshaller = Marshallers.Create<Stellar.AccountEntryExtensionV1EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountEntryExtensionV1EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountEntryExtensionV1DecodeRequest
            public static readonly Marshaller<Stellar.AccountEntryExtensionV1DecodeRequest> AccountEntryExtensionV1DecodeRequestMarshaller = Marshallers.Create<Stellar.AccountEntryExtensionV1DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountEntryExtensionV1DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountEntryExtensionV1DecodeResponse
            public static readonly Marshaller<Stellar.AccountEntryExtensionV1DecodeResponse> AccountEntryExtensionV1DecodeResponseMarshaller = Marshallers.Create<Stellar.AccountEntryExtensionV1DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountEntryExtensionV1DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountEntryEncodeRequest
            public static readonly Marshaller<Stellar.AccountEntryEncodeRequest> AccountEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.AccountEntryEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountEntryEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountEntryEncodeResponse
            public static readonly Marshaller<Stellar.AccountEntryEncodeResponse> AccountEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.AccountEntryEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountEntryEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountEntryDecodeRequest
            public static readonly Marshaller<Stellar.AccountEntryDecodeRequest> AccountEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.AccountEntryDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountEntryDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountEntryDecodeResponse
            public static readonly Marshaller<Stellar.AccountEntryDecodeResponse> AccountEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.AccountEntryDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountEntryDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TrustLineFlagsEncodeRequest
            public static readonly Marshaller<Stellar.TrustLineFlagsEncodeRequest> TrustLineFlagsEncodeRequestMarshaller = Marshallers.Create<Stellar.TrustLineFlagsEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TrustLineFlagsEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TrustLineFlagsEncodeResponse
            public static readonly Marshaller<Stellar.TrustLineFlagsEncodeResponse> TrustLineFlagsEncodeResponseMarshaller = Marshallers.Create<Stellar.TrustLineFlagsEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TrustLineFlagsEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TrustLineFlagsDecodeRequest
            public static readonly Marshaller<Stellar.TrustLineFlagsDecodeRequest> TrustLineFlagsDecodeRequestMarshaller = Marshallers.Create<Stellar.TrustLineFlagsDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TrustLineFlagsDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TrustLineFlagsDecodeResponse
            public static readonly Marshaller<Stellar.TrustLineFlagsDecodeResponse> TrustLineFlagsDecodeResponseMarshaller = Marshallers.Create<Stellar.TrustLineFlagsDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TrustLineFlagsDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolTypeEncodeRequest
            public static readonly Marshaller<Stellar.LiquidityPoolTypeEncodeRequest> LiquidityPoolTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolTypeEncodeResponse
            public static readonly Marshaller<Stellar.LiquidityPoolTypeEncodeResponse> LiquidityPoolTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolTypeDecodeRequest
            public static readonly Marshaller<Stellar.LiquidityPoolTypeDecodeRequest> LiquidityPoolTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolTypeDecodeResponse
            public static readonly Marshaller<Stellar.LiquidityPoolTypeDecodeResponse> LiquidityPoolTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TrustLineAssetEncodeRequest
            public static readonly Marshaller<Stellar.TrustLineAssetEncodeRequest> TrustLineAssetEncodeRequestMarshaller = Marshallers.Create<Stellar.TrustLineAssetEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TrustLineAssetEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TrustLineAssetEncodeResponse
            public static readonly Marshaller<Stellar.TrustLineAssetEncodeResponse> TrustLineAssetEncodeResponseMarshaller = Marshallers.Create<Stellar.TrustLineAssetEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TrustLineAssetEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TrustLineAssetDecodeRequest
            public static readonly Marshaller<Stellar.TrustLineAssetDecodeRequest> TrustLineAssetDecodeRequestMarshaller = Marshallers.Create<Stellar.TrustLineAssetDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TrustLineAssetDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TrustLineAssetDecodeResponse
            public static readonly Marshaller<Stellar.TrustLineAssetDecodeResponse> TrustLineAssetDecodeResponseMarshaller = Marshallers.Create<Stellar.TrustLineAssetDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TrustLineAssetDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TrustLineEntryExtensionV2EncodeRequest
            public static readonly Marshaller<Stellar.TrustLineEntryExtensionV2EncodeRequest> TrustLineEntryExtensionV2EncodeRequestMarshaller = Marshallers.Create<Stellar.TrustLineEntryExtensionV2EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TrustLineEntryExtensionV2EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TrustLineEntryExtensionV2EncodeResponse
            public static readonly Marshaller<Stellar.TrustLineEntryExtensionV2EncodeResponse> TrustLineEntryExtensionV2EncodeResponseMarshaller = Marshallers.Create<Stellar.TrustLineEntryExtensionV2EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TrustLineEntryExtensionV2EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TrustLineEntryExtensionV2DecodeRequest
            public static readonly Marshaller<Stellar.TrustLineEntryExtensionV2DecodeRequest> TrustLineEntryExtensionV2DecodeRequestMarshaller = Marshallers.Create<Stellar.TrustLineEntryExtensionV2DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TrustLineEntryExtensionV2DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TrustLineEntryExtensionV2DecodeResponse
            public static readonly Marshaller<Stellar.TrustLineEntryExtensionV2DecodeResponse> TrustLineEntryExtensionV2DecodeResponseMarshaller = Marshallers.Create<Stellar.TrustLineEntryExtensionV2DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TrustLineEntryExtensionV2DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TrustLineEntryEncodeRequest
            public static readonly Marshaller<Stellar.TrustLineEntryEncodeRequest> TrustLineEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.TrustLineEntryEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TrustLineEntryEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TrustLineEntryEncodeResponse
            public static readonly Marshaller<Stellar.TrustLineEntryEncodeResponse> TrustLineEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.TrustLineEntryEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TrustLineEntryEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TrustLineEntryDecodeRequest
            public static readonly Marshaller<Stellar.TrustLineEntryDecodeRequest> TrustLineEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.TrustLineEntryDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TrustLineEntryDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TrustLineEntryDecodeResponse
            public static readonly Marshaller<Stellar.TrustLineEntryDecodeResponse> TrustLineEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.TrustLineEntryDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TrustLineEntryDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OfferEntryFlagsEncodeRequest
            public static readonly Marshaller<Stellar.OfferEntryFlagsEncodeRequest> OfferEntryFlagsEncodeRequestMarshaller = Marshallers.Create<Stellar.OfferEntryFlagsEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OfferEntryFlagsEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OfferEntryFlagsEncodeResponse
            public static readonly Marshaller<Stellar.OfferEntryFlagsEncodeResponse> OfferEntryFlagsEncodeResponseMarshaller = Marshallers.Create<Stellar.OfferEntryFlagsEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OfferEntryFlagsEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OfferEntryFlagsDecodeRequest
            public static readonly Marshaller<Stellar.OfferEntryFlagsDecodeRequest> OfferEntryFlagsDecodeRequestMarshaller = Marshallers.Create<Stellar.OfferEntryFlagsDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OfferEntryFlagsDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OfferEntryFlagsDecodeResponse
            public static readonly Marshaller<Stellar.OfferEntryFlagsDecodeResponse> OfferEntryFlagsDecodeResponseMarshaller = Marshallers.Create<Stellar.OfferEntryFlagsDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OfferEntryFlagsDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OfferEntryEncodeRequest
            public static readonly Marshaller<Stellar.OfferEntryEncodeRequest> OfferEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.OfferEntryEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OfferEntryEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OfferEntryEncodeResponse
            public static readonly Marshaller<Stellar.OfferEntryEncodeResponse> OfferEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.OfferEntryEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OfferEntryEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OfferEntryDecodeRequest
            public static readonly Marshaller<Stellar.OfferEntryDecodeRequest> OfferEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.OfferEntryDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OfferEntryDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OfferEntryDecodeResponse
            public static readonly Marshaller<Stellar.OfferEntryDecodeResponse> OfferEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.OfferEntryDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OfferEntryDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DataEntryEncodeRequest
            public static readonly Marshaller<Stellar.DataEntryEncodeRequest> DataEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.DataEntryEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DataEntryEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DataEntryEncodeResponse
            public static readonly Marshaller<Stellar.DataEntryEncodeResponse> DataEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.DataEntryEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DataEntryEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DataEntryDecodeRequest
            public static readonly Marshaller<Stellar.DataEntryDecodeRequest> DataEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.DataEntryDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DataEntryDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DataEntryDecodeResponse
            public static readonly Marshaller<Stellar.DataEntryDecodeResponse> DataEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.DataEntryDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DataEntryDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimPredicateTypeEncodeRequest
            public static readonly Marshaller<Stellar.ClaimPredicateTypeEncodeRequest> ClaimPredicateTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimPredicateTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimPredicateTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimPredicateTypeEncodeResponse
            public static readonly Marshaller<Stellar.ClaimPredicateTypeEncodeResponse> ClaimPredicateTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimPredicateTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimPredicateTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimPredicateTypeDecodeRequest
            public static readonly Marshaller<Stellar.ClaimPredicateTypeDecodeRequest> ClaimPredicateTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimPredicateTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimPredicateTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimPredicateTypeDecodeResponse
            public static readonly Marshaller<Stellar.ClaimPredicateTypeDecodeResponse> ClaimPredicateTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimPredicateTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimPredicateTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimPredicateEncodeRequest
            public static readonly Marshaller<Stellar.ClaimPredicateEncodeRequest> ClaimPredicateEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimPredicateEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimPredicateEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimPredicateEncodeResponse
            public static readonly Marshaller<Stellar.ClaimPredicateEncodeResponse> ClaimPredicateEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimPredicateEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimPredicateEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimPredicateDecodeRequest
            public static readonly Marshaller<Stellar.ClaimPredicateDecodeRequest> ClaimPredicateDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimPredicateDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimPredicateDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimPredicateDecodeResponse
            public static readonly Marshaller<Stellar.ClaimPredicateDecodeResponse> ClaimPredicateDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimPredicateDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimPredicateDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimantTypeEncodeRequest
            public static readonly Marshaller<Stellar.ClaimantTypeEncodeRequest> ClaimantTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimantTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimantTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimantTypeEncodeResponse
            public static readonly Marshaller<Stellar.ClaimantTypeEncodeResponse> ClaimantTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimantTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimantTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimantTypeDecodeRequest
            public static readonly Marshaller<Stellar.ClaimantTypeDecodeRequest> ClaimantTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimantTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimantTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimantTypeDecodeResponse
            public static readonly Marshaller<Stellar.ClaimantTypeDecodeResponse> ClaimantTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimantTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimantTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimantEncodeRequest
            public static readonly Marshaller<Stellar.ClaimantEncodeRequest> ClaimantEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimantEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimantEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimantEncodeResponse
            public static readonly Marshaller<Stellar.ClaimantEncodeResponse> ClaimantEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimantEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimantEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimantDecodeRequest
            public static readonly Marshaller<Stellar.ClaimantDecodeRequest> ClaimantDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimantDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimantDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimantDecodeResponse
            public static readonly Marshaller<Stellar.ClaimantDecodeResponse> ClaimantDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimantDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimantDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimableBalanceIDTypeEncodeRequest
            public static readonly Marshaller<Stellar.ClaimableBalanceIDTypeEncodeRequest> ClaimableBalanceIDTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimableBalanceIDTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimableBalanceIDTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimableBalanceIDTypeEncodeResponse
            public static readonly Marshaller<Stellar.ClaimableBalanceIDTypeEncodeResponse> ClaimableBalanceIDTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimableBalanceIDTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimableBalanceIDTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimableBalanceIDTypeDecodeRequest
            public static readonly Marshaller<Stellar.ClaimableBalanceIDTypeDecodeRequest> ClaimableBalanceIDTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimableBalanceIDTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimableBalanceIDTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimableBalanceIDTypeDecodeResponse
            public static readonly Marshaller<Stellar.ClaimableBalanceIDTypeDecodeResponse> ClaimableBalanceIDTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimableBalanceIDTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimableBalanceIDTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimableBalanceIDEncodeRequest
            public static readonly Marshaller<Stellar.ClaimableBalanceIDEncodeRequest> ClaimableBalanceIDEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimableBalanceIDEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimableBalanceIDEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimableBalanceIDEncodeResponse
            public static readonly Marshaller<Stellar.ClaimableBalanceIDEncodeResponse> ClaimableBalanceIDEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimableBalanceIDEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimableBalanceIDEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimableBalanceIDDecodeRequest
            public static readonly Marshaller<Stellar.ClaimableBalanceIDDecodeRequest> ClaimableBalanceIDDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimableBalanceIDDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimableBalanceIDDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimableBalanceIDDecodeResponse
            public static readonly Marshaller<Stellar.ClaimableBalanceIDDecodeResponse> ClaimableBalanceIDDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimableBalanceIDDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimableBalanceIDDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimableBalanceFlagsEncodeRequest
            public static readonly Marshaller<Stellar.ClaimableBalanceFlagsEncodeRequest> ClaimableBalanceFlagsEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimableBalanceFlagsEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimableBalanceFlagsEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimableBalanceFlagsEncodeResponse
            public static readonly Marshaller<Stellar.ClaimableBalanceFlagsEncodeResponse> ClaimableBalanceFlagsEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimableBalanceFlagsEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimableBalanceFlagsEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimableBalanceFlagsDecodeRequest
            public static readonly Marshaller<Stellar.ClaimableBalanceFlagsDecodeRequest> ClaimableBalanceFlagsDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimableBalanceFlagsDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimableBalanceFlagsDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimableBalanceFlagsDecodeResponse
            public static readonly Marshaller<Stellar.ClaimableBalanceFlagsDecodeResponse> ClaimableBalanceFlagsDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimableBalanceFlagsDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimableBalanceFlagsDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimableBalanceEntryExtensionV1EncodeRequest
            public static readonly Marshaller<Stellar.ClaimableBalanceEntryExtensionV1EncodeRequest> ClaimableBalanceEntryExtensionV1EncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimableBalanceEntryExtensionV1EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimableBalanceEntryExtensionV1EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimableBalanceEntryExtensionV1EncodeResponse
            public static readonly Marshaller<Stellar.ClaimableBalanceEntryExtensionV1EncodeResponse> ClaimableBalanceEntryExtensionV1EncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimableBalanceEntryExtensionV1EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimableBalanceEntryExtensionV1EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimableBalanceEntryExtensionV1DecodeRequest
            public static readonly Marshaller<Stellar.ClaimableBalanceEntryExtensionV1DecodeRequest> ClaimableBalanceEntryExtensionV1DecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimableBalanceEntryExtensionV1DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimableBalanceEntryExtensionV1DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimableBalanceEntryExtensionV1DecodeResponse
            public static readonly Marshaller<Stellar.ClaimableBalanceEntryExtensionV1DecodeResponse> ClaimableBalanceEntryExtensionV1DecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimableBalanceEntryExtensionV1DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimableBalanceEntryExtensionV1DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimableBalanceEntryEncodeRequest
            public static readonly Marshaller<Stellar.ClaimableBalanceEntryEncodeRequest> ClaimableBalanceEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimableBalanceEntryEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimableBalanceEntryEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimableBalanceEntryEncodeResponse
            public static readonly Marshaller<Stellar.ClaimableBalanceEntryEncodeResponse> ClaimableBalanceEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimableBalanceEntryEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimableBalanceEntryEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimableBalanceEntryDecodeRequest
            public static readonly Marshaller<Stellar.ClaimableBalanceEntryDecodeRequest> ClaimableBalanceEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimableBalanceEntryDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimableBalanceEntryDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimableBalanceEntryDecodeResponse
            public static readonly Marshaller<Stellar.ClaimableBalanceEntryDecodeResponse> ClaimableBalanceEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimableBalanceEntryDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimableBalanceEntryDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolConstantProductParametersEncodeRequest
            public static readonly Marshaller<Stellar.LiquidityPoolConstantProductParametersEncodeRequest> LiquidityPoolConstantProductParametersEncodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolConstantProductParametersEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolConstantProductParametersEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolConstantProductParametersEncodeResponse
            public static readonly Marshaller<Stellar.LiquidityPoolConstantProductParametersEncodeResponse> LiquidityPoolConstantProductParametersEncodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolConstantProductParametersEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolConstantProductParametersEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolConstantProductParametersDecodeRequest
            public static readonly Marshaller<Stellar.LiquidityPoolConstantProductParametersDecodeRequest> LiquidityPoolConstantProductParametersDecodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolConstantProductParametersDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolConstantProductParametersDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolConstantProductParametersDecodeResponse
            public static readonly Marshaller<Stellar.LiquidityPoolConstantProductParametersDecodeResponse> LiquidityPoolConstantProductParametersDecodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolConstantProductParametersDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolConstantProductParametersDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolEntryEncodeRequest
            public static readonly Marshaller<Stellar.LiquidityPoolEntryEncodeRequest> LiquidityPoolEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolEntryEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolEntryEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolEntryEncodeResponse
            public static readonly Marshaller<Stellar.LiquidityPoolEntryEncodeResponse> LiquidityPoolEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolEntryEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolEntryEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolEntryDecodeRequest
            public static readonly Marshaller<Stellar.LiquidityPoolEntryDecodeRequest> LiquidityPoolEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolEntryDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolEntryDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolEntryDecodeResponse
            public static readonly Marshaller<Stellar.LiquidityPoolEntryDecodeResponse> LiquidityPoolEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolEntryDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolEntryDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractDataDurabilityEncodeRequest
            public static readonly Marshaller<Stellar.ContractDataDurabilityEncodeRequest> ContractDataDurabilityEncodeRequestMarshaller = Marshallers.Create<Stellar.ContractDataDurabilityEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractDataDurabilityEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractDataDurabilityEncodeResponse
            public static readonly Marshaller<Stellar.ContractDataDurabilityEncodeResponse> ContractDataDurabilityEncodeResponseMarshaller = Marshallers.Create<Stellar.ContractDataDurabilityEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractDataDurabilityEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractDataDurabilityDecodeRequest
            public static readonly Marshaller<Stellar.ContractDataDurabilityDecodeRequest> ContractDataDurabilityDecodeRequestMarshaller = Marshallers.Create<Stellar.ContractDataDurabilityDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractDataDurabilityDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractDataDurabilityDecodeResponse
            public static readonly Marshaller<Stellar.ContractDataDurabilityDecodeResponse> ContractDataDurabilityDecodeResponseMarshaller = Marshallers.Create<Stellar.ContractDataDurabilityDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractDataDurabilityDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractDataEntryEncodeRequest
            public static readonly Marshaller<Stellar.ContractDataEntryEncodeRequest> ContractDataEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.ContractDataEntryEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractDataEntryEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractDataEntryEncodeResponse
            public static readonly Marshaller<Stellar.ContractDataEntryEncodeResponse> ContractDataEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.ContractDataEntryEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractDataEntryEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractDataEntryDecodeRequest
            public static readonly Marshaller<Stellar.ContractDataEntryDecodeRequest> ContractDataEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.ContractDataEntryDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractDataEntryDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractDataEntryDecodeResponse
            public static readonly Marshaller<Stellar.ContractDataEntryDecodeResponse> ContractDataEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.ContractDataEntryDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractDataEntryDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractCodeCostInputsEncodeRequest
            public static readonly Marshaller<Stellar.ContractCodeCostInputsEncodeRequest> ContractCodeCostInputsEncodeRequestMarshaller = Marshallers.Create<Stellar.ContractCodeCostInputsEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractCodeCostInputsEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractCodeCostInputsEncodeResponse
            public static readonly Marshaller<Stellar.ContractCodeCostInputsEncodeResponse> ContractCodeCostInputsEncodeResponseMarshaller = Marshallers.Create<Stellar.ContractCodeCostInputsEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractCodeCostInputsEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractCodeCostInputsDecodeRequest
            public static readonly Marshaller<Stellar.ContractCodeCostInputsDecodeRequest> ContractCodeCostInputsDecodeRequestMarshaller = Marshallers.Create<Stellar.ContractCodeCostInputsDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractCodeCostInputsDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractCodeCostInputsDecodeResponse
            public static readonly Marshaller<Stellar.ContractCodeCostInputsDecodeResponse> ContractCodeCostInputsDecodeResponseMarshaller = Marshallers.Create<Stellar.ContractCodeCostInputsDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractCodeCostInputsDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractCodeEntryEncodeRequest
            public static readonly Marshaller<Stellar.ContractCodeEntryEncodeRequest> ContractCodeEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.ContractCodeEntryEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractCodeEntryEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractCodeEntryEncodeResponse
            public static readonly Marshaller<Stellar.ContractCodeEntryEncodeResponse> ContractCodeEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.ContractCodeEntryEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractCodeEntryEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractCodeEntryDecodeRequest
            public static readonly Marshaller<Stellar.ContractCodeEntryDecodeRequest> ContractCodeEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.ContractCodeEntryDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractCodeEntryDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractCodeEntryDecodeResponse
            public static readonly Marshaller<Stellar.ContractCodeEntryDecodeResponse> ContractCodeEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.ContractCodeEntryDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractCodeEntryDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TTLEntryEncodeRequest
            public static readonly Marshaller<Stellar.TTLEntryEncodeRequest> TTLEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.TTLEntryEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TTLEntryEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TTLEntryEncodeResponse
            public static readonly Marshaller<Stellar.TTLEntryEncodeResponse> TTLEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.TTLEntryEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TTLEntryEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TTLEntryDecodeRequest
            public static readonly Marshaller<Stellar.TTLEntryDecodeRequest> TTLEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.TTLEntryDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TTLEntryDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TTLEntryDecodeResponse
            public static readonly Marshaller<Stellar.TTLEntryDecodeResponse> TTLEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.TTLEntryDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TTLEntryDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerEntryExtensionV1EncodeRequest
            public static readonly Marshaller<Stellar.LedgerEntryExtensionV1EncodeRequest> LedgerEntryExtensionV1EncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerEntryExtensionV1EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerEntryExtensionV1EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerEntryExtensionV1EncodeResponse
            public static readonly Marshaller<Stellar.LedgerEntryExtensionV1EncodeResponse> LedgerEntryExtensionV1EncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerEntryExtensionV1EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerEntryExtensionV1EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerEntryExtensionV1DecodeRequest
            public static readonly Marshaller<Stellar.LedgerEntryExtensionV1DecodeRequest> LedgerEntryExtensionV1DecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerEntryExtensionV1DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerEntryExtensionV1DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerEntryExtensionV1DecodeResponse
            public static readonly Marshaller<Stellar.LedgerEntryExtensionV1DecodeResponse> LedgerEntryExtensionV1DecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerEntryExtensionV1DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerEntryExtensionV1DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerEntryEncodeRequest
            public static readonly Marshaller<Stellar.LedgerEntryEncodeRequest> LedgerEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerEntryEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerEntryEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerEntryEncodeResponse
            public static readonly Marshaller<Stellar.LedgerEntryEncodeResponse> LedgerEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerEntryEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerEntryEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerEntryDecodeRequest
            public static readonly Marshaller<Stellar.LedgerEntryDecodeRequest> LedgerEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerEntryDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerEntryDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerEntryDecodeResponse
            public static readonly Marshaller<Stellar.LedgerEntryDecodeResponse> LedgerEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerEntryDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerEntryDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerKeyEncodeRequest
            public static readonly Marshaller<Stellar.LedgerKeyEncodeRequest> LedgerKeyEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerKeyEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerKeyEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerKeyEncodeResponse
            public static readonly Marshaller<Stellar.LedgerKeyEncodeResponse> LedgerKeyEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerKeyEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerKeyEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerKeyDecodeRequest
            public static readonly Marshaller<Stellar.LedgerKeyDecodeRequest> LedgerKeyDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerKeyDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerKeyDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerKeyDecodeResponse
            public static readonly Marshaller<Stellar.LedgerKeyDecodeResponse> LedgerKeyDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerKeyDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerKeyDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for EnvelopeTypeEncodeRequest
            public static readonly Marshaller<Stellar.EnvelopeTypeEncodeRequest> EnvelopeTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.EnvelopeTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.EnvelopeTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for EnvelopeTypeEncodeResponse
            public static readonly Marshaller<Stellar.EnvelopeTypeEncodeResponse> EnvelopeTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.EnvelopeTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.EnvelopeTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for EnvelopeTypeDecodeRequest
            public static readonly Marshaller<Stellar.EnvelopeTypeDecodeRequest> EnvelopeTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.EnvelopeTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.EnvelopeTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for EnvelopeTypeDecodeResponse
            public static readonly Marshaller<Stellar.EnvelopeTypeDecodeResponse> EnvelopeTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.EnvelopeTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.EnvelopeTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BucketListTypeEncodeRequest
            public static readonly Marshaller<Stellar.BucketListTypeEncodeRequest> BucketListTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.BucketListTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BucketListTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BucketListTypeEncodeResponse
            public static readonly Marshaller<Stellar.BucketListTypeEncodeResponse> BucketListTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.BucketListTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BucketListTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BucketListTypeDecodeRequest
            public static readonly Marshaller<Stellar.BucketListTypeDecodeRequest> BucketListTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.BucketListTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BucketListTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BucketListTypeDecodeResponse
            public static readonly Marshaller<Stellar.BucketListTypeDecodeResponse> BucketListTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.BucketListTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BucketListTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BucketEntryTypeEncodeRequest
            public static readonly Marshaller<Stellar.BucketEntryTypeEncodeRequest> BucketEntryTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.BucketEntryTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BucketEntryTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BucketEntryTypeEncodeResponse
            public static readonly Marshaller<Stellar.BucketEntryTypeEncodeResponse> BucketEntryTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.BucketEntryTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BucketEntryTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BucketEntryTypeDecodeRequest
            public static readonly Marshaller<Stellar.BucketEntryTypeDecodeRequest> BucketEntryTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.BucketEntryTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BucketEntryTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BucketEntryTypeDecodeResponse
            public static readonly Marshaller<Stellar.BucketEntryTypeDecodeResponse> BucketEntryTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.BucketEntryTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BucketEntryTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HotArchiveBucketEntryTypeEncodeRequest
            public static readonly Marshaller<Stellar.HotArchiveBucketEntryTypeEncodeRequest> HotArchiveBucketEntryTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.HotArchiveBucketEntryTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HotArchiveBucketEntryTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HotArchiveBucketEntryTypeEncodeResponse
            public static readonly Marshaller<Stellar.HotArchiveBucketEntryTypeEncodeResponse> HotArchiveBucketEntryTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.HotArchiveBucketEntryTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HotArchiveBucketEntryTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HotArchiveBucketEntryTypeDecodeRequest
            public static readonly Marshaller<Stellar.HotArchiveBucketEntryTypeDecodeRequest> HotArchiveBucketEntryTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.HotArchiveBucketEntryTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HotArchiveBucketEntryTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HotArchiveBucketEntryTypeDecodeResponse
            public static readonly Marshaller<Stellar.HotArchiveBucketEntryTypeDecodeResponse> HotArchiveBucketEntryTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.HotArchiveBucketEntryTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HotArchiveBucketEntryTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ColdArchiveBucketEntryTypeEncodeRequest
            public static readonly Marshaller<Stellar.ColdArchiveBucketEntryTypeEncodeRequest> ColdArchiveBucketEntryTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.ColdArchiveBucketEntryTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ColdArchiveBucketEntryTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ColdArchiveBucketEntryTypeEncodeResponse
            public static readonly Marshaller<Stellar.ColdArchiveBucketEntryTypeEncodeResponse> ColdArchiveBucketEntryTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.ColdArchiveBucketEntryTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ColdArchiveBucketEntryTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ColdArchiveBucketEntryTypeDecodeRequest
            public static readonly Marshaller<Stellar.ColdArchiveBucketEntryTypeDecodeRequest> ColdArchiveBucketEntryTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.ColdArchiveBucketEntryTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ColdArchiveBucketEntryTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ColdArchiveBucketEntryTypeDecodeResponse
            public static readonly Marshaller<Stellar.ColdArchiveBucketEntryTypeDecodeResponse> ColdArchiveBucketEntryTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.ColdArchiveBucketEntryTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ColdArchiveBucketEntryTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BucketMetadataEncodeRequest
            public static readonly Marshaller<Stellar.BucketMetadataEncodeRequest> BucketMetadataEncodeRequestMarshaller = Marshallers.Create<Stellar.BucketMetadataEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BucketMetadataEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BucketMetadataEncodeResponse
            public static readonly Marshaller<Stellar.BucketMetadataEncodeResponse> BucketMetadataEncodeResponseMarshaller = Marshallers.Create<Stellar.BucketMetadataEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BucketMetadataEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BucketMetadataDecodeRequest
            public static readonly Marshaller<Stellar.BucketMetadataDecodeRequest> BucketMetadataDecodeRequestMarshaller = Marshallers.Create<Stellar.BucketMetadataDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BucketMetadataDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BucketMetadataDecodeResponse
            public static readonly Marshaller<Stellar.BucketMetadataDecodeResponse> BucketMetadataDecodeResponseMarshaller = Marshallers.Create<Stellar.BucketMetadataDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BucketMetadataDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BucketEntryEncodeRequest
            public static readonly Marshaller<Stellar.BucketEntryEncodeRequest> BucketEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.BucketEntryEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BucketEntryEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BucketEntryEncodeResponse
            public static readonly Marshaller<Stellar.BucketEntryEncodeResponse> BucketEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.BucketEntryEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BucketEntryEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BucketEntryDecodeRequest
            public static readonly Marshaller<Stellar.BucketEntryDecodeRequest> BucketEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.BucketEntryDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BucketEntryDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BucketEntryDecodeResponse
            public static readonly Marshaller<Stellar.BucketEntryDecodeResponse> BucketEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.BucketEntryDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BucketEntryDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HotArchiveBucketEntryEncodeRequest
            public static readonly Marshaller<Stellar.HotArchiveBucketEntryEncodeRequest> HotArchiveBucketEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.HotArchiveBucketEntryEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HotArchiveBucketEntryEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HotArchiveBucketEntryEncodeResponse
            public static readonly Marshaller<Stellar.HotArchiveBucketEntryEncodeResponse> HotArchiveBucketEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.HotArchiveBucketEntryEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HotArchiveBucketEntryEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HotArchiveBucketEntryDecodeRequest
            public static readonly Marshaller<Stellar.HotArchiveBucketEntryDecodeRequest> HotArchiveBucketEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.HotArchiveBucketEntryDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HotArchiveBucketEntryDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HotArchiveBucketEntryDecodeResponse
            public static readonly Marshaller<Stellar.HotArchiveBucketEntryDecodeResponse> HotArchiveBucketEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.HotArchiveBucketEntryDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HotArchiveBucketEntryDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ColdArchiveArchivedLeafEncodeRequest
            public static readonly Marshaller<Stellar.ColdArchiveArchivedLeafEncodeRequest> ColdArchiveArchivedLeafEncodeRequestMarshaller = Marshallers.Create<Stellar.ColdArchiveArchivedLeafEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ColdArchiveArchivedLeafEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ColdArchiveArchivedLeafEncodeResponse
            public static readonly Marshaller<Stellar.ColdArchiveArchivedLeafEncodeResponse> ColdArchiveArchivedLeafEncodeResponseMarshaller = Marshallers.Create<Stellar.ColdArchiveArchivedLeafEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ColdArchiveArchivedLeafEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ColdArchiveArchivedLeafDecodeRequest
            public static readonly Marshaller<Stellar.ColdArchiveArchivedLeafDecodeRequest> ColdArchiveArchivedLeafDecodeRequestMarshaller = Marshallers.Create<Stellar.ColdArchiveArchivedLeafDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ColdArchiveArchivedLeafDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ColdArchiveArchivedLeafDecodeResponse
            public static readonly Marshaller<Stellar.ColdArchiveArchivedLeafDecodeResponse> ColdArchiveArchivedLeafDecodeResponseMarshaller = Marshallers.Create<Stellar.ColdArchiveArchivedLeafDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ColdArchiveArchivedLeafDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ColdArchiveDeletedLeafEncodeRequest
            public static readonly Marshaller<Stellar.ColdArchiveDeletedLeafEncodeRequest> ColdArchiveDeletedLeafEncodeRequestMarshaller = Marshallers.Create<Stellar.ColdArchiveDeletedLeafEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ColdArchiveDeletedLeafEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ColdArchiveDeletedLeafEncodeResponse
            public static readonly Marshaller<Stellar.ColdArchiveDeletedLeafEncodeResponse> ColdArchiveDeletedLeafEncodeResponseMarshaller = Marshallers.Create<Stellar.ColdArchiveDeletedLeafEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ColdArchiveDeletedLeafEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ColdArchiveDeletedLeafDecodeRequest
            public static readonly Marshaller<Stellar.ColdArchiveDeletedLeafDecodeRequest> ColdArchiveDeletedLeafDecodeRequestMarshaller = Marshallers.Create<Stellar.ColdArchiveDeletedLeafDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ColdArchiveDeletedLeafDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ColdArchiveDeletedLeafDecodeResponse
            public static readonly Marshaller<Stellar.ColdArchiveDeletedLeafDecodeResponse> ColdArchiveDeletedLeafDecodeResponseMarshaller = Marshallers.Create<Stellar.ColdArchiveDeletedLeafDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ColdArchiveDeletedLeafDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ColdArchiveBoundaryLeafEncodeRequest
            public static readonly Marshaller<Stellar.ColdArchiveBoundaryLeafEncodeRequest> ColdArchiveBoundaryLeafEncodeRequestMarshaller = Marshallers.Create<Stellar.ColdArchiveBoundaryLeafEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ColdArchiveBoundaryLeafEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ColdArchiveBoundaryLeafEncodeResponse
            public static readonly Marshaller<Stellar.ColdArchiveBoundaryLeafEncodeResponse> ColdArchiveBoundaryLeafEncodeResponseMarshaller = Marshallers.Create<Stellar.ColdArchiveBoundaryLeafEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ColdArchiveBoundaryLeafEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ColdArchiveBoundaryLeafDecodeRequest
            public static readonly Marshaller<Stellar.ColdArchiveBoundaryLeafDecodeRequest> ColdArchiveBoundaryLeafDecodeRequestMarshaller = Marshallers.Create<Stellar.ColdArchiveBoundaryLeafDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ColdArchiveBoundaryLeafDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ColdArchiveBoundaryLeafDecodeResponse
            public static readonly Marshaller<Stellar.ColdArchiveBoundaryLeafDecodeResponse> ColdArchiveBoundaryLeafDecodeResponseMarshaller = Marshallers.Create<Stellar.ColdArchiveBoundaryLeafDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ColdArchiveBoundaryLeafDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ColdArchiveHashEntryEncodeRequest
            public static readonly Marshaller<Stellar.ColdArchiveHashEntryEncodeRequest> ColdArchiveHashEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.ColdArchiveHashEntryEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ColdArchiveHashEntryEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ColdArchiveHashEntryEncodeResponse
            public static readonly Marshaller<Stellar.ColdArchiveHashEntryEncodeResponse> ColdArchiveHashEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.ColdArchiveHashEntryEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ColdArchiveHashEntryEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ColdArchiveHashEntryDecodeRequest
            public static readonly Marshaller<Stellar.ColdArchiveHashEntryDecodeRequest> ColdArchiveHashEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.ColdArchiveHashEntryDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ColdArchiveHashEntryDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ColdArchiveHashEntryDecodeResponse
            public static readonly Marshaller<Stellar.ColdArchiveHashEntryDecodeResponse> ColdArchiveHashEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.ColdArchiveHashEntryDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ColdArchiveHashEntryDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ColdArchiveBucketEntryEncodeRequest
            public static readonly Marshaller<Stellar.ColdArchiveBucketEntryEncodeRequest> ColdArchiveBucketEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.ColdArchiveBucketEntryEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ColdArchiveBucketEntryEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ColdArchiveBucketEntryEncodeResponse
            public static readonly Marshaller<Stellar.ColdArchiveBucketEntryEncodeResponse> ColdArchiveBucketEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.ColdArchiveBucketEntryEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ColdArchiveBucketEntryEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ColdArchiveBucketEntryDecodeRequest
            public static readonly Marshaller<Stellar.ColdArchiveBucketEntryDecodeRequest> ColdArchiveBucketEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.ColdArchiveBucketEntryDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ColdArchiveBucketEntryDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ColdArchiveBucketEntryDecodeResponse
            public static readonly Marshaller<Stellar.ColdArchiveBucketEntryDecodeResponse> ColdArchiveBucketEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.ColdArchiveBucketEntryDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ColdArchiveBucketEntryDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for UpgradeTypeEncodeRequest
            public static readonly Marshaller<Stellar.UpgradeTypeEncodeRequest> UpgradeTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.UpgradeTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.UpgradeTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for UpgradeTypeEncodeResponse
            public static readonly Marshaller<Stellar.UpgradeTypeEncodeResponse> UpgradeTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.UpgradeTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.UpgradeTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for UpgradeTypeDecodeRequest
            public static readonly Marshaller<Stellar.UpgradeTypeDecodeRequest> UpgradeTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.UpgradeTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.UpgradeTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for UpgradeTypeDecodeResponse
            public static readonly Marshaller<Stellar.UpgradeTypeDecodeResponse> UpgradeTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.UpgradeTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.UpgradeTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for StellarValueTypeEncodeRequest
            public static readonly Marshaller<Stellar.StellarValueTypeEncodeRequest> StellarValueTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.StellarValueTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.StellarValueTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for StellarValueTypeEncodeResponse
            public static readonly Marshaller<Stellar.StellarValueTypeEncodeResponse> StellarValueTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.StellarValueTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.StellarValueTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for StellarValueTypeDecodeRequest
            public static readonly Marshaller<Stellar.StellarValueTypeDecodeRequest> StellarValueTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.StellarValueTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.StellarValueTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for StellarValueTypeDecodeResponse
            public static readonly Marshaller<Stellar.StellarValueTypeDecodeResponse> StellarValueTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.StellarValueTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.StellarValueTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerCloseValueSignatureEncodeRequest
            public static readonly Marshaller<Stellar.LedgerCloseValueSignatureEncodeRequest> LedgerCloseValueSignatureEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerCloseValueSignatureEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerCloseValueSignatureEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerCloseValueSignatureEncodeResponse
            public static readonly Marshaller<Stellar.LedgerCloseValueSignatureEncodeResponse> LedgerCloseValueSignatureEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerCloseValueSignatureEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerCloseValueSignatureEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerCloseValueSignatureDecodeRequest
            public static readonly Marshaller<Stellar.LedgerCloseValueSignatureDecodeRequest> LedgerCloseValueSignatureDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerCloseValueSignatureDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerCloseValueSignatureDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerCloseValueSignatureDecodeResponse
            public static readonly Marshaller<Stellar.LedgerCloseValueSignatureDecodeResponse> LedgerCloseValueSignatureDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerCloseValueSignatureDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerCloseValueSignatureDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for StellarValueEncodeRequest
            public static readonly Marshaller<Stellar.StellarValueEncodeRequest> StellarValueEncodeRequestMarshaller = Marshallers.Create<Stellar.StellarValueEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.StellarValueEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for StellarValueEncodeResponse
            public static readonly Marshaller<Stellar.StellarValueEncodeResponse> StellarValueEncodeResponseMarshaller = Marshallers.Create<Stellar.StellarValueEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.StellarValueEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for StellarValueDecodeRequest
            public static readonly Marshaller<Stellar.StellarValueDecodeRequest> StellarValueDecodeRequestMarshaller = Marshallers.Create<Stellar.StellarValueDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.StellarValueDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for StellarValueDecodeResponse
            public static readonly Marshaller<Stellar.StellarValueDecodeResponse> StellarValueDecodeResponseMarshaller = Marshallers.Create<Stellar.StellarValueDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.StellarValueDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerHeaderFlagsEncodeRequest
            public static readonly Marshaller<Stellar.LedgerHeaderFlagsEncodeRequest> LedgerHeaderFlagsEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerHeaderFlagsEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerHeaderFlagsEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerHeaderFlagsEncodeResponse
            public static readonly Marshaller<Stellar.LedgerHeaderFlagsEncodeResponse> LedgerHeaderFlagsEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerHeaderFlagsEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerHeaderFlagsEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerHeaderFlagsDecodeRequest
            public static readonly Marshaller<Stellar.LedgerHeaderFlagsDecodeRequest> LedgerHeaderFlagsDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerHeaderFlagsDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerHeaderFlagsDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerHeaderFlagsDecodeResponse
            public static readonly Marshaller<Stellar.LedgerHeaderFlagsDecodeResponse> LedgerHeaderFlagsDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerHeaderFlagsDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerHeaderFlagsDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerHeaderExtensionV1EncodeRequest
            public static readonly Marshaller<Stellar.LedgerHeaderExtensionV1EncodeRequest> LedgerHeaderExtensionV1EncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerHeaderExtensionV1EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerHeaderExtensionV1EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerHeaderExtensionV1EncodeResponse
            public static readonly Marshaller<Stellar.LedgerHeaderExtensionV1EncodeResponse> LedgerHeaderExtensionV1EncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerHeaderExtensionV1EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerHeaderExtensionV1EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerHeaderExtensionV1DecodeRequest
            public static readonly Marshaller<Stellar.LedgerHeaderExtensionV1DecodeRequest> LedgerHeaderExtensionV1DecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerHeaderExtensionV1DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerHeaderExtensionV1DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerHeaderExtensionV1DecodeResponse
            public static readonly Marshaller<Stellar.LedgerHeaderExtensionV1DecodeResponse> LedgerHeaderExtensionV1DecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerHeaderExtensionV1DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerHeaderExtensionV1DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerHeaderEncodeRequest
            public static readonly Marshaller<Stellar.LedgerHeaderEncodeRequest> LedgerHeaderEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerHeaderEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerHeaderEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerHeaderEncodeResponse
            public static readonly Marshaller<Stellar.LedgerHeaderEncodeResponse> LedgerHeaderEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerHeaderEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerHeaderEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerHeaderDecodeRequest
            public static readonly Marshaller<Stellar.LedgerHeaderDecodeRequest> LedgerHeaderDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerHeaderDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerHeaderDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerHeaderDecodeResponse
            public static readonly Marshaller<Stellar.LedgerHeaderDecodeResponse> LedgerHeaderDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerHeaderDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerHeaderDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerUpgradeTypeEncodeRequest
            public static readonly Marshaller<Stellar.LedgerUpgradeTypeEncodeRequest> LedgerUpgradeTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerUpgradeTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerUpgradeTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerUpgradeTypeEncodeResponse
            public static readonly Marshaller<Stellar.LedgerUpgradeTypeEncodeResponse> LedgerUpgradeTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerUpgradeTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerUpgradeTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerUpgradeTypeDecodeRequest
            public static readonly Marshaller<Stellar.LedgerUpgradeTypeDecodeRequest> LedgerUpgradeTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerUpgradeTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerUpgradeTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerUpgradeTypeDecodeResponse
            public static readonly Marshaller<Stellar.LedgerUpgradeTypeDecodeResponse> LedgerUpgradeTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerUpgradeTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerUpgradeTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigUpgradeSetKeyEncodeRequest
            public static readonly Marshaller<Stellar.ConfigUpgradeSetKeyEncodeRequest> ConfigUpgradeSetKeyEncodeRequestMarshaller = Marshallers.Create<Stellar.ConfigUpgradeSetKeyEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigUpgradeSetKeyEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigUpgradeSetKeyEncodeResponse
            public static readonly Marshaller<Stellar.ConfigUpgradeSetKeyEncodeResponse> ConfigUpgradeSetKeyEncodeResponseMarshaller = Marshallers.Create<Stellar.ConfigUpgradeSetKeyEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigUpgradeSetKeyEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigUpgradeSetKeyDecodeRequest
            public static readonly Marshaller<Stellar.ConfigUpgradeSetKeyDecodeRequest> ConfigUpgradeSetKeyDecodeRequestMarshaller = Marshallers.Create<Stellar.ConfigUpgradeSetKeyDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigUpgradeSetKeyDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigUpgradeSetKeyDecodeResponse
            public static readonly Marshaller<Stellar.ConfigUpgradeSetKeyDecodeResponse> ConfigUpgradeSetKeyDecodeResponseMarshaller = Marshallers.Create<Stellar.ConfigUpgradeSetKeyDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigUpgradeSetKeyDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerUpgradeEncodeRequest
            public static readonly Marshaller<Stellar.LedgerUpgradeEncodeRequest> LedgerUpgradeEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerUpgradeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerUpgradeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerUpgradeEncodeResponse
            public static readonly Marshaller<Stellar.LedgerUpgradeEncodeResponse> LedgerUpgradeEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerUpgradeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerUpgradeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerUpgradeDecodeRequest
            public static readonly Marshaller<Stellar.LedgerUpgradeDecodeRequest> LedgerUpgradeDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerUpgradeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerUpgradeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerUpgradeDecodeResponse
            public static readonly Marshaller<Stellar.LedgerUpgradeDecodeResponse> LedgerUpgradeDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerUpgradeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerUpgradeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigUpgradeSetEncodeRequest
            public static readonly Marshaller<Stellar.ConfigUpgradeSetEncodeRequest> ConfigUpgradeSetEncodeRequestMarshaller = Marshallers.Create<Stellar.ConfigUpgradeSetEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigUpgradeSetEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigUpgradeSetEncodeResponse
            public static readonly Marshaller<Stellar.ConfigUpgradeSetEncodeResponse> ConfigUpgradeSetEncodeResponseMarshaller = Marshallers.Create<Stellar.ConfigUpgradeSetEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigUpgradeSetEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigUpgradeSetDecodeRequest
            public static readonly Marshaller<Stellar.ConfigUpgradeSetDecodeRequest> ConfigUpgradeSetDecodeRequestMarshaller = Marshallers.Create<Stellar.ConfigUpgradeSetDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigUpgradeSetDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ConfigUpgradeSetDecodeResponse
            public static readonly Marshaller<Stellar.ConfigUpgradeSetDecodeResponse> ConfigUpgradeSetDecodeResponseMarshaller = Marshallers.Create<Stellar.ConfigUpgradeSetDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ConfigUpgradeSetDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TxSetComponentTypeEncodeRequest
            public static readonly Marshaller<Stellar.TxSetComponentTypeEncodeRequest> TxSetComponentTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.TxSetComponentTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TxSetComponentTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TxSetComponentTypeEncodeResponse
            public static readonly Marshaller<Stellar.TxSetComponentTypeEncodeResponse> TxSetComponentTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.TxSetComponentTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TxSetComponentTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TxSetComponentTypeDecodeRequest
            public static readonly Marshaller<Stellar.TxSetComponentTypeDecodeRequest> TxSetComponentTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.TxSetComponentTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TxSetComponentTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TxSetComponentTypeDecodeResponse
            public static readonly Marshaller<Stellar.TxSetComponentTypeDecodeResponse> TxSetComponentTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.TxSetComponentTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TxSetComponentTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TxSetComponentEncodeRequest
            public static readonly Marshaller<Stellar.TxSetComponentEncodeRequest> TxSetComponentEncodeRequestMarshaller = Marshallers.Create<Stellar.TxSetComponentEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TxSetComponentEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TxSetComponentEncodeResponse
            public static readonly Marshaller<Stellar.TxSetComponentEncodeResponse> TxSetComponentEncodeResponseMarshaller = Marshallers.Create<Stellar.TxSetComponentEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TxSetComponentEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TxSetComponentDecodeRequest
            public static readonly Marshaller<Stellar.TxSetComponentDecodeRequest> TxSetComponentDecodeRequestMarshaller = Marshallers.Create<Stellar.TxSetComponentDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TxSetComponentDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TxSetComponentDecodeResponse
            public static readonly Marshaller<Stellar.TxSetComponentDecodeResponse> TxSetComponentDecodeResponseMarshaller = Marshallers.Create<Stellar.TxSetComponentDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TxSetComponentDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionPhaseEncodeRequest
            public static readonly Marshaller<Stellar.TransactionPhaseEncodeRequest> TransactionPhaseEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionPhaseEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionPhaseEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionPhaseEncodeResponse
            public static readonly Marshaller<Stellar.TransactionPhaseEncodeResponse> TransactionPhaseEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionPhaseEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionPhaseEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionPhaseDecodeRequest
            public static readonly Marshaller<Stellar.TransactionPhaseDecodeRequest> TransactionPhaseDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionPhaseDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionPhaseDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionPhaseDecodeResponse
            public static readonly Marshaller<Stellar.TransactionPhaseDecodeResponse> TransactionPhaseDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionPhaseDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionPhaseDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionSetEncodeRequest
            public static readonly Marshaller<Stellar.TransactionSetEncodeRequest> TransactionSetEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionSetEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionSetEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionSetEncodeResponse
            public static readonly Marshaller<Stellar.TransactionSetEncodeResponse> TransactionSetEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionSetEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionSetEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionSetDecodeRequest
            public static readonly Marshaller<Stellar.TransactionSetDecodeRequest> TransactionSetDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionSetDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionSetDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionSetDecodeResponse
            public static readonly Marshaller<Stellar.TransactionSetDecodeResponse> TransactionSetDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionSetDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionSetDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionSetV1EncodeRequest
            public static readonly Marshaller<Stellar.TransactionSetV1EncodeRequest> TransactionSetV1EncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionSetV1EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionSetV1EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionSetV1EncodeResponse
            public static readonly Marshaller<Stellar.TransactionSetV1EncodeResponse> TransactionSetV1EncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionSetV1EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionSetV1EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionSetV1DecodeRequest
            public static readonly Marshaller<Stellar.TransactionSetV1DecodeRequest> TransactionSetV1DecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionSetV1DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionSetV1DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionSetV1DecodeResponse
            public static readonly Marshaller<Stellar.TransactionSetV1DecodeResponse> TransactionSetV1DecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionSetV1DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionSetV1DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for GeneralizedTransactionSetEncodeRequest
            public static readonly Marshaller<Stellar.GeneralizedTransactionSetEncodeRequest> GeneralizedTransactionSetEncodeRequestMarshaller = Marshallers.Create<Stellar.GeneralizedTransactionSetEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.GeneralizedTransactionSetEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for GeneralizedTransactionSetEncodeResponse
            public static readonly Marshaller<Stellar.GeneralizedTransactionSetEncodeResponse> GeneralizedTransactionSetEncodeResponseMarshaller = Marshallers.Create<Stellar.GeneralizedTransactionSetEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.GeneralizedTransactionSetEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for GeneralizedTransactionSetDecodeRequest
            public static readonly Marshaller<Stellar.GeneralizedTransactionSetDecodeRequest> GeneralizedTransactionSetDecodeRequestMarshaller = Marshallers.Create<Stellar.GeneralizedTransactionSetDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.GeneralizedTransactionSetDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for GeneralizedTransactionSetDecodeResponse
            public static readonly Marshaller<Stellar.GeneralizedTransactionSetDecodeResponse> GeneralizedTransactionSetDecodeResponseMarshaller = Marshallers.Create<Stellar.GeneralizedTransactionSetDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.GeneralizedTransactionSetDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionResultPairEncodeRequest
            public static readonly Marshaller<Stellar.TransactionResultPairEncodeRequest> TransactionResultPairEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionResultPairEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionResultPairEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionResultPairEncodeResponse
            public static readonly Marshaller<Stellar.TransactionResultPairEncodeResponse> TransactionResultPairEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionResultPairEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionResultPairEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionResultPairDecodeRequest
            public static readonly Marshaller<Stellar.TransactionResultPairDecodeRequest> TransactionResultPairDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionResultPairDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionResultPairDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionResultPairDecodeResponse
            public static readonly Marshaller<Stellar.TransactionResultPairDecodeResponse> TransactionResultPairDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionResultPairDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionResultPairDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionResultSetEncodeRequest
            public static readonly Marshaller<Stellar.TransactionResultSetEncodeRequest> TransactionResultSetEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionResultSetEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionResultSetEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionResultSetEncodeResponse
            public static readonly Marshaller<Stellar.TransactionResultSetEncodeResponse> TransactionResultSetEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionResultSetEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionResultSetEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionResultSetDecodeRequest
            public static readonly Marshaller<Stellar.TransactionResultSetDecodeRequest> TransactionResultSetDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionResultSetDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionResultSetDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionResultSetDecodeResponse
            public static readonly Marshaller<Stellar.TransactionResultSetDecodeResponse> TransactionResultSetDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionResultSetDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionResultSetDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionHistoryEntryEncodeRequest
            public static readonly Marshaller<Stellar.TransactionHistoryEntryEncodeRequest> TransactionHistoryEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionHistoryEntryEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionHistoryEntryEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionHistoryEntryEncodeResponse
            public static readonly Marshaller<Stellar.TransactionHistoryEntryEncodeResponse> TransactionHistoryEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionHistoryEntryEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionHistoryEntryEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionHistoryEntryDecodeRequest
            public static readonly Marshaller<Stellar.TransactionHistoryEntryDecodeRequest> TransactionHistoryEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionHistoryEntryDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionHistoryEntryDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionHistoryEntryDecodeResponse
            public static readonly Marshaller<Stellar.TransactionHistoryEntryDecodeResponse> TransactionHistoryEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionHistoryEntryDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionHistoryEntryDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionHistoryResultEntryEncodeRequest
            public static readonly Marshaller<Stellar.TransactionHistoryResultEntryEncodeRequest> TransactionHistoryResultEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionHistoryResultEntryEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionHistoryResultEntryEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionHistoryResultEntryEncodeResponse
            public static readonly Marshaller<Stellar.TransactionHistoryResultEntryEncodeResponse> TransactionHistoryResultEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionHistoryResultEntryEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionHistoryResultEntryEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionHistoryResultEntryDecodeRequest
            public static readonly Marshaller<Stellar.TransactionHistoryResultEntryDecodeRequest> TransactionHistoryResultEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionHistoryResultEntryDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionHistoryResultEntryDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionHistoryResultEntryDecodeResponse
            public static readonly Marshaller<Stellar.TransactionHistoryResultEntryDecodeResponse> TransactionHistoryResultEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionHistoryResultEntryDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionHistoryResultEntryDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerHeaderHistoryEntryEncodeRequest
            public static readonly Marshaller<Stellar.LedgerHeaderHistoryEntryEncodeRequest> LedgerHeaderHistoryEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerHeaderHistoryEntryEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerHeaderHistoryEntryEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerHeaderHistoryEntryEncodeResponse
            public static readonly Marshaller<Stellar.LedgerHeaderHistoryEntryEncodeResponse> LedgerHeaderHistoryEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerHeaderHistoryEntryEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerHeaderHistoryEntryEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerHeaderHistoryEntryDecodeRequest
            public static readonly Marshaller<Stellar.LedgerHeaderHistoryEntryDecodeRequest> LedgerHeaderHistoryEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerHeaderHistoryEntryDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerHeaderHistoryEntryDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerHeaderHistoryEntryDecodeResponse
            public static readonly Marshaller<Stellar.LedgerHeaderHistoryEntryDecodeResponse> LedgerHeaderHistoryEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerHeaderHistoryEntryDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerHeaderHistoryEntryDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerSCPMessagesEncodeRequest
            public static readonly Marshaller<Stellar.LedgerSCPMessagesEncodeRequest> LedgerSCPMessagesEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerSCPMessagesEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerSCPMessagesEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerSCPMessagesEncodeResponse
            public static readonly Marshaller<Stellar.LedgerSCPMessagesEncodeResponse> LedgerSCPMessagesEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerSCPMessagesEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerSCPMessagesEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerSCPMessagesDecodeRequest
            public static readonly Marshaller<Stellar.LedgerSCPMessagesDecodeRequest> LedgerSCPMessagesDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerSCPMessagesDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerSCPMessagesDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerSCPMessagesDecodeResponse
            public static readonly Marshaller<Stellar.LedgerSCPMessagesDecodeResponse> LedgerSCPMessagesDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerSCPMessagesDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerSCPMessagesDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPHistoryEntryV0EncodeRequest
            public static readonly Marshaller<Stellar.SCPHistoryEntryV0EncodeRequest> SCPHistoryEntryV0EncodeRequestMarshaller = Marshallers.Create<Stellar.SCPHistoryEntryV0EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPHistoryEntryV0EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPHistoryEntryV0EncodeResponse
            public static readonly Marshaller<Stellar.SCPHistoryEntryV0EncodeResponse> SCPHistoryEntryV0EncodeResponseMarshaller = Marshallers.Create<Stellar.SCPHistoryEntryV0EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPHistoryEntryV0EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPHistoryEntryV0DecodeRequest
            public static readonly Marshaller<Stellar.SCPHistoryEntryV0DecodeRequest> SCPHistoryEntryV0DecodeRequestMarshaller = Marshallers.Create<Stellar.SCPHistoryEntryV0DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPHistoryEntryV0DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPHistoryEntryV0DecodeResponse
            public static readonly Marshaller<Stellar.SCPHistoryEntryV0DecodeResponse> SCPHistoryEntryV0DecodeResponseMarshaller = Marshallers.Create<Stellar.SCPHistoryEntryV0DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPHistoryEntryV0DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPHistoryEntryEncodeRequest
            public static readonly Marshaller<Stellar.SCPHistoryEntryEncodeRequest> SCPHistoryEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.SCPHistoryEntryEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPHistoryEntryEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPHistoryEntryEncodeResponse
            public static readonly Marshaller<Stellar.SCPHistoryEntryEncodeResponse> SCPHistoryEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.SCPHistoryEntryEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPHistoryEntryEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPHistoryEntryDecodeRequest
            public static readonly Marshaller<Stellar.SCPHistoryEntryDecodeRequest> SCPHistoryEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.SCPHistoryEntryDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPHistoryEntryDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPHistoryEntryDecodeResponse
            public static readonly Marshaller<Stellar.SCPHistoryEntryDecodeResponse> SCPHistoryEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.SCPHistoryEntryDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPHistoryEntryDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerEntryChangeTypeEncodeRequest
            public static readonly Marshaller<Stellar.LedgerEntryChangeTypeEncodeRequest> LedgerEntryChangeTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerEntryChangeTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerEntryChangeTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerEntryChangeTypeEncodeResponse
            public static readonly Marshaller<Stellar.LedgerEntryChangeTypeEncodeResponse> LedgerEntryChangeTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerEntryChangeTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerEntryChangeTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerEntryChangeTypeDecodeRequest
            public static readonly Marshaller<Stellar.LedgerEntryChangeTypeDecodeRequest> LedgerEntryChangeTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerEntryChangeTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerEntryChangeTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerEntryChangeTypeDecodeResponse
            public static readonly Marshaller<Stellar.LedgerEntryChangeTypeDecodeResponse> LedgerEntryChangeTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerEntryChangeTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerEntryChangeTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerEntryChangeEncodeRequest
            public static readonly Marshaller<Stellar.LedgerEntryChangeEncodeRequest> LedgerEntryChangeEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerEntryChangeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerEntryChangeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerEntryChangeEncodeResponse
            public static readonly Marshaller<Stellar.LedgerEntryChangeEncodeResponse> LedgerEntryChangeEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerEntryChangeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerEntryChangeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerEntryChangeDecodeRequest
            public static readonly Marshaller<Stellar.LedgerEntryChangeDecodeRequest> LedgerEntryChangeDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerEntryChangeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerEntryChangeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerEntryChangeDecodeResponse
            public static readonly Marshaller<Stellar.LedgerEntryChangeDecodeResponse> LedgerEntryChangeDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerEntryChangeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerEntryChangeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerEntryChangesEncodeRequest
            public static readonly Marshaller<Stellar.LedgerEntryChangesEncodeRequest> LedgerEntryChangesEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerEntryChangesEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerEntryChangesEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerEntryChangesEncodeResponse
            public static readonly Marshaller<Stellar.LedgerEntryChangesEncodeResponse> LedgerEntryChangesEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerEntryChangesEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerEntryChangesEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerEntryChangesDecodeRequest
            public static readonly Marshaller<Stellar.LedgerEntryChangesDecodeRequest> LedgerEntryChangesDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerEntryChangesDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerEntryChangesDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerEntryChangesDecodeResponse
            public static readonly Marshaller<Stellar.LedgerEntryChangesDecodeResponse> LedgerEntryChangesDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerEntryChangesDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerEntryChangesDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OperationMetaEncodeRequest
            public static readonly Marshaller<Stellar.OperationMetaEncodeRequest> OperationMetaEncodeRequestMarshaller = Marshallers.Create<Stellar.OperationMetaEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OperationMetaEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OperationMetaEncodeResponse
            public static readonly Marshaller<Stellar.OperationMetaEncodeResponse> OperationMetaEncodeResponseMarshaller = Marshallers.Create<Stellar.OperationMetaEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OperationMetaEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OperationMetaDecodeRequest
            public static readonly Marshaller<Stellar.OperationMetaDecodeRequest> OperationMetaDecodeRequestMarshaller = Marshallers.Create<Stellar.OperationMetaDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OperationMetaDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OperationMetaDecodeResponse
            public static readonly Marshaller<Stellar.OperationMetaDecodeResponse> OperationMetaDecodeResponseMarshaller = Marshallers.Create<Stellar.OperationMetaDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OperationMetaDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionMetaV1EncodeRequest
            public static readonly Marshaller<Stellar.TransactionMetaV1EncodeRequest> TransactionMetaV1EncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionMetaV1EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionMetaV1EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionMetaV1EncodeResponse
            public static readonly Marshaller<Stellar.TransactionMetaV1EncodeResponse> TransactionMetaV1EncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionMetaV1EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionMetaV1EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionMetaV1DecodeRequest
            public static readonly Marshaller<Stellar.TransactionMetaV1DecodeRequest> TransactionMetaV1DecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionMetaV1DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionMetaV1DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionMetaV1DecodeResponse
            public static readonly Marshaller<Stellar.TransactionMetaV1DecodeResponse> TransactionMetaV1DecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionMetaV1DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionMetaV1DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionMetaV2EncodeRequest
            public static readonly Marshaller<Stellar.TransactionMetaV2EncodeRequest> TransactionMetaV2EncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionMetaV2EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionMetaV2EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionMetaV2EncodeResponse
            public static readonly Marshaller<Stellar.TransactionMetaV2EncodeResponse> TransactionMetaV2EncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionMetaV2EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionMetaV2EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionMetaV2DecodeRequest
            public static readonly Marshaller<Stellar.TransactionMetaV2DecodeRequest> TransactionMetaV2DecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionMetaV2DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionMetaV2DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionMetaV2DecodeResponse
            public static readonly Marshaller<Stellar.TransactionMetaV2DecodeResponse> TransactionMetaV2DecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionMetaV2DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionMetaV2DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractEventTypeEncodeRequest
            public static readonly Marshaller<Stellar.ContractEventTypeEncodeRequest> ContractEventTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.ContractEventTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractEventTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractEventTypeEncodeResponse
            public static readonly Marshaller<Stellar.ContractEventTypeEncodeResponse> ContractEventTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.ContractEventTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractEventTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractEventTypeDecodeRequest
            public static readonly Marshaller<Stellar.ContractEventTypeDecodeRequest> ContractEventTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.ContractEventTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractEventTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractEventTypeDecodeResponse
            public static readonly Marshaller<Stellar.ContractEventTypeDecodeResponse> ContractEventTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.ContractEventTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractEventTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractEventEncodeRequest
            public static readonly Marshaller<Stellar.ContractEventEncodeRequest> ContractEventEncodeRequestMarshaller = Marshallers.Create<Stellar.ContractEventEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractEventEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractEventEncodeResponse
            public static readonly Marshaller<Stellar.ContractEventEncodeResponse> ContractEventEncodeResponseMarshaller = Marshallers.Create<Stellar.ContractEventEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractEventEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractEventDecodeRequest
            public static readonly Marshaller<Stellar.ContractEventDecodeRequest> ContractEventDecodeRequestMarshaller = Marshallers.Create<Stellar.ContractEventDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractEventDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractEventDecodeResponse
            public static readonly Marshaller<Stellar.ContractEventDecodeResponse> ContractEventDecodeResponseMarshaller = Marshallers.Create<Stellar.ContractEventDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractEventDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DiagnosticEventEncodeRequest
            public static readonly Marshaller<Stellar.DiagnosticEventEncodeRequest> DiagnosticEventEncodeRequestMarshaller = Marshallers.Create<Stellar.DiagnosticEventEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DiagnosticEventEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DiagnosticEventEncodeResponse
            public static readonly Marshaller<Stellar.DiagnosticEventEncodeResponse> DiagnosticEventEncodeResponseMarshaller = Marshallers.Create<Stellar.DiagnosticEventEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DiagnosticEventEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DiagnosticEventDecodeRequest
            public static readonly Marshaller<Stellar.DiagnosticEventDecodeRequest> DiagnosticEventDecodeRequestMarshaller = Marshallers.Create<Stellar.DiagnosticEventDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DiagnosticEventDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DiagnosticEventDecodeResponse
            public static readonly Marshaller<Stellar.DiagnosticEventDecodeResponse> DiagnosticEventDecodeResponseMarshaller = Marshallers.Create<Stellar.DiagnosticEventDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DiagnosticEventDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DiagnosticEventsEncodeRequest
            public static readonly Marshaller<Stellar.DiagnosticEventsEncodeRequest> DiagnosticEventsEncodeRequestMarshaller = Marshallers.Create<Stellar.DiagnosticEventsEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DiagnosticEventsEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DiagnosticEventsEncodeResponse
            public static readonly Marshaller<Stellar.DiagnosticEventsEncodeResponse> DiagnosticEventsEncodeResponseMarshaller = Marshallers.Create<Stellar.DiagnosticEventsEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DiagnosticEventsEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DiagnosticEventsDecodeRequest
            public static readonly Marshaller<Stellar.DiagnosticEventsDecodeRequest> DiagnosticEventsDecodeRequestMarshaller = Marshallers.Create<Stellar.DiagnosticEventsDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DiagnosticEventsDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DiagnosticEventsDecodeResponse
            public static readonly Marshaller<Stellar.DiagnosticEventsDecodeResponse> DiagnosticEventsDecodeResponseMarshaller = Marshallers.Create<Stellar.DiagnosticEventsDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DiagnosticEventsDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanTransactionMetaExtV1EncodeRequest
            public static readonly Marshaller<Stellar.SorobanTransactionMetaExtV1EncodeRequest> SorobanTransactionMetaExtV1EncodeRequestMarshaller = Marshallers.Create<Stellar.SorobanTransactionMetaExtV1EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanTransactionMetaExtV1EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanTransactionMetaExtV1EncodeResponse
            public static readonly Marshaller<Stellar.SorobanTransactionMetaExtV1EncodeResponse> SorobanTransactionMetaExtV1EncodeResponseMarshaller = Marshallers.Create<Stellar.SorobanTransactionMetaExtV1EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanTransactionMetaExtV1EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanTransactionMetaExtV1DecodeRequest
            public static readonly Marshaller<Stellar.SorobanTransactionMetaExtV1DecodeRequest> SorobanTransactionMetaExtV1DecodeRequestMarshaller = Marshallers.Create<Stellar.SorobanTransactionMetaExtV1DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanTransactionMetaExtV1DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanTransactionMetaExtV1DecodeResponse
            public static readonly Marshaller<Stellar.SorobanTransactionMetaExtV1DecodeResponse> SorobanTransactionMetaExtV1DecodeResponseMarshaller = Marshallers.Create<Stellar.SorobanTransactionMetaExtV1DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanTransactionMetaExtV1DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanTransactionMetaExtEncodeRequest
            public static readonly Marshaller<Stellar.SorobanTransactionMetaExtEncodeRequest> SorobanTransactionMetaExtEncodeRequestMarshaller = Marshallers.Create<Stellar.SorobanTransactionMetaExtEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanTransactionMetaExtEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanTransactionMetaExtEncodeResponse
            public static readonly Marshaller<Stellar.SorobanTransactionMetaExtEncodeResponse> SorobanTransactionMetaExtEncodeResponseMarshaller = Marshallers.Create<Stellar.SorobanTransactionMetaExtEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanTransactionMetaExtEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanTransactionMetaExtDecodeRequest
            public static readonly Marshaller<Stellar.SorobanTransactionMetaExtDecodeRequest> SorobanTransactionMetaExtDecodeRequestMarshaller = Marshallers.Create<Stellar.SorobanTransactionMetaExtDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanTransactionMetaExtDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanTransactionMetaExtDecodeResponse
            public static readonly Marshaller<Stellar.SorobanTransactionMetaExtDecodeResponse> SorobanTransactionMetaExtDecodeResponseMarshaller = Marshallers.Create<Stellar.SorobanTransactionMetaExtDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanTransactionMetaExtDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanTransactionMetaEncodeRequest
            public static readonly Marshaller<Stellar.SorobanTransactionMetaEncodeRequest> SorobanTransactionMetaEncodeRequestMarshaller = Marshallers.Create<Stellar.SorobanTransactionMetaEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanTransactionMetaEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanTransactionMetaEncodeResponse
            public static readonly Marshaller<Stellar.SorobanTransactionMetaEncodeResponse> SorobanTransactionMetaEncodeResponseMarshaller = Marshallers.Create<Stellar.SorobanTransactionMetaEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanTransactionMetaEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanTransactionMetaDecodeRequest
            public static readonly Marshaller<Stellar.SorobanTransactionMetaDecodeRequest> SorobanTransactionMetaDecodeRequestMarshaller = Marshallers.Create<Stellar.SorobanTransactionMetaDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanTransactionMetaDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanTransactionMetaDecodeResponse
            public static readonly Marshaller<Stellar.SorobanTransactionMetaDecodeResponse> SorobanTransactionMetaDecodeResponseMarshaller = Marshallers.Create<Stellar.SorobanTransactionMetaDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanTransactionMetaDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionMetaV3EncodeRequest
            public static readonly Marshaller<Stellar.TransactionMetaV3EncodeRequest> TransactionMetaV3EncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionMetaV3EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionMetaV3EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionMetaV3EncodeResponse
            public static readonly Marshaller<Stellar.TransactionMetaV3EncodeResponse> TransactionMetaV3EncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionMetaV3EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionMetaV3EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionMetaV3DecodeRequest
            public static readonly Marshaller<Stellar.TransactionMetaV3DecodeRequest> TransactionMetaV3DecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionMetaV3DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionMetaV3DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionMetaV3DecodeResponse
            public static readonly Marshaller<Stellar.TransactionMetaV3DecodeResponse> TransactionMetaV3DecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionMetaV3DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionMetaV3DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InvokeHostFunctionSuccessPreImageEncodeRequest
            public static readonly Marshaller<Stellar.InvokeHostFunctionSuccessPreImageEncodeRequest> InvokeHostFunctionSuccessPreImageEncodeRequestMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionSuccessPreImageEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InvokeHostFunctionSuccessPreImageEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InvokeHostFunctionSuccessPreImageEncodeResponse
            public static readonly Marshaller<Stellar.InvokeHostFunctionSuccessPreImageEncodeResponse> InvokeHostFunctionSuccessPreImageEncodeResponseMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionSuccessPreImageEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InvokeHostFunctionSuccessPreImageEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InvokeHostFunctionSuccessPreImageDecodeRequest
            public static readonly Marshaller<Stellar.InvokeHostFunctionSuccessPreImageDecodeRequest> InvokeHostFunctionSuccessPreImageDecodeRequestMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionSuccessPreImageDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InvokeHostFunctionSuccessPreImageDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InvokeHostFunctionSuccessPreImageDecodeResponse
            public static readonly Marshaller<Stellar.InvokeHostFunctionSuccessPreImageDecodeResponse> InvokeHostFunctionSuccessPreImageDecodeResponseMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionSuccessPreImageDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InvokeHostFunctionSuccessPreImageDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionMetaEncodeRequest
            public static readonly Marshaller<Stellar.TransactionMetaEncodeRequest> TransactionMetaEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionMetaEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionMetaEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionMetaEncodeResponse
            public static readonly Marshaller<Stellar.TransactionMetaEncodeResponse> TransactionMetaEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionMetaEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionMetaEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionMetaDecodeRequest
            public static readonly Marshaller<Stellar.TransactionMetaDecodeRequest> TransactionMetaDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionMetaDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionMetaDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionMetaDecodeResponse
            public static readonly Marshaller<Stellar.TransactionMetaDecodeResponse> TransactionMetaDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionMetaDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionMetaDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionResultMetaEncodeRequest
            public static readonly Marshaller<Stellar.TransactionResultMetaEncodeRequest> TransactionResultMetaEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionResultMetaEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionResultMetaEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionResultMetaEncodeResponse
            public static readonly Marshaller<Stellar.TransactionResultMetaEncodeResponse> TransactionResultMetaEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionResultMetaEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionResultMetaEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionResultMetaDecodeRequest
            public static readonly Marshaller<Stellar.TransactionResultMetaDecodeRequest> TransactionResultMetaDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionResultMetaDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionResultMetaDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionResultMetaDecodeResponse
            public static readonly Marshaller<Stellar.TransactionResultMetaDecodeResponse> TransactionResultMetaDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionResultMetaDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionResultMetaDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for UpgradeEntryMetaEncodeRequest
            public static readonly Marshaller<Stellar.UpgradeEntryMetaEncodeRequest> UpgradeEntryMetaEncodeRequestMarshaller = Marshallers.Create<Stellar.UpgradeEntryMetaEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.UpgradeEntryMetaEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for UpgradeEntryMetaEncodeResponse
            public static readonly Marshaller<Stellar.UpgradeEntryMetaEncodeResponse> UpgradeEntryMetaEncodeResponseMarshaller = Marshallers.Create<Stellar.UpgradeEntryMetaEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.UpgradeEntryMetaEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for UpgradeEntryMetaDecodeRequest
            public static readonly Marshaller<Stellar.UpgradeEntryMetaDecodeRequest> UpgradeEntryMetaDecodeRequestMarshaller = Marshallers.Create<Stellar.UpgradeEntryMetaDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.UpgradeEntryMetaDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for UpgradeEntryMetaDecodeResponse
            public static readonly Marshaller<Stellar.UpgradeEntryMetaDecodeResponse> UpgradeEntryMetaDecodeResponseMarshaller = Marshallers.Create<Stellar.UpgradeEntryMetaDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.UpgradeEntryMetaDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerCloseMetaV0EncodeRequest
            public static readonly Marshaller<Stellar.LedgerCloseMetaV0EncodeRequest> LedgerCloseMetaV0EncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaV0EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerCloseMetaV0EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerCloseMetaV0EncodeResponse
            public static readonly Marshaller<Stellar.LedgerCloseMetaV0EncodeResponse> LedgerCloseMetaV0EncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaV0EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerCloseMetaV0EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerCloseMetaV0DecodeRequest
            public static readonly Marshaller<Stellar.LedgerCloseMetaV0DecodeRequest> LedgerCloseMetaV0DecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaV0DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerCloseMetaV0DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerCloseMetaV0DecodeResponse
            public static readonly Marshaller<Stellar.LedgerCloseMetaV0DecodeResponse> LedgerCloseMetaV0DecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaV0DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerCloseMetaV0DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerCloseMetaExtV1EncodeRequest
            public static readonly Marshaller<Stellar.LedgerCloseMetaExtV1EncodeRequest> LedgerCloseMetaExtV1EncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaExtV1EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerCloseMetaExtV1EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerCloseMetaExtV1EncodeResponse
            public static readonly Marshaller<Stellar.LedgerCloseMetaExtV1EncodeResponse> LedgerCloseMetaExtV1EncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaExtV1EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerCloseMetaExtV1EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerCloseMetaExtV1DecodeRequest
            public static readonly Marshaller<Stellar.LedgerCloseMetaExtV1DecodeRequest> LedgerCloseMetaExtV1DecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaExtV1DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerCloseMetaExtV1DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerCloseMetaExtV1DecodeResponse
            public static readonly Marshaller<Stellar.LedgerCloseMetaExtV1DecodeResponse> LedgerCloseMetaExtV1DecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaExtV1DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerCloseMetaExtV1DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerCloseMetaExtEncodeRequest
            public static readonly Marshaller<Stellar.LedgerCloseMetaExtEncodeRequest> LedgerCloseMetaExtEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaExtEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerCloseMetaExtEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerCloseMetaExtEncodeResponse
            public static readonly Marshaller<Stellar.LedgerCloseMetaExtEncodeResponse> LedgerCloseMetaExtEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaExtEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerCloseMetaExtEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerCloseMetaExtDecodeRequest
            public static readonly Marshaller<Stellar.LedgerCloseMetaExtDecodeRequest> LedgerCloseMetaExtDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaExtDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerCloseMetaExtDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerCloseMetaExtDecodeResponse
            public static readonly Marshaller<Stellar.LedgerCloseMetaExtDecodeResponse> LedgerCloseMetaExtDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaExtDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerCloseMetaExtDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerCloseMetaV1EncodeRequest
            public static readonly Marshaller<Stellar.LedgerCloseMetaV1EncodeRequest> LedgerCloseMetaV1EncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaV1EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerCloseMetaV1EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerCloseMetaV1EncodeResponse
            public static readonly Marshaller<Stellar.LedgerCloseMetaV1EncodeResponse> LedgerCloseMetaV1EncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaV1EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerCloseMetaV1EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerCloseMetaV1DecodeRequest
            public static readonly Marshaller<Stellar.LedgerCloseMetaV1DecodeRequest> LedgerCloseMetaV1DecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaV1DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerCloseMetaV1DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerCloseMetaV1DecodeResponse
            public static readonly Marshaller<Stellar.LedgerCloseMetaV1DecodeResponse> LedgerCloseMetaV1DecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaV1DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerCloseMetaV1DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerCloseMetaEncodeRequest
            public static readonly Marshaller<Stellar.LedgerCloseMetaEncodeRequest> LedgerCloseMetaEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerCloseMetaEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerCloseMetaEncodeResponse
            public static readonly Marshaller<Stellar.LedgerCloseMetaEncodeResponse> LedgerCloseMetaEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerCloseMetaEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerCloseMetaDecodeRequest
            public static readonly Marshaller<Stellar.LedgerCloseMetaDecodeRequest> LedgerCloseMetaDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerCloseMetaDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerCloseMetaDecodeResponse
            public static readonly Marshaller<Stellar.LedgerCloseMetaDecodeResponse> LedgerCloseMetaDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerCloseMetaDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerCloseMetaDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ErrorCodeEncodeRequest
            public static readonly Marshaller<Stellar.ErrorCodeEncodeRequest> ErrorCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.ErrorCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ErrorCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ErrorCodeEncodeResponse
            public static readonly Marshaller<Stellar.ErrorCodeEncodeResponse> ErrorCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.ErrorCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ErrorCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ErrorCodeDecodeRequest
            public static readonly Marshaller<Stellar.ErrorCodeDecodeRequest> ErrorCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.ErrorCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ErrorCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ErrorCodeDecodeResponse
            public static readonly Marshaller<Stellar.ErrorCodeDecodeResponse> ErrorCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.ErrorCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ErrorCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ErrorEncodeRequest
            public static readonly Marshaller<Stellar.ErrorEncodeRequest> ErrorEncodeRequestMarshaller = Marshallers.Create<Stellar.ErrorEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ErrorEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ErrorEncodeResponse
            public static readonly Marshaller<Stellar.ErrorEncodeResponse> ErrorEncodeResponseMarshaller = Marshallers.Create<Stellar.ErrorEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ErrorEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ErrorDecodeRequest
            public static readonly Marshaller<Stellar.ErrorDecodeRequest> ErrorDecodeRequestMarshaller = Marshallers.Create<Stellar.ErrorDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ErrorDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ErrorDecodeResponse
            public static readonly Marshaller<Stellar.ErrorDecodeResponse> ErrorDecodeResponseMarshaller = Marshallers.Create<Stellar.ErrorDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ErrorDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SendMoreEncodeRequest
            public static readonly Marshaller<Stellar.SendMoreEncodeRequest> SendMoreEncodeRequestMarshaller = Marshallers.Create<Stellar.SendMoreEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SendMoreEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SendMoreEncodeResponse
            public static readonly Marshaller<Stellar.SendMoreEncodeResponse> SendMoreEncodeResponseMarshaller = Marshallers.Create<Stellar.SendMoreEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SendMoreEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SendMoreDecodeRequest
            public static readonly Marshaller<Stellar.SendMoreDecodeRequest> SendMoreDecodeRequestMarshaller = Marshallers.Create<Stellar.SendMoreDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SendMoreDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SendMoreDecodeResponse
            public static readonly Marshaller<Stellar.SendMoreDecodeResponse> SendMoreDecodeResponseMarshaller = Marshallers.Create<Stellar.SendMoreDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SendMoreDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SendMoreExtendedEncodeRequest
            public static readonly Marshaller<Stellar.SendMoreExtendedEncodeRequest> SendMoreExtendedEncodeRequestMarshaller = Marshallers.Create<Stellar.SendMoreExtendedEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SendMoreExtendedEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SendMoreExtendedEncodeResponse
            public static readonly Marshaller<Stellar.SendMoreExtendedEncodeResponse> SendMoreExtendedEncodeResponseMarshaller = Marshallers.Create<Stellar.SendMoreExtendedEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SendMoreExtendedEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SendMoreExtendedDecodeRequest
            public static readonly Marshaller<Stellar.SendMoreExtendedDecodeRequest> SendMoreExtendedDecodeRequestMarshaller = Marshallers.Create<Stellar.SendMoreExtendedDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SendMoreExtendedDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SendMoreExtendedDecodeResponse
            public static readonly Marshaller<Stellar.SendMoreExtendedDecodeResponse> SendMoreExtendedDecodeResponseMarshaller = Marshallers.Create<Stellar.SendMoreExtendedDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SendMoreExtendedDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AuthCertEncodeRequest
            public static readonly Marshaller<Stellar.AuthCertEncodeRequest> AuthCertEncodeRequestMarshaller = Marshallers.Create<Stellar.AuthCertEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AuthCertEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AuthCertEncodeResponse
            public static readonly Marshaller<Stellar.AuthCertEncodeResponse> AuthCertEncodeResponseMarshaller = Marshallers.Create<Stellar.AuthCertEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AuthCertEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AuthCertDecodeRequest
            public static readonly Marshaller<Stellar.AuthCertDecodeRequest> AuthCertDecodeRequestMarshaller = Marshallers.Create<Stellar.AuthCertDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AuthCertDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AuthCertDecodeResponse
            public static readonly Marshaller<Stellar.AuthCertDecodeResponse> AuthCertDecodeResponseMarshaller = Marshallers.Create<Stellar.AuthCertDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AuthCertDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HelloEncodeRequest
            public static readonly Marshaller<Stellar.HelloEncodeRequest> HelloEncodeRequestMarshaller = Marshallers.Create<Stellar.HelloEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HelloEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HelloEncodeResponse
            public static readonly Marshaller<Stellar.HelloEncodeResponse> HelloEncodeResponseMarshaller = Marshallers.Create<Stellar.HelloEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HelloEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HelloDecodeRequest
            public static readonly Marshaller<Stellar.HelloDecodeRequest> HelloDecodeRequestMarshaller = Marshallers.Create<Stellar.HelloDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HelloDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HelloDecodeResponse
            public static readonly Marshaller<Stellar.HelloDecodeResponse> HelloDecodeResponseMarshaller = Marshallers.Create<Stellar.HelloDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HelloDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AuthEncodeRequest
            public static readonly Marshaller<Stellar.AuthEncodeRequest> AuthEncodeRequestMarshaller = Marshallers.Create<Stellar.AuthEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AuthEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AuthEncodeResponse
            public static readonly Marshaller<Stellar.AuthEncodeResponse> AuthEncodeResponseMarshaller = Marshallers.Create<Stellar.AuthEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AuthEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AuthDecodeRequest
            public static readonly Marshaller<Stellar.AuthDecodeRequest> AuthDecodeRequestMarshaller = Marshallers.Create<Stellar.AuthDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AuthDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AuthDecodeResponse
            public static readonly Marshaller<Stellar.AuthDecodeResponse> AuthDecodeResponseMarshaller = Marshallers.Create<Stellar.AuthDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AuthDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for IPAddrTypeEncodeRequest
            public static readonly Marshaller<Stellar.IPAddrTypeEncodeRequest> IPAddrTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.IPAddrTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.IPAddrTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for IPAddrTypeEncodeResponse
            public static readonly Marshaller<Stellar.IPAddrTypeEncodeResponse> IPAddrTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.IPAddrTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.IPAddrTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for IPAddrTypeDecodeRequest
            public static readonly Marshaller<Stellar.IPAddrTypeDecodeRequest> IPAddrTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.IPAddrTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.IPAddrTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for IPAddrTypeDecodeResponse
            public static readonly Marshaller<Stellar.IPAddrTypeDecodeResponse> IPAddrTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.IPAddrTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.IPAddrTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PeerAddressEncodeRequest
            public static readonly Marshaller<Stellar.PeerAddressEncodeRequest> PeerAddressEncodeRequestMarshaller = Marshallers.Create<Stellar.PeerAddressEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PeerAddressEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PeerAddressEncodeResponse
            public static readonly Marshaller<Stellar.PeerAddressEncodeResponse> PeerAddressEncodeResponseMarshaller = Marshallers.Create<Stellar.PeerAddressEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PeerAddressEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PeerAddressDecodeRequest
            public static readonly Marshaller<Stellar.PeerAddressDecodeRequest> PeerAddressDecodeRequestMarshaller = Marshallers.Create<Stellar.PeerAddressDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PeerAddressDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PeerAddressDecodeResponse
            public static readonly Marshaller<Stellar.PeerAddressDecodeResponse> PeerAddressDecodeResponseMarshaller = Marshallers.Create<Stellar.PeerAddressDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PeerAddressDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for MessageTypeEncodeRequest
            public static readonly Marshaller<Stellar.MessageTypeEncodeRequest> MessageTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.MessageTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.MessageTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for MessageTypeEncodeResponse
            public static readonly Marshaller<Stellar.MessageTypeEncodeResponse> MessageTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.MessageTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.MessageTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for MessageTypeDecodeRequest
            public static readonly Marshaller<Stellar.MessageTypeDecodeRequest> MessageTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.MessageTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.MessageTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for MessageTypeDecodeResponse
            public static readonly Marshaller<Stellar.MessageTypeDecodeResponse> MessageTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.MessageTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.MessageTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DontHaveEncodeRequest
            public static readonly Marshaller<Stellar.DontHaveEncodeRequest> DontHaveEncodeRequestMarshaller = Marshallers.Create<Stellar.DontHaveEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DontHaveEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DontHaveEncodeResponse
            public static readonly Marshaller<Stellar.DontHaveEncodeResponse> DontHaveEncodeResponseMarshaller = Marshallers.Create<Stellar.DontHaveEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DontHaveEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DontHaveDecodeRequest
            public static readonly Marshaller<Stellar.DontHaveDecodeRequest> DontHaveDecodeRequestMarshaller = Marshallers.Create<Stellar.DontHaveDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DontHaveDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DontHaveDecodeResponse
            public static readonly Marshaller<Stellar.DontHaveDecodeResponse> DontHaveDecodeResponseMarshaller = Marshallers.Create<Stellar.DontHaveDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DontHaveDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SurveyMessageCommandTypeEncodeRequest
            public static readonly Marshaller<Stellar.SurveyMessageCommandTypeEncodeRequest> SurveyMessageCommandTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.SurveyMessageCommandTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SurveyMessageCommandTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SurveyMessageCommandTypeEncodeResponse
            public static readonly Marshaller<Stellar.SurveyMessageCommandTypeEncodeResponse> SurveyMessageCommandTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.SurveyMessageCommandTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SurveyMessageCommandTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SurveyMessageCommandTypeDecodeRequest
            public static readonly Marshaller<Stellar.SurveyMessageCommandTypeDecodeRequest> SurveyMessageCommandTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.SurveyMessageCommandTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SurveyMessageCommandTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SurveyMessageCommandTypeDecodeResponse
            public static readonly Marshaller<Stellar.SurveyMessageCommandTypeDecodeResponse> SurveyMessageCommandTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.SurveyMessageCommandTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SurveyMessageCommandTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SurveyMessageResponseTypeEncodeRequest
            public static readonly Marshaller<Stellar.SurveyMessageResponseTypeEncodeRequest> SurveyMessageResponseTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.SurveyMessageResponseTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SurveyMessageResponseTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SurveyMessageResponseTypeEncodeResponse
            public static readonly Marshaller<Stellar.SurveyMessageResponseTypeEncodeResponse> SurveyMessageResponseTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.SurveyMessageResponseTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SurveyMessageResponseTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SurveyMessageResponseTypeDecodeRequest
            public static readonly Marshaller<Stellar.SurveyMessageResponseTypeDecodeRequest> SurveyMessageResponseTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.SurveyMessageResponseTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SurveyMessageResponseTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SurveyMessageResponseTypeDecodeResponse
            public static readonly Marshaller<Stellar.SurveyMessageResponseTypeDecodeResponse> SurveyMessageResponseTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.SurveyMessageResponseTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SurveyMessageResponseTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedSurveyStartCollectingMessageEncodeRequest
            public static readonly Marshaller<Stellar.TimeSlicedSurveyStartCollectingMessageEncodeRequest> TimeSlicedSurveyStartCollectingMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyStartCollectingMessageEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedSurveyStartCollectingMessageEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedSurveyStartCollectingMessageEncodeResponse
            public static readonly Marshaller<Stellar.TimeSlicedSurveyStartCollectingMessageEncodeResponse> TimeSlicedSurveyStartCollectingMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyStartCollectingMessageEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedSurveyStartCollectingMessageEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedSurveyStartCollectingMessageDecodeRequest
            public static readonly Marshaller<Stellar.TimeSlicedSurveyStartCollectingMessageDecodeRequest> TimeSlicedSurveyStartCollectingMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyStartCollectingMessageDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedSurveyStartCollectingMessageDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedSurveyStartCollectingMessageDecodeResponse
            public static readonly Marshaller<Stellar.TimeSlicedSurveyStartCollectingMessageDecodeResponse> TimeSlicedSurveyStartCollectingMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyStartCollectingMessageDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedSurveyStartCollectingMessageDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignedTimeSlicedSurveyStartCollectingMessageEncodeRequest
            public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeRequest> SignedTimeSlicedSurveyStartCollectingMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignedTimeSlicedSurveyStartCollectingMessageEncodeResponse
            public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeResponse> SignedTimeSlicedSurveyStartCollectingMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignedTimeSlicedSurveyStartCollectingMessageDecodeRequest
            public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeRequest> SignedTimeSlicedSurveyStartCollectingMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignedTimeSlicedSurveyStartCollectingMessageDecodeResponse
            public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeResponse> SignedTimeSlicedSurveyStartCollectingMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedSurveyStopCollectingMessageEncodeRequest
            public static readonly Marshaller<Stellar.TimeSlicedSurveyStopCollectingMessageEncodeRequest> TimeSlicedSurveyStopCollectingMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyStopCollectingMessageEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedSurveyStopCollectingMessageEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedSurveyStopCollectingMessageEncodeResponse
            public static readonly Marshaller<Stellar.TimeSlicedSurveyStopCollectingMessageEncodeResponse> TimeSlicedSurveyStopCollectingMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyStopCollectingMessageEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedSurveyStopCollectingMessageEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedSurveyStopCollectingMessageDecodeRequest
            public static readonly Marshaller<Stellar.TimeSlicedSurveyStopCollectingMessageDecodeRequest> TimeSlicedSurveyStopCollectingMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyStopCollectingMessageDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedSurveyStopCollectingMessageDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedSurveyStopCollectingMessageDecodeResponse
            public static readonly Marshaller<Stellar.TimeSlicedSurveyStopCollectingMessageDecodeResponse> TimeSlicedSurveyStopCollectingMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyStopCollectingMessageDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedSurveyStopCollectingMessageDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignedTimeSlicedSurveyStopCollectingMessageEncodeRequest
            public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeRequest> SignedTimeSlicedSurveyStopCollectingMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignedTimeSlicedSurveyStopCollectingMessageEncodeResponse
            public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeResponse> SignedTimeSlicedSurveyStopCollectingMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignedTimeSlicedSurveyStopCollectingMessageDecodeRequest
            public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeRequest> SignedTimeSlicedSurveyStopCollectingMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignedTimeSlicedSurveyStopCollectingMessageDecodeResponse
            public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeResponse> SignedTimeSlicedSurveyStopCollectingMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SurveyRequestMessageEncodeRequest
            public static readonly Marshaller<Stellar.SurveyRequestMessageEncodeRequest> SurveyRequestMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.SurveyRequestMessageEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SurveyRequestMessageEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SurveyRequestMessageEncodeResponse
            public static readonly Marshaller<Stellar.SurveyRequestMessageEncodeResponse> SurveyRequestMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.SurveyRequestMessageEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SurveyRequestMessageEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SurveyRequestMessageDecodeRequest
            public static readonly Marshaller<Stellar.SurveyRequestMessageDecodeRequest> SurveyRequestMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.SurveyRequestMessageDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SurveyRequestMessageDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SurveyRequestMessageDecodeResponse
            public static readonly Marshaller<Stellar.SurveyRequestMessageDecodeResponse> SurveyRequestMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.SurveyRequestMessageDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SurveyRequestMessageDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedSurveyRequestMessageEncodeRequest
            public static readonly Marshaller<Stellar.TimeSlicedSurveyRequestMessageEncodeRequest> TimeSlicedSurveyRequestMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyRequestMessageEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedSurveyRequestMessageEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedSurveyRequestMessageEncodeResponse
            public static readonly Marshaller<Stellar.TimeSlicedSurveyRequestMessageEncodeResponse> TimeSlicedSurveyRequestMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyRequestMessageEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedSurveyRequestMessageEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedSurveyRequestMessageDecodeRequest
            public static readonly Marshaller<Stellar.TimeSlicedSurveyRequestMessageDecodeRequest> TimeSlicedSurveyRequestMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyRequestMessageDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedSurveyRequestMessageDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedSurveyRequestMessageDecodeResponse
            public static readonly Marshaller<Stellar.TimeSlicedSurveyRequestMessageDecodeResponse> TimeSlicedSurveyRequestMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyRequestMessageDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedSurveyRequestMessageDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignedSurveyRequestMessageEncodeRequest
            public static readonly Marshaller<Stellar.SignedSurveyRequestMessageEncodeRequest> SignedSurveyRequestMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.SignedSurveyRequestMessageEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignedSurveyRequestMessageEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignedSurveyRequestMessageEncodeResponse
            public static readonly Marshaller<Stellar.SignedSurveyRequestMessageEncodeResponse> SignedSurveyRequestMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.SignedSurveyRequestMessageEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignedSurveyRequestMessageEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignedSurveyRequestMessageDecodeRequest
            public static readonly Marshaller<Stellar.SignedSurveyRequestMessageDecodeRequest> SignedSurveyRequestMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.SignedSurveyRequestMessageDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignedSurveyRequestMessageDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignedSurveyRequestMessageDecodeResponse
            public static readonly Marshaller<Stellar.SignedSurveyRequestMessageDecodeResponse> SignedSurveyRequestMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.SignedSurveyRequestMessageDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignedSurveyRequestMessageDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignedTimeSlicedSurveyRequestMessageEncodeRequest
            public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyRequestMessageEncodeRequest> SignedTimeSlicedSurveyRequestMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyRequestMessageEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyRequestMessageEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignedTimeSlicedSurveyRequestMessageEncodeResponse
            public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyRequestMessageEncodeResponse> SignedTimeSlicedSurveyRequestMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyRequestMessageEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyRequestMessageEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignedTimeSlicedSurveyRequestMessageDecodeRequest
            public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyRequestMessageDecodeRequest> SignedTimeSlicedSurveyRequestMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyRequestMessageDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyRequestMessageDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignedTimeSlicedSurveyRequestMessageDecodeResponse
            public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyRequestMessageDecodeResponse> SignedTimeSlicedSurveyRequestMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyRequestMessageDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyRequestMessageDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for EncryptedBodyEncodeRequest
            public static readonly Marshaller<Stellar.EncryptedBodyEncodeRequest> EncryptedBodyEncodeRequestMarshaller = Marshallers.Create<Stellar.EncryptedBodyEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.EncryptedBodyEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for EncryptedBodyEncodeResponse
            public static readonly Marshaller<Stellar.EncryptedBodyEncodeResponse> EncryptedBodyEncodeResponseMarshaller = Marshallers.Create<Stellar.EncryptedBodyEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.EncryptedBodyEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for EncryptedBodyDecodeRequest
            public static readonly Marshaller<Stellar.EncryptedBodyDecodeRequest> EncryptedBodyDecodeRequestMarshaller = Marshallers.Create<Stellar.EncryptedBodyDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.EncryptedBodyDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for EncryptedBodyDecodeResponse
            public static readonly Marshaller<Stellar.EncryptedBodyDecodeResponse> EncryptedBodyDecodeResponseMarshaller = Marshallers.Create<Stellar.EncryptedBodyDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.EncryptedBodyDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SurveyResponseMessageEncodeRequest
            public static readonly Marshaller<Stellar.SurveyResponseMessageEncodeRequest> SurveyResponseMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.SurveyResponseMessageEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SurveyResponseMessageEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SurveyResponseMessageEncodeResponse
            public static readonly Marshaller<Stellar.SurveyResponseMessageEncodeResponse> SurveyResponseMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.SurveyResponseMessageEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SurveyResponseMessageEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SurveyResponseMessageDecodeRequest
            public static readonly Marshaller<Stellar.SurveyResponseMessageDecodeRequest> SurveyResponseMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.SurveyResponseMessageDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SurveyResponseMessageDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SurveyResponseMessageDecodeResponse
            public static readonly Marshaller<Stellar.SurveyResponseMessageDecodeResponse> SurveyResponseMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.SurveyResponseMessageDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SurveyResponseMessageDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedSurveyResponseMessageEncodeRequest
            public static readonly Marshaller<Stellar.TimeSlicedSurveyResponseMessageEncodeRequest> TimeSlicedSurveyResponseMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyResponseMessageEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedSurveyResponseMessageEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedSurveyResponseMessageEncodeResponse
            public static readonly Marshaller<Stellar.TimeSlicedSurveyResponseMessageEncodeResponse> TimeSlicedSurveyResponseMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyResponseMessageEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedSurveyResponseMessageEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedSurveyResponseMessageDecodeRequest
            public static readonly Marshaller<Stellar.TimeSlicedSurveyResponseMessageDecodeRequest> TimeSlicedSurveyResponseMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyResponseMessageDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedSurveyResponseMessageDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedSurveyResponseMessageDecodeResponse
            public static readonly Marshaller<Stellar.TimeSlicedSurveyResponseMessageDecodeResponse> TimeSlicedSurveyResponseMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedSurveyResponseMessageDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedSurveyResponseMessageDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignedSurveyResponseMessageEncodeRequest
            public static readonly Marshaller<Stellar.SignedSurveyResponseMessageEncodeRequest> SignedSurveyResponseMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.SignedSurveyResponseMessageEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignedSurveyResponseMessageEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignedSurveyResponseMessageEncodeResponse
            public static readonly Marshaller<Stellar.SignedSurveyResponseMessageEncodeResponse> SignedSurveyResponseMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.SignedSurveyResponseMessageEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignedSurveyResponseMessageEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignedSurveyResponseMessageDecodeRequest
            public static readonly Marshaller<Stellar.SignedSurveyResponseMessageDecodeRequest> SignedSurveyResponseMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.SignedSurveyResponseMessageDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignedSurveyResponseMessageDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignedSurveyResponseMessageDecodeResponse
            public static readonly Marshaller<Stellar.SignedSurveyResponseMessageDecodeResponse> SignedSurveyResponseMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.SignedSurveyResponseMessageDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignedSurveyResponseMessageDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignedTimeSlicedSurveyResponseMessageEncodeRequest
            public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyResponseMessageEncodeRequest> SignedTimeSlicedSurveyResponseMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyResponseMessageEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyResponseMessageEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignedTimeSlicedSurveyResponseMessageEncodeResponse
            public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyResponseMessageEncodeResponse> SignedTimeSlicedSurveyResponseMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyResponseMessageEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyResponseMessageEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignedTimeSlicedSurveyResponseMessageDecodeRequest
            public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyResponseMessageDecodeRequest> SignedTimeSlicedSurveyResponseMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyResponseMessageDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyResponseMessageDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignedTimeSlicedSurveyResponseMessageDecodeResponse
            public static readonly Marshaller<Stellar.SignedTimeSlicedSurveyResponseMessageDecodeResponse> SignedTimeSlicedSurveyResponseMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.SignedTimeSlicedSurveyResponseMessageDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignedTimeSlicedSurveyResponseMessageDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PeerStatsEncodeRequest
            public static readonly Marshaller<Stellar.PeerStatsEncodeRequest> PeerStatsEncodeRequestMarshaller = Marshallers.Create<Stellar.PeerStatsEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PeerStatsEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PeerStatsEncodeResponse
            public static readonly Marshaller<Stellar.PeerStatsEncodeResponse> PeerStatsEncodeResponseMarshaller = Marshallers.Create<Stellar.PeerStatsEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PeerStatsEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PeerStatsDecodeRequest
            public static readonly Marshaller<Stellar.PeerStatsDecodeRequest> PeerStatsDecodeRequestMarshaller = Marshallers.Create<Stellar.PeerStatsDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PeerStatsDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PeerStatsDecodeResponse
            public static readonly Marshaller<Stellar.PeerStatsDecodeResponse> PeerStatsDecodeResponseMarshaller = Marshallers.Create<Stellar.PeerStatsDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PeerStatsDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PeerStatListEncodeRequest
            public static readonly Marshaller<Stellar.PeerStatListEncodeRequest> PeerStatListEncodeRequestMarshaller = Marshallers.Create<Stellar.PeerStatListEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PeerStatListEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PeerStatListEncodeResponse
            public static readonly Marshaller<Stellar.PeerStatListEncodeResponse> PeerStatListEncodeResponseMarshaller = Marshallers.Create<Stellar.PeerStatListEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PeerStatListEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PeerStatListDecodeRequest
            public static readonly Marshaller<Stellar.PeerStatListDecodeRequest> PeerStatListDecodeRequestMarshaller = Marshallers.Create<Stellar.PeerStatListDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PeerStatListDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PeerStatListDecodeResponse
            public static readonly Marshaller<Stellar.PeerStatListDecodeResponse> PeerStatListDecodeResponseMarshaller = Marshallers.Create<Stellar.PeerStatListDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PeerStatListDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedNodeDataEncodeRequest
            public static readonly Marshaller<Stellar.TimeSlicedNodeDataEncodeRequest> TimeSlicedNodeDataEncodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedNodeDataEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedNodeDataEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedNodeDataEncodeResponse
            public static readonly Marshaller<Stellar.TimeSlicedNodeDataEncodeResponse> TimeSlicedNodeDataEncodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedNodeDataEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedNodeDataEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedNodeDataDecodeRequest
            public static readonly Marshaller<Stellar.TimeSlicedNodeDataDecodeRequest> TimeSlicedNodeDataDecodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedNodeDataDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedNodeDataDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedNodeDataDecodeResponse
            public static readonly Marshaller<Stellar.TimeSlicedNodeDataDecodeResponse> TimeSlicedNodeDataDecodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedNodeDataDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedNodeDataDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedPeerDataEncodeRequest
            public static readonly Marshaller<Stellar.TimeSlicedPeerDataEncodeRequest> TimeSlicedPeerDataEncodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedPeerDataEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedPeerDataEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedPeerDataEncodeResponse
            public static readonly Marshaller<Stellar.TimeSlicedPeerDataEncodeResponse> TimeSlicedPeerDataEncodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedPeerDataEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedPeerDataEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedPeerDataDecodeRequest
            public static readonly Marshaller<Stellar.TimeSlicedPeerDataDecodeRequest> TimeSlicedPeerDataDecodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedPeerDataDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedPeerDataDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedPeerDataDecodeResponse
            public static readonly Marshaller<Stellar.TimeSlicedPeerDataDecodeResponse> TimeSlicedPeerDataDecodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedPeerDataDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedPeerDataDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedPeerDataListEncodeRequest
            public static readonly Marshaller<Stellar.TimeSlicedPeerDataListEncodeRequest> TimeSlicedPeerDataListEncodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedPeerDataListEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedPeerDataListEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedPeerDataListEncodeResponse
            public static readonly Marshaller<Stellar.TimeSlicedPeerDataListEncodeResponse> TimeSlicedPeerDataListEncodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedPeerDataListEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedPeerDataListEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedPeerDataListDecodeRequest
            public static readonly Marshaller<Stellar.TimeSlicedPeerDataListDecodeRequest> TimeSlicedPeerDataListDecodeRequestMarshaller = Marshallers.Create<Stellar.TimeSlicedPeerDataListDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedPeerDataListDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeSlicedPeerDataListDecodeResponse
            public static readonly Marshaller<Stellar.TimeSlicedPeerDataListDecodeResponse> TimeSlicedPeerDataListDecodeResponseMarshaller = Marshallers.Create<Stellar.TimeSlicedPeerDataListDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeSlicedPeerDataListDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TopologyResponseBodyV0EncodeRequest
            public static readonly Marshaller<Stellar.TopologyResponseBodyV0EncodeRequest> TopologyResponseBodyV0EncodeRequestMarshaller = Marshallers.Create<Stellar.TopologyResponseBodyV0EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TopologyResponseBodyV0EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TopologyResponseBodyV0EncodeResponse
            public static readonly Marshaller<Stellar.TopologyResponseBodyV0EncodeResponse> TopologyResponseBodyV0EncodeResponseMarshaller = Marshallers.Create<Stellar.TopologyResponseBodyV0EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TopologyResponseBodyV0EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TopologyResponseBodyV0DecodeRequest
            public static readonly Marshaller<Stellar.TopologyResponseBodyV0DecodeRequest> TopologyResponseBodyV0DecodeRequestMarshaller = Marshallers.Create<Stellar.TopologyResponseBodyV0DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TopologyResponseBodyV0DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TopologyResponseBodyV0DecodeResponse
            public static readonly Marshaller<Stellar.TopologyResponseBodyV0DecodeResponse> TopologyResponseBodyV0DecodeResponseMarshaller = Marshallers.Create<Stellar.TopologyResponseBodyV0DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TopologyResponseBodyV0DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TopologyResponseBodyV1EncodeRequest
            public static readonly Marshaller<Stellar.TopologyResponseBodyV1EncodeRequest> TopologyResponseBodyV1EncodeRequestMarshaller = Marshallers.Create<Stellar.TopologyResponseBodyV1EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TopologyResponseBodyV1EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TopologyResponseBodyV1EncodeResponse
            public static readonly Marshaller<Stellar.TopologyResponseBodyV1EncodeResponse> TopologyResponseBodyV1EncodeResponseMarshaller = Marshallers.Create<Stellar.TopologyResponseBodyV1EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TopologyResponseBodyV1EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TopologyResponseBodyV1DecodeRequest
            public static readonly Marshaller<Stellar.TopologyResponseBodyV1DecodeRequest> TopologyResponseBodyV1DecodeRequestMarshaller = Marshallers.Create<Stellar.TopologyResponseBodyV1DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TopologyResponseBodyV1DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TopologyResponseBodyV1DecodeResponse
            public static readonly Marshaller<Stellar.TopologyResponseBodyV1DecodeResponse> TopologyResponseBodyV1DecodeResponseMarshaller = Marshallers.Create<Stellar.TopologyResponseBodyV1DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TopologyResponseBodyV1DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TopologyResponseBodyV2EncodeRequest
            public static readonly Marshaller<Stellar.TopologyResponseBodyV2EncodeRequest> TopologyResponseBodyV2EncodeRequestMarshaller = Marshallers.Create<Stellar.TopologyResponseBodyV2EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TopologyResponseBodyV2EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TopologyResponseBodyV2EncodeResponse
            public static readonly Marshaller<Stellar.TopologyResponseBodyV2EncodeResponse> TopologyResponseBodyV2EncodeResponseMarshaller = Marshallers.Create<Stellar.TopologyResponseBodyV2EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TopologyResponseBodyV2EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TopologyResponseBodyV2DecodeRequest
            public static readonly Marshaller<Stellar.TopologyResponseBodyV2DecodeRequest> TopologyResponseBodyV2DecodeRequestMarshaller = Marshallers.Create<Stellar.TopologyResponseBodyV2DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TopologyResponseBodyV2DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TopologyResponseBodyV2DecodeResponse
            public static readonly Marshaller<Stellar.TopologyResponseBodyV2DecodeResponse> TopologyResponseBodyV2DecodeResponseMarshaller = Marshallers.Create<Stellar.TopologyResponseBodyV2DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TopologyResponseBodyV2DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SurveyResponseBodyEncodeRequest
            public static readonly Marshaller<Stellar.SurveyResponseBodyEncodeRequest> SurveyResponseBodyEncodeRequestMarshaller = Marshallers.Create<Stellar.SurveyResponseBodyEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SurveyResponseBodyEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SurveyResponseBodyEncodeResponse
            public static readonly Marshaller<Stellar.SurveyResponseBodyEncodeResponse> SurveyResponseBodyEncodeResponseMarshaller = Marshallers.Create<Stellar.SurveyResponseBodyEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SurveyResponseBodyEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SurveyResponseBodyDecodeRequest
            public static readonly Marshaller<Stellar.SurveyResponseBodyDecodeRequest> SurveyResponseBodyDecodeRequestMarshaller = Marshallers.Create<Stellar.SurveyResponseBodyDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SurveyResponseBodyDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SurveyResponseBodyDecodeResponse
            public static readonly Marshaller<Stellar.SurveyResponseBodyDecodeResponse> SurveyResponseBodyDecodeResponseMarshaller = Marshallers.Create<Stellar.SurveyResponseBodyDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SurveyResponseBodyDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TxAdvertVectorEncodeRequest
            public static readonly Marshaller<Stellar.TxAdvertVectorEncodeRequest> TxAdvertVectorEncodeRequestMarshaller = Marshallers.Create<Stellar.TxAdvertVectorEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TxAdvertVectorEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TxAdvertVectorEncodeResponse
            public static readonly Marshaller<Stellar.TxAdvertVectorEncodeResponse> TxAdvertVectorEncodeResponseMarshaller = Marshallers.Create<Stellar.TxAdvertVectorEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TxAdvertVectorEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TxAdvertVectorDecodeRequest
            public static readonly Marshaller<Stellar.TxAdvertVectorDecodeRequest> TxAdvertVectorDecodeRequestMarshaller = Marshallers.Create<Stellar.TxAdvertVectorDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TxAdvertVectorDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TxAdvertVectorDecodeResponse
            public static readonly Marshaller<Stellar.TxAdvertVectorDecodeResponse> TxAdvertVectorDecodeResponseMarshaller = Marshallers.Create<Stellar.TxAdvertVectorDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TxAdvertVectorDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for FloodAdvertEncodeRequest
            public static readonly Marshaller<Stellar.FloodAdvertEncodeRequest> FloodAdvertEncodeRequestMarshaller = Marshallers.Create<Stellar.FloodAdvertEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.FloodAdvertEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for FloodAdvertEncodeResponse
            public static readonly Marshaller<Stellar.FloodAdvertEncodeResponse> FloodAdvertEncodeResponseMarshaller = Marshallers.Create<Stellar.FloodAdvertEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.FloodAdvertEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for FloodAdvertDecodeRequest
            public static readonly Marshaller<Stellar.FloodAdvertDecodeRequest> FloodAdvertDecodeRequestMarshaller = Marshallers.Create<Stellar.FloodAdvertDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.FloodAdvertDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for FloodAdvertDecodeResponse
            public static readonly Marshaller<Stellar.FloodAdvertDecodeResponse> FloodAdvertDecodeResponseMarshaller = Marshallers.Create<Stellar.FloodAdvertDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.FloodAdvertDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TxDemandVectorEncodeRequest
            public static readonly Marshaller<Stellar.TxDemandVectorEncodeRequest> TxDemandVectorEncodeRequestMarshaller = Marshallers.Create<Stellar.TxDemandVectorEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TxDemandVectorEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TxDemandVectorEncodeResponse
            public static readonly Marshaller<Stellar.TxDemandVectorEncodeResponse> TxDemandVectorEncodeResponseMarshaller = Marshallers.Create<Stellar.TxDemandVectorEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TxDemandVectorEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TxDemandVectorDecodeRequest
            public static readonly Marshaller<Stellar.TxDemandVectorDecodeRequest> TxDemandVectorDecodeRequestMarshaller = Marshallers.Create<Stellar.TxDemandVectorDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TxDemandVectorDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TxDemandVectorDecodeResponse
            public static readonly Marshaller<Stellar.TxDemandVectorDecodeResponse> TxDemandVectorDecodeResponseMarshaller = Marshallers.Create<Stellar.TxDemandVectorDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TxDemandVectorDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for FloodDemandEncodeRequest
            public static readonly Marshaller<Stellar.FloodDemandEncodeRequest> FloodDemandEncodeRequestMarshaller = Marshallers.Create<Stellar.FloodDemandEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.FloodDemandEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for FloodDemandEncodeResponse
            public static readonly Marshaller<Stellar.FloodDemandEncodeResponse> FloodDemandEncodeResponseMarshaller = Marshallers.Create<Stellar.FloodDemandEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.FloodDemandEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for FloodDemandDecodeRequest
            public static readonly Marshaller<Stellar.FloodDemandDecodeRequest> FloodDemandDecodeRequestMarshaller = Marshallers.Create<Stellar.FloodDemandDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.FloodDemandDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for FloodDemandDecodeResponse
            public static readonly Marshaller<Stellar.FloodDemandDecodeResponse> FloodDemandDecodeResponseMarshaller = Marshallers.Create<Stellar.FloodDemandDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.FloodDemandDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for StellarMessageEncodeRequest
            public static readonly Marshaller<Stellar.StellarMessageEncodeRequest> StellarMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.StellarMessageEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.StellarMessageEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for StellarMessageEncodeResponse
            public static readonly Marshaller<Stellar.StellarMessageEncodeResponse> StellarMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.StellarMessageEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.StellarMessageEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for StellarMessageDecodeRequest
            public static readonly Marshaller<Stellar.StellarMessageDecodeRequest> StellarMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.StellarMessageDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.StellarMessageDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for StellarMessageDecodeResponse
            public static readonly Marshaller<Stellar.StellarMessageDecodeResponse> StellarMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.StellarMessageDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.StellarMessageDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AuthenticatedMessageEncodeRequest
            public static readonly Marshaller<Stellar.AuthenticatedMessageEncodeRequest> AuthenticatedMessageEncodeRequestMarshaller = Marshallers.Create<Stellar.AuthenticatedMessageEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AuthenticatedMessageEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AuthenticatedMessageEncodeResponse
            public static readonly Marshaller<Stellar.AuthenticatedMessageEncodeResponse> AuthenticatedMessageEncodeResponseMarshaller = Marshallers.Create<Stellar.AuthenticatedMessageEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AuthenticatedMessageEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AuthenticatedMessageDecodeRequest
            public static readonly Marshaller<Stellar.AuthenticatedMessageDecodeRequest> AuthenticatedMessageDecodeRequestMarshaller = Marshallers.Create<Stellar.AuthenticatedMessageDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AuthenticatedMessageDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AuthenticatedMessageDecodeResponse
            public static readonly Marshaller<Stellar.AuthenticatedMessageDecodeResponse> AuthenticatedMessageDecodeResponseMarshaller = Marshallers.Create<Stellar.AuthenticatedMessageDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AuthenticatedMessageDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ValueEncodeRequest
            public static readonly Marshaller<Stellar.ValueEncodeRequest> ValueEncodeRequestMarshaller = Marshallers.Create<Stellar.ValueEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ValueEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ValueEncodeResponse
            public static readonly Marshaller<Stellar.ValueEncodeResponse> ValueEncodeResponseMarshaller = Marshallers.Create<Stellar.ValueEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ValueEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ValueDecodeRequest
            public static readonly Marshaller<Stellar.ValueDecodeRequest> ValueDecodeRequestMarshaller = Marshallers.Create<Stellar.ValueDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ValueDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ValueDecodeResponse
            public static readonly Marshaller<Stellar.ValueDecodeResponse> ValueDecodeResponseMarshaller = Marshallers.Create<Stellar.ValueDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ValueDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPBallotEncodeRequest
            public static readonly Marshaller<Stellar.SCPBallotEncodeRequest> SCPBallotEncodeRequestMarshaller = Marshallers.Create<Stellar.SCPBallotEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPBallotEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPBallotEncodeResponse
            public static readonly Marshaller<Stellar.SCPBallotEncodeResponse> SCPBallotEncodeResponseMarshaller = Marshallers.Create<Stellar.SCPBallotEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPBallotEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPBallotDecodeRequest
            public static readonly Marshaller<Stellar.SCPBallotDecodeRequest> SCPBallotDecodeRequestMarshaller = Marshallers.Create<Stellar.SCPBallotDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPBallotDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPBallotDecodeResponse
            public static readonly Marshaller<Stellar.SCPBallotDecodeResponse> SCPBallotDecodeResponseMarshaller = Marshallers.Create<Stellar.SCPBallotDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPBallotDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPStatementTypeEncodeRequest
            public static readonly Marshaller<Stellar.SCPStatementTypeEncodeRequest> SCPStatementTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.SCPStatementTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPStatementTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPStatementTypeEncodeResponse
            public static readonly Marshaller<Stellar.SCPStatementTypeEncodeResponse> SCPStatementTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.SCPStatementTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPStatementTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPStatementTypeDecodeRequest
            public static readonly Marshaller<Stellar.SCPStatementTypeDecodeRequest> SCPStatementTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.SCPStatementTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPStatementTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPStatementTypeDecodeResponse
            public static readonly Marshaller<Stellar.SCPStatementTypeDecodeResponse> SCPStatementTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.SCPStatementTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPStatementTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPNominationEncodeRequest
            public static readonly Marshaller<Stellar.SCPNominationEncodeRequest> SCPNominationEncodeRequestMarshaller = Marshallers.Create<Stellar.SCPNominationEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPNominationEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPNominationEncodeResponse
            public static readonly Marshaller<Stellar.SCPNominationEncodeResponse> SCPNominationEncodeResponseMarshaller = Marshallers.Create<Stellar.SCPNominationEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPNominationEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPNominationDecodeRequest
            public static readonly Marshaller<Stellar.SCPNominationDecodeRequest> SCPNominationDecodeRequestMarshaller = Marshallers.Create<Stellar.SCPNominationDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPNominationDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPNominationDecodeResponse
            public static readonly Marshaller<Stellar.SCPNominationDecodeResponse> SCPNominationDecodeResponseMarshaller = Marshallers.Create<Stellar.SCPNominationDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPNominationDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPStatementEncodeRequest
            public static readonly Marshaller<Stellar.SCPStatementEncodeRequest> SCPStatementEncodeRequestMarshaller = Marshallers.Create<Stellar.SCPStatementEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPStatementEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPStatementEncodeResponse
            public static readonly Marshaller<Stellar.SCPStatementEncodeResponse> SCPStatementEncodeResponseMarshaller = Marshallers.Create<Stellar.SCPStatementEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPStatementEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPStatementDecodeRequest
            public static readonly Marshaller<Stellar.SCPStatementDecodeRequest> SCPStatementDecodeRequestMarshaller = Marshallers.Create<Stellar.SCPStatementDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPStatementDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPStatementDecodeResponse
            public static readonly Marshaller<Stellar.SCPStatementDecodeResponse> SCPStatementDecodeResponseMarshaller = Marshallers.Create<Stellar.SCPStatementDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPStatementDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPEnvelopeEncodeRequest
            public static readonly Marshaller<Stellar.SCPEnvelopeEncodeRequest> SCPEnvelopeEncodeRequestMarshaller = Marshallers.Create<Stellar.SCPEnvelopeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPEnvelopeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPEnvelopeEncodeResponse
            public static readonly Marshaller<Stellar.SCPEnvelopeEncodeResponse> SCPEnvelopeEncodeResponseMarshaller = Marshallers.Create<Stellar.SCPEnvelopeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPEnvelopeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPEnvelopeDecodeRequest
            public static readonly Marshaller<Stellar.SCPEnvelopeDecodeRequest> SCPEnvelopeDecodeRequestMarshaller = Marshallers.Create<Stellar.SCPEnvelopeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPEnvelopeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPEnvelopeDecodeResponse
            public static readonly Marshaller<Stellar.SCPEnvelopeDecodeResponse> SCPEnvelopeDecodeResponseMarshaller = Marshallers.Create<Stellar.SCPEnvelopeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPEnvelopeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPQuorumSetEncodeRequest
            public static readonly Marshaller<Stellar.SCPQuorumSetEncodeRequest> SCPQuorumSetEncodeRequestMarshaller = Marshallers.Create<Stellar.SCPQuorumSetEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPQuorumSetEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPQuorumSetEncodeResponse
            public static readonly Marshaller<Stellar.SCPQuorumSetEncodeResponse> SCPQuorumSetEncodeResponseMarshaller = Marshallers.Create<Stellar.SCPQuorumSetEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPQuorumSetEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPQuorumSetDecodeRequest
            public static readonly Marshaller<Stellar.SCPQuorumSetDecodeRequest> SCPQuorumSetDecodeRequestMarshaller = Marshallers.Create<Stellar.SCPQuorumSetDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPQuorumSetDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SCPQuorumSetDecodeResponse
            public static readonly Marshaller<Stellar.SCPQuorumSetDecodeResponse> SCPQuorumSetDecodeResponseMarshaller = Marshallers.Create<Stellar.SCPQuorumSetDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SCPQuorumSetDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolParametersEncodeRequest
            public static readonly Marshaller<Stellar.LiquidityPoolParametersEncodeRequest> LiquidityPoolParametersEncodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolParametersEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolParametersEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolParametersEncodeResponse
            public static readonly Marshaller<Stellar.LiquidityPoolParametersEncodeResponse> LiquidityPoolParametersEncodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolParametersEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolParametersEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolParametersDecodeRequest
            public static readonly Marshaller<Stellar.LiquidityPoolParametersDecodeRequest> LiquidityPoolParametersDecodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolParametersDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolParametersDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolParametersDecodeResponse
            public static readonly Marshaller<Stellar.LiquidityPoolParametersDecodeResponse> LiquidityPoolParametersDecodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolParametersDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolParametersDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for MuxedAccountEncodeRequest
            public static readonly Marshaller<Stellar.MuxedAccountEncodeRequest> MuxedAccountEncodeRequestMarshaller = Marshallers.Create<Stellar.MuxedAccountEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.MuxedAccountEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for MuxedAccountEncodeResponse
            public static readonly Marshaller<Stellar.MuxedAccountEncodeResponse> MuxedAccountEncodeResponseMarshaller = Marshallers.Create<Stellar.MuxedAccountEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.MuxedAccountEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for MuxedAccountDecodeRequest
            public static readonly Marshaller<Stellar.MuxedAccountDecodeRequest> MuxedAccountDecodeRequestMarshaller = Marshallers.Create<Stellar.MuxedAccountDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.MuxedAccountDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for MuxedAccountDecodeResponse
            public static readonly Marshaller<Stellar.MuxedAccountDecodeResponse> MuxedAccountDecodeResponseMarshaller = Marshallers.Create<Stellar.MuxedAccountDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.MuxedAccountDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DecoratedSignatureEncodeRequest
            public static readonly Marshaller<Stellar.DecoratedSignatureEncodeRequest> DecoratedSignatureEncodeRequestMarshaller = Marshallers.Create<Stellar.DecoratedSignatureEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DecoratedSignatureEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DecoratedSignatureEncodeResponse
            public static readonly Marshaller<Stellar.DecoratedSignatureEncodeResponse> DecoratedSignatureEncodeResponseMarshaller = Marshallers.Create<Stellar.DecoratedSignatureEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DecoratedSignatureEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DecoratedSignatureDecodeRequest
            public static readonly Marshaller<Stellar.DecoratedSignatureDecodeRequest> DecoratedSignatureDecodeRequestMarshaller = Marshallers.Create<Stellar.DecoratedSignatureDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DecoratedSignatureDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DecoratedSignatureDecodeResponse
            public static readonly Marshaller<Stellar.DecoratedSignatureDecodeResponse> DecoratedSignatureDecodeResponseMarshaller = Marshallers.Create<Stellar.DecoratedSignatureDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DecoratedSignatureDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OperationTypeEncodeRequest
            public static readonly Marshaller<Stellar.OperationTypeEncodeRequest> OperationTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.OperationTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OperationTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OperationTypeEncodeResponse
            public static readonly Marshaller<Stellar.OperationTypeEncodeResponse> OperationTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.OperationTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OperationTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OperationTypeDecodeRequest
            public static readonly Marshaller<Stellar.OperationTypeDecodeRequest> OperationTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.OperationTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OperationTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OperationTypeDecodeResponse
            public static readonly Marshaller<Stellar.OperationTypeDecodeResponse> OperationTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.OperationTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OperationTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateAccountOpEncodeRequest
            public static readonly Marshaller<Stellar.CreateAccountOpEncodeRequest> CreateAccountOpEncodeRequestMarshaller = Marshallers.Create<Stellar.CreateAccountOpEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateAccountOpEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateAccountOpEncodeResponse
            public static readonly Marshaller<Stellar.CreateAccountOpEncodeResponse> CreateAccountOpEncodeResponseMarshaller = Marshallers.Create<Stellar.CreateAccountOpEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateAccountOpEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateAccountOpDecodeRequest
            public static readonly Marshaller<Stellar.CreateAccountOpDecodeRequest> CreateAccountOpDecodeRequestMarshaller = Marshallers.Create<Stellar.CreateAccountOpDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateAccountOpDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateAccountOpDecodeResponse
            public static readonly Marshaller<Stellar.CreateAccountOpDecodeResponse> CreateAccountOpDecodeResponseMarshaller = Marshallers.Create<Stellar.CreateAccountOpDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateAccountOpDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PaymentOpEncodeRequest
            public static readonly Marshaller<Stellar.PaymentOpEncodeRequest> PaymentOpEncodeRequestMarshaller = Marshallers.Create<Stellar.PaymentOpEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PaymentOpEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PaymentOpEncodeResponse
            public static readonly Marshaller<Stellar.PaymentOpEncodeResponse> PaymentOpEncodeResponseMarshaller = Marshallers.Create<Stellar.PaymentOpEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PaymentOpEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PaymentOpDecodeRequest
            public static readonly Marshaller<Stellar.PaymentOpDecodeRequest> PaymentOpDecodeRequestMarshaller = Marshallers.Create<Stellar.PaymentOpDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PaymentOpDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PaymentOpDecodeResponse
            public static readonly Marshaller<Stellar.PaymentOpDecodeResponse> PaymentOpDecodeResponseMarshaller = Marshallers.Create<Stellar.PaymentOpDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PaymentOpDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PathPaymentStrictReceiveOpEncodeRequest
            public static readonly Marshaller<Stellar.PathPaymentStrictReceiveOpEncodeRequest> PathPaymentStrictReceiveOpEncodeRequestMarshaller = Marshallers.Create<Stellar.PathPaymentStrictReceiveOpEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PathPaymentStrictReceiveOpEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PathPaymentStrictReceiveOpEncodeResponse
            public static readonly Marshaller<Stellar.PathPaymentStrictReceiveOpEncodeResponse> PathPaymentStrictReceiveOpEncodeResponseMarshaller = Marshallers.Create<Stellar.PathPaymentStrictReceiveOpEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PathPaymentStrictReceiveOpEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PathPaymentStrictReceiveOpDecodeRequest
            public static readonly Marshaller<Stellar.PathPaymentStrictReceiveOpDecodeRequest> PathPaymentStrictReceiveOpDecodeRequestMarshaller = Marshallers.Create<Stellar.PathPaymentStrictReceiveOpDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PathPaymentStrictReceiveOpDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PathPaymentStrictReceiveOpDecodeResponse
            public static readonly Marshaller<Stellar.PathPaymentStrictReceiveOpDecodeResponse> PathPaymentStrictReceiveOpDecodeResponseMarshaller = Marshallers.Create<Stellar.PathPaymentStrictReceiveOpDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PathPaymentStrictReceiveOpDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PathPaymentStrictSendOpEncodeRequest
            public static readonly Marshaller<Stellar.PathPaymentStrictSendOpEncodeRequest> PathPaymentStrictSendOpEncodeRequestMarshaller = Marshallers.Create<Stellar.PathPaymentStrictSendOpEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PathPaymentStrictSendOpEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PathPaymentStrictSendOpEncodeResponse
            public static readonly Marshaller<Stellar.PathPaymentStrictSendOpEncodeResponse> PathPaymentStrictSendOpEncodeResponseMarshaller = Marshallers.Create<Stellar.PathPaymentStrictSendOpEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PathPaymentStrictSendOpEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PathPaymentStrictSendOpDecodeRequest
            public static readonly Marshaller<Stellar.PathPaymentStrictSendOpDecodeRequest> PathPaymentStrictSendOpDecodeRequestMarshaller = Marshallers.Create<Stellar.PathPaymentStrictSendOpDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PathPaymentStrictSendOpDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PathPaymentStrictSendOpDecodeResponse
            public static readonly Marshaller<Stellar.PathPaymentStrictSendOpDecodeResponse> PathPaymentStrictSendOpDecodeResponseMarshaller = Marshallers.Create<Stellar.PathPaymentStrictSendOpDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PathPaymentStrictSendOpDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageSellOfferOpEncodeRequest
            public static readonly Marshaller<Stellar.ManageSellOfferOpEncodeRequest> ManageSellOfferOpEncodeRequestMarshaller = Marshallers.Create<Stellar.ManageSellOfferOpEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageSellOfferOpEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageSellOfferOpEncodeResponse
            public static readonly Marshaller<Stellar.ManageSellOfferOpEncodeResponse> ManageSellOfferOpEncodeResponseMarshaller = Marshallers.Create<Stellar.ManageSellOfferOpEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageSellOfferOpEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageSellOfferOpDecodeRequest
            public static readonly Marshaller<Stellar.ManageSellOfferOpDecodeRequest> ManageSellOfferOpDecodeRequestMarshaller = Marshallers.Create<Stellar.ManageSellOfferOpDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageSellOfferOpDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageSellOfferOpDecodeResponse
            public static readonly Marshaller<Stellar.ManageSellOfferOpDecodeResponse> ManageSellOfferOpDecodeResponseMarshaller = Marshallers.Create<Stellar.ManageSellOfferOpDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageSellOfferOpDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageBuyOfferOpEncodeRequest
            public static readonly Marshaller<Stellar.ManageBuyOfferOpEncodeRequest> ManageBuyOfferOpEncodeRequestMarshaller = Marshallers.Create<Stellar.ManageBuyOfferOpEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageBuyOfferOpEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageBuyOfferOpEncodeResponse
            public static readonly Marshaller<Stellar.ManageBuyOfferOpEncodeResponse> ManageBuyOfferOpEncodeResponseMarshaller = Marshallers.Create<Stellar.ManageBuyOfferOpEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageBuyOfferOpEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageBuyOfferOpDecodeRequest
            public static readonly Marshaller<Stellar.ManageBuyOfferOpDecodeRequest> ManageBuyOfferOpDecodeRequestMarshaller = Marshallers.Create<Stellar.ManageBuyOfferOpDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageBuyOfferOpDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageBuyOfferOpDecodeResponse
            public static readonly Marshaller<Stellar.ManageBuyOfferOpDecodeResponse> ManageBuyOfferOpDecodeResponseMarshaller = Marshallers.Create<Stellar.ManageBuyOfferOpDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageBuyOfferOpDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreatePassiveSellOfferOpEncodeRequest
            public static readonly Marshaller<Stellar.CreatePassiveSellOfferOpEncodeRequest> CreatePassiveSellOfferOpEncodeRequestMarshaller = Marshallers.Create<Stellar.CreatePassiveSellOfferOpEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreatePassiveSellOfferOpEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreatePassiveSellOfferOpEncodeResponse
            public static readonly Marshaller<Stellar.CreatePassiveSellOfferOpEncodeResponse> CreatePassiveSellOfferOpEncodeResponseMarshaller = Marshallers.Create<Stellar.CreatePassiveSellOfferOpEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreatePassiveSellOfferOpEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreatePassiveSellOfferOpDecodeRequest
            public static readonly Marshaller<Stellar.CreatePassiveSellOfferOpDecodeRequest> CreatePassiveSellOfferOpDecodeRequestMarshaller = Marshallers.Create<Stellar.CreatePassiveSellOfferOpDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreatePassiveSellOfferOpDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreatePassiveSellOfferOpDecodeResponse
            public static readonly Marshaller<Stellar.CreatePassiveSellOfferOpDecodeResponse> CreatePassiveSellOfferOpDecodeResponseMarshaller = Marshallers.Create<Stellar.CreatePassiveSellOfferOpDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreatePassiveSellOfferOpDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SetOptionsOpEncodeRequest
            public static readonly Marshaller<Stellar.SetOptionsOpEncodeRequest> SetOptionsOpEncodeRequestMarshaller = Marshallers.Create<Stellar.SetOptionsOpEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SetOptionsOpEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SetOptionsOpEncodeResponse
            public static readonly Marshaller<Stellar.SetOptionsOpEncodeResponse> SetOptionsOpEncodeResponseMarshaller = Marshallers.Create<Stellar.SetOptionsOpEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SetOptionsOpEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SetOptionsOpDecodeRequest
            public static readonly Marshaller<Stellar.SetOptionsOpDecodeRequest> SetOptionsOpDecodeRequestMarshaller = Marshallers.Create<Stellar.SetOptionsOpDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SetOptionsOpDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SetOptionsOpDecodeResponse
            public static readonly Marshaller<Stellar.SetOptionsOpDecodeResponse> SetOptionsOpDecodeResponseMarshaller = Marshallers.Create<Stellar.SetOptionsOpDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SetOptionsOpDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ChangeTrustAssetEncodeRequest
            public static readonly Marshaller<Stellar.ChangeTrustAssetEncodeRequest> ChangeTrustAssetEncodeRequestMarshaller = Marshallers.Create<Stellar.ChangeTrustAssetEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ChangeTrustAssetEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ChangeTrustAssetEncodeResponse
            public static readonly Marshaller<Stellar.ChangeTrustAssetEncodeResponse> ChangeTrustAssetEncodeResponseMarshaller = Marshallers.Create<Stellar.ChangeTrustAssetEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ChangeTrustAssetEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ChangeTrustAssetDecodeRequest
            public static readonly Marshaller<Stellar.ChangeTrustAssetDecodeRequest> ChangeTrustAssetDecodeRequestMarshaller = Marshallers.Create<Stellar.ChangeTrustAssetDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ChangeTrustAssetDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ChangeTrustAssetDecodeResponse
            public static readonly Marshaller<Stellar.ChangeTrustAssetDecodeResponse> ChangeTrustAssetDecodeResponseMarshaller = Marshallers.Create<Stellar.ChangeTrustAssetDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ChangeTrustAssetDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ChangeTrustOpEncodeRequest
            public static readonly Marshaller<Stellar.ChangeTrustOpEncodeRequest> ChangeTrustOpEncodeRequestMarshaller = Marshallers.Create<Stellar.ChangeTrustOpEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ChangeTrustOpEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ChangeTrustOpEncodeResponse
            public static readonly Marshaller<Stellar.ChangeTrustOpEncodeResponse> ChangeTrustOpEncodeResponseMarshaller = Marshallers.Create<Stellar.ChangeTrustOpEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ChangeTrustOpEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ChangeTrustOpDecodeRequest
            public static readonly Marshaller<Stellar.ChangeTrustOpDecodeRequest> ChangeTrustOpDecodeRequestMarshaller = Marshallers.Create<Stellar.ChangeTrustOpDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ChangeTrustOpDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ChangeTrustOpDecodeResponse
            public static readonly Marshaller<Stellar.ChangeTrustOpDecodeResponse> ChangeTrustOpDecodeResponseMarshaller = Marshallers.Create<Stellar.ChangeTrustOpDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ChangeTrustOpDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AllowTrustOpEncodeRequest
            public static readonly Marshaller<Stellar.AllowTrustOpEncodeRequest> AllowTrustOpEncodeRequestMarshaller = Marshallers.Create<Stellar.AllowTrustOpEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AllowTrustOpEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AllowTrustOpEncodeResponse
            public static readonly Marshaller<Stellar.AllowTrustOpEncodeResponse> AllowTrustOpEncodeResponseMarshaller = Marshallers.Create<Stellar.AllowTrustOpEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AllowTrustOpEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AllowTrustOpDecodeRequest
            public static readonly Marshaller<Stellar.AllowTrustOpDecodeRequest> AllowTrustOpDecodeRequestMarshaller = Marshallers.Create<Stellar.AllowTrustOpDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AllowTrustOpDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AllowTrustOpDecodeResponse
            public static readonly Marshaller<Stellar.AllowTrustOpDecodeResponse> AllowTrustOpDecodeResponseMarshaller = Marshallers.Create<Stellar.AllowTrustOpDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AllowTrustOpDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageDataOpEncodeRequest
            public static readonly Marshaller<Stellar.ManageDataOpEncodeRequest> ManageDataOpEncodeRequestMarshaller = Marshallers.Create<Stellar.ManageDataOpEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageDataOpEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageDataOpEncodeResponse
            public static readonly Marshaller<Stellar.ManageDataOpEncodeResponse> ManageDataOpEncodeResponseMarshaller = Marshallers.Create<Stellar.ManageDataOpEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageDataOpEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageDataOpDecodeRequest
            public static readonly Marshaller<Stellar.ManageDataOpDecodeRequest> ManageDataOpDecodeRequestMarshaller = Marshallers.Create<Stellar.ManageDataOpDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageDataOpDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageDataOpDecodeResponse
            public static readonly Marshaller<Stellar.ManageDataOpDecodeResponse> ManageDataOpDecodeResponseMarshaller = Marshallers.Create<Stellar.ManageDataOpDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageDataOpDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BumpSequenceOpEncodeRequest
            public static readonly Marshaller<Stellar.BumpSequenceOpEncodeRequest> BumpSequenceOpEncodeRequestMarshaller = Marshallers.Create<Stellar.BumpSequenceOpEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BumpSequenceOpEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BumpSequenceOpEncodeResponse
            public static readonly Marshaller<Stellar.BumpSequenceOpEncodeResponse> BumpSequenceOpEncodeResponseMarshaller = Marshallers.Create<Stellar.BumpSequenceOpEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BumpSequenceOpEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BumpSequenceOpDecodeRequest
            public static readonly Marshaller<Stellar.BumpSequenceOpDecodeRequest> BumpSequenceOpDecodeRequestMarshaller = Marshallers.Create<Stellar.BumpSequenceOpDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BumpSequenceOpDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BumpSequenceOpDecodeResponse
            public static readonly Marshaller<Stellar.BumpSequenceOpDecodeResponse> BumpSequenceOpDecodeResponseMarshaller = Marshallers.Create<Stellar.BumpSequenceOpDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BumpSequenceOpDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateClaimableBalanceOpEncodeRequest
            public static readonly Marshaller<Stellar.CreateClaimableBalanceOpEncodeRequest> CreateClaimableBalanceOpEncodeRequestMarshaller = Marshallers.Create<Stellar.CreateClaimableBalanceOpEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateClaimableBalanceOpEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateClaimableBalanceOpEncodeResponse
            public static readonly Marshaller<Stellar.CreateClaimableBalanceOpEncodeResponse> CreateClaimableBalanceOpEncodeResponseMarshaller = Marshallers.Create<Stellar.CreateClaimableBalanceOpEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateClaimableBalanceOpEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateClaimableBalanceOpDecodeRequest
            public static readonly Marshaller<Stellar.CreateClaimableBalanceOpDecodeRequest> CreateClaimableBalanceOpDecodeRequestMarshaller = Marshallers.Create<Stellar.CreateClaimableBalanceOpDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateClaimableBalanceOpDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateClaimableBalanceOpDecodeResponse
            public static readonly Marshaller<Stellar.CreateClaimableBalanceOpDecodeResponse> CreateClaimableBalanceOpDecodeResponseMarshaller = Marshallers.Create<Stellar.CreateClaimableBalanceOpDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateClaimableBalanceOpDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimClaimableBalanceOpEncodeRequest
            public static readonly Marshaller<Stellar.ClaimClaimableBalanceOpEncodeRequest> ClaimClaimableBalanceOpEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimClaimableBalanceOpEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimClaimableBalanceOpEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimClaimableBalanceOpEncodeResponse
            public static readonly Marshaller<Stellar.ClaimClaimableBalanceOpEncodeResponse> ClaimClaimableBalanceOpEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimClaimableBalanceOpEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimClaimableBalanceOpEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimClaimableBalanceOpDecodeRequest
            public static readonly Marshaller<Stellar.ClaimClaimableBalanceOpDecodeRequest> ClaimClaimableBalanceOpDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimClaimableBalanceOpDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimClaimableBalanceOpDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimClaimableBalanceOpDecodeResponse
            public static readonly Marshaller<Stellar.ClaimClaimableBalanceOpDecodeResponse> ClaimClaimableBalanceOpDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimClaimableBalanceOpDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimClaimableBalanceOpDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BeginSponsoringFutureReservesOpEncodeRequest
            public static readonly Marshaller<Stellar.BeginSponsoringFutureReservesOpEncodeRequest> BeginSponsoringFutureReservesOpEncodeRequestMarshaller = Marshallers.Create<Stellar.BeginSponsoringFutureReservesOpEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesOpEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BeginSponsoringFutureReservesOpEncodeResponse
            public static readonly Marshaller<Stellar.BeginSponsoringFutureReservesOpEncodeResponse> BeginSponsoringFutureReservesOpEncodeResponseMarshaller = Marshallers.Create<Stellar.BeginSponsoringFutureReservesOpEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesOpEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BeginSponsoringFutureReservesOpDecodeRequest
            public static readonly Marshaller<Stellar.BeginSponsoringFutureReservesOpDecodeRequest> BeginSponsoringFutureReservesOpDecodeRequestMarshaller = Marshallers.Create<Stellar.BeginSponsoringFutureReservesOpDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesOpDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BeginSponsoringFutureReservesOpDecodeResponse
            public static readonly Marshaller<Stellar.BeginSponsoringFutureReservesOpDecodeResponse> BeginSponsoringFutureReservesOpDecodeResponseMarshaller = Marshallers.Create<Stellar.BeginSponsoringFutureReservesOpDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesOpDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RevokeSponsorshipTypeEncodeRequest
            public static readonly Marshaller<Stellar.RevokeSponsorshipTypeEncodeRequest> RevokeSponsorshipTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RevokeSponsorshipTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RevokeSponsorshipTypeEncodeResponse
            public static readonly Marshaller<Stellar.RevokeSponsorshipTypeEncodeResponse> RevokeSponsorshipTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RevokeSponsorshipTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RevokeSponsorshipTypeDecodeRequest
            public static readonly Marshaller<Stellar.RevokeSponsorshipTypeDecodeRequest> RevokeSponsorshipTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RevokeSponsorshipTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RevokeSponsorshipTypeDecodeResponse
            public static readonly Marshaller<Stellar.RevokeSponsorshipTypeDecodeResponse> RevokeSponsorshipTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RevokeSponsorshipTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RevokeSponsorshipOpEncodeRequest
            public static readonly Marshaller<Stellar.RevokeSponsorshipOpEncodeRequest> RevokeSponsorshipOpEncodeRequestMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipOpEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RevokeSponsorshipOpEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RevokeSponsorshipOpEncodeResponse
            public static readonly Marshaller<Stellar.RevokeSponsorshipOpEncodeResponse> RevokeSponsorshipOpEncodeResponseMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipOpEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RevokeSponsorshipOpEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RevokeSponsorshipOpDecodeRequest
            public static readonly Marshaller<Stellar.RevokeSponsorshipOpDecodeRequest> RevokeSponsorshipOpDecodeRequestMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipOpDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RevokeSponsorshipOpDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RevokeSponsorshipOpDecodeResponse
            public static readonly Marshaller<Stellar.RevokeSponsorshipOpDecodeResponse> RevokeSponsorshipOpDecodeResponseMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipOpDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RevokeSponsorshipOpDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClawbackOpEncodeRequest
            public static readonly Marshaller<Stellar.ClawbackOpEncodeRequest> ClawbackOpEncodeRequestMarshaller = Marshallers.Create<Stellar.ClawbackOpEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClawbackOpEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClawbackOpEncodeResponse
            public static readonly Marshaller<Stellar.ClawbackOpEncodeResponse> ClawbackOpEncodeResponseMarshaller = Marshallers.Create<Stellar.ClawbackOpEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClawbackOpEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClawbackOpDecodeRequest
            public static readonly Marshaller<Stellar.ClawbackOpDecodeRequest> ClawbackOpDecodeRequestMarshaller = Marshallers.Create<Stellar.ClawbackOpDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClawbackOpDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClawbackOpDecodeResponse
            public static readonly Marshaller<Stellar.ClawbackOpDecodeResponse> ClawbackOpDecodeResponseMarshaller = Marshallers.Create<Stellar.ClawbackOpDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClawbackOpDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClawbackClaimableBalanceOpEncodeRequest
            public static readonly Marshaller<Stellar.ClawbackClaimableBalanceOpEncodeRequest> ClawbackClaimableBalanceOpEncodeRequestMarshaller = Marshallers.Create<Stellar.ClawbackClaimableBalanceOpEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClawbackClaimableBalanceOpEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClawbackClaimableBalanceOpEncodeResponse
            public static readonly Marshaller<Stellar.ClawbackClaimableBalanceOpEncodeResponse> ClawbackClaimableBalanceOpEncodeResponseMarshaller = Marshallers.Create<Stellar.ClawbackClaimableBalanceOpEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClawbackClaimableBalanceOpEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClawbackClaimableBalanceOpDecodeRequest
            public static readonly Marshaller<Stellar.ClawbackClaimableBalanceOpDecodeRequest> ClawbackClaimableBalanceOpDecodeRequestMarshaller = Marshallers.Create<Stellar.ClawbackClaimableBalanceOpDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClawbackClaimableBalanceOpDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClawbackClaimableBalanceOpDecodeResponse
            public static readonly Marshaller<Stellar.ClawbackClaimableBalanceOpDecodeResponse> ClawbackClaimableBalanceOpDecodeResponseMarshaller = Marshallers.Create<Stellar.ClawbackClaimableBalanceOpDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClawbackClaimableBalanceOpDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SetTrustLineFlagsOpEncodeRequest
            public static readonly Marshaller<Stellar.SetTrustLineFlagsOpEncodeRequest> SetTrustLineFlagsOpEncodeRequestMarshaller = Marshallers.Create<Stellar.SetTrustLineFlagsOpEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SetTrustLineFlagsOpEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SetTrustLineFlagsOpEncodeResponse
            public static readonly Marshaller<Stellar.SetTrustLineFlagsOpEncodeResponse> SetTrustLineFlagsOpEncodeResponseMarshaller = Marshallers.Create<Stellar.SetTrustLineFlagsOpEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SetTrustLineFlagsOpEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SetTrustLineFlagsOpDecodeRequest
            public static readonly Marshaller<Stellar.SetTrustLineFlagsOpDecodeRequest> SetTrustLineFlagsOpDecodeRequestMarshaller = Marshallers.Create<Stellar.SetTrustLineFlagsOpDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SetTrustLineFlagsOpDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SetTrustLineFlagsOpDecodeResponse
            public static readonly Marshaller<Stellar.SetTrustLineFlagsOpDecodeResponse> SetTrustLineFlagsOpDecodeResponseMarshaller = Marshallers.Create<Stellar.SetTrustLineFlagsOpDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SetTrustLineFlagsOpDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolDepositOpEncodeRequest
            public static readonly Marshaller<Stellar.LiquidityPoolDepositOpEncodeRequest> LiquidityPoolDepositOpEncodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolDepositOpEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolDepositOpEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolDepositOpEncodeResponse
            public static readonly Marshaller<Stellar.LiquidityPoolDepositOpEncodeResponse> LiquidityPoolDepositOpEncodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolDepositOpEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolDepositOpEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolDepositOpDecodeRequest
            public static readonly Marshaller<Stellar.LiquidityPoolDepositOpDecodeRequest> LiquidityPoolDepositOpDecodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolDepositOpDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolDepositOpDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolDepositOpDecodeResponse
            public static readonly Marshaller<Stellar.LiquidityPoolDepositOpDecodeResponse> LiquidityPoolDepositOpDecodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolDepositOpDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolDepositOpDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolWithdrawOpEncodeRequest
            public static readonly Marshaller<Stellar.LiquidityPoolWithdrawOpEncodeRequest> LiquidityPoolWithdrawOpEncodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolWithdrawOpEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolWithdrawOpEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolWithdrawOpEncodeResponse
            public static readonly Marshaller<Stellar.LiquidityPoolWithdrawOpEncodeResponse> LiquidityPoolWithdrawOpEncodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolWithdrawOpEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolWithdrawOpEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolWithdrawOpDecodeRequest
            public static readonly Marshaller<Stellar.LiquidityPoolWithdrawOpDecodeRequest> LiquidityPoolWithdrawOpDecodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolWithdrawOpDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolWithdrawOpDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolWithdrawOpDecodeResponse
            public static readonly Marshaller<Stellar.LiquidityPoolWithdrawOpDecodeResponse> LiquidityPoolWithdrawOpDecodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolWithdrawOpDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolWithdrawOpDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HostFunctionTypeEncodeRequest
            public static readonly Marshaller<Stellar.HostFunctionTypeEncodeRequest> HostFunctionTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.HostFunctionTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HostFunctionTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HostFunctionTypeEncodeResponse
            public static readonly Marshaller<Stellar.HostFunctionTypeEncodeResponse> HostFunctionTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.HostFunctionTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HostFunctionTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HostFunctionTypeDecodeRequest
            public static readonly Marshaller<Stellar.HostFunctionTypeDecodeRequest> HostFunctionTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.HostFunctionTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HostFunctionTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HostFunctionTypeDecodeResponse
            public static readonly Marshaller<Stellar.HostFunctionTypeDecodeResponse> HostFunctionTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.HostFunctionTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HostFunctionTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractIDPreimageTypeEncodeRequest
            public static readonly Marshaller<Stellar.ContractIDPreimageTypeEncodeRequest> ContractIDPreimageTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.ContractIDPreimageTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractIDPreimageTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractIDPreimageTypeEncodeResponse
            public static readonly Marshaller<Stellar.ContractIDPreimageTypeEncodeResponse> ContractIDPreimageTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.ContractIDPreimageTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractIDPreimageTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractIDPreimageTypeDecodeRequest
            public static readonly Marshaller<Stellar.ContractIDPreimageTypeDecodeRequest> ContractIDPreimageTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.ContractIDPreimageTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractIDPreimageTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractIDPreimageTypeDecodeResponse
            public static readonly Marshaller<Stellar.ContractIDPreimageTypeDecodeResponse> ContractIDPreimageTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.ContractIDPreimageTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractIDPreimageTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractIDPreimageEncodeRequest
            public static readonly Marshaller<Stellar.ContractIDPreimageEncodeRequest> ContractIDPreimageEncodeRequestMarshaller = Marshallers.Create<Stellar.ContractIDPreimageEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractIDPreimageEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractIDPreimageEncodeResponse
            public static readonly Marshaller<Stellar.ContractIDPreimageEncodeResponse> ContractIDPreimageEncodeResponseMarshaller = Marshallers.Create<Stellar.ContractIDPreimageEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractIDPreimageEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractIDPreimageDecodeRequest
            public static readonly Marshaller<Stellar.ContractIDPreimageDecodeRequest> ContractIDPreimageDecodeRequestMarshaller = Marshallers.Create<Stellar.ContractIDPreimageDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractIDPreimageDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ContractIDPreimageDecodeResponse
            public static readonly Marshaller<Stellar.ContractIDPreimageDecodeResponse> ContractIDPreimageDecodeResponseMarshaller = Marshallers.Create<Stellar.ContractIDPreimageDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ContractIDPreimageDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateContractArgsEncodeRequest
            public static readonly Marshaller<Stellar.CreateContractArgsEncodeRequest> CreateContractArgsEncodeRequestMarshaller = Marshallers.Create<Stellar.CreateContractArgsEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateContractArgsEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateContractArgsEncodeResponse
            public static readonly Marshaller<Stellar.CreateContractArgsEncodeResponse> CreateContractArgsEncodeResponseMarshaller = Marshallers.Create<Stellar.CreateContractArgsEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateContractArgsEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateContractArgsDecodeRequest
            public static readonly Marshaller<Stellar.CreateContractArgsDecodeRequest> CreateContractArgsDecodeRequestMarshaller = Marshallers.Create<Stellar.CreateContractArgsDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateContractArgsDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateContractArgsDecodeResponse
            public static readonly Marshaller<Stellar.CreateContractArgsDecodeResponse> CreateContractArgsDecodeResponseMarshaller = Marshallers.Create<Stellar.CreateContractArgsDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateContractArgsDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateContractArgsV2EncodeRequest
            public static readonly Marshaller<Stellar.CreateContractArgsV2EncodeRequest> CreateContractArgsV2EncodeRequestMarshaller = Marshallers.Create<Stellar.CreateContractArgsV2EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateContractArgsV2EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateContractArgsV2EncodeResponse
            public static readonly Marshaller<Stellar.CreateContractArgsV2EncodeResponse> CreateContractArgsV2EncodeResponseMarshaller = Marshallers.Create<Stellar.CreateContractArgsV2EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateContractArgsV2EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateContractArgsV2DecodeRequest
            public static readonly Marshaller<Stellar.CreateContractArgsV2DecodeRequest> CreateContractArgsV2DecodeRequestMarshaller = Marshallers.Create<Stellar.CreateContractArgsV2DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateContractArgsV2DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateContractArgsV2DecodeResponse
            public static readonly Marshaller<Stellar.CreateContractArgsV2DecodeResponse> CreateContractArgsV2DecodeResponseMarshaller = Marshallers.Create<Stellar.CreateContractArgsV2DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateContractArgsV2DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InvokeContractArgsEncodeRequest
            public static readonly Marshaller<Stellar.InvokeContractArgsEncodeRequest> InvokeContractArgsEncodeRequestMarshaller = Marshallers.Create<Stellar.InvokeContractArgsEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InvokeContractArgsEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InvokeContractArgsEncodeResponse
            public static readonly Marshaller<Stellar.InvokeContractArgsEncodeResponse> InvokeContractArgsEncodeResponseMarshaller = Marshallers.Create<Stellar.InvokeContractArgsEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InvokeContractArgsEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InvokeContractArgsDecodeRequest
            public static readonly Marshaller<Stellar.InvokeContractArgsDecodeRequest> InvokeContractArgsDecodeRequestMarshaller = Marshallers.Create<Stellar.InvokeContractArgsDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InvokeContractArgsDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InvokeContractArgsDecodeResponse
            public static readonly Marshaller<Stellar.InvokeContractArgsDecodeResponse> InvokeContractArgsDecodeResponseMarshaller = Marshallers.Create<Stellar.InvokeContractArgsDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InvokeContractArgsDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HostFunctionEncodeRequest
            public static readonly Marshaller<Stellar.HostFunctionEncodeRequest> HostFunctionEncodeRequestMarshaller = Marshallers.Create<Stellar.HostFunctionEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HostFunctionEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HostFunctionEncodeResponse
            public static readonly Marshaller<Stellar.HostFunctionEncodeResponse> HostFunctionEncodeResponseMarshaller = Marshallers.Create<Stellar.HostFunctionEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HostFunctionEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HostFunctionDecodeRequest
            public static readonly Marshaller<Stellar.HostFunctionDecodeRequest> HostFunctionDecodeRequestMarshaller = Marshallers.Create<Stellar.HostFunctionDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HostFunctionDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HostFunctionDecodeResponse
            public static readonly Marshaller<Stellar.HostFunctionDecodeResponse> HostFunctionDecodeResponseMarshaller = Marshallers.Create<Stellar.HostFunctionDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HostFunctionDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanAuthorizedFunctionTypeEncodeRequest
            public static readonly Marshaller<Stellar.SorobanAuthorizedFunctionTypeEncodeRequest> SorobanAuthorizedFunctionTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.SorobanAuthorizedFunctionTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanAuthorizedFunctionTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanAuthorizedFunctionTypeEncodeResponse
            public static readonly Marshaller<Stellar.SorobanAuthorizedFunctionTypeEncodeResponse> SorobanAuthorizedFunctionTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.SorobanAuthorizedFunctionTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanAuthorizedFunctionTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanAuthorizedFunctionTypeDecodeRequest
            public static readonly Marshaller<Stellar.SorobanAuthorizedFunctionTypeDecodeRequest> SorobanAuthorizedFunctionTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.SorobanAuthorizedFunctionTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanAuthorizedFunctionTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanAuthorizedFunctionTypeDecodeResponse
            public static readonly Marshaller<Stellar.SorobanAuthorizedFunctionTypeDecodeResponse> SorobanAuthorizedFunctionTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.SorobanAuthorizedFunctionTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanAuthorizedFunctionTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanAuthorizedFunctionEncodeRequest
            public static readonly Marshaller<Stellar.SorobanAuthorizedFunctionEncodeRequest> SorobanAuthorizedFunctionEncodeRequestMarshaller = Marshallers.Create<Stellar.SorobanAuthorizedFunctionEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanAuthorizedFunctionEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanAuthorizedFunctionEncodeResponse
            public static readonly Marshaller<Stellar.SorobanAuthorizedFunctionEncodeResponse> SorobanAuthorizedFunctionEncodeResponseMarshaller = Marshallers.Create<Stellar.SorobanAuthorizedFunctionEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanAuthorizedFunctionEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanAuthorizedFunctionDecodeRequest
            public static readonly Marshaller<Stellar.SorobanAuthorizedFunctionDecodeRequest> SorobanAuthorizedFunctionDecodeRequestMarshaller = Marshallers.Create<Stellar.SorobanAuthorizedFunctionDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanAuthorizedFunctionDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanAuthorizedFunctionDecodeResponse
            public static readonly Marshaller<Stellar.SorobanAuthorizedFunctionDecodeResponse> SorobanAuthorizedFunctionDecodeResponseMarshaller = Marshallers.Create<Stellar.SorobanAuthorizedFunctionDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanAuthorizedFunctionDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanAuthorizedInvocationEncodeRequest
            public static readonly Marshaller<Stellar.SorobanAuthorizedInvocationEncodeRequest> SorobanAuthorizedInvocationEncodeRequestMarshaller = Marshallers.Create<Stellar.SorobanAuthorizedInvocationEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanAuthorizedInvocationEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanAuthorizedInvocationEncodeResponse
            public static readonly Marshaller<Stellar.SorobanAuthorizedInvocationEncodeResponse> SorobanAuthorizedInvocationEncodeResponseMarshaller = Marshallers.Create<Stellar.SorobanAuthorizedInvocationEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanAuthorizedInvocationEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanAuthorizedInvocationDecodeRequest
            public static readonly Marshaller<Stellar.SorobanAuthorizedInvocationDecodeRequest> SorobanAuthorizedInvocationDecodeRequestMarshaller = Marshallers.Create<Stellar.SorobanAuthorizedInvocationDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanAuthorizedInvocationDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanAuthorizedInvocationDecodeResponse
            public static readonly Marshaller<Stellar.SorobanAuthorizedInvocationDecodeResponse> SorobanAuthorizedInvocationDecodeResponseMarshaller = Marshallers.Create<Stellar.SorobanAuthorizedInvocationDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanAuthorizedInvocationDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanAddressCredentialsEncodeRequest
            public static readonly Marshaller<Stellar.SorobanAddressCredentialsEncodeRequest> SorobanAddressCredentialsEncodeRequestMarshaller = Marshallers.Create<Stellar.SorobanAddressCredentialsEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanAddressCredentialsEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanAddressCredentialsEncodeResponse
            public static readonly Marshaller<Stellar.SorobanAddressCredentialsEncodeResponse> SorobanAddressCredentialsEncodeResponseMarshaller = Marshallers.Create<Stellar.SorobanAddressCredentialsEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanAddressCredentialsEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanAddressCredentialsDecodeRequest
            public static readonly Marshaller<Stellar.SorobanAddressCredentialsDecodeRequest> SorobanAddressCredentialsDecodeRequestMarshaller = Marshallers.Create<Stellar.SorobanAddressCredentialsDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanAddressCredentialsDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanAddressCredentialsDecodeResponse
            public static readonly Marshaller<Stellar.SorobanAddressCredentialsDecodeResponse> SorobanAddressCredentialsDecodeResponseMarshaller = Marshallers.Create<Stellar.SorobanAddressCredentialsDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanAddressCredentialsDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanCredentialsTypeEncodeRequest
            public static readonly Marshaller<Stellar.SorobanCredentialsTypeEncodeRequest> SorobanCredentialsTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.SorobanCredentialsTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanCredentialsTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanCredentialsTypeEncodeResponse
            public static readonly Marshaller<Stellar.SorobanCredentialsTypeEncodeResponse> SorobanCredentialsTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.SorobanCredentialsTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanCredentialsTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanCredentialsTypeDecodeRequest
            public static readonly Marshaller<Stellar.SorobanCredentialsTypeDecodeRequest> SorobanCredentialsTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.SorobanCredentialsTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanCredentialsTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanCredentialsTypeDecodeResponse
            public static readonly Marshaller<Stellar.SorobanCredentialsTypeDecodeResponse> SorobanCredentialsTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.SorobanCredentialsTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanCredentialsTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanCredentialsEncodeRequest
            public static readonly Marshaller<Stellar.SorobanCredentialsEncodeRequest> SorobanCredentialsEncodeRequestMarshaller = Marshallers.Create<Stellar.SorobanCredentialsEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanCredentialsEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanCredentialsEncodeResponse
            public static readonly Marshaller<Stellar.SorobanCredentialsEncodeResponse> SorobanCredentialsEncodeResponseMarshaller = Marshallers.Create<Stellar.SorobanCredentialsEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanCredentialsEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanCredentialsDecodeRequest
            public static readonly Marshaller<Stellar.SorobanCredentialsDecodeRequest> SorobanCredentialsDecodeRequestMarshaller = Marshallers.Create<Stellar.SorobanCredentialsDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanCredentialsDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanCredentialsDecodeResponse
            public static readonly Marshaller<Stellar.SorobanCredentialsDecodeResponse> SorobanCredentialsDecodeResponseMarshaller = Marshallers.Create<Stellar.SorobanCredentialsDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanCredentialsDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanAuthorizationEntryEncodeRequest
            public static readonly Marshaller<Stellar.SorobanAuthorizationEntryEncodeRequest> SorobanAuthorizationEntryEncodeRequestMarshaller = Marshallers.Create<Stellar.SorobanAuthorizationEntryEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanAuthorizationEntryEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanAuthorizationEntryEncodeResponse
            public static readonly Marshaller<Stellar.SorobanAuthorizationEntryEncodeResponse> SorobanAuthorizationEntryEncodeResponseMarshaller = Marshallers.Create<Stellar.SorobanAuthorizationEntryEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanAuthorizationEntryEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanAuthorizationEntryDecodeRequest
            public static readonly Marshaller<Stellar.SorobanAuthorizationEntryDecodeRequest> SorobanAuthorizationEntryDecodeRequestMarshaller = Marshallers.Create<Stellar.SorobanAuthorizationEntryDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanAuthorizationEntryDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanAuthorizationEntryDecodeResponse
            public static readonly Marshaller<Stellar.SorobanAuthorizationEntryDecodeResponse> SorobanAuthorizationEntryDecodeResponseMarshaller = Marshallers.Create<Stellar.SorobanAuthorizationEntryDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanAuthorizationEntryDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InvokeHostFunctionOpEncodeRequest
            public static readonly Marshaller<Stellar.InvokeHostFunctionOpEncodeRequest> InvokeHostFunctionOpEncodeRequestMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionOpEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InvokeHostFunctionOpEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InvokeHostFunctionOpEncodeResponse
            public static readonly Marshaller<Stellar.InvokeHostFunctionOpEncodeResponse> InvokeHostFunctionOpEncodeResponseMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionOpEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InvokeHostFunctionOpEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InvokeHostFunctionOpDecodeRequest
            public static readonly Marshaller<Stellar.InvokeHostFunctionOpDecodeRequest> InvokeHostFunctionOpDecodeRequestMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionOpDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InvokeHostFunctionOpDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InvokeHostFunctionOpDecodeResponse
            public static readonly Marshaller<Stellar.InvokeHostFunctionOpDecodeResponse> InvokeHostFunctionOpDecodeResponseMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionOpDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InvokeHostFunctionOpDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ExtendFootprintTTLOpEncodeRequest
            public static readonly Marshaller<Stellar.ExtendFootprintTTLOpEncodeRequest> ExtendFootprintTTLOpEncodeRequestMarshaller = Marshallers.Create<Stellar.ExtendFootprintTTLOpEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ExtendFootprintTTLOpEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ExtendFootprintTTLOpEncodeResponse
            public static readonly Marshaller<Stellar.ExtendFootprintTTLOpEncodeResponse> ExtendFootprintTTLOpEncodeResponseMarshaller = Marshallers.Create<Stellar.ExtendFootprintTTLOpEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ExtendFootprintTTLOpEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ExtendFootprintTTLOpDecodeRequest
            public static readonly Marshaller<Stellar.ExtendFootprintTTLOpDecodeRequest> ExtendFootprintTTLOpDecodeRequestMarshaller = Marshallers.Create<Stellar.ExtendFootprintTTLOpDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ExtendFootprintTTLOpDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ExtendFootprintTTLOpDecodeResponse
            public static readonly Marshaller<Stellar.ExtendFootprintTTLOpDecodeResponse> ExtendFootprintTTLOpDecodeResponseMarshaller = Marshallers.Create<Stellar.ExtendFootprintTTLOpDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ExtendFootprintTTLOpDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RestoreFootprintOpEncodeRequest
            public static readonly Marshaller<Stellar.RestoreFootprintOpEncodeRequest> RestoreFootprintOpEncodeRequestMarshaller = Marshallers.Create<Stellar.RestoreFootprintOpEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RestoreFootprintOpEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RestoreFootprintOpEncodeResponse
            public static readonly Marshaller<Stellar.RestoreFootprintOpEncodeResponse> RestoreFootprintOpEncodeResponseMarshaller = Marshallers.Create<Stellar.RestoreFootprintOpEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RestoreFootprintOpEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RestoreFootprintOpDecodeRequest
            public static readonly Marshaller<Stellar.RestoreFootprintOpDecodeRequest> RestoreFootprintOpDecodeRequestMarshaller = Marshallers.Create<Stellar.RestoreFootprintOpDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RestoreFootprintOpDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RestoreFootprintOpDecodeResponse
            public static readonly Marshaller<Stellar.RestoreFootprintOpDecodeResponse> RestoreFootprintOpDecodeResponseMarshaller = Marshallers.Create<Stellar.RestoreFootprintOpDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RestoreFootprintOpDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OperationEncodeRequest
            public static readonly Marshaller<Stellar.OperationEncodeRequest> OperationEncodeRequestMarshaller = Marshallers.Create<Stellar.OperationEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OperationEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OperationEncodeResponse
            public static readonly Marshaller<Stellar.OperationEncodeResponse> OperationEncodeResponseMarshaller = Marshallers.Create<Stellar.OperationEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OperationEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OperationDecodeRequest
            public static readonly Marshaller<Stellar.OperationDecodeRequest> OperationDecodeRequestMarshaller = Marshallers.Create<Stellar.OperationDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OperationDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OperationDecodeResponse
            public static readonly Marshaller<Stellar.OperationDecodeResponse> OperationDecodeResponseMarshaller = Marshallers.Create<Stellar.OperationDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OperationDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HashIDPreimageEncodeRequest
            public static readonly Marshaller<Stellar.HashIDPreimageEncodeRequest> HashIDPreimageEncodeRequestMarshaller = Marshallers.Create<Stellar.HashIDPreimageEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HashIDPreimageEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HashIDPreimageEncodeResponse
            public static readonly Marshaller<Stellar.HashIDPreimageEncodeResponse> HashIDPreimageEncodeResponseMarshaller = Marshallers.Create<Stellar.HashIDPreimageEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HashIDPreimageEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HashIDPreimageDecodeRequest
            public static readonly Marshaller<Stellar.HashIDPreimageDecodeRequest> HashIDPreimageDecodeRequestMarshaller = Marshallers.Create<Stellar.HashIDPreimageDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HashIDPreimageDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HashIDPreimageDecodeResponse
            public static readonly Marshaller<Stellar.HashIDPreimageDecodeResponse> HashIDPreimageDecodeResponseMarshaller = Marshallers.Create<Stellar.HashIDPreimageDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HashIDPreimageDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for MemoTypeEncodeRequest
            public static readonly Marshaller<Stellar.MemoTypeEncodeRequest> MemoTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.MemoTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.MemoTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for MemoTypeEncodeResponse
            public static readonly Marshaller<Stellar.MemoTypeEncodeResponse> MemoTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.MemoTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.MemoTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for MemoTypeDecodeRequest
            public static readonly Marshaller<Stellar.MemoTypeDecodeRequest> MemoTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.MemoTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.MemoTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for MemoTypeDecodeResponse
            public static readonly Marshaller<Stellar.MemoTypeDecodeResponse> MemoTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.MemoTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.MemoTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for MemoEncodeRequest
            public static readonly Marshaller<Stellar.MemoEncodeRequest> MemoEncodeRequestMarshaller = Marshallers.Create<Stellar.MemoEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.MemoEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for MemoEncodeResponse
            public static readonly Marshaller<Stellar.MemoEncodeResponse> MemoEncodeResponseMarshaller = Marshallers.Create<Stellar.MemoEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.MemoEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for MemoDecodeRequest
            public static readonly Marshaller<Stellar.MemoDecodeRequest> MemoDecodeRequestMarshaller = Marshallers.Create<Stellar.MemoDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.MemoDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for MemoDecodeResponse
            public static readonly Marshaller<Stellar.MemoDecodeResponse> MemoDecodeResponseMarshaller = Marshallers.Create<Stellar.MemoDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.MemoDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeBoundsEncodeRequest
            public static readonly Marshaller<Stellar.TimeBoundsEncodeRequest> TimeBoundsEncodeRequestMarshaller = Marshallers.Create<Stellar.TimeBoundsEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeBoundsEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeBoundsEncodeResponse
            public static readonly Marshaller<Stellar.TimeBoundsEncodeResponse> TimeBoundsEncodeResponseMarshaller = Marshallers.Create<Stellar.TimeBoundsEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeBoundsEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeBoundsDecodeRequest
            public static readonly Marshaller<Stellar.TimeBoundsDecodeRequest> TimeBoundsDecodeRequestMarshaller = Marshallers.Create<Stellar.TimeBoundsDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeBoundsDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimeBoundsDecodeResponse
            public static readonly Marshaller<Stellar.TimeBoundsDecodeResponse> TimeBoundsDecodeResponseMarshaller = Marshallers.Create<Stellar.TimeBoundsDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimeBoundsDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerBoundsEncodeRequest
            public static readonly Marshaller<Stellar.LedgerBoundsEncodeRequest> LedgerBoundsEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerBoundsEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerBoundsEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerBoundsEncodeResponse
            public static readonly Marshaller<Stellar.LedgerBoundsEncodeResponse> LedgerBoundsEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerBoundsEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerBoundsEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerBoundsDecodeRequest
            public static readonly Marshaller<Stellar.LedgerBoundsDecodeRequest> LedgerBoundsDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerBoundsDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerBoundsDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerBoundsDecodeResponse
            public static readonly Marshaller<Stellar.LedgerBoundsDecodeResponse> LedgerBoundsDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerBoundsDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerBoundsDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PreconditionsV2EncodeRequest
            public static readonly Marshaller<Stellar.PreconditionsV2EncodeRequest> PreconditionsV2EncodeRequestMarshaller = Marshallers.Create<Stellar.PreconditionsV2EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PreconditionsV2EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PreconditionsV2EncodeResponse
            public static readonly Marshaller<Stellar.PreconditionsV2EncodeResponse> PreconditionsV2EncodeResponseMarshaller = Marshallers.Create<Stellar.PreconditionsV2EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PreconditionsV2EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PreconditionsV2DecodeRequest
            public static readonly Marshaller<Stellar.PreconditionsV2DecodeRequest> PreconditionsV2DecodeRequestMarshaller = Marshallers.Create<Stellar.PreconditionsV2DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PreconditionsV2DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PreconditionsV2DecodeResponse
            public static readonly Marshaller<Stellar.PreconditionsV2DecodeResponse> PreconditionsV2DecodeResponseMarshaller = Marshallers.Create<Stellar.PreconditionsV2DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PreconditionsV2DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PreconditionTypeEncodeRequest
            public static readonly Marshaller<Stellar.PreconditionTypeEncodeRequest> PreconditionTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.PreconditionTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PreconditionTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PreconditionTypeEncodeResponse
            public static readonly Marshaller<Stellar.PreconditionTypeEncodeResponse> PreconditionTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.PreconditionTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PreconditionTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PreconditionTypeDecodeRequest
            public static readonly Marshaller<Stellar.PreconditionTypeDecodeRequest> PreconditionTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.PreconditionTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PreconditionTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PreconditionTypeDecodeResponse
            public static readonly Marshaller<Stellar.PreconditionTypeDecodeResponse> PreconditionTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.PreconditionTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PreconditionTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PreconditionsEncodeRequest
            public static readonly Marshaller<Stellar.PreconditionsEncodeRequest> PreconditionsEncodeRequestMarshaller = Marshallers.Create<Stellar.PreconditionsEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PreconditionsEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PreconditionsEncodeResponse
            public static readonly Marshaller<Stellar.PreconditionsEncodeResponse> PreconditionsEncodeResponseMarshaller = Marshallers.Create<Stellar.PreconditionsEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PreconditionsEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PreconditionsDecodeRequest
            public static readonly Marshaller<Stellar.PreconditionsDecodeRequest> PreconditionsDecodeRequestMarshaller = Marshallers.Create<Stellar.PreconditionsDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PreconditionsDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PreconditionsDecodeResponse
            public static readonly Marshaller<Stellar.PreconditionsDecodeResponse> PreconditionsDecodeResponseMarshaller = Marshallers.Create<Stellar.PreconditionsDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PreconditionsDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerFootprintEncodeRequest
            public static readonly Marshaller<Stellar.LedgerFootprintEncodeRequest> LedgerFootprintEncodeRequestMarshaller = Marshallers.Create<Stellar.LedgerFootprintEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerFootprintEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerFootprintEncodeResponse
            public static readonly Marshaller<Stellar.LedgerFootprintEncodeResponse> LedgerFootprintEncodeResponseMarshaller = Marshallers.Create<Stellar.LedgerFootprintEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerFootprintEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerFootprintDecodeRequest
            public static readonly Marshaller<Stellar.LedgerFootprintDecodeRequest> LedgerFootprintDecodeRequestMarshaller = Marshallers.Create<Stellar.LedgerFootprintDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerFootprintDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LedgerFootprintDecodeResponse
            public static readonly Marshaller<Stellar.LedgerFootprintDecodeResponse> LedgerFootprintDecodeResponseMarshaller = Marshallers.Create<Stellar.LedgerFootprintDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LedgerFootprintDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ArchivalProofTypeEncodeRequest
            public static readonly Marshaller<Stellar.ArchivalProofTypeEncodeRequest> ArchivalProofTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.ArchivalProofTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ArchivalProofTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ArchivalProofTypeEncodeResponse
            public static readonly Marshaller<Stellar.ArchivalProofTypeEncodeResponse> ArchivalProofTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.ArchivalProofTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ArchivalProofTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ArchivalProofTypeDecodeRequest
            public static readonly Marshaller<Stellar.ArchivalProofTypeDecodeRequest> ArchivalProofTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.ArchivalProofTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ArchivalProofTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ArchivalProofTypeDecodeResponse
            public static readonly Marshaller<Stellar.ArchivalProofTypeDecodeResponse> ArchivalProofTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.ArchivalProofTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ArchivalProofTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ArchivalProofNodeEncodeRequest
            public static readonly Marshaller<Stellar.ArchivalProofNodeEncodeRequest> ArchivalProofNodeEncodeRequestMarshaller = Marshallers.Create<Stellar.ArchivalProofNodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ArchivalProofNodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ArchivalProofNodeEncodeResponse
            public static readonly Marshaller<Stellar.ArchivalProofNodeEncodeResponse> ArchivalProofNodeEncodeResponseMarshaller = Marshallers.Create<Stellar.ArchivalProofNodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ArchivalProofNodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ArchivalProofNodeDecodeRequest
            public static readonly Marshaller<Stellar.ArchivalProofNodeDecodeRequest> ArchivalProofNodeDecodeRequestMarshaller = Marshallers.Create<Stellar.ArchivalProofNodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ArchivalProofNodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ArchivalProofNodeDecodeResponse
            public static readonly Marshaller<Stellar.ArchivalProofNodeDecodeResponse> ArchivalProofNodeDecodeResponseMarshaller = Marshallers.Create<Stellar.ArchivalProofNodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ArchivalProofNodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ProofLevelEncodeRequest
            public static readonly Marshaller<Stellar.ProofLevelEncodeRequest> ProofLevelEncodeRequestMarshaller = Marshallers.Create<Stellar.ProofLevelEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ProofLevelEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ProofLevelEncodeResponse
            public static readonly Marshaller<Stellar.ProofLevelEncodeResponse> ProofLevelEncodeResponseMarshaller = Marshallers.Create<Stellar.ProofLevelEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ProofLevelEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ProofLevelDecodeRequest
            public static readonly Marshaller<Stellar.ProofLevelDecodeRequest> ProofLevelDecodeRequestMarshaller = Marshallers.Create<Stellar.ProofLevelDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ProofLevelDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ProofLevelDecodeResponse
            public static readonly Marshaller<Stellar.ProofLevelDecodeResponse> ProofLevelDecodeResponseMarshaller = Marshallers.Create<Stellar.ProofLevelDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ProofLevelDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for NonexistenceProofBodyEncodeRequest
            public static readonly Marshaller<Stellar.NonexistenceProofBodyEncodeRequest> NonexistenceProofBodyEncodeRequestMarshaller = Marshallers.Create<Stellar.NonexistenceProofBodyEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.NonexistenceProofBodyEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for NonexistenceProofBodyEncodeResponse
            public static readonly Marshaller<Stellar.NonexistenceProofBodyEncodeResponse> NonexistenceProofBodyEncodeResponseMarshaller = Marshallers.Create<Stellar.NonexistenceProofBodyEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.NonexistenceProofBodyEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for NonexistenceProofBodyDecodeRequest
            public static readonly Marshaller<Stellar.NonexistenceProofBodyDecodeRequest> NonexistenceProofBodyDecodeRequestMarshaller = Marshallers.Create<Stellar.NonexistenceProofBodyDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.NonexistenceProofBodyDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for NonexistenceProofBodyDecodeResponse
            public static readonly Marshaller<Stellar.NonexistenceProofBodyDecodeResponse> NonexistenceProofBodyDecodeResponseMarshaller = Marshallers.Create<Stellar.NonexistenceProofBodyDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.NonexistenceProofBodyDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ExistenceProofBodyEncodeRequest
            public static readonly Marshaller<Stellar.ExistenceProofBodyEncodeRequest> ExistenceProofBodyEncodeRequestMarshaller = Marshallers.Create<Stellar.ExistenceProofBodyEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ExistenceProofBodyEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ExistenceProofBodyEncodeResponse
            public static readonly Marshaller<Stellar.ExistenceProofBodyEncodeResponse> ExistenceProofBodyEncodeResponseMarshaller = Marshallers.Create<Stellar.ExistenceProofBodyEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ExistenceProofBodyEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ExistenceProofBodyDecodeRequest
            public static readonly Marshaller<Stellar.ExistenceProofBodyDecodeRequest> ExistenceProofBodyDecodeRequestMarshaller = Marshallers.Create<Stellar.ExistenceProofBodyDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ExistenceProofBodyDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ExistenceProofBodyDecodeResponse
            public static readonly Marshaller<Stellar.ExistenceProofBodyDecodeResponse> ExistenceProofBodyDecodeResponseMarshaller = Marshallers.Create<Stellar.ExistenceProofBodyDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ExistenceProofBodyDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ArchivalProofEncodeRequest
            public static readonly Marshaller<Stellar.ArchivalProofEncodeRequest> ArchivalProofEncodeRequestMarshaller = Marshallers.Create<Stellar.ArchivalProofEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ArchivalProofEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ArchivalProofEncodeResponse
            public static readonly Marshaller<Stellar.ArchivalProofEncodeResponse> ArchivalProofEncodeResponseMarshaller = Marshallers.Create<Stellar.ArchivalProofEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ArchivalProofEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ArchivalProofDecodeRequest
            public static readonly Marshaller<Stellar.ArchivalProofDecodeRequest> ArchivalProofDecodeRequestMarshaller = Marshallers.Create<Stellar.ArchivalProofDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ArchivalProofDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ArchivalProofDecodeResponse
            public static readonly Marshaller<Stellar.ArchivalProofDecodeResponse> ArchivalProofDecodeResponseMarshaller = Marshallers.Create<Stellar.ArchivalProofDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ArchivalProofDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanResourcesEncodeRequest
            public static readonly Marshaller<Stellar.SorobanResourcesEncodeRequest> SorobanResourcesEncodeRequestMarshaller = Marshallers.Create<Stellar.SorobanResourcesEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanResourcesEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanResourcesEncodeResponse
            public static readonly Marshaller<Stellar.SorobanResourcesEncodeResponse> SorobanResourcesEncodeResponseMarshaller = Marshallers.Create<Stellar.SorobanResourcesEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanResourcesEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanResourcesDecodeRequest
            public static readonly Marshaller<Stellar.SorobanResourcesDecodeRequest> SorobanResourcesDecodeRequestMarshaller = Marshallers.Create<Stellar.SorobanResourcesDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanResourcesDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanResourcesDecodeResponse
            public static readonly Marshaller<Stellar.SorobanResourcesDecodeResponse> SorobanResourcesDecodeResponseMarshaller = Marshallers.Create<Stellar.SorobanResourcesDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanResourcesDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanTransactionDataEncodeRequest
            public static readonly Marshaller<Stellar.SorobanTransactionDataEncodeRequest> SorobanTransactionDataEncodeRequestMarshaller = Marshallers.Create<Stellar.SorobanTransactionDataEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanTransactionDataEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanTransactionDataEncodeResponse
            public static readonly Marshaller<Stellar.SorobanTransactionDataEncodeResponse> SorobanTransactionDataEncodeResponseMarshaller = Marshallers.Create<Stellar.SorobanTransactionDataEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanTransactionDataEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanTransactionDataDecodeRequest
            public static readonly Marshaller<Stellar.SorobanTransactionDataDecodeRequest> SorobanTransactionDataDecodeRequestMarshaller = Marshallers.Create<Stellar.SorobanTransactionDataDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanTransactionDataDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SorobanTransactionDataDecodeResponse
            public static readonly Marshaller<Stellar.SorobanTransactionDataDecodeResponse> SorobanTransactionDataDecodeResponseMarshaller = Marshallers.Create<Stellar.SorobanTransactionDataDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SorobanTransactionDataDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionV0EncodeRequest
            public static readonly Marshaller<Stellar.TransactionV0EncodeRequest> TransactionV0EncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionV0EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionV0EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionV0EncodeResponse
            public static readonly Marshaller<Stellar.TransactionV0EncodeResponse> TransactionV0EncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionV0EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionV0EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionV0DecodeRequest
            public static readonly Marshaller<Stellar.TransactionV0DecodeRequest> TransactionV0DecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionV0DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionV0DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionV0DecodeResponse
            public static readonly Marshaller<Stellar.TransactionV0DecodeResponse> TransactionV0DecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionV0DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionV0DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionV0EnvelopeEncodeRequest
            public static readonly Marshaller<Stellar.TransactionV0EnvelopeEncodeRequest> TransactionV0EnvelopeEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionV0EnvelopeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionV0EnvelopeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionV0EnvelopeEncodeResponse
            public static readonly Marshaller<Stellar.TransactionV0EnvelopeEncodeResponse> TransactionV0EnvelopeEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionV0EnvelopeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionV0EnvelopeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionV0EnvelopeDecodeRequest
            public static readonly Marshaller<Stellar.TransactionV0EnvelopeDecodeRequest> TransactionV0EnvelopeDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionV0EnvelopeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionV0EnvelopeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionV0EnvelopeDecodeResponse
            public static readonly Marshaller<Stellar.TransactionV0EnvelopeDecodeResponse> TransactionV0EnvelopeDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionV0EnvelopeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionV0EnvelopeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionEncodeRequest
            public static readonly Marshaller<Stellar.TransactionEncodeRequest> TransactionEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionEncodeResponse
            public static readonly Marshaller<Stellar.TransactionEncodeResponse> TransactionEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionDecodeRequest
            public static readonly Marshaller<Stellar.TransactionDecodeRequest> TransactionDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionDecodeResponse
            public static readonly Marshaller<Stellar.TransactionDecodeResponse> TransactionDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionV1EnvelopeEncodeRequest
            public static readonly Marshaller<Stellar.TransactionV1EnvelopeEncodeRequest> TransactionV1EnvelopeEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionV1EnvelopeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionV1EnvelopeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionV1EnvelopeEncodeResponse
            public static readonly Marshaller<Stellar.TransactionV1EnvelopeEncodeResponse> TransactionV1EnvelopeEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionV1EnvelopeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionV1EnvelopeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionV1EnvelopeDecodeRequest
            public static readonly Marshaller<Stellar.TransactionV1EnvelopeDecodeRequest> TransactionV1EnvelopeDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionV1EnvelopeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionV1EnvelopeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionV1EnvelopeDecodeResponse
            public static readonly Marshaller<Stellar.TransactionV1EnvelopeDecodeResponse> TransactionV1EnvelopeDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionV1EnvelopeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionV1EnvelopeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for FeeBumpTransactionEncodeRequest
            public static readonly Marshaller<Stellar.FeeBumpTransactionEncodeRequest> FeeBumpTransactionEncodeRequestMarshaller = Marshallers.Create<Stellar.FeeBumpTransactionEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.FeeBumpTransactionEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for FeeBumpTransactionEncodeResponse
            public static readonly Marshaller<Stellar.FeeBumpTransactionEncodeResponse> FeeBumpTransactionEncodeResponseMarshaller = Marshallers.Create<Stellar.FeeBumpTransactionEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.FeeBumpTransactionEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for FeeBumpTransactionDecodeRequest
            public static readonly Marshaller<Stellar.FeeBumpTransactionDecodeRequest> FeeBumpTransactionDecodeRequestMarshaller = Marshallers.Create<Stellar.FeeBumpTransactionDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.FeeBumpTransactionDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for FeeBumpTransactionDecodeResponse
            public static readonly Marshaller<Stellar.FeeBumpTransactionDecodeResponse> FeeBumpTransactionDecodeResponseMarshaller = Marshallers.Create<Stellar.FeeBumpTransactionDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.FeeBumpTransactionDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for FeeBumpTransactionEnvelopeEncodeRequest
            public static readonly Marshaller<Stellar.FeeBumpTransactionEnvelopeEncodeRequest> FeeBumpTransactionEnvelopeEncodeRequestMarshaller = Marshallers.Create<Stellar.FeeBumpTransactionEnvelopeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.FeeBumpTransactionEnvelopeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for FeeBumpTransactionEnvelopeEncodeResponse
            public static readonly Marshaller<Stellar.FeeBumpTransactionEnvelopeEncodeResponse> FeeBumpTransactionEnvelopeEncodeResponseMarshaller = Marshallers.Create<Stellar.FeeBumpTransactionEnvelopeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.FeeBumpTransactionEnvelopeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for FeeBumpTransactionEnvelopeDecodeRequest
            public static readonly Marshaller<Stellar.FeeBumpTransactionEnvelopeDecodeRequest> FeeBumpTransactionEnvelopeDecodeRequestMarshaller = Marshallers.Create<Stellar.FeeBumpTransactionEnvelopeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.FeeBumpTransactionEnvelopeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for FeeBumpTransactionEnvelopeDecodeResponse
            public static readonly Marshaller<Stellar.FeeBumpTransactionEnvelopeDecodeResponse> FeeBumpTransactionEnvelopeDecodeResponseMarshaller = Marshallers.Create<Stellar.FeeBumpTransactionEnvelopeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.FeeBumpTransactionEnvelopeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionEnvelopeEncodeRequest
            public static readonly Marshaller<Stellar.TransactionEnvelopeEncodeRequest> TransactionEnvelopeEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionEnvelopeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionEnvelopeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionEnvelopeEncodeResponse
            public static readonly Marshaller<Stellar.TransactionEnvelopeEncodeResponse> TransactionEnvelopeEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionEnvelopeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionEnvelopeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionEnvelopeDecodeRequest
            public static readonly Marshaller<Stellar.TransactionEnvelopeDecodeRequest> TransactionEnvelopeDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionEnvelopeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionEnvelopeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionEnvelopeDecodeResponse
            public static readonly Marshaller<Stellar.TransactionEnvelopeDecodeResponse> TransactionEnvelopeDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionEnvelopeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionEnvelopeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionSignaturePayloadEncodeRequest
            public static readonly Marshaller<Stellar.TransactionSignaturePayloadEncodeRequest> TransactionSignaturePayloadEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionSignaturePayloadEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionSignaturePayloadEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionSignaturePayloadEncodeResponse
            public static readonly Marshaller<Stellar.TransactionSignaturePayloadEncodeResponse> TransactionSignaturePayloadEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionSignaturePayloadEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionSignaturePayloadEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionSignaturePayloadDecodeRequest
            public static readonly Marshaller<Stellar.TransactionSignaturePayloadDecodeRequest> TransactionSignaturePayloadDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionSignaturePayloadDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionSignaturePayloadDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionSignaturePayloadDecodeResponse
            public static readonly Marshaller<Stellar.TransactionSignaturePayloadDecodeResponse> TransactionSignaturePayloadDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionSignaturePayloadDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionSignaturePayloadDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimAtomTypeEncodeRequest
            public static readonly Marshaller<Stellar.ClaimAtomTypeEncodeRequest> ClaimAtomTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimAtomTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimAtomTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimAtomTypeEncodeResponse
            public static readonly Marshaller<Stellar.ClaimAtomTypeEncodeResponse> ClaimAtomTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimAtomTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimAtomTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimAtomTypeDecodeRequest
            public static readonly Marshaller<Stellar.ClaimAtomTypeDecodeRequest> ClaimAtomTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimAtomTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimAtomTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimAtomTypeDecodeResponse
            public static readonly Marshaller<Stellar.ClaimAtomTypeDecodeResponse> ClaimAtomTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimAtomTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimAtomTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimOfferAtomV0EncodeRequest
            public static readonly Marshaller<Stellar.ClaimOfferAtomV0EncodeRequest> ClaimOfferAtomV0EncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimOfferAtomV0EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimOfferAtomV0EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimOfferAtomV0EncodeResponse
            public static readonly Marshaller<Stellar.ClaimOfferAtomV0EncodeResponse> ClaimOfferAtomV0EncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimOfferAtomV0EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimOfferAtomV0EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimOfferAtomV0DecodeRequest
            public static readonly Marshaller<Stellar.ClaimOfferAtomV0DecodeRequest> ClaimOfferAtomV0DecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimOfferAtomV0DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimOfferAtomV0DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimOfferAtomV0DecodeResponse
            public static readonly Marshaller<Stellar.ClaimOfferAtomV0DecodeResponse> ClaimOfferAtomV0DecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimOfferAtomV0DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimOfferAtomV0DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimOfferAtomEncodeRequest
            public static readonly Marshaller<Stellar.ClaimOfferAtomEncodeRequest> ClaimOfferAtomEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimOfferAtomEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimOfferAtomEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimOfferAtomEncodeResponse
            public static readonly Marshaller<Stellar.ClaimOfferAtomEncodeResponse> ClaimOfferAtomEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimOfferAtomEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimOfferAtomEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimOfferAtomDecodeRequest
            public static readonly Marshaller<Stellar.ClaimOfferAtomDecodeRequest> ClaimOfferAtomDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimOfferAtomDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimOfferAtomDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimOfferAtomDecodeResponse
            public static readonly Marshaller<Stellar.ClaimOfferAtomDecodeResponse> ClaimOfferAtomDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimOfferAtomDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimOfferAtomDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimLiquidityAtomEncodeRequest
            public static readonly Marshaller<Stellar.ClaimLiquidityAtomEncodeRequest> ClaimLiquidityAtomEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimLiquidityAtomEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimLiquidityAtomEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimLiquidityAtomEncodeResponse
            public static readonly Marshaller<Stellar.ClaimLiquidityAtomEncodeResponse> ClaimLiquidityAtomEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimLiquidityAtomEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimLiquidityAtomEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimLiquidityAtomDecodeRequest
            public static readonly Marshaller<Stellar.ClaimLiquidityAtomDecodeRequest> ClaimLiquidityAtomDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimLiquidityAtomDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimLiquidityAtomDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimLiquidityAtomDecodeResponse
            public static readonly Marshaller<Stellar.ClaimLiquidityAtomDecodeResponse> ClaimLiquidityAtomDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimLiquidityAtomDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimLiquidityAtomDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimAtomEncodeRequest
            public static readonly Marshaller<Stellar.ClaimAtomEncodeRequest> ClaimAtomEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimAtomEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimAtomEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimAtomEncodeResponse
            public static readonly Marshaller<Stellar.ClaimAtomEncodeResponse> ClaimAtomEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimAtomEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimAtomEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimAtomDecodeRequest
            public static readonly Marshaller<Stellar.ClaimAtomDecodeRequest> ClaimAtomDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimAtomDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimAtomDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimAtomDecodeResponse
            public static readonly Marshaller<Stellar.ClaimAtomDecodeResponse> ClaimAtomDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimAtomDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimAtomDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateAccountResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.CreateAccountResultCodeEncodeRequest> CreateAccountResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.CreateAccountResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateAccountResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateAccountResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.CreateAccountResultCodeEncodeResponse> CreateAccountResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.CreateAccountResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateAccountResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateAccountResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.CreateAccountResultCodeDecodeRequest> CreateAccountResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.CreateAccountResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateAccountResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateAccountResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.CreateAccountResultCodeDecodeResponse> CreateAccountResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.CreateAccountResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateAccountResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateAccountResultEncodeRequest
            public static readonly Marshaller<Stellar.CreateAccountResultEncodeRequest> CreateAccountResultEncodeRequestMarshaller = Marshallers.Create<Stellar.CreateAccountResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateAccountResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateAccountResultEncodeResponse
            public static readonly Marshaller<Stellar.CreateAccountResultEncodeResponse> CreateAccountResultEncodeResponseMarshaller = Marshallers.Create<Stellar.CreateAccountResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateAccountResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateAccountResultDecodeRequest
            public static readonly Marshaller<Stellar.CreateAccountResultDecodeRequest> CreateAccountResultDecodeRequestMarshaller = Marshallers.Create<Stellar.CreateAccountResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateAccountResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateAccountResultDecodeResponse
            public static readonly Marshaller<Stellar.CreateAccountResultDecodeResponse> CreateAccountResultDecodeResponseMarshaller = Marshallers.Create<Stellar.CreateAccountResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateAccountResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PaymentResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.PaymentResultCodeEncodeRequest> PaymentResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.PaymentResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PaymentResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PaymentResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.PaymentResultCodeEncodeResponse> PaymentResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.PaymentResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PaymentResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PaymentResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.PaymentResultCodeDecodeRequest> PaymentResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.PaymentResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PaymentResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PaymentResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.PaymentResultCodeDecodeResponse> PaymentResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.PaymentResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PaymentResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PaymentResultEncodeRequest
            public static readonly Marshaller<Stellar.PaymentResultEncodeRequest> PaymentResultEncodeRequestMarshaller = Marshallers.Create<Stellar.PaymentResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PaymentResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PaymentResultEncodeResponse
            public static readonly Marshaller<Stellar.PaymentResultEncodeResponse> PaymentResultEncodeResponseMarshaller = Marshallers.Create<Stellar.PaymentResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PaymentResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PaymentResultDecodeRequest
            public static readonly Marshaller<Stellar.PaymentResultDecodeRequest> PaymentResultDecodeRequestMarshaller = Marshallers.Create<Stellar.PaymentResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PaymentResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PaymentResultDecodeResponse
            public static readonly Marshaller<Stellar.PaymentResultDecodeResponse> PaymentResultDecodeResponseMarshaller = Marshallers.Create<Stellar.PaymentResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PaymentResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PathPaymentStrictReceiveResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.PathPaymentStrictReceiveResultCodeEncodeRequest> PathPaymentStrictReceiveResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.PathPaymentStrictReceiveResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PathPaymentStrictReceiveResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PathPaymentStrictReceiveResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.PathPaymentStrictReceiveResultCodeEncodeResponse> PathPaymentStrictReceiveResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.PathPaymentStrictReceiveResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PathPaymentStrictReceiveResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PathPaymentStrictReceiveResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.PathPaymentStrictReceiveResultCodeDecodeRequest> PathPaymentStrictReceiveResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.PathPaymentStrictReceiveResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PathPaymentStrictReceiveResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PathPaymentStrictReceiveResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.PathPaymentStrictReceiveResultCodeDecodeResponse> PathPaymentStrictReceiveResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.PathPaymentStrictReceiveResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PathPaymentStrictReceiveResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SimplePaymentResultEncodeRequest
            public static readonly Marshaller<Stellar.SimplePaymentResultEncodeRequest> SimplePaymentResultEncodeRequestMarshaller = Marshallers.Create<Stellar.SimplePaymentResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SimplePaymentResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SimplePaymentResultEncodeResponse
            public static readonly Marshaller<Stellar.SimplePaymentResultEncodeResponse> SimplePaymentResultEncodeResponseMarshaller = Marshallers.Create<Stellar.SimplePaymentResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SimplePaymentResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SimplePaymentResultDecodeRequest
            public static readonly Marshaller<Stellar.SimplePaymentResultDecodeRequest> SimplePaymentResultDecodeRequestMarshaller = Marshallers.Create<Stellar.SimplePaymentResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SimplePaymentResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SimplePaymentResultDecodeResponse
            public static readonly Marshaller<Stellar.SimplePaymentResultDecodeResponse> SimplePaymentResultDecodeResponseMarshaller = Marshallers.Create<Stellar.SimplePaymentResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SimplePaymentResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PathPaymentStrictReceiveResultEncodeRequest
            public static readonly Marshaller<Stellar.PathPaymentStrictReceiveResultEncodeRequest> PathPaymentStrictReceiveResultEncodeRequestMarshaller = Marshallers.Create<Stellar.PathPaymentStrictReceiveResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PathPaymentStrictReceiveResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PathPaymentStrictReceiveResultEncodeResponse
            public static readonly Marshaller<Stellar.PathPaymentStrictReceiveResultEncodeResponse> PathPaymentStrictReceiveResultEncodeResponseMarshaller = Marshallers.Create<Stellar.PathPaymentStrictReceiveResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PathPaymentStrictReceiveResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PathPaymentStrictReceiveResultDecodeRequest
            public static readonly Marshaller<Stellar.PathPaymentStrictReceiveResultDecodeRequest> PathPaymentStrictReceiveResultDecodeRequestMarshaller = Marshallers.Create<Stellar.PathPaymentStrictReceiveResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PathPaymentStrictReceiveResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PathPaymentStrictReceiveResultDecodeResponse
            public static readonly Marshaller<Stellar.PathPaymentStrictReceiveResultDecodeResponse> PathPaymentStrictReceiveResultDecodeResponseMarshaller = Marshallers.Create<Stellar.PathPaymentStrictReceiveResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PathPaymentStrictReceiveResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PathPaymentStrictSendResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.PathPaymentStrictSendResultCodeEncodeRequest> PathPaymentStrictSendResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.PathPaymentStrictSendResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PathPaymentStrictSendResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PathPaymentStrictSendResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.PathPaymentStrictSendResultCodeEncodeResponse> PathPaymentStrictSendResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.PathPaymentStrictSendResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PathPaymentStrictSendResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PathPaymentStrictSendResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.PathPaymentStrictSendResultCodeDecodeRequest> PathPaymentStrictSendResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.PathPaymentStrictSendResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PathPaymentStrictSendResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PathPaymentStrictSendResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.PathPaymentStrictSendResultCodeDecodeResponse> PathPaymentStrictSendResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.PathPaymentStrictSendResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PathPaymentStrictSendResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PathPaymentStrictSendResultEncodeRequest
            public static readonly Marshaller<Stellar.PathPaymentStrictSendResultEncodeRequest> PathPaymentStrictSendResultEncodeRequestMarshaller = Marshallers.Create<Stellar.PathPaymentStrictSendResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PathPaymentStrictSendResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PathPaymentStrictSendResultEncodeResponse
            public static readonly Marshaller<Stellar.PathPaymentStrictSendResultEncodeResponse> PathPaymentStrictSendResultEncodeResponseMarshaller = Marshallers.Create<Stellar.PathPaymentStrictSendResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PathPaymentStrictSendResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PathPaymentStrictSendResultDecodeRequest
            public static readonly Marshaller<Stellar.PathPaymentStrictSendResultDecodeRequest> PathPaymentStrictSendResultDecodeRequestMarshaller = Marshallers.Create<Stellar.PathPaymentStrictSendResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PathPaymentStrictSendResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PathPaymentStrictSendResultDecodeResponse
            public static readonly Marshaller<Stellar.PathPaymentStrictSendResultDecodeResponse> PathPaymentStrictSendResultDecodeResponseMarshaller = Marshallers.Create<Stellar.PathPaymentStrictSendResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PathPaymentStrictSendResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageSellOfferResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.ManageSellOfferResultCodeEncodeRequest> ManageSellOfferResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.ManageSellOfferResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageSellOfferResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageSellOfferResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.ManageSellOfferResultCodeEncodeResponse> ManageSellOfferResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.ManageSellOfferResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageSellOfferResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageSellOfferResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.ManageSellOfferResultCodeDecodeRequest> ManageSellOfferResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.ManageSellOfferResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageSellOfferResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageSellOfferResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.ManageSellOfferResultCodeDecodeResponse> ManageSellOfferResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.ManageSellOfferResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageSellOfferResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageOfferEffectEncodeRequest
            public static readonly Marshaller<Stellar.ManageOfferEffectEncodeRequest> ManageOfferEffectEncodeRequestMarshaller = Marshallers.Create<Stellar.ManageOfferEffectEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageOfferEffectEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageOfferEffectEncodeResponse
            public static readonly Marshaller<Stellar.ManageOfferEffectEncodeResponse> ManageOfferEffectEncodeResponseMarshaller = Marshallers.Create<Stellar.ManageOfferEffectEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageOfferEffectEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageOfferEffectDecodeRequest
            public static readonly Marshaller<Stellar.ManageOfferEffectDecodeRequest> ManageOfferEffectDecodeRequestMarshaller = Marshallers.Create<Stellar.ManageOfferEffectDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageOfferEffectDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageOfferEffectDecodeResponse
            public static readonly Marshaller<Stellar.ManageOfferEffectDecodeResponse> ManageOfferEffectDecodeResponseMarshaller = Marshallers.Create<Stellar.ManageOfferEffectDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageOfferEffectDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageOfferSuccessResultEncodeRequest
            public static readonly Marshaller<Stellar.ManageOfferSuccessResultEncodeRequest> ManageOfferSuccessResultEncodeRequestMarshaller = Marshallers.Create<Stellar.ManageOfferSuccessResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageOfferSuccessResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageOfferSuccessResultEncodeResponse
            public static readonly Marshaller<Stellar.ManageOfferSuccessResultEncodeResponse> ManageOfferSuccessResultEncodeResponseMarshaller = Marshallers.Create<Stellar.ManageOfferSuccessResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageOfferSuccessResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageOfferSuccessResultDecodeRequest
            public static readonly Marshaller<Stellar.ManageOfferSuccessResultDecodeRequest> ManageOfferSuccessResultDecodeRequestMarshaller = Marshallers.Create<Stellar.ManageOfferSuccessResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageOfferSuccessResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageOfferSuccessResultDecodeResponse
            public static readonly Marshaller<Stellar.ManageOfferSuccessResultDecodeResponse> ManageOfferSuccessResultDecodeResponseMarshaller = Marshallers.Create<Stellar.ManageOfferSuccessResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageOfferSuccessResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageSellOfferResultEncodeRequest
            public static readonly Marshaller<Stellar.ManageSellOfferResultEncodeRequest> ManageSellOfferResultEncodeRequestMarshaller = Marshallers.Create<Stellar.ManageSellOfferResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageSellOfferResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageSellOfferResultEncodeResponse
            public static readonly Marshaller<Stellar.ManageSellOfferResultEncodeResponse> ManageSellOfferResultEncodeResponseMarshaller = Marshallers.Create<Stellar.ManageSellOfferResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageSellOfferResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageSellOfferResultDecodeRequest
            public static readonly Marshaller<Stellar.ManageSellOfferResultDecodeRequest> ManageSellOfferResultDecodeRequestMarshaller = Marshallers.Create<Stellar.ManageSellOfferResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageSellOfferResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageSellOfferResultDecodeResponse
            public static readonly Marshaller<Stellar.ManageSellOfferResultDecodeResponse> ManageSellOfferResultDecodeResponseMarshaller = Marshallers.Create<Stellar.ManageSellOfferResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageSellOfferResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageBuyOfferResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.ManageBuyOfferResultCodeEncodeRequest> ManageBuyOfferResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.ManageBuyOfferResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageBuyOfferResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageBuyOfferResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.ManageBuyOfferResultCodeEncodeResponse> ManageBuyOfferResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.ManageBuyOfferResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageBuyOfferResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageBuyOfferResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.ManageBuyOfferResultCodeDecodeRequest> ManageBuyOfferResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.ManageBuyOfferResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageBuyOfferResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageBuyOfferResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.ManageBuyOfferResultCodeDecodeResponse> ManageBuyOfferResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.ManageBuyOfferResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageBuyOfferResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageBuyOfferResultEncodeRequest
            public static readonly Marshaller<Stellar.ManageBuyOfferResultEncodeRequest> ManageBuyOfferResultEncodeRequestMarshaller = Marshallers.Create<Stellar.ManageBuyOfferResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageBuyOfferResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageBuyOfferResultEncodeResponse
            public static readonly Marshaller<Stellar.ManageBuyOfferResultEncodeResponse> ManageBuyOfferResultEncodeResponseMarshaller = Marshallers.Create<Stellar.ManageBuyOfferResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageBuyOfferResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageBuyOfferResultDecodeRequest
            public static readonly Marshaller<Stellar.ManageBuyOfferResultDecodeRequest> ManageBuyOfferResultDecodeRequestMarshaller = Marshallers.Create<Stellar.ManageBuyOfferResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageBuyOfferResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageBuyOfferResultDecodeResponse
            public static readonly Marshaller<Stellar.ManageBuyOfferResultDecodeResponse> ManageBuyOfferResultDecodeResponseMarshaller = Marshallers.Create<Stellar.ManageBuyOfferResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageBuyOfferResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SetOptionsResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.SetOptionsResultCodeEncodeRequest> SetOptionsResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.SetOptionsResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SetOptionsResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SetOptionsResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.SetOptionsResultCodeEncodeResponse> SetOptionsResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.SetOptionsResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SetOptionsResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SetOptionsResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.SetOptionsResultCodeDecodeRequest> SetOptionsResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.SetOptionsResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SetOptionsResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SetOptionsResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.SetOptionsResultCodeDecodeResponse> SetOptionsResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.SetOptionsResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SetOptionsResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SetOptionsResultEncodeRequest
            public static readonly Marshaller<Stellar.SetOptionsResultEncodeRequest> SetOptionsResultEncodeRequestMarshaller = Marshallers.Create<Stellar.SetOptionsResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SetOptionsResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SetOptionsResultEncodeResponse
            public static readonly Marshaller<Stellar.SetOptionsResultEncodeResponse> SetOptionsResultEncodeResponseMarshaller = Marshallers.Create<Stellar.SetOptionsResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SetOptionsResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SetOptionsResultDecodeRequest
            public static readonly Marshaller<Stellar.SetOptionsResultDecodeRequest> SetOptionsResultDecodeRequestMarshaller = Marshallers.Create<Stellar.SetOptionsResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SetOptionsResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SetOptionsResultDecodeResponse
            public static readonly Marshaller<Stellar.SetOptionsResultDecodeResponse> SetOptionsResultDecodeResponseMarshaller = Marshallers.Create<Stellar.SetOptionsResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SetOptionsResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ChangeTrustResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.ChangeTrustResultCodeEncodeRequest> ChangeTrustResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.ChangeTrustResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ChangeTrustResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ChangeTrustResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.ChangeTrustResultCodeEncodeResponse> ChangeTrustResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.ChangeTrustResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ChangeTrustResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ChangeTrustResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.ChangeTrustResultCodeDecodeRequest> ChangeTrustResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.ChangeTrustResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ChangeTrustResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ChangeTrustResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.ChangeTrustResultCodeDecodeResponse> ChangeTrustResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.ChangeTrustResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ChangeTrustResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ChangeTrustResultEncodeRequest
            public static readonly Marshaller<Stellar.ChangeTrustResultEncodeRequest> ChangeTrustResultEncodeRequestMarshaller = Marshallers.Create<Stellar.ChangeTrustResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ChangeTrustResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ChangeTrustResultEncodeResponse
            public static readonly Marshaller<Stellar.ChangeTrustResultEncodeResponse> ChangeTrustResultEncodeResponseMarshaller = Marshallers.Create<Stellar.ChangeTrustResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ChangeTrustResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ChangeTrustResultDecodeRequest
            public static readonly Marshaller<Stellar.ChangeTrustResultDecodeRequest> ChangeTrustResultDecodeRequestMarshaller = Marshallers.Create<Stellar.ChangeTrustResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ChangeTrustResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ChangeTrustResultDecodeResponse
            public static readonly Marshaller<Stellar.ChangeTrustResultDecodeResponse> ChangeTrustResultDecodeResponseMarshaller = Marshallers.Create<Stellar.ChangeTrustResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ChangeTrustResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AllowTrustResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.AllowTrustResultCodeEncodeRequest> AllowTrustResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.AllowTrustResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AllowTrustResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AllowTrustResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.AllowTrustResultCodeEncodeResponse> AllowTrustResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.AllowTrustResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AllowTrustResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AllowTrustResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.AllowTrustResultCodeDecodeRequest> AllowTrustResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.AllowTrustResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AllowTrustResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AllowTrustResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.AllowTrustResultCodeDecodeResponse> AllowTrustResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.AllowTrustResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AllowTrustResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AllowTrustResultEncodeRequest
            public static readonly Marshaller<Stellar.AllowTrustResultEncodeRequest> AllowTrustResultEncodeRequestMarshaller = Marshallers.Create<Stellar.AllowTrustResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AllowTrustResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AllowTrustResultEncodeResponse
            public static readonly Marshaller<Stellar.AllowTrustResultEncodeResponse> AllowTrustResultEncodeResponseMarshaller = Marshallers.Create<Stellar.AllowTrustResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AllowTrustResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AllowTrustResultDecodeRequest
            public static readonly Marshaller<Stellar.AllowTrustResultDecodeRequest> AllowTrustResultDecodeRequestMarshaller = Marshallers.Create<Stellar.AllowTrustResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AllowTrustResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AllowTrustResultDecodeResponse
            public static readonly Marshaller<Stellar.AllowTrustResultDecodeResponse> AllowTrustResultDecodeResponseMarshaller = Marshallers.Create<Stellar.AllowTrustResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AllowTrustResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountMergeResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.AccountMergeResultCodeEncodeRequest> AccountMergeResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.AccountMergeResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountMergeResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountMergeResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.AccountMergeResultCodeEncodeResponse> AccountMergeResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.AccountMergeResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountMergeResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountMergeResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.AccountMergeResultCodeDecodeRequest> AccountMergeResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.AccountMergeResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountMergeResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountMergeResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.AccountMergeResultCodeDecodeResponse> AccountMergeResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.AccountMergeResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountMergeResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountMergeResultEncodeRequest
            public static readonly Marshaller<Stellar.AccountMergeResultEncodeRequest> AccountMergeResultEncodeRequestMarshaller = Marshallers.Create<Stellar.AccountMergeResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountMergeResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountMergeResultEncodeResponse
            public static readonly Marshaller<Stellar.AccountMergeResultEncodeResponse> AccountMergeResultEncodeResponseMarshaller = Marshallers.Create<Stellar.AccountMergeResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountMergeResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountMergeResultDecodeRequest
            public static readonly Marshaller<Stellar.AccountMergeResultDecodeRequest> AccountMergeResultDecodeRequestMarshaller = Marshallers.Create<Stellar.AccountMergeResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountMergeResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountMergeResultDecodeResponse
            public static readonly Marshaller<Stellar.AccountMergeResultDecodeResponse> AccountMergeResultDecodeResponseMarshaller = Marshallers.Create<Stellar.AccountMergeResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountMergeResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InflationResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.InflationResultCodeEncodeRequest> InflationResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.InflationResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InflationResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InflationResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.InflationResultCodeEncodeResponse> InflationResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.InflationResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InflationResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InflationResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.InflationResultCodeDecodeRequest> InflationResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.InflationResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InflationResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InflationResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.InflationResultCodeDecodeResponse> InflationResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.InflationResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InflationResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InflationPayoutEncodeRequest
            public static readonly Marshaller<Stellar.InflationPayoutEncodeRequest> InflationPayoutEncodeRequestMarshaller = Marshallers.Create<Stellar.InflationPayoutEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InflationPayoutEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InflationPayoutEncodeResponse
            public static readonly Marshaller<Stellar.InflationPayoutEncodeResponse> InflationPayoutEncodeResponseMarshaller = Marshallers.Create<Stellar.InflationPayoutEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InflationPayoutEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InflationPayoutDecodeRequest
            public static readonly Marshaller<Stellar.InflationPayoutDecodeRequest> InflationPayoutDecodeRequestMarshaller = Marshallers.Create<Stellar.InflationPayoutDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InflationPayoutDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InflationPayoutDecodeResponse
            public static readonly Marshaller<Stellar.InflationPayoutDecodeResponse> InflationPayoutDecodeResponseMarshaller = Marshallers.Create<Stellar.InflationPayoutDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InflationPayoutDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InflationResultEncodeRequest
            public static readonly Marshaller<Stellar.InflationResultEncodeRequest> InflationResultEncodeRequestMarshaller = Marshallers.Create<Stellar.InflationResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InflationResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InflationResultEncodeResponse
            public static readonly Marshaller<Stellar.InflationResultEncodeResponse> InflationResultEncodeResponseMarshaller = Marshallers.Create<Stellar.InflationResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InflationResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InflationResultDecodeRequest
            public static readonly Marshaller<Stellar.InflationResultDecodeRequest> InflationResultDecodeRequestMarshaller = Marshallers.Create<Stellar.InflationResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InflationResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InflationResultDecodeResponse
            public static readonly Marshaller<Stellar.InflationResultDecodeResponse> InflationResultDecodeResponseMarshaller = Marshallers.Create<Stellar.InflationResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InflationResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageDataResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.ManageDataResultCodeEncodeRequest> ManageDataResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.ManageDataResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageDataResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageDataResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.ManageDataResultCodeEncodeResponse> ManageDataResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.ManageDataResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageDataResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageDataResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.ManageDataResultCodeDecodeRequest> ManageDataResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.ManageDataResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageDataResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageDataResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.ManageDataResultCodeDecodeResponse> ManageDataResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.ManageDataResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageDataResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageDataResultEncodeRequest
            public static readonly Marshaller<Stellar.ManageDataResultEncodeRequest> ManageDataResultEncodeRequestMarshaller = Marshallers.Create<Stellar.ManageDataResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageDataResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageDataResultEncodeResponse
            public static readonly Marshaller<Stellar.ManageDataResultEncodeResponse> ManageDataResultEncodeResponseMarshaller = Marshallers.Create<Stellar.ManageDataResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageDataResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageDataResultDecodeRequest
            public static readonly Marshaller<Stellar.ManageDataResultDecodeRequest> ManageDataResultDecodeRequestMarshaller = Marshallers.Create<Stellar.ManageDataResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageDataResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ManageDataResultDecodeResponse
            public static readonly Marshaller<Stellar.ManageDataResultDecodeResponse> ManageDataResultDecodeResponseMarshaller = Marshallers.Create<Stellar.ManageDataResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ManageDataResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BumpSequenceResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.BumpSequenceResultCodeEncodeRequest> BumpSequenceResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.BumpSequenceResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BumpSequenceResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BumpSequenceResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.BumpSequenceResultCodeEncodeResponse> BumpSequenceResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.BumpSequenceResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BumpSequenceResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BumpSequenceResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.BumpSequenceResultCodeDecodeRequest> BumpSequenceResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.BumpSequenceResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BumpSequenceResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BumpSequenceResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.BumpSequenceResultCodeDecodeResponse> BumpSequenceResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.BumpSequenceResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BumpSequenceResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BumpSequenceResultEncodeRequest
            public static readonly Marshaller<Stellar.BumpSequenceResultEncodeRequest> BumpSequenceResultEncodeRequestMarshaller = Marshallers.Create<Stellar.BumpSequenceResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BumpSequenceResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BumpSequenceResultEncodeResponse
            public static readonly Marshaller<Stellar.BumpSequenceResultEncodeResponse> BumpSequenceResultEncodeResponseMarshaller = Marshallers.Create<Stellar.BumpSequenceResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BumpSequenceResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BumpSequenceResultDecodeRequest
            public static readonly Marshaller<Stellar.BumpSequenceResultDecodeRequest> BumpSequenceResultDecodeRequestMarshaller = Marshallers.Create<Stellar.BumpSequenceResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BumpSequenceResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BumpSequenceResultDecodeResponse
            public static readonly Marshaller<Stellar.BumpSequenceResultDecodeResponse> BumpSequenceResultDecodeResponseMarshaller = Marshallers.Create<Stellar.BumpSequenceResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BumpSequenceResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateClaimableBalanceResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.CreateClaimableBalanceResultCodeEncodeRequest> CreateClaimableBalanceResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.CreateClaimableBalanceResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateClaimableBalanceResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateClaimableBalanceResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.CreateClaimableBalanceResultCodeEncodeResponse> CreateClaimableBalanceResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.CreateClaimableBalanceResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateClaimableBalanceResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateClaimableBalanceResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.CreateClaimableBalanceResultCodeDecodeRequest> CreateClaimableBalanceResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.CreateClaimableBalanceResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateClaimableBalanceResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateClaimableBalanceResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.CreateClaimableBalanceResultCodeDecodeResponse> CreateClaimableBalanceResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.CreateClaimableBalanceResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateClaimableBalanceResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateClaimableBalanceResultEncodeRequest
            public static readonly Marshaller<Stellar.CreateClaimableBalanceResultEncodeRequest> CreateClaimableBalanceResultEncodeRequestMarshaller = Marshallers.Create<Stellar.CreateClaimableBalanceResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateClaimableBalanceResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateClaimableBalanceResultEncodeResponse
            public static readonly Marshaller<Stellar.CreateClaimableBalanceResultEncodeResponse> CreateClaimableBalanceResultEncodeResponseMarshaller = Marshallers.Create<Stellar.CreateClaimableBalanceResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateClaimableBalanceResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateClaimableBalanceResultDecodeRequest
            public static readonly Marshaller<Stellar.CreateClaimableBalanceResultDecodeRequest> CreateClaimableBalanceResultDecodeRequestMarshaller = Marshallers.Create<Stellar.CreateClaimableBalanceResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateClaimableBalanceResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CreateClaimableBalanceResultDecodeResponse
            public static readonly Marshaller<Stellar.CreateClaimableBalanceResultDecodeResponse> CreateClaimableBalanceResultDecodeResponseMarshaller = Marshallers.Create<Stellar.CreateClaimableBalanceResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CreateClaimableBalanceResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimClaimableBalanceResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.ClaimClaimableBalanceResultCodeEncodeRequest> ClaimClaimableBalanceResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimClaimableBalanceResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimClaimableBalanceResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimClaimableBalanceResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.ClaimClaimableBalanceResultCodeEncodeResponse> ClaimClaimableBalanceResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimClaimableBalanceResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimClaimableBalanceResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimClaimableBalanceResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.ClaimClaimableBalanceResultCodeDecodeRequest> ClaimClaimableBalanceResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimClaimableBalanceResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimClaimableBalanceResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimClaimableBalanceResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.ClaimClaimableBalanceResultCodeDecodeResponse> ClaimClaimableBalanceResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimClaimableBalanceResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimClaimableBalanceResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimClaimableBalanceResultEncodeRequest
            public static readonly Marshaller<Stellar.ClaimClaimableBalanceResultEncodeRequest> ClaimClaimableBalanceResultEncodeRequestMarshaller = Marshallers.Create<Stellar.ClaimClaimableBalanceResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimClaimableBalanceResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimClaimableBalanceResultEncodeResponse
            public static readonly Marshaller<Stellar.ClaimClaimableBalanceResultEncodeResponse> ClaimClaimableBalanceResultEncodeResponseMarshaller = Marshallers.Create<Stellar.ClaimClaimableBalanceResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimClaimableBalanceResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimClaimableBalanceResultDecodeRequest
            public static readonly Marshaller<Stellar.ClaimClaimableBalanceResultDecodeRequest> ClaimClaimableBalanceResultDecodeRequestMarshaller = Marshallers.Create<Stellar.ClaimClaimableBalanceResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimClaimableBalanceResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClaimClaimableBalanceResultDecodeResponse
            public static readonly Marshaller<Stellar.ClaimClaimableBalanceResultDecodeResponse> ClaimClaimableBalanceResultDecodeResponseMarshaller = Marshallers.Create<Stellar.ClaimClaimableBalanceResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClaimClaimableBalanceResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BeginSponsoringFutureReservesResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.BeginSponsoringFutureReservesResultCodeEncodeRequest> BeginSponsoringFutureReservesResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.BeginSponsoringFutureReservesResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BeginSponsoringFutureReservesResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.BeginSponsoringFutureReservesResultCodeEncodeResponse> BeginSponsoringFutureReservesResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.BeginSponsoringFutureReservesResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BeginSponsoringFutureReservesResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.BeginSponsoringFutureReservesResultCodeDecodeRequest> BeginSponsoringFutureReservesResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.BeginSponsoringFutureReservesResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BeginSponsoringFutureReservesResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.BeginSponsoringFutureReservesResultCodeDecodeResponse> BeginSponsoringFutureReservesResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.BeginSponsoringFutureReservesResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BeginSponsoringFutureReservesResultEncodeRequest
            public static readonly Marshaller<Stellar.BeginSponsoringFutureReservesResultEncodeRequest> BeginSponsoringFutureReservesResultEncodeRequestMarshaller = Marshallers.Create<Stellar.BeginSponsoringFutureReservesResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BeginSponsoringFutureReservesResultEncodeResponse
            public static readonly Marshaller<Stellar.BeginSponsoringFutureReservesResultEncodeResponse> BeginSponsoringFutureReservesResultEncodeResponseMarshaller = Marshallers.Create<Stellar.BeginSponsoringFutureReservesResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BeginSponsoringFutureReservesResultDecodeRequest
            public static readonly Marshaller<Stellar.BeginSponsoringFutureReservesResultDecodeRequest> BeginSponsoringFutureReservesResultDecodeRequestMarshaller = Marshallers.Create<Stellar.BeginSponsoringFutureReservesResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BeginSponsoringFutureReservesResultDecodeResponse
            public static readonly Marshaller<Stellar.BeginSponsoringFutureReservesResultDecodeResponse> BeginSponsoringFutureReservesResultDecodeResponseMarshaller = Marshallers.Create<Stellar.BeginSponsoringFutureReservesResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BeginSponsoringFutureReservesResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for EndSponsoringFutureReservesResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.EndSponsoringFutureReservesResultCodeEncodeRequest> EndSponsoringFutureReservesResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.EndSponsoringFutureReservesResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.EndSponsoringFutureReservesResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for EndSponsoringFutureReservesResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.EndSponsoringFutureReservesResultCodeEncodeResponse> EndSponsoringFutureReservesResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.EndSponsoringFutureReservesResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.EndSponsoringFutureReservesResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for EndSponsoringFutureReservesResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.EndSponsoringFutureReservesResultCodeDecodeRequest> EndSponsoringFutureReservesResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.EndSponsoringFutureReservesResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.EndSponsoringFutureReservesResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for EndSponsoringFutureReservesResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.EndSponsoringFutureReservesResultCodeDecodeResponse> EndSponsoringFutureReservesResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.EndSponsoringFutureReservesResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.EndSponsoringFutureReservesResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for EndSponsoringFutureReservesResultEncodeRequest
            public static readonly Marshaller<Stellar.EndSponsoringFutureReservesResultEncodeRequest> EndSponsoringFutureReservesResultEncodeRequestMarshaller = Marshallers.Create<Stellar.EndSponsoringFutureReservesResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.EndSponsoringFutureReservesResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for EndSponsoringFutureReservesResultEncodeResponse
            public static readonly Marshaller<Stellar.EndSponsoringFutureReservesResultEncodeResponse> EndSponsoringFutureReservesResultEncodeResponseMarshaller = Marshallers.Create<Stellar.EndSponsoringFutureReservesResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.EndSponsoringFutureReservesResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for EndSponsoringFutureReservesResultDecodeRequest
            public static readonly Marshaller<Stellar.EndSponsoringFutureReservesResultDecodeRequest> EndSponsoringFutureReservesResultDecodeRequestMarshaller = Marshallers.Create<Stellar.EndSponsoringFutureReservesResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.EndSponsoringFutureReservesResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for EndSponsoringFutureReservesResultDecodeResponse
            public static readonly Marshaller<Stellar.EndSponsoringFutureReservesResultDecodeResponse> EndSponsoringFutureReservesResultDecodeResponseMarshaller = Marshallers.Create<Stellar.EndSponsoringFutureReservesResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.EndSponsoringFutureReservesResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RevokeSponsorshipResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.RevokeSponsorshipResultCodeEncodeRequest> RevokeSponsorshipResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RevokeSponsorshipResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RevokeSponsorshipResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.RevokeSponsorshipResultCodeEncodeResponse> RevokeSponsorshipResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RevokeSponsorshipResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RevokeSponsorshipResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.RevokeSponsorshipResultCodeDecodeRequest> RevokeSponsorshipResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RevokeSponsorshipResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RevokeSponsorshipResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.RevokeSponsorshipResultCodeDecodeResponse> RevokeSponsorshipResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RevokeSponsorshipResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RevokeSponsorshipResultEncodeRequest
            public static readonly Marshaller<Stellar.RevokeSponsorshipResultEncodeRequest> RevokeSponsorshipResultEncodeRequestMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RevokeSponsorshipResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RevokeSponsorshipResultEncodeResponse
            public static readonly Marshaller<Stellar.RevokeSponsorshipResultEncodeResponse> RevokeSponsorshipResultEncodeResponseMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RevokeSponsorshipResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RevokeSponsorshipResultDecodeRequest
            public static readonly Marshaller<Stellar.RevokeSponsorshipResultDecodeRequest> RevokeSponsorshipResultDecodeRequestMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RevokeSponsorshipResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RevokeSponsorshipResultDecodeResponse
            public static readonly Marshaller<Stellar.RevokeSponsorshipResultDecodeResponse> RevokeSponsorshipResultDecodeResponseMarshaller = Marshallers.Create<Stellar.RevokeSponsorshipResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RevokeSponsorshipResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClawbackResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.ClawbackResultCodeEncodeRequest> ClawbackResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.ClawbackResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClawbackResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClawbackResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.ClawbackResultCodeEncodeResponse> ClawbackResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.ClawbackResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClawbackResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClawbackResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.ClawbackResultCodeDecodeRequest> ClawbackResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.ClawbackResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClawbackResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClawbackResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.ClawbackResultCodeDecodeResponse> ClawbackResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.ClawbackResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClawbackResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClawbackResultEncodeRequest
            public static readonly Marshaller<Stellar.ClawbackResultEncodeRequest> ClawbackResultEncodeRequestMarshaller = Marshallers.Create<Stellar.ClawbackResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClawbackResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClawbackResultEncodeResponse
            public static readonly Marshaller<Stellar.ClawbackResultEncodeResponse> ClawbackResultEncodeResponseMarshaller = Marshallers.Create<Stellar.ClawbackResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClawbackResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClawbackResultDecodeRequest
            public static readonly Marshaller<Stellar.ClawbackResultDecodeRequest> ClawbackResultDecodeRequestMarshaller = Marshallers.Create<Stellar.ClawbackResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClawbackResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClawbackResultDecodeResponse
            public static readonly Marshaller<Stellar.ClawbackResultDecodeResponse> ClawbackResultDecodeResponseMarshaller = Marshallers.Create<Stellar.ClawbackResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClawbackResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClawbackClaimableBalanceResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.ClawbackClaimableBalanceResultCodeEncodeRequest> ClawbackClaimableBalanceResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.ClawbackClaimableBalanceResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClawbackClaimableBalanceResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClawbackClaimableBalanceResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.ClawbackClaimableBalanceResultCodeEncodeResponse> ClawbackClaimableBalanceResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.ClawbackClaimableBalanceResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClawbackClaimableBalanceResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClawbackClaimableBalanceResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.ClawbackClaimableBalanceResultCodeDecodeRequest> ClawbackClaimableBalanceResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.ClawbackClaimableBalanceResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClawbackClaimableBalanceResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClawbackClaimableBalanceResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.ClawbackClaimableBalanceResultCodeDecodeResponse> ClawbackClaimableBalanceResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.ClawbackClaimableBalanceResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClawbackClaimableBalanceResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClawbackClaimableBalanceResultEncodeRequest
            public static readonly Marshaller<Stellar.ClawbackClaimableBalanceResultEncodeRequest> ClawbackClaimableBalanceResultEncodeRequestMarshaller = Marshallers.Create<Stellar.ClawbackClaimableBalanceResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClawbackClaimableBalanceResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClawbackClaimableBalanceResultEncodeResponse
            public static readonly Marshaller<Stellar.ClawbackClaimableBalanceResultEncodeResponse> ClawbackClaimableBalanceResultEncodeResponseMarshaller = Marshallers.Create<Stellar.ClawbackClaimableBalanceResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClawbackClaimableBalanceResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClawbackClaimableBalanceResultDecodeRequest
            public static readonly Marshaller<Stellar.ClawbackClaimableBalanceResultDecodeRequest> ClawbackClaimableBalanceResultDecodeRequestMarshaller = Marshallers.Create<Stellar.ClawbackClaimableBalanceResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClawbackClaimableBalanceResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ClawbackClaimableBalanceResultDecodeResponse
            public static readonly Marshaller<Stellar.ClawbackClaimableBalanceResultDecodeResponse> ClawbackClaimableBalanceResultDecodeResponseMarshaller = Marshallers.Create<Stellar.ClawbackClaimableBalanceResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ClawbackClaimableBalanceResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SetTrustLineFlagsResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.SetTrustLineFlagsResultCodeEncodeRequest> SetTrustLineFlagsResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.SetTrustLineFlagsResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SetTrustLineFlagsResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SetTrustLineFlagsResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.SetTrustLineFlagsResultCodeEncodeResponse> SetTrustLineFlagsResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.SetTrustLineFlagsResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SetTrustLineFlagsResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SetTrustLineFlagsResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.SetTrustLineFlagsResultCodeDecodeRequest> SetTrustLineFlagsResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.SetTrustLineFlagsResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SetTrustLineFlagsResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SetTrustLineFlagsResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.SetTrustLineFlagsResultCodeDecodeResponse> SetTrustLineFlagsResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.SetTrustLineFlagsResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SetTrustLineFlagsResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SetTrustLineFlagsResultEncodeRequest
            public static readonly Marshaller<Stellar.SetTrustLineFlagsResultEncodeRequest> SetTrustLineFlagsResultEncodeRequestMarshaller = Marshallers.Create<Stellar.SetTrustLineFlagsResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SetTrustLineFlagsResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SetTrustLineFlagsResultEncodeResponse
            public static readonly Marshaller<Stellar.SetTrustLineFlagsResultEncodeResponse> SetTrustLineFlagsResultEncodeResponseMarshaller = Marshallers.Create<Stellar.SetTrustLineFlagsResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SetTrustLineFlagsResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SetTrustLineFlagsResultDecodeRequest
            public static readonly Marshaller<Stellar.SetTrustLineFlagsResultDecodeRequest> SetTrustLineFlagsResultDecodeRequestMarshaller = Marshallers.Create<Stellar.SetTrustLineFlagsResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SetTrustLineFlagsResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SetTrustLineFlagsResultDecodeResponse
            public static readonly Marshaller<Stellar.SetTrustLineFlagsResultDecodeResponse> SetTrustLineFlagsResultDecodeResponseMarshaller = Marshallers.Create<Stellar.SetTrustLineFlagsResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SetTrustLineFlagsResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolDepositResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.LiquidityPoolDepositResultCodeEncodeRequest> LiquidityPoolDepositResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolDepositResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolDepositResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolDepositResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.LiquidityPoolDepositResultCodeEncodeResponse> LiquidityPoolDepositResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolDepositResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolDepositResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolDepositResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.LiquidityPoolDepositResultCodeDecodeRequest> LiquidityPoolDepositResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolDepositResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolDepositResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolDepositResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.LiquidityPoolDepositResultCodeDecodeResponse> LiquidityPoolDepositResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolDepositResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolDepositResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolDepositResultEncodeRequest
            public static readonly Marshaller<Stellar.LiquidityPoolDepositResultEncodeRequest> LiquidityPoolDepositResultEncodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolDepositResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolDepositResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolDepositResultEncodeResponse
            public static readonly Marshaller<Stellar.LiquidityPoolDepositResultEncodeResponse> LiquidityPoolDepositResultEncodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolDepositResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolDepositResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolDepositResultDecodeRequest
            public static readonly Marshaller<Stellar.LiquidityPoolDepositResultDecodeRequest> LiquidityPoolDepositResultDecodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolDepositResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolDepositResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolDepositResultDecodeResponse
            public static readonly Marshaller<Stellar.LiquidityPoolDepositResultDecodeResponse> LiquidityPoolDepositResultDecodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolDepositResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolDepositResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolWithdrawResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.LiquidityPoolWithdrawResultCodeEncodeRequest> LiquidityPoolWithdrawResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolWithdrawResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolWithdrawResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolWithdrawResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.LiquidityPoolWithdrawResultCodeEncodeResponse> LiquidityPoolWithdrawResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolWithdrawResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolWithdrawResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolWithdrawResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.LiquidityPoolWithdrawResultCodeDecodeRequest> LiquidityPoolWithdrawResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolWithdrawResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolWithdrawResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolWithdrawResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.LiquidityPoolWithdrawResultCodeDecodeResponse> LiquidityPoolWithdrawResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolWithdrawResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolWithdrawResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolWithdrawResultEncodeRequest
            public static readonly Marshaller<Stellar.LiquidityPoolWithdrawResultEncodeRequest> LiquidityPoolWithdrawResultEncodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolWithdrawResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolWithdrawResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolWithdrawResultEncodeResponse
            public static readonly Marshaller<Stellar.LiquidityPoolWithdrawResultEncodeResponse> LiquidityPoolWithdrawResultEncodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolWithdrawResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolWithdrawResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolWithdrawResultDecodeRequest
            public static readonly Marshaller<Stellar.LiquidityPoolWithdrawResultDecodeRequest> LiquidityPoolWithdrawResultDecodeRequestMarshaller = Marshallers.Create<Stellar.LiquidityPoolWithdrawResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolWithdrawResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for LiquidityPoolWithdrawResultDecodeResponse
            public static readonly Marshaller<Stellar.LiquidityPoolWithdrawResultDecodeResponse> LiquidityPoolWithdrawResultDecodeResponseMarshaller = Marshallers.Create<Stellar.LiquidityPoolWithdrawResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.LiquidityPoolWithdrawResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InvokeHostFunctionResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.InvokeHostFunctionResultCodeEncodeRequest> InvokeHostFunctionResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InvokeHostFunctionResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InvokeHostFunctionResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.InvokeHostFunctionResultCodeEncodeResponse> InvokeHostFunctionResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InvokeHostFunctionResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InvokeHostFunctionResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.InvokeHostFunctionResultCodeDecodeRequest> InvokeHostFunctionResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InvokeHostFunctionResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InvokeHostFunctionResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.InvokeHostFunctionResultCodeDecodeResponse> InvokeHostFunctionResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InvokeHostFunctionResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InvokeHostFunctionResultEncodeRequest
            public static readonly Marshaller<Stellar.InvokeHostFunctionResultEncodeRequest> InvokeHostFunctionResultEncodeRequestMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InvokeHostFunctionResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InvokeHostFunctionResultEncodeResponse
            public static readonly Marshaller<Stellar.InvokeHostFunctionResultEncodeResponse> InvokeHostFunctionResultEncodeResponseMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InvokeHostFunctionResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InvokeHostFunctionResultDecodeRequest
            public static readonly Marshaller<Stellar.InvokeHostFunctionResultDecodeRequest> InvokeHostFunctionResultDecodeRequestMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InvokeHostFunctionResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InvokeHostFunctionResultDecodeResponse
            public static readonly Marshaller<Stellar.InvokeHostFunctionResultDecodeResponse> InvokeHostFunctionResultDecodeResponseMarshaller = Marshallers.Create<Stellar.InvokeHostFunctionResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InvokeHostFunctionResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ExtendFootprintTTLResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.ExtendFootprintTTLResultCodeEncodeRequest> ExtendFootprintTTLResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.ExtendFootprintTTLResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ExtendFootprintTTLResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ExtendFootprintTTLResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.ExtendFootprintTTLResultCodeEncodeResponse> ExtendFootprintTTLResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.ExtendFootprintTTLResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ExtendFootprintTTLResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ExtendFootprintTTLResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.ExtendFootprintTTLResultCodeDecodeRequest> ExtendFootprintTTLResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.ExtendFootprintTTLResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ExtendFootprintTTLResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ExtendFootprintTTLResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.ExtendFootprintTTLResultCodeDecodeResponse> ExtendFootprintTTLResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.ExtendFootprintTTLResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ExtendFootprintTTLResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ExtendFootprintTTLResultEncodeRequest
            public static readonly Marshaller<Stellar.ExtendFootprintTTLResultEncodeRequest> ExtendFootprintTTLResultEncodeRequestMarshaller = Marshallers.Create<Stellar.ExtendFootprintTTLResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ExtendFootprintTTLResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ExtendFootprintTTLResultEncodeResponse
            public static readonly Marshaller<Stellar.ExtendFootprintTTLResultEncodeResponse> ExtendFootprintTTLResultEncodeResponseMarshaller = Marshallers.Create<Stellar.ExtendFootprintTTLResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ExtendFootprintTTLResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ExtendFootprintTTLResultDecodeRequest
            public static readonly Marshaller<Stellar.ExtendFootprintTTLResultDecodeRequest> ExtendFootprintTTLResultDecodeRequestMarshaller = Marshallers.Create<Stellar.ExtendFootprintTTLResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ExtendFootprintTTLResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ExtendFootprintTTLResultDecodeResponse
            public static readonly Marshaller<Stellar.ExtendFootprintTTLResultDecodeResponse> ExtendFootprintTTLResultDecodeResponseMarshaller = Marshallers.Create<Stellar.ExtendFootprintTTLResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ExtendFootprintTTLResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RestoreFootprintResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.RestoreFootprintResultCodeEncodeRequest> RestoreFootprintResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.RestoreFootprintResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RestoreFootprintResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RestoreFootprintResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.RestoreFootprintResultCodeEncodeResponse> RestoreFootprintResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.RestoreFootprintResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RestoreFootprintResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RestoreFootprintResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.RestoreFootprintResultCodeDecodeRequest> RestoreFootprintResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.RestoreFootprintResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RestoreFootprintResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RestoreFootprintResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.RestoreFootprintResultCodeDecodeResponse> RestoreFootprintResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.RestoreFootprintResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RestoreFootprintResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RestoreFootprintResultEncodeRequest
            public static readonly Marshaller<Stellar.RestoreFootprintResultEncodeRequest> RestoreFootprintResultEncodeRequestMarshaller = Marshallers.Create<Stellar.RestoreFootprintResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RestoreFootprintResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RestoreFootprintResultEncodeResponse
            public static readonly Marshaller<Stellar.RestoreFootprintResultEncodeResponse> RestoreFootprintResultEncodeResponseMarshaller = Marshallers.Create<Stellar.RestoreFootprintResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RestoreFootprintResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RestoreFootprintResultDecodeRequest
            public static readonly Marshaller<Stellar.RestoreFootprintResultDecodeRequest> RestoreFootprintResultDecodeRequestMarshaller = Marshallers.Create<Stellar.RestoreFootprintResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RestoreFootprintResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for RestoreFootprintResultDecodeResponse
            public static readonly Marshaller<Stellar.RestoreFootprintResultDecodeResponse> RestoreFootprintResultDecodeResponseMarshaller = Marshallers.Create<Stellar.RestoreFootprintResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.RestoreFootprintResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OperationResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.OperationResultCodeEncodeRequest> OperationResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.OperationResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OperationResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OperationResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.OperationResultCodeEncodeResponse> OperationResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.OperationResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OperationResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OperationResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.OperationResultCodeDecodeRequest> OperationResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.OperationResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OperationResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OperationResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.OperationResultCodeDecodeResponse> OperationResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.OperationResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OperationResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OperationResultEncodeRequest
            public static readonly Marshaller<Stellar.OperationResultEncodeRequest> OperationResultEncodeRequestMarshaller = Marshallers.Create<Stellar.OperationResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OperationResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OperationResultEncodeResponse
            public static readonly Marshaller<Stellar.OperationResultEncodeResponse> OperationResultEncodeResponseMarshaller = Marshallers.Create<Stellar.OperationResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OperationResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OperationResultDecodeRequest
            public static readonly Marshaller<Stellar.OperationResultDecodeRequest> OperationResultDecodeRequestMarshaller = Marshallers.Create<Stellar.OperationResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OperationResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for OperationResultDecodeResponse
            public static readonly Marshaller<Stellar.OperationResultDecodeResponse> OperationResultDecodeResponseMarshaller = Marshallers.Create<Stellar.OperationResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.OperationResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionResultCodeEncodeRequest
            public static readonly Marshaller<Stellar.TransactionResultCodeEncodeRequest> TransactionResultCodeEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionResultCodeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionResultCodeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionResultCodeEncodeResponse
            public static readonly Marshaller<Stellar.TransactionResultCodeEncodeResponse> TransactionResultCodeEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionResultCodeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionResultCodeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionResultCodeDecodeRequest
            public static readonly Marshaller<Stellar.TransactionResultCodeDecodeRequest> TransactionResultCodeDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionResultCodeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionResultCodeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionResultCodeDecodeResponse
            public static readonly Marshaller<Stellar.TransactionResultCodeDecodeResponse> TransactionResultCodeDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionResultCodeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionResultCodeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InnerTransactionResultEncodeRequest
            public static readonly Marshaller<Stellar.InnerTransactionResultEncodeRequest> InnerTransactionResultEncodeRequestMarshaller = Marshallers.Create<Stellar.InnerTransactionResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InnerTransactionResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InnerTransactionResultEncodeResponse
            public static readonly Marshaller<Stellar.InnerTransactionResultEncodeResponse> InnerTransactionResultEncodeResponseMarshaller = Marshallers.Create<Stellar.InnerTransactionResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InnerTransactionResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InnerTransactionResultDecodeRequest
            public static readonly Marshaller<Stellar.InnerTransactionResultDecodeRequest> InnerTransactionResultDecodeRequestMarshaller = Marshallers.Create<Stellar.InnerTransactionResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InnerTransactionResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InnerTransactionResultDecodeResponse
            public static readonly Marshaller<Stellar.InnerTransactionResultDecodeResponse> InnerTransactionResultDecodeResponseMarshaller = Marshallers.Create<Stellar.InnerTransactionResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InnerTransactionResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InnerTransactionResultPairEncodeRequest
            public static readonly Marshaller<Stellar.InnerTransactionResultPairEncodeRequest> InnerTransactionResultPairEncodeRequestMarshaller = Marshallers.Create<Stellar.InnerTransactionResultPairEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InnerTransactionResultPairEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InnerTransactionResultPairEncodeResponse
            public static readonly Marshaller<Stellar.InnerTransactionResultPairEncodeResponse> InnerTransactionResultPairEncodeResponseMarshaller = Marshallers.Create<Stellar.InnerTransactionResultPairEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InnerTransactionResultPairEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InnerTransactionResultPairDecodeRequest
            public static readonly Marshaller<Stellar.InnerTransactionResultPairDecodeRequest> InnerTransactionResultPairDecodeRequestMarshaller = Marshallers.Create<Stellar.InnerTransactionResultPairDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InnerTransactionResultPairDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for InnerTransactionResultPairDecodeResponse
            public static readonly Marshaller<Stellar.InnerTransactionResultPairDecodeResponse> InnerTransactionResultPairDecodeResponseMarshaller = Marshallers.Create<Stellar.InnerTransactionResultPairDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.InnerTransactionResultPairDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionResultEncodeRequest
            public static readonly Marshaller<Stellar.TransactionResultEncodeRequest> TransactionResultEncodeRequestMarshaller = Marshallers.Create<Stellar.TransactionResultEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionResultEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionResultEncodeResponse
            public static readonly Marshaller<Stellar.TransactionResultEncodeResponse> TransactionResultEncodeResponseMarshaller = Marshallers.Create<Stellar.TransactionResultEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionResultEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionResultDecodeRequest
            public static readonly Marshaller<Stellar.TransactionResultDecodeRequest> TransactionResultDecodeRequestMarshaller = Marshallers.Create<Stellar.TransactionResultDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionResultDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TransactionResultDecodeResponse
            public static readonly Marshaller<Stellar.TransactionResultDecodeResponse> TransactionResultDecodeResponseMarshaller = Marshallers.Create<Stellar.TransactionResultDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TransactionResultDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HashEncodeRequest
            public static readonly Marshaller<Stellar.HashEncodeRequest> HashEncodeRequestMarshaller = Marshallers.Create<Stellar.HashEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HashEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HashEncodeResponse
            public static readonly Marshaller<Stellar.HashEncodeResponse> HashEncodeResponseMarshaller = Marshallers.Create<Stellar.HashEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HashEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HashDecodeRequest
            public static readonly Marshaller<Stellar.HashDecodeRequest> HashDecodeRequestMarshaller = Marshallers.Create<Stellar.HashDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HashDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HashDecodeResponse
            public static readonly Marshaller<Stellar.HashDecodeResponse> HashDecodeResponseMarshaller = Marshallers.Create<Stellar.HashDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HashDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for uint256EncodeRequest
            public static readonly Marshaller<Stellar.uint256EncodeRequest> uint256EncodeRequestMarshaller = Marshallers.Create<Stellar.uint256EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.uint256EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for uint256EncodeResponse
            public static readonly Marshaller<Stellar.uint256EncodeResponse> uint256EncodeResponseMarshaller = Marshallers.Create<Stellar.uint256EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.uint256EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for uint256DecodeRequest
            public static readonly Marshaller<Stellar.uint256DecodeRequest> uint256DecodeRequestMarshaller = Marshallers.Create<Stellar.uint256DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.uint256DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for uint256DecodeResponse
            public static readonly Marshaller<Stellar.uint256DecodeResponse> uint256DecodeResponseMarshaller = Marshallers.Create<Stellar.uint256DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.uint256DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for uint32EncodeRequest
            public static readonly Marshaller<Stellar.uint32EncodeRequest> uint32EncodeRequestMarshaller = Marshallers.Create<Stellar.uint32EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.uint32EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for uint32EncodeResponse
            public static readonly Marshaller<Stellar.uint32EncodeResponse> uint32EncodeResponseMarshaller = Marshallers.Create<Stellar.uint32EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.uint32EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for uint32DecodeRequest
            public static readonly Marshaller<Stellar.uint32DecodeRequest> uint32DecodeRequestMarshaller = Marshallers.Create<Stellar.uint32DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.uint32DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for uint32DecodeResponse
            public static readonly Marshaller<Stellar.uint32DecodeResponse> uint32DecodeResponseMarshaller = Marshallers.Create<Stellar.uint32DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.uint32DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for int32EncodeRequest
            public static readonly Marshaller<Stellar.int32EncodeRequest> int32EncodeRequestMarshaller = Marshallers.Create<Stellar.int32EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.int32EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for int32EncodeResponse
            public static readonly Marshaller<Stellar.int32EncodeResponse> int32EncodeResponseMarshaller = Marshallers.Create<Stellar.int32EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.int32EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for int32DecodeRequest
            public static readonly Marshaller<Stellar.int32DecodeRequest> int32DecodeRequestMarshaller = Marshallers.Create<Stellar.int32DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.int32DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for int32DecodeResponse
            public static readonly Marshaller<Stellar.int32DecodeResponse> int32DecodeResponseMarshaller = Marshallers.Create<Stellar.int32DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.int32DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for uint64EncodeRequest
            public static readonly Marshaller<Stellar.uint64EncodeRequest> uint64EncodeRequestMarshaller = Marshallers.Create<Stellar.uint64EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.uint64EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for uint64EncodeResponse
            public static readonly Marshaller<Stellar.uint64EncodeResponse> uint64EncodeResponseMarshaller = Marshallers.Create<Stellar.uint64EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.uint64EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for uint64DecodeRequest
            public static readonly Marshaller<Stellar.uint64DecodeRequest> uint64DecodeRequestMarshaller = Marshallers.Create<Stellar.uint64DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.uint64DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for uint64DecodeResponse
            public static readonly Marshaller<Stellar.uint64DecodeResponse> uint64DecodeResponseMarshaller = Marshallers.Create<Stellar.uint64DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.uint64DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for int64EncodeRequest
            public static readonly Marshaller<Stellar.int64EncodeRequest> int64EncodeRequestMarshaller = Marshallers.Create<Stellar.int64EncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.int64EncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for int64EncodeResponse
            public static readonly Marshaller<Stellar.int64EncodeResponse> int64EncodeResponseMarshaller = Marshallers.Create<Stellar.int64EncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.int64EncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for int64DecodeRequest
            public static readonly Marshaller<Stellar.int64DecodeRequest> int64DecodeRequestMarshaller = Marshallers.Create<Stellar.int64DecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.int64DecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for int64DecodeResponse
            public static readonly Marshaller<Stellar.int64DecodeResponse> int64DecodeResponseMarshaller = Marshallers.Create<Stellar.int64DecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.int64DecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimePointEncodeRequest
            public static readonly Marshaller<Stellar.TimePointEncodeRequest> TimePointEncodeRequestMarshaller = Marshallers.Create<Stellar.TimePointEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimePointEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimePointEncodeResponse
            public static readonly Marshaller<Stellar.TimePointEncodeResponse> TimePointEncodeResponseMarshaller = Marshallers.Create<Stellar.TimePointEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimePointEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimePointDecodeRequest
            public static readonly Marshaller<Stellar.TimePointDecodeRequest> TimePointDecodeRequestMarshaller = Marshallers.Create<Stellar.TimePointDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimePointDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for TimePointDecodeResponse
            public static readonly Marshaller<Stellar.TimePointDecodeResponse> TimePointDecodeResponseMarshaller = Marshallers.Create<Stellar.TimePointDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.TimePointDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DurationEncodeRequest
            public static readonly Marshaller<Stellar.DurationEncodeRequest> DurationEncodeRequestMarshaller = Marshallers.Create<Stellar.DurationEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DurationEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DurationEncodeResponse
            public static readonly Marshaller<Stellar.DurationEncodeResponse> DurationEncodeResponseMarshaller = Marshallers.Create<Stellar.DurationEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DurationEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DurationDecodeRequest
            public static readonly Marshaller<Stellar.DurationDecodeRequest> DurationDecodeRequestMarshaller = Marshallers.Create<Stellar.DurationDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DurationDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for DurationDecodeResponse
            public static readonly Marshaller<Stellar.DurationDecodeResponse> DurationDecodeResponseMarshaller = Marshallers.Create<Stellar.DurationDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.DurationDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ExtensionPointEncodeRequest
            public static readonly Marshaller<Stellar.ExtensionPointEncodeRequest> ExtensionPointEncodeRequestMarshaller = Marshallers.Create<Stellar.ExtensionPointEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ExtensionPointEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ExtensionPointEncodeResponse
            public static readonly Marshaller<Stellar.ExtensionPointEncodeResponse> ExtensionPointEncodeResponseMarshaller = Marshallers.Create<Stellar.ExtensionPointEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ExtensionPointEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ExtensionPointDecodeRequest
            public static readonly Marshaller<Stellar.ExtensionPointDecodeRequest> ExtensionPointDecodeRequestMarshaller = Marshallers.Create<Stellar.ExtensionPointDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ExtensionPointDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ExtensionPointDecodeResponse
            public static readonly Marshaller<Stellar.ExtensionPointDecodeResponse> ExtensionPointDecodeResponseMarshaller = Marshallers.Create<Stellar.ExtensionPointDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ExtensionPointDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CryptoKeyTypeEncodeRequest
            public static readonly Marshaller<Stellar.CryptoKeyTypeEncodeRequest> CryptoKeyTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.CryptoKeyTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CryptoKeyTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CryptoKeyTypeEncodeResponse
            public static readonly Marshaller<Stellar.CryptoKeyTypeEncodeResponse> CryptoKeyTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.CryptoKeyTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CryptoKeyTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CryptoKeyTypeDecodeRequest
            public static readonly Marshaller<Stellar.CryptoKeyTypeDecodeRequest> CryptoKeyTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.CryptoKeyTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CryptoKeyTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for CryptoKeyTypeDecodeResponse
            public static readonly Marshaller<Stellar.CryptoKeyTypeDecodeResponse> CryptoKeyTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.CryptoKeyTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.CryptoKeyTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PublicKeyTypeEncodeRequest
            public static readonly Marshaller<Stellar.PublicKeyTypeEncodeRequest> PublicKeyTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.PublicKeyTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PublicKeyTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PublicKeyTypeEncodeResponse
            public static readonly Marshaller<Stellar.PublicKeyTypeEncodeResponse> PublicKeyTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.PublicKeyTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PublicKeyTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PublicKeyTypeDecodeRequest
            public static readonly Marshaller<Stellar.PublicKeyTypeDecodeRequest> PublicKeyTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.PublicKeyTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PublicKeyTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PublicKeyTypeDecodeResponse
            public static readonly Marshaller<Stellar.PublicKeyTypeDecodeResponse> PublicKeyTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.PublicKeyTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PublicKeyTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignerKeyTypeEncodeRequest
            public static readonly Marshaller<Stellar.SignerKeyTypeEncodeRequest> SignerKeyTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.SignerKeyTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignerKeyTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignerKeyTypeEncodeResponse
            public static readonly Marshaller<Stellar.SignerKeyTypeEncodeResponse> SignerKeyTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.SignerKeyTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignerKeyTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignerKeyTypeDecodeRequest
            public static readonly Marshaller<Stellar.SignerKeyTypeDecodeRequest> SignerKeyTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.SignerKeyTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignerKeyTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignerKeyTypeDecodeResponse
            public static readonly Marshaller<Stellar.SignerKeyTypeDecodeResponse> SignerKeyTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.SignerKeyTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignerKeyTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PublicKeyEncodeRequest
            public static readonly Marshaller<Stellar.PublicKeyEncodeRequest> PublicKeyEncodeRequestMarshaller = Marshallers.Create<Stellar.PublicKeyEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PublicKeyEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PublicKeyEncodeResponse
            public static readonly Marshaller<Stellar.PublicKeyEncodeResponse> PublicKeyEncodeResponseMarshaller = Marshallers.Create<Stellar.PublicKeyEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PublicKeyEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PublicKeyDecodeRequest
            public static readonly Marshaller<Stellar.PublicKeyDecodeRequest> PublicKeyDecodeRequestMarshaller = Marshallers.Create<Stellar.PublicKeyDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PublicKeyDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for PublicKeyDecodeResponse
            public static readonly Marshaller<Stellar.PublicKeyDecodeResponse> PublicKeyDecodeResponseMarshaller = Marshallers.Create<Stellar.PublicKeyDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.PublicKeyDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignerKeyEncodeRequest
            public static readonly Marshaller<Stellar.SignerKeyEncodeRequest> SignerKeyEncodeRequestMarshaller = Marshallers.Create<Stellar.SignerKeyEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignerKeyEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignerKeyEncodeResponse
            public static readonly Marshaller<Stellar.SignerKeyEncodeResponse> SignerKeyEncodeResponseMarshaller = Marshallers.Create<Stellar.SignerKeyEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignerKeyEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignerKeyDecodeRequest
            public static readonly Marshaller<Stellar.SignerKeyDecodeRequest> SignerKeyDecodeRequestMarshaller = Marshallers.Create<Stellar.SignerKeyDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignerKeyDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignerKeyDecodeResponse
            public static readonly Marshaller<Stellar.SignerKeyDecodeResponse> SignerKeyDecodeResponseMarshaller = Marshallers.Create<Stellar.SignerKeyDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignerKeyDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignatureEncodeRequest
            public static readonly Marshaller<Stellar.SignatureEncodeRequest> SignatureEncodeRequestMarshaller = Marshallers.Create<Stellar.SignatureEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignatureEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignatureEncodeResponse
            public static readonly Marshaller<Stellar.SignatureEncodeResponse> SignatureEncodeResponseMarshaller = Marshallers.Create<Stellar.SignatureEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignatureEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignatureDecodeRequest
            public static readonly Marshaller<Stellar.SignatureDecodeRequest> SignatureDecodeRequestMarshaller = Marshallers.Create<Stellar.SignatureDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignatureDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignatureDecodeResponse
            public static readonly Marshaller<Stellar.SignatureDecodeResponse> SignatureDecodeResponseMarshaller = Marshallers.Create<Stellar.SignatureDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignatureDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignatureHintEncodeRequest
            public static readonly Marshaller<Stellar.SignatureHintEncodeRequest> SignatureHintEncodeRequestMarshaller = Marshallers.Create<Stellar.SignatureHintEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignatureHintEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignatureHintEncodeResponse
            public static readonly Marshaller<Stellar.SignatureHintEncodeResponse> SignatureHintEncodeResponseMarshaller = Marshallers.Create<Stellar.SignatureHintEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignatureHintEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignatureHintDecodeRequest
            public static readonly Marshaller<Stellar.SignatureHintDecodeRequest> SignatureHintDecodeRequestMarshaller = Marshallers.Create<Stellar.SignatureHintDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignatureHintDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SignatureHintDecodeResponse
            public static readonly Marshaller<Stellar.SignatureHintDecodeResponse> SignatureHintDecodeResponseMarshaller = Marshallers.Create<Stellar.SignatureHintDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SignatureHintDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for NodeIDEncodeRequest
            public static readonly Marshaller<Stellar.NodeIDEncodeRequest> NodeIDEncodeRequestMarshaller = Marshallers.Create<Stellar.NodeIDEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.NodeIDEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for NodeIDEncodeResponse
            public static readonly Marshaller<Stellar.NodeIDEncodeResponse> NodeIDEncodeResponseMarshaller = Marshallers.Create<Stellar.NodeIDEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.NodeIDEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for NodeIDDecodeRequest
            public static readonly Marshaller<Stellar.NodeIDDecodeRequest> NodeIDDecodeRequestMarshaller = Marshallers.Create<Stellar.NodeIDDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.NodeIDDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for NodeIDDecodeResponse
            public static readonly Marshaller<Stellar.NodeIDDecodeResponse> NodeIDDecodeResponseMarshaller = Marshallers.Create<Stellar.NodeIDDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.NodeIDDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountIDEncodeRequest
            public static readonly Marshaller<Stellar.AccountIDEncodeRequest> AccountIDEncodeRequestMarshaller = Marshallers.Create<Stellar.AccountIDEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountIDEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountIDEncodeResponse
            public static readonly Marshaller<Stellar.AccountIDEncodeResponse> AccountIDEncodeResponseMarshaller = Marshallers.Create<Stellar.AccountIDEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountIDEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountIDDecodeRequest
            public static readonly Marshaller<Stellar.AccountIDDecodeRequest> AccountIDDecodeRequestMarshaller = Marshallers.Create<Stellar.AccountIDDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountIDDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for AccountIDDecodeResponse
            public static readonly Marshaller<Stellar.AccountIDDecodeResponse> AccountIDDecodeResponseMarshaller = Marshallers.Create<Stellar.AccountIDDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.AccountIDDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for Curve25519SecretEncodeRequest
            public static readonly Marshaller<Stellar.Curve25519SecretEncodeRequest> Curve25519SecretEncodeRequestMarshaller = Marshallers.Create<Stellar.Curve25519SecretEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.Curve25519SecretEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for Curve25519SecretEncodeResponse
            public static readonly Marshaller<Stellar.Curve25519SecretEncodeResponse> Curve25519SecretEncodeResponseMarshaller = Marshallers.Create<Stellar.Curve25519SecretEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.Curve25519SecretEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for Curve25519SecretDecodeRequest
            public static readonly Marshaller<Stellar.Curve25519SecretDecodeRequest> Curve25519SecretDecodeRequestMarshaller = Marshallers.Create<Stellar.Curve25519SecretDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.Curve25519SecretDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for Curve25519SecretDecodeResponse
            public static readonly Marshaller<Stellar.Curve25519SecretDecodeResponse> Curve25519SecretDecodeResponseMarshaller = Marshallers.Create<Stellar.Curve25519SecretDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.Curve25519SecretDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for Curve25519PublicEncodeRequest
            public static readonly Marshaller<Stellar.Curve25519PublicEncodeRequest> Curve25519PublicEncodeRequestMarshaller = Marshallers.Create<Stellar.Curve25519PublicEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.Curve25519PublicEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for Curve25519PublicEncodeResponse
            public static readonly Marshaller<Stellar.Curve25519PublicEncodeResponse> Curve25519PublicEncodeResponseMarshaller = Marshallers.Create<Stellar.Curve25519PublicEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.Curve25519PublicEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for Curve25519PublicDecodeRequest
            public static readonly Marshaller<Stellar.Curve25519PublicDecodeRequest> Curve25519PublicDecodeRequestMarshaller = Marshallers.Create<Stellar.Curve25519PublicDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.Curve25519PublicDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for Curve25519PublicDecodeResponse
            public static readonly Marshaller<Stellar.Curve25519PublicDecodeResponse> Curve25519PublicDecodeResponseMarshaller = Marshallers.Create<Stellar.Curve25519PublicDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.Curve25519PublicDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HmacSha256KeyEncodeRequest
            public static readonly Marshaller<Stellar.HmacSha256KeyEncodeRequest> HmacSha256KeyEncodeRequestMarshaller = Marshallers.Create<Stellar.HmacSha256KeyEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HmacSha256KeyEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HmacSha256KeyEncodeResponse
            public static readonly Marshaller<Stellar.HmacSha256KeyEncodeResponse> HmacSha256KeyEncodeResponseMarshaller = Marshallers.Create<Stellar.HmacSha256KeyEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HmacSha256KeyEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HmacSha256KeyDecodeRequest
            public static readonly Marshaller<Stellar.HmacSha256KeyDecodeRequest> HmacSha256KeyDecodeRequestMarshaller = Marshallers.Create<Stellar.HmacSha256KeyDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HmacSha256KeyDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HmacSha256KeyDecodeResponse
            public static readonly Marshaller<Stellar.HmacSha256KeyDecodeResponse> HmacSha256KeyDecodeResponseMarshaller = Marshallers.Create<Stellar.HmacSha256KeyDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HmacSha256KeyDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HmacSha256MacEncodeRequest
            public static readonly Marshaller<Stellar.HmacSha256MacEncodeRequest> HmacSha256MacEncodeRequestMarshaller = Marshallers.Create<Stellar.HmacSha256MacEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HmacSha256MacEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HmacSha256MacEncodeResponse
            public static readonly Marshaller<Stellar.HmacSha256MacEncodeResponse> HmacSha256MacEncodeResponseMarshaller = Marshallers.Create<Stellar.HmacSha256MacEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HmacSha256MacEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HmacSha256MacDecodeRequest
            public static readonly Marshaller<Stellar.HmacSha256MacDecodeRequest> HmacSha256MacDecodeRequestMarshaller = Marshallers.Create<Stellar.HmacSha256MacDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HmacSha256MacDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for HmacSha256MacDecodeResponse
            public static readonly Marshaller<Stellar.HmacSha256MacDecodeResponse> HmacSha256MacDecodeResponseMarshaller = Marshallers.Create<Stellar.HmacSha256MacDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.HmacSha256MacDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ShortHashSeedEncodeRequest
            public static readonly Marshaller<Stellar.ShortHashSeedEncodeRequest> ShortHashSeedEncodeRequestMarshaller = Marshallers.Create<Stellar.ShortHashSeedEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ShortHashSeedEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ShortHashSeedEncodeResponse
            public static readonly Marshaller<Stellar.ShortHashSeedEncodeResponse> ShortHashSeedEncodeResponseMarshaller = Marshallers.Create<Stellar.ShortHashSeedEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ShortHashSeedEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ShortHashSeedDecodeRequest
            public static readonly Marshaller<Stellar.ShortHashSeedDecodeRequest> ShortHashSeedDecodeRequestMarshaller = Marshallers.Create<Stellar.ShortHashSeedDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ShortHashSeedDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for ShortHashSeedDecodeResponse
            public static readonly Marshaller<Stellar.ShortHashSeedDecodeResponse> ShortHashSeedDecodeResponseMarshaller = Marshallers.Create<Stellar.ShortHashSeedDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.ShortHashSeedDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BinaryFuseFilterTypeEncodeRequest
            public static readonly Marshaller<Stellar.BinaryFuseFilterTypeEncodeRequest> BinaryFuseFilterTypeEncodeRequestMarshaller = Marshallers.Create<Stellar.BinaryFuseFilterTypeEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BinaryFuseFilterTypeEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BinaryFuseFilterTypeEncodeResponse
            public static readonly Marshaller<Stellar.BinaryFuseFilterTypeEncodeResponse> BinaryFuseFilterTypeEncodeResponseMarshaller = Marshallers.Create<Stellar.BinaryFuseFilterTypeEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BinaryFuseFilterTypeEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BinaryFuseFilterTypeDecodeRequest
            public static readonly Marshaller<Stellar.BinaryFuseFilterTypeDecodeRequest> BinaryFuseFilterTypeDecodeRequestMarshaller = Marshallers.Create<Stellar.BinaryFuseFilterTypeDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BinaryFuseFilterTypeDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for BinaryFuseFilterTypeDecodeResponse
            public static readonly Marshaller<Stellar.BinaryFuseFilterTypeDecodeResponse> BinaryFuseFilterTypeDecodeResponseMarshaller = Marshallers.Create<Stellar.BinaryFuseFilterTypeDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.BinaryFuseFilterTypeDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SerializedBinaryFuseFilterEncodeRequest
            public static readonly Marshaller<Stellar.SerializedBinaryFuseFilterEncodeRequest> SerializedBinaryFuseFilterEncodeRequestMarshaller = Marshallers.Create<Stellar.SerializedBinaryFuseFilterEncodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SerializedBinaryFuseFilterEncodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SerializedBinaryFuseFilterEncodeResponse
            public static readonly Marshaller<Stellar.SerializedBinaryFuseFilterEncodeResponse> SerializedBinaryFuseFilterEncodeResponseMarshaller = Marshallers.Create<Stellar.SerializedBinaryFuseFilterEncodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SerializedBinaryFuseFilterEncodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SerializedBinaryFuseFilterDecodeRequest
            public static readonly Marshaller<Stellar.SerializedBinaryFuseFilterDecodeRequest> SerializedBinaryFuseFilterDecodeRequestMarshaller = Marshallers.Create<Stellar.SerializedBinaryFuseFilterDecodeRequest>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SerializedBinaryFuseFilterDecodeRequest>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Marshaller for SerializedBinaryFuseFilterDecodeResponse
            public static readonly Marshaller<Stellar.SerializedBinaryFuseFilterDecodeResponse> SerializedBinaryFuseFilterDecodeResponseMarshaller = Marshallers.Create<Stellar.SerializedBinaryFuseFilterDecodeResponse>(
                (obj, ctx) =>
                {
                    try
                    {
                        using (var ms = new System.IO.MemoryStream())
                        {
                            Serializer.Serialize(ms, obj);
                            ctx.Complete(ms.ToArray());
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to serialize: {ex.Message}"));
                    }
                },
                (ctx) =>
                {
                    try
                    {
                        var bytes = ctx.PayloadAsReadOnlySequence().ToArray();
                        using (var ms = new System.IO.MemoryStream(bytes))
                        {
                            return Serializer.Deserialize<Stellar.SerializedBinaryFuseFilterDecodeResponse>(ms);
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new RpcException(new Status(StatusCode.Internal, $"Failed to deserialize: {ex.Message}"));
                    }
                });

            // Pre-compile serializers for AOT compatibility
            model.CompileInPlace();
        }
    }

    /// <summary>gRPC service implementation for IXdrProtoService</summary>
    public class XdrProtoServiceGrpcService
    {
        private readonly IXdrProtoService _service;
        private readonly ILogger _logger;

        public XdrProtoServiceGrpcService(IXdrProtoService service, ILogger<XdrProtoServiceGrpcService> logger)
        {
            _service = service;
            _logger = logger;
        }

        /// <summary>Handler for EncodeConfigSettingContractExecutionLanesV0 method</summary>
        public async Task<Stellar.ConfigSettingContractExecutionLanesV0EncodeResponse> EncodeConfigSettingContractExecutionLanesV0(Stellar.ConfigSettingContractExecutionLanesV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeConfigSettingContractExecutionLanesV0 request");
                return _service.EncodeConfigSettingContractExecutionLanesV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeConfigSettingContractExecutionLanesV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeConfigSettingContractExecutionLanesV0 method</summary>
        public async Task<Stellar.ConfigSettingContractExecutionLanesV0DecodeResponse> DecodeConfigSettingContractExecutionLanesV0(Stellar.ConfigSettingContractExecutionLanesV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeConfigSettingContractExecutionLanesV0 request");
                return _service.DecodeConfigSettingContractExecutionLanesV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeConfigSettingContractExecutionLanesV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeConfigSettingContractComputeV0 method</summary>
        public async Task<Stellar.ConfigSettingContractComputeV0EncodeResponse> EncodeConfigSettingContractComputeV0(Stellar.ConfigSettingContractComputeV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeConfigSettingContractComputeV0 request");
                return _service.EncodeConfigSettingContractComputeV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeConfigSettingContractComputeV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeConfigSettingContractComputeV0 method</summary>
        public async Task<Stellar.ConfigSettingContractComputeV0DecodeResponse> DecodeConfigSettingContractComputeV0(Stellar.ConfigSettingContractComputeV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeConfigSettingContractComputeV0 request");
                return _service.DecodeConfigSettingContractComputeV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeConfigSettingContractComputeV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeConfigSettingContractLedgerCostV0 method</summary>
        public async Task<Stellar.ConfigSettingContractLedgerCostV0EncodeResponse> EncodeConfigSettingContractLedgerCostV0(Stellar.ConfigSettingContractLedgerCostV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeConfigSettingContractLedgerCostV0 request");
                return _service.EncodeConfigSettingContractLedgerCostV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeConfigSettingContractLedgerCostV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeConfigSettingContractLedgerCostV0 method</summary>
        public async Task<Stellar.ConfigSettingContractLedgerCostV0DecodeResponse> DecodeConfigSettingContractLedgerCostV0(Stellar.ConfigSettingContractLedgerCostV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeConfigSettingContractLedgerCostV0 request");
                return _service.DecodeConfigSettingContractLedgerCostV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeConfigSettingContractLedgerCostV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeConfigSettingContractHistoricalDataV0 method</summary>
        public async Task<Stellar.ConfigSettingContractHistoricalDataV0EncodeResponse> EncodeConfigSettingContractHistoricalDataV0(Stellar.ConfigSettingContractHistoricalDataV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeConfigSettingContractHistoricalDataV0 request");
                return _service.EncodeConfigSettingContractHistoricalDataV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeConfigSettingContractHistoricalDataV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeConfigSettingContractHistoricalDataV0 method</summary>
        public async Task<Stellar.ConfigSettingContractHistoricalDataV0DecodeResponse> DecodeConfigSettingContractHistoricalDataV0(Stellar.ConfigSettingContractHistoricalDataV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeConfigSettingContractHistoricalDataV0 request");
                return _service.DecodeConfigSettingContractHistoricalDataV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeConfigSettingContractHistoricalDataV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeConfigSettingContractEventsV0 method</summary>
        public async Task<Stellar.ConfigSettingContractEventsV0EncodeResponse> EncodeConfigSettingContractEventsV0(Stellar.ConfigSettingContractEventsV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeConfigSettingContractEventsV0 request");
                return _service.EncodeConfigSettingContractEventsV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeConfigSettingContractEventsV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeConfigSettingContractEventsV0 method</summary>
        public async Task<Stellar.ConfigSettingContractEventsV0DecodeResponse> DecodeConfigSettingContractEventsV0(Stellar.ConfigSettingContractEventsV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeConfigSettingContractEventsV0 request");
                return _service.DecodeConfigSettingContractEventsV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeConfigSettingContractEventsV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeConfigSettingContractBandwidthV0 method</summary>
        public async Task<Stellar.ConfigSettingContractBandwidthV0EncodeResponse> EncodeConfigSettingContractBandwidthV0(Stellar.ConfigSettingContractBandwidthV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeConfigSettingContractBandwidthV0 request");
                return _service.EncodeConfigSettingContractBandwidthV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeConfigSettingContractBandwidthV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeConfigSettingContractBandwidthV0 method</summary>
        public async Task<Stellar.ConfigSettingContractBandwidthV0DecodeResponse> DecodeConfigSettingContractBandwidthV0(Stellar.ConfigSettingContractBandwidthV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeConfigSettingContractBandwidthV0 request");
                return _service.DecodeConfigSettingContractBandwidthV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeConfigSettingContractBandwidthV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeContractCostType method</summary>
        public async Task<Stellar.ContractCostTypeEncodeResponse> EncodeContractCostType(Stellar.ContractCostTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeContractCostType request");
                return _service.EncodeContractCostType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeContractCostType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeContractCostType method</summary>
        public async Task<Stellar.ContractCostTypeDecodeResponse> DecodeContractCostType(Stellar.ContractCostTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeContractCostType request");
                return _service.DecodeContractCostType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeContractCostType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeContractCostParamEntry method</summary>
        public async Task<Stellar.ContractCostParamEntryEncodeResponse> EncodeContractCostParamEntry(Stellar.ContractCostParamEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeContractCostParamEntry request");
                return _service.EncodeContractCostParamEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeContractCostParamEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeContractCostParamEntry method</summary>
        public async Task<Stellar.ContractCostParamEntryDecodeResponse> DecodeContractCostParamEntry(Stellar.ContractCostParamEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeContractCostParamEntry request");
                return _service.DecodeContractCostParamEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeContractCostParamEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeStateArchivalSettings method</summary>
        public async Task<Stellar.StateArchivalSettingsEncodeResponse> EncodeStateArchivalSettings(Stellar.StateArchivalSettingsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeStateArchivalSettings request");
                return _service.EncodeStateArchivalSettings(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeStateArchivalSettings");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeStateArchivalSettings method</summary>
        public async Task<Stellar.StateArchivalSettingsDecodeResponse> DecodeStateArchivalSettings(Stellar.StateArchivalSettingsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeStateArchivalSettings request");
                return _service.DecodeStateArchivalSettings(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeStateArchivalSettings");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeEvictionIterator method</summary>
        public async Task<Stellar.EvictionIteratorEncodeResponse> EncodeEvictionIterator(Stellar.EvictionIteratorEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeEvictionIterator request");
                return _service.EncodeEvictionIterator(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeEvictionIterator");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeEvictionIterator method</summary>
        public async Task<Stellar.EvictionIteratorDecodeResponse> DecodeEvictionIterator(Stellar.EvictionIteratorDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeEvictionIterator request");
                return _service.DecodeEvictionIterator(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeEvictionIterator");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeContractCostParams method</summary>
        public async Task<Stellar.ContractCostParamsEncodeResponse> EncodeContractCostParams(Stellar.ContractCostParamsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeContractCostParams request");
                return _service.EncodeContractCostParams(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeContractCostParams");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeContractCostParams method</summary>
        public async Task<Stellar.ContractCostParamsDecodeResponse> DecodeContractCostParams(Stellar.ContractCostParamsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeContractCostParams request");
                return _service.DecodeContractCostParams(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeContractCostParams");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeConfigSettingID method</summary>
        public async Task<Stellar.ConfigSettingIDEncodeResponse> EncodeConfigSettingID(Stellar.ConfigSettingIDEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeConfigSettingID request");
                return _service.EncodeConfigSettingID(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeConfigSettingID");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeConfigSettingID method</summary>
        public async Task<Stellar.ConfigSettingIDDecodeResponse> DecodeConfigSettingID(Stellar.ConfigSettingIDDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeConfigSettingID request");
                return _service.DecodeConfigSettingID(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeConfigSettingID");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeConfigSettingEntry method</summary>
        public async Task<Stellar.ConfigSettingEntryEncodeResponse> EncodeConfigSettingEntry(Stellar.ConfigSettingEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeConfigSettingEntry request");
                return _service.EncodeConfigSettingEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeConfigSettingEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeConfigSettingEntry method</summary>
        public async Task<Stellar.ConfigSettingEntryDecodeResponse> DecodeConfigSettingEntry(Stellar.ConfigSettingEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeConfigSettingEntry request");
                return _service.DecodeConfigSettingEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeConfigSettingEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCEnvMetaKind method</summary>
        public async Task<Stellar.SCEnvMetaKindEncodeResponse> EncodeSCEnvMetaKind(Stellar.SCEnvMetaKindEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCEnvMetaKind request");
                return _service.EncodeSCEnvMetaKind(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCEnvMetaKind");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCEnvMetaKind method</summary>
        public async Task<Stellar.SCEnvMetaKindDecodeResponse> DecodeSCEnvMetaKind(Stellar.SCEnvMetaKindDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCEnvMetaKind request");
                return _service.DecodeSCEnvMetaKind(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCEnvMetaKind");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCEnvMetaEntry method</summary>
        public async Task<Stellar.SCEnvMetaEntryEncodeResponse> EncodeSCEnvMetaEntry(Stellar.SCEnvMetaEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCEnvMetaEntry request");
                return _service.EncodeSCEnvMetaEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCEnvMetaEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCEnvMetaEntry method</summary>
        public async Task<Stellar.SCEnvMetaEntryDecodeResponse> DecodeSCEnvMetaEntry(Stellar.SCEnvMetaEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCEnvMetaEntry request");
                return _service.DecodeSCEnvMetaEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCEnvMetaEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCMetaV0 method</summary>
        public async Task<Stellar.SCMetaV0EncodeResponse> EncodeSCMetaV0(Stellar.SCMetaV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCMetaV0 request");
                return _service.EncodeSCMetaV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCMetaV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCMetaV0 method</summary>
        public async Task<Stellar.SCMetaV0DecodeResponse> DecodeSCMetaV0(Stellar.SCMetaV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCMetaV0 request");
                return _service.DecodeSCMetaV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCMetaV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCMetaKind method</summary>
        public async Task<Stellar.SCMetaKindEncodeResponse> EncodeSCMetaKind(Stellar.SCMetaKindEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCMetaKind request");
                return _service.EncodeSCMetaKind(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCMetaKind");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCMetaKind method</summary>
        public async Task<Stellar.SCMetaKindDecodeResponse> DecodeSCMetaKind(Stellar.SCMetaKindDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCMetaKind request");
                return _service.DecodeSCMetaKind(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCMetaKind");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCMetaEntry method</summary>
        public async Task<Stellar.SCMetaEntryEncodeResponse> EncodeSCMetaEntry(Stellar.SCMetaEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCMetaEntry request");
                return _service.EncodeSCMetaEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCMetaEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCMetaEntry method</summary>
        public async Task<Stellar.SCMetaEntryDecodeResponse> DecodeSCMetaEntry(Stellar.SCMetaEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCMetaEntry request");
                return _service.DecodeSCMetaEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCMetaEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecType method</summary>
        public async Task<Stellar.SCSpecTypeEncodeResponse> EncodeSCSpecType(Stellar.SCSpecTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecType request");
                return _service.EncodeSCSpecType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecType method</summary>
        public async Task<Stellar.SCSpecTypeDecodeResponse> DecodeSCSpecType(Stellar.SCSpecTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecType request");
                return _service.DecodeSCSpecType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecTypeOption method</summary>
        public async Task<Stellar.SCSpecTypeOptionEncodeResponse> EncodeSCSpecTypeOption(Stellar.SCSpecTypeOptionEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecTypeOption request");
                return _service.EncodeSCSpecTypeOption(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecTypeOption");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecTypeOption method</summary>
        public async Task<Stellar.SCSpecTypeOptionDecodeResponse> DecodeSCSpecTypeOption(Stellar.SCSpecTypeOptionDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecTypeOption request");
                return _service.DecodeSCSpecTypeOption(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecTypeOption");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecTypeResult method</summary>
        public async Task<Stellar.SCSpecTypeResultEncodeResponse> EncodeSCSpecTypeResult(Stellar.SCSpecTypeResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecTypeResult request");
                return _service.EncodeSCSpecTypeResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecTypeResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecTypeResult method</summary>
        public async Task<Stellar.SCSpecTypeResultDecodeResponse> DecodeSCSpecTypeResult(Stellar.SCSpecTypeResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecTypeResult request");
                return _service.DecodeSCSpecTypeResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecTypeResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecTypeVec method</summary>
        public async Task<Stellar.SCSpecTypeVecEncodeResponse> EncodeSCSpecTypeVec(Stellar.SCSpecTypeVecEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecTypeVec request");
                return _service.EncodeSCSpecTypeVec(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecTypeVec");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecTypeVec method</summary>
        public async Task<Stellar.SCSpecTypeVecDecodeResponse> DecodeSCSpecTypeVec(Stellar.SCSpecTypeVecDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecTypeVec request");
                return _service.DecodeSCSpecTypeVec(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecTypeVec");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecTypeMap method</summary>
        public async Task<Stellar.SCSpecTypeMapEncodeResponse> EncodeSCSpecTypeMap(Stellar.SCSpecTypeMapEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecTypeMap request");
                return _service.EncodeSCSpecTypeMap(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecTypeMap");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecTypeMap method</summary>
        public async Task<Stellar.SCSpecTypeMapDecodeResponse> DecodeSCSpecTypeMap(Stellar.SCSpecTypeMapDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecTypeMap request");
                return _service.DecodeSCSpecTypeMap(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecTypeMap");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecTypeTuple method</summary>
        public async Task<Stellar.SCSpecTypeTupleEncodeResponse> EncodeSCSpecTypeTuple(Stellar.SCSpecTypeTupleEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecTypeTuple request");
                return _service.EncodeSCSpecTypeTuple(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecTypeTuple");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecTypeTuple method</summary>
        public async Task<Stellar.SCSpecTypeTupleDecodeResponse> DecodeSCSpecTypeTuple(Stellar.SCSpecTypeTupleDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecTypeTuple request");
                return _service.DecodeSCSpecTypeTuple(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecTypeTuple");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecTypeBytesN method</summary>
        public async Task<Stellar.SCSpecTypeBytesNEncodeResponse> EncodeSCSpecTypeBytesN(Stellar.SCSpecTypeBytesNEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecTypeBytesN request");
                return _service.EncodeSCSpecTypeBytesN(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecTypeBytesN");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecTypeBytesN method</summary>
        public async Task<Stellar.SCSpecTypeBytesNDecodeResponse> DecodeSCSpecTypeBytesN(Stellar.SCSpecTypeBytesNDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecTypeBytesN request");
                return _service.DecodeSCSpecTypeBytesN(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecTypeBytesN");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecTypeUDT method</summary>
        public async Task<Stellar.SCSpecTypeUDTEncodeResponse> EncodeSCSpecTypeUDT(Stellar.SCSpecTypeUDTEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecTypeUDT request");
                return _service.EncodeSCSpecTypeUDT(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecTypeUDT");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecTypeUDT method</summary>
        public async Task<Stellar.SCSpecTypeUDTDecodeResponse> DecodeSCSpecTypeUDT(Stellar.SCSpecTypeUDTDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecTypeUDT request");
                return _service.DecodeSCSpecTypeUDT(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecTypeUDT");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecTypeDef method</summary>
        public async Task<Stellar.SCSpecTypeDefEncodeResponse> EncodeSCSpecTypeDef(Stellar.SCSpecTypeDefEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecTypeDef request");
                return _service.EncodeSCSpecTypeDef(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecTypeDef");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecTypeDef method</summary>
        public async Task<Stellar.SCSpecTypeDefDecodeResponse> DecodeSCSpecTypeDef(Stellar.SCSpecTypeDefDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecTypeDef request");
                return _service.DecodeSCSpecTypeDef(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecTypeDef");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecUDTStructFieldV0 method</summary>
        public async Task<Stellar.SCSpecUDTStructFieldV0EncodeResponse> EncodeSCSpecUDTStructFieldV0(Stellar.SCSpecUDTStructFieldV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecUDTStructFieldV0 request");
                return _service.EncodeSCSpecUDTStructFieldV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecUDTStructFieldV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecUDTStructFieldV0 method</summary>
        public async Task<Stellar.SCSpecUDTStructFieldV0DecodeResponse> DecodeSCSpecUDTStructFieldV0(Stellar.SCSpecUDTStructFieldV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecUDTStructFieldV0 request");
                return _service.DecodeSCSpecUDTStructFieldV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecUDTStructFieldV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecUDTStructV0 method</summary>
        public async Task<Stellar.SCSpecUDTStructV0EncodeResponse> EncodeSCSpecUDTStructV0(Stellar.SCSpecUDTStructV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecUDTStructV0 request");
                return _service.EncodeSCSpecUDTStructV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecUDTStructV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecUDTStructV0 method</summary>
        public async Task<Stellar.SCSpecUDTStructV0DecodeResponse> DecodeSCSpecUDTStructV0(Stellar.SCSpecUDTStructV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecUDTStructV0 request");
                return _service.DecodeSCSpecUDTStructV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecUDTStructV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecUDTUnionCaseVoidV0 method</summary>
        public async Task<Stellar.SCSpecUDTUnionCaseVoidV0EncodeResponse> EncodeSCSpecUDTUnionCaseVoidV0(Stellar.SCSpecUDTUnionCaseVoidV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecUDTUnionCaseVoidV0 request");
                return _service.EncodeSCSpecUDTUnionCaseVoidV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecUDTUnionCaseVoidV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecUDTUnionCaseVoidV0 method</summary>
        public async Task<Stellar.SCSpecUDTUnionCaseVoidV0DecodeResponse> DecodeSCSpecUDTUnionCaseVoidV0(Stellar.SCSpecUDTUnionCaseVoidV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecUDTUnionCaseVoidV0 request");
                return _service.DecodeSCSpecUDTUnionCaseVoidV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecUDTUnionCaseVoidV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecUDTUnionCaseTupleV0 method</summary>
        public async Task<Stellar.SCSpecUDTUnionCaseTupleV0EncodeResponse> EncodeSCSpecUDTUnionCaseTupleV0(Stellar.SCSpecUDTUnionCaseTupleV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecUDTUnionCaseTupleV0 request");
                return _service.EncodeSCSpecUDTUnionCaseTupleV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecUDTUnionCaseTupleV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecUDTUnionCaseTupleV0 method</summary>
        public async Task<Stellar.SCSpecUDTUnionCaseTupleV0DecodeResponse> DecodeSCSpecUDTUnionCaseTupleV0(Stellar.SCSpecUDTUnionCaseTupleV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecUDTUnionCaseTupleV0 request");
                return _service.DecodeSCSpecUDTUnionCaseTupleV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecUDTUnionCaseTupleV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecUDTUnionCaseV0Kind method</summary>
        public async Task<Stellar.SCSpecUDTUnionCaseV0KindEncodeResponse> EncodeSCSpecUDTUnionCaseV0Kind(Stellar.SCSpecUDTUnionCaseV0KindEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecUDTUnionCaseV0Kind request");
                return _service.EncodeSCSpecUDTUnionCaseV0Kind(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecUDTUnionCaseV0Kind");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecUDTUnionCaseV0Kind method</summary>
        public async Task<Stellar.SCSpecUDTUnionCaseV0KindDecodeResponse> DecodeSCSpecUDTUnionCaseV0Kind(Stellar.SCSpecUDTUnionCaseV0KindDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecUDTUnionCaseV0Kind request");
                return _service.DecodeSCSpecUDTUnionCaseV0Kind(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecUDTUnionCaseV0Kind");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecUDTUnionCaseV0 method</summary>
        public async Task<Stellar.SCSpecUDTUnionCaseV0EncodeResponse> EncodeSCSpecUDTUnionCaseV0(Stellar.SCSpecUDTUnionCaseV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecUDTUnionCaseV0 request");
                return _service.EncodeSCSpecUDTUnionCaseV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecUDTUnionCaseV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecUDTUnionCaseV0 method</summary>
        public async Task<Stellar.SCSpecUDTUnionCaseV0DecodeResponse> DecodeSCSpecUDTUnionCaseV0(Stellar.SCSpecUDTUnionCaseV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecUDTUnionCaseV0 request");
                return _service.DecodeSCSpecUDTUnionCaseV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecUDTUnionCaseV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecUDTUnionV0 method</summary>
        public async Task<Stellar.SCSpecUDTUnionV0EncodeResponse> EncodeSCSpecUDTUnionV0(Stellar.SCSpecUDTUnionV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecUDTUnionV0 request");
                return _service.EncodeSCSpecUDTUnionV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecUDTUnionV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecUDTUnionV0 method</summary>
        public async Task<Stellar.SCSpecUDTUnionV0DecodeResponse> DecodeSCSpecUDTUnionV0(Stellar.SCSpecUDTUnionV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecUDTUnionV0 request");
                return _service.DecodeSCSpecUDTUnionV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecUDTUnionV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecUDTEnumCaseV0 method</summary>
        public async Task<Stellar.SCSpecUDTEnumCaseV0EncodeResponse> EncodeSCSpecUDTEnumCaseV0(Stellar.SCSpecUDTEnumCaseV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecUDTEnumCaseV0 request");
                return _service.EncodeSCSpecUDTEnumCaseV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecUDTEnumCaseV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecUDTEnumCaseV0 method</summary>
        public async Task<Stellar.SCSpecUDTEnumCaseV0DecodeResponse> DecodeSCSpecUDTEnumCaseV0(Stellar.SCSpecUDTEnumCaseV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecUDTEnumCaseV0 request");
                return _service.DecodeSCSpecUDTEnumCaseV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecUDTEnumCaseV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecUDTEnumV0 method</summary>
        public async Task<Stellar.SCSpecUDTEnumV0EncodeResponse> EncodeSCSpecUDTEnumV0(Stellar.SCSpecUDTEnumV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecUDTEnumV0 request");
                return _service.EncodeSCSpecUDTEnumV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecUDTEnumV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecUDTEnumV0 method</summary>
        public async Task<Stellar.SCSpecUDTEnumV0DecodeResponse> DecodeSCSpecUDTEnumV0(Stellar.SCSpecUDTEnumV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecUDTEnumV0 request");
                return _service.DecodeSCSpecUDTEnumV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecUDTEnumV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecUDTErrorEnumCaseV0 method</summary>
        public async Task<Stellar.SCSpecUDTErrorEnumCaseV0EncodeResponse> EncodeSCSpecUDTErrorEnumCaseV0(Stellar.SCSpecUDTErrorEnumCaseV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecUDTErrorEnumCaseV0 request");
                return _service.EncodeSCSpecUDTErrorEnumCaseV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecUDTErrorEnumCaseV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecUDTErrorEnumCaseV0 method</summary>
        public async Task<Stellar.SCSpecUDTErrorEnumCaseV0DecodeResponse> DecodeSCSpecUDTErrorEnumCaseV0(Stellar.SCSpecUDTErrorEnumCaseV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecUDTErrorEnumCaseV0 request");
                return _service.DecodeSCSpecUDTErrorEnumCaseV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecUDTErrorEnumCaseV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecUDTErrorEnumV0 method</summary>
        public async Task<Stellar.SCSpecUDTErrorEnumV0EncodeResponse> EncodeSCSpecUDTErrorEnumV0(Stellar.SCSpecUDTErrorEnumV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecUDTErrorEnumV0 request");
                return _service.EncodeSCSpecUDTErrorEnumV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecUDTErrorEnumV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecUDTErrorEnumV0 method</summary>
        public async Task<Stellar.SCSpecUDTErrorEnumV0DecodeResponse> DecodeSCSpecUDTErrorEnumV0(Stellar.SCSpecUDTErrorEnumV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecUDTErrorEnumV0 request");
                return _service.DecodeSCSpecUDTErrorEnumV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecUDTErrorEnumV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecFunctionInputV0 method</summary>
        public async Task<Stellar.SCSpecFunctionInputV0EncodeResponse> EncodeSCSpecFunctionInputV0(Stellar.SCSpecFunctionInputV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecFunctionInputV0 request");
                return _service.EncodeSCSpecFunctionInputV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecFunctionInputV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecFunctionInputV0 method</summary>
        public async Task<Stellar.SCSpecFunctionInputV0DecodeResponse> DecodeSCSpecFunctionInputV0(Stellar.SCSpecFunctionInputV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecFunctionInputV0 request");
                return _service.DecodeSCSpecFunctionInputV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecFunctionInputV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecFunctionV0 method</summary>
        public async Task<Stellar.SCSpecFunctionV0EncodeResponse> EncodeSCSpecFunctionV0(Stellar.SCSpecFunctionV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecFunctionV0 request");
                return _service.EncodeSCSpecFunctionV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecFunctionV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecFunctionV0 method</summary>
        public async Task<Stellar.SCSpecFunctionV0DecodeResponse> DecodeSCSpecFunctionV0(Stellar.SCSpecFunctionV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecFunctionV0 request");
                return _service.DecodeSCSpecFunctionV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecFunctionV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecEntryKind method</summary>
        public async Task<Stellar.SCSpecEntryKindEncodeResponse> EncodeSCSpecEntryKind(Stellar.SCSpecEntryKindEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecEntryKind request");
                return _service.EncodeSCSpecEntryKind(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecEntryKind");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecEntryKind method</summary>
        public async Task<Stellar.SCSpecEntryKindDecodeResponse> DecodeSCSpecEntryKind(Stellar.SCSpecEntryKindDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecEntryKind request");
                return _service.DecodeSCSpecEntryKind(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecEntryKind");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSpecEntry method</summary>
        public async Task<Stellar.SCSpecEntryEncodeResponse> EncodeSCSpecEntry(Stellar.SCSpecEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSpecEntry request");
                return _service.EncodeSCSpecEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSpecEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSpecEntry method</summary>
        public async Task<Stellar.SCSpecEntryDecodeResponse> DecodeSCSpecEntry(Stellar.SCSpecEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSpecEntry request");
                return _service.DecodeSCSpecEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSpecEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCValType method</summary>
        public async Task<Stellar.SCValTypeEncodeResponse> EncodeSCValType(Stellar.SCValTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCValType request");
                return _service.EncodeSCValType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCValType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCValType method</summary>
        public async Task<Stellar.SCValTypeDecodeResponse> DecodeSCValType(Stellar.SCValTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCValType request");
                return _service.DecodeSCValType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCValType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCErrorType method</summary>
        public async Task<Stellar.SCErrorTypeEncodeResponse> EncodeSCErrorType(Stellar.SCErrorTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCErrorType request");
                return _service.EncodeSCErrorType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCErrorType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCErrorType method</summary>
        public async Task<Stellar.SCErrorTypeDecodeResponse> DecodeSCErrorType(Stellar.SCErrorTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCErrorType request");
                return _service.DecodeSCErrorType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCErrorType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCErrorCode method</summary>
        public async Task<Stellar.SCErrorCodeEncodeResponse> EncodeSCErrorCode(Stellar.SCErrorCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCErrorCode request");
                return _service.EncodeSCErrorCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCErrorCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCErrorCode method</summary>
        public async Task<Stellar.SCErrorCodeDecodeResponse> DecodeSCErrorCode(Stellar.SCErrorCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCErrorCode request");
                return _service.DecodeSCErrorCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCErrorCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCError method</summary>
        public async Task<Stellar.SCErrorEncodeResponse> EncodeSCError(Stellar.SCErrorEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCError request");
                return _service.EncodeSCError(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCError");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCError method</summary>
        public async Task<Stellar.SCErrorDecodeResponse> DecodeSCError(Stellar.SCErrorDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCError request");
                return _service.DecodeSCError(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCError");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeUInt128Parts method</summary>
        public async Task<Stellar.UInt128PartsEncodeResponse> EncodeUInt128Parts(Stellar.UInt128PartsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeUInt128Parts request");
                return _service.EncodeUInt128Parts(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeUInt128Parts");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeUInt128Parts method</summary>
        public async Task<Stellar.UInt128PartsDecodeResponse> DecodeUInt128Parts(Stellar.UInt128PartsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeUInt128Parts request");
                return _service.DecodeUInt128Parts(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeUInt128Parts");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeInt128Parts method</summary>
        public async Task<Stellar.Int128PartsEncodeResponse> EncodeInt128Parts(Stellar.Int128PartsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeInt128Parts request");
                return _service.EncodeInt128Parts(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeInt128Parts");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeInt128Parts method</summary>
        public async Task<Stellar.Int128PartsDecodeResponse> DecodeInt128Parts(Stellar.Int128PartsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeInt128Parts request");
                return _service.DecodeInt128Parts(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeInt128Parts");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeUInt256Parts method</summary>
        public async Task<Stellar.UInt256PartsEncodeResponse> EncodeUInt256Parts(Stellar.UInt256PartsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeUInt256Parts request");
                return _service.EncodeUInt256Parts(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeUInt256Parts");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeUInt256Parts method</summary>
        public async Task<Stellar.UInt256PartsDecodeResponse> DecodeUInt256Parts(Stellar.UInt256PartsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeUInt256Parts request");
                return _service.DecodeUInt256Parts(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeUInt256Parts");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeInt256Parts method</summary>
        public async Task<Stellar.Int256PartsEncodeResponse> EncodeInt256Parts(Stellar.Int256PartsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeInt256Parts request");
                return _service.EncodeInt256Parts(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeInt256Parts");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeInt256Parts method</summary>
        public async Task<Stellar.Int256PartsDecodeResponse> DecodeInt256Parts(Stellar.Int256PartsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeInt256Parts request");
                return _service.DecodeInt256Parts(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeInt256Parts");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeContractExecutableType method</summary>
        public async Task<Stellar.ContractExecutableTypeEncodeResponse> EncodeContractExecutableType(Stellar.ContractExecutableTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeContractExecutableType request");
                return _service.EncodeContractExecutableType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeContractExecutableType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeContractExecutableType method</summary>
        public async Task<Stellar.ContractExecutableTypeDecodeResponse> DecodeContractExecutableType(Stellar.ContractExecutableTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeContractExecutableType request");
                return _service.DecodeContractExecutableType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeContractExecutableType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeContractExecutable method</summary>
        public async Task<Stellar.ContractExecutableEncodeResponse> EncodeContractExecutable(Stellar.ContractExecutableEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeContractExecutable request");
                return _service.EncodeContractExecutable(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeContractExecutable");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeContractExecutable method</summary>
        public async Task<Stellar.ContractExecutableDecodeResponse> DecodeContractExecutable(Stellar.ContractExecutableDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeContractExecutable request");
                return _service.DecodeContractExecutable(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeContractExecutable");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCAddressType method</summary>
        public async Task<Stellar.SCAddressTypeEncodeResponse> EncodeSCAddressType(Stellar.SCAddressTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCAddressType request");
                return _service.EncodeSCAddressType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCAddressType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCAddressType method</summary>
        public async Task<Stellar.SCAddressTypeDecodeResponse> DecodeSCAddressType(Stellar.SCAddressTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCAddressType request");
                return _service.DecodeSCAddressType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCAddressType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCAddress method</summary>
        public async Task<Stellar.SCAddressEncodeResponse> EncodeSCAddress(Stellar.SCAddressEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCAddress request");
                return _service.EncodeSCAddress(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCAddress");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCAddress method</summary>
        public async Task<Stellar.SCAddressDecodeResponse> DecodeSCAddress(Stellar.SCAddressDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCAddress request");
                return _service.DecodeSCAddress(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCAddress");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCVec method</summary>
        public async Task<Stellar.SCVecEncodeResponse> EncodeSCVec(Stellar.SCVecEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCVec request");
                return _service.EncodeSCVec(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCVec");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCVec method</summary>
        public async Task<Stellar.SCVecDecodeResponse> DecodeSCVec(Stellar.SCVecDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCVec request");
                return _service.DecodeSCVec(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCVec");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCMap method</summary>
        public async Task<Stellar.SCMapEncodeResponse> EncodeSCMap(Stellar.SCMapEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCMap request");
                return _service.EncodeSCMap(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCMap");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCMap method</summary>
        public async Task<Stellar.SCMapDecodeResponse> DecodeSCMap(Stellar.SCMapDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCMap request");
                return _service.DecodeSCMap(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCMap");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCBytes method</summary>
        public async Task<Stellar.SCBytesEncodeResponse> EncodeSCBytes(Stellar.SCBytesEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCBytes request");
                return _service.EncodeSCBytes(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCBytes");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCBytes method</summary>
        public async Task<Stellar.SCBytesDecodeResponse> DecodeSCBytes(Stellar.SCBytesDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCBytes request");
                return _service.DecodeSCBytes(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCBytes");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCString method</summary>
        public async Task<Stellar.SCStringEncodeResponse> EncodeSCString(Stellar.SCStringEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCString request");
                return _service.EncodeSCString(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCString");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCString method</summary>
        public async Task<Stellar.SCStringDecodeResponse> DecodeSCString(Stellar.SCStringDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCString request");
                return _service.DecodeSCString(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCString");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCSymbol method</summary>
        public async Task<Stellar.SCSymbolEncodeResponse> EncodeSCSymbol(Stellar.SCSymbolEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCSymbol request");
                return _service.EncodeSCSymbol(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCSymbol");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCSymbol method</summary>
        public async Task<Stellar.SCSymbolDecodeResponse> DecodeSCSymbol(Stellar.SCSymbolDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCSymbol request");
                return _service.DecodeSCSymbol(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCSymbol");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCNonceKey method</summary>
        public async Task<Stellar.SCNonceKeyEncodeResponse> EncodeSCNonceKey(Stellar.SCNonceKeyEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCNonceKey request");
                return _service.EncodeSCNonceKey(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCNonceKey");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCNonceKey method</summary>
        public async Task<Stellar.SCNonceKeyDecodeResponse> DecodeSCNonceKey(Stellar.SCNonceKeyDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCNonceKey request");
                return _service.DecodeSCNonceKey(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCNonceKey");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCContractInstance method</summary>
        public async Task<Stellar.SCContractInstanceEncodeResponse> EncodeSCContractInstance(Stellar.SCContractInstanceEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCContractInstance request");
                return _service.EncodeSCContractInstance(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCContractInstance");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCContractInstance method</summary>
        public async Task<Stellar.SCContractInstanceDecodeResponse> DecodeSCContractInstance(Stellar.SCContractInstanceDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCContractInstance request");
                return _service.DecodeSCContractInstance(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCContractInstance");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCVal method</summary>
        public async Task<Stellar.SCValEncodeResponse> EncodeSCVal(Stellar.SCValEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCVal request");
                return _service.EncodeSCVal(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCVal");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCVal method</summary>
        public async Task<Stellar.SCValDecodeResponse> DecodeSCVal(Stellar.SCValDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCVal request");
                return _service.DecodeSCVal(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCVal");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCMapEntry method</summary>
        public async Task<Stellar.SCMapEntryEncodeResponse> EncodeSCMapEntry(Stellar.SCMapEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCMapEntry request");
                return _service.EncodeSCMapEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCMapEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCMapEntry method</summary>
        public async Task<Stellar.SCMapEntryDecodeResponse> DecodeSCMapEntry(Stellar.SCMapEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCMapEntry request");
                return _service.DecodeSCMapEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCMapEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeStoredTransactionSet method</summary>
        public async Task<Stellar.StoredTransactionSetEncodeResponse> EncodeStoredTransactionSet(Stellar.StoredTransactionSetEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeStoredTransactionSet request");
                return _service.EncodeStoredTransactionSet(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeStoredTransactionSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeStoredTransactionSet method</summary>
        public async Task<Stellar.StoredTransactionSetDecodeResponse> DecodeStoredTransactionSet(Stellar.StoredTransactionSetDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeStoredTransactionSet request");
                return _service.DecodeStoredTransactionSet(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeStoredTransactionSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeStoredDebugTransactionSet method</summary>
        public async Task<Stellar.StoredDebugTransactionSetEncodeResponse> EncodeStoredDebugTransactionSet(Stellar.StoredDebugTransactionSetEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeStoredDebugTransactionSet request");
                return _service.EncodeStoredDebugTransactionSet(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeStoredDebugTransactionSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeStoredDebugTransactionSet method</summary>
        public async Task<Stellar.StoredDebugTransactionSetDecodeResponse> DecodeStoredDebugTransactionSet(Stellar.StoredDebugTransactionSetDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeStoredDebugTransactionSet request");
                return _service.DecodeStoredDebugTransactionSet(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeStoredDebugTransactionSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePersistedSCPStateV0 method</summary>
        public async Task<Stellar.PersistedSCPStateV0EncodeResponse> EncodePersistedSCPStateV0(Stellar.PersistedSCPStateV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePersistedSCPStateV0 request");
                return _service.EncodePersistedSCPStateV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePersistedSCPStateV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePersistedSCPStateV0 method</summary>
        public async Task<Stellar.PersistedSCPStateV0DecodeResponse> DecodePersistedSCPStateV0(Stellar.PersistedSCPStateV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePersistedSCPStateV0 request");
                return _service.DecodePersistedSCPStateV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePersistedSCPStateV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePersistedSCPStateV1 method</summary>
        public async Task<Stellar.PersistedSCPStateV1EncodeResponse> EncodePersistedSCPStateV1(Stellar.PersistedSCPStateV1EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePersistedSCPStateV1 request");
                return _service.EncodePersistedSCPStateV1(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePersistedSCPStateV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePersistedSCPStateV1 method</summary>
        public async Task<Stellar.PersistedSCPStateV1DecodeResponse> DecodePersistedSCPStateV1(Stellar.PersistedSCPStateV1DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePersistedSCPStateV1 request");
                return _service.DecodePersistedSCPStateV1(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePersistedSCPStateV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePersistedSCPState method</summary>
        public async Task<Stellar.PersistedSCPStateEncodeResponse> EncodePersistedSCPState(Stellar.PersistedSCPStateEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePersistedSCPState request");
                return _service.EncodePersistedSCPState(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePersistedSCPState");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePersistedSCPState method</summary>
        public async Task<Stellar.PersistedSCPStateDecodeResponse> DecodePersistedSCPState(Stellar.PersistedSCPStateDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePersistedSCPState request");
                return _service.DecodePersistedSCPState(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePersistedSCPState");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeThresholds method</summary>
        public async Task<Stellar.ThresholdsEncodeResponse> EncodeThresholds(Stellar.ThresholdsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeThresholds request");
                return _service.EncodeThresholds(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeThresholds");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeThresholds method</summary>
        public async Task<Stellar.ThresholdsDecodeResponse> DecodeThresholds(Stellar.ThresholdsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeThresholds request");
                return _service.DecodeThresholds(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeThresholds");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Encodestring32 method</summary>
        public async Task<Stellar.string32EncodeResponse> Encodestring32(Stellar.string32EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Encodestring32 request");
                return _service.Encodestring32(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Encodestring32");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Decodestring32 method</summary>
        public async Task<Stellar.string32DecodeResponse> Decodestring32(Stellar.string32DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Decodestring32 request");
                return _service.Decodestring32(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Decodestring32");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Encodestring64 method</summary>
        public async Task<Stellar.string64EncodeResponse> Encodestring64(Stellar.string64EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Encodestring64 request");
                return _service.Encodestring64(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Encodestring64");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Decodestring64 method</summary>
        public async Task<Stellar.string64DecodeResponse> Decodestring64(Stellar.string64DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Decodestring64 request");
                return _service.Decodestring64(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Decodestring64");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSequenceNumber method</summary>
        public async Task<Stellar.SequenceNumberEncodeResponse> EncodeSequenceNumber(Stellar.SequenceNumberEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSequenceNumber request");
                return _service.EncodeSequenceNumber(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSequenceNumber");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSequenceNumber method</summary>
        public async Task<Stellar.SequenceNumberDecodeResponse> DecodeSequenceNumber(Stellar.SequenceNumberDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSequenceNumber request");
                return _service.DecodeSequenceNumber(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSequenceNumber");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeDataValue method</summary>
        public async Task<Stellar.DataValueEncodeResponse> EncodeDataValue(Stellar.DataValueEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeDataValue request");
                return _service.EncodeDataValue(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeDataValue");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeDataValue method</summary>
        public async Task<Stellar.DataValueDecodeResponse> DecodeDataValue(Stellar.DataValueDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeDataValue request");
                return _service.DecodeDataValue(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeDataValue");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePoolID method</summary>
        public async Task<Stellar.PoolIDEncodeResponse> EncodePoolID(Stellar.PoolIDEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePoolID request");
                return _service.EncodePoolID(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePoolID");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePoolID method</summary>
        public async Task<Stellar.PoolIDDecodeResponse> DecodePoolID(Stellar.PoolIDDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePoolID request");
                return _service.DecodePoolID(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePoolID");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAssetCode4 method</summary>
        public async Task<Stellar.AssetCode4EncodeResponse> EncodeAssetCode4(Stellar.AssetCode4EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAssetCode4 request");
                return _service.EncodeAssetCode4(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAssetCode4");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAssetCode4 method</summary>
        public async Task<Stellar.AssetCode4DecodeResponse> DecodeAssetCode4(Stellar.AssetCode4DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAssetCode4 request");
                return _service.DecodeAssetCode4(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAssetCode4");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAssetCode12 method</summary>
        public async Task<Stellar.AssetCode12EncodeResponse> EncodeAssetCode12(Stellar.AssetCode12EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAssetCode12 request");
                return _service.EncodeAssetCode12(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAssetCode12");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAssetCode12 method</summary>
        public async Task<Stellar.AssetCode12DecodeResponse> DecodeAssetCode12(Stellar.AssetCode12DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAssetCode12 request");
                return _service.DecodeAssetCode12(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAssetCode12");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAssetType method</summary>
        public async Task<Stellar.AssetTypeEncodeResponse> EncodeAssetType(Stellar.AssetTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAssetType request");
                return _service.EncodeAssetType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAssetType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAssetType method</summary>
        public async Task<Stellar.AssetTypeDecodeResponse> DecodeAssetType(Stellar.AssetTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAssetType request");
                return _service.DecodeAssetType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAssetType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAssetCode method</summary>
        public async Task<Stellar.AssetCodeEncodeResponse> EncodeAssetCode(Stellar.AssetCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAssetCode request");
                return _service.EncodeAssetCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAssetCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAssetCode method</summary>
        public async Task<Stellar.AssetCodeDecodeResponse> DecodeAssetCode(Stellar.AssetCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAssetCode request");
                return _service.DecodeAssetCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAssetCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAlphaNum4 method</summary>
        public async Task<Stellar.AlphaNum4EncodeResponse> EncodeAlphaNum4(Stellar.AlphaNum4EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAlphaNum4 request");
                return _service.EncodeAlphaNum4(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAlphaNum4");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAlphaNum4 method</summary>
        public async Task<Stellar.AlphaNum4DecodeResponse> DecodeAlphaNum4(Stellar.AlphaNum4DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAlphaNum4 request");
                return _service.DecodeAlphaNum4(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAlphaNum4");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAlphaNum12 method</summary>
        public async Task<Stellar.AlphaNum12EncodeResponse> EncodeAlphaNum12(Stellar.AlphaNum12EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAlphaNum12 request");
                return _service.EncodeAlphaNum12(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAlphaNum12");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAlphaNum12 method</summary>
        public async Task<Stellar.AlphaNum12DecodeResponse> DecodeAlphaNum12(Stellar.AlphaNum12DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAlphaNum12 request");
                return _service.DecodeAlphaNum12(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAlphaNum12");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAsset method</summary>
        public async Task<Stellar.AssetEncodeResponse> EncodeAsset(Stellar.AssetEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAsset request");
                return _service.EncodeAsset(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAsset");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAsset method</summary>
        public async Task<Stellar.AssetDecodeResponse> DecodeAsset(Stellar.AssetDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAsset request");
                return _service.DecodeAsset(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAsset");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePrice method</summary>
        public async Task<Stellar.PriceEncodeResponse> EncodePrice(Stellar.PriceEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePrice request");
                return _service.EncodePrice(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePrice");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePrice method</summary>
        public async Task<Stellar.PriceDecodeResponse> DecodePrice(Stellar.PriceDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePrice request");
                return _service.DecodePrice(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePrice");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLiabilities method</summary>
        public async Task<Stellar.LiabilitiesEncodeResponse> EncodeLiabilities(Stellar.LiabilitiesEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLiabilities request");
                return _service.EncodeLiabilities(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLiabilities");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLiabilities method</summary>
        public async Task<Stellar.LiabilitiesDecodeResponse> DecodeLiabilities(Stellar.LiabilitiesDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLiabilities request");
                return _service.DecodeLiabilities(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLiabilities");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeThresholdIndexes method</summary>
        public async Task<Stellar.ThresholdIndexesEncodeResponse> EncodeThresholdIndexes(Stellar.ThresholdIndexesEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeThresholdIndexes request");
                return _service.EncodeThresholdIndexes(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeThresholdIndexes");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeThresholdIndexes method</summary>
        public async Task<Stellar.ThresholdIndexesDecodeResponse> DecodeThresholdIndexes(Stellar.ThresholdIndexesDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeThresholdIndexes request");
                return _service.DecodeThresholdIndexes(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeThresholdIndexes");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerEntryType method</summary>
        public async Task<Stellar.LedgerEntryTypeEncodeResponse> EncodeLedgerEntryType(Stellar.LedgerEntryTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerEntryType request");
                return _service.EncodeLedgerEntryType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerEntryType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerEntryType method</summary>
        public async Task<Stellar.LedgerEntryTypeDecodeResponse> DecodeLedgerEntryType(Stellar.LedgerEntryTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerEntryType request");
                return _service.DecodeLedgerEntryType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerEntryType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSigner method</summary>
        public async Task<Stellar.SignerEncodeResponse> EncodeSigner(Stellar.SignerEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSigner request");
                return _service.EncodeSigner(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSigner");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSigner method</summary>
        public async Task<Stellar.SignerDecodeResponse> DecodeSigner(Stellar.SignerDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSigner request");
                return _service.DecodeSigner(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSigner");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAccountFlags method</summary>
        public async Task<Stellar.AccountFlagsEncodeResponse> EncodeAccountFlags(Stellar.AccountFlagsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAccountFlags request");
                return _service.EncodeAccountFlags(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAccountFlags");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAccountFlags method</summary>
        public async Task<Stellar.AccountFlagsDecodeResponse> DecodeAccountFlags(Stellar.AccountFlagsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAccountFlags request");
                return _service.DecodeAccountFlags(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAccountFlags");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSponsorshipDescriptor method</summary>
        public async Task<Stellar.SponsorshipDescriptorEncodeResponse> EncodeSponsorshipDescriptor(Stellar.SponsorshipDescriptorEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSponsorshipDescriptor request");
                return _service.EncodeSponsorshipDescriptor(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSponsorshipDescriptor");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSponsorshipDescriptor method</summary>
        public async Task<Stellar.SponsorshipDescriptorDecodeResponse> DecodeSponsorshipDescriptor(Stellar.SponsorshipDescriptorDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSponsorshipDescriptor request");
                return _service.DecodeSponsorshipDescriptor(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSponsorshipDescriptor");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAccountEntryExtensionV3 method</summary>
        public async Task<Stellar.AccountEntryExtensionV3EncodeResponse> EncodeAccountEntryExtensionV3(Stellar.AccountEntryExtensionV3EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAccountEntryExtensionV3 request");
                return _service.EncodeAccountEntryExtensionV3(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAccountEntryExtensionV3");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAccountEntryExtensionV3 method</summary>
        public async Task<Stellar.AccountEntryExtensionV3DecodeResponse> DecodeAccountEntryExtensionV3(Stellar.AccountEntryExtensionV3DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAccountEntryExtensionV3 request");
                return _service.DecodeAccountEntryExtensionV3(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAccountEntryExtensionV3");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAccountEntryExtensionV2 method</summary>
        public async Task<Stellar.AccountEntryExtensionV2EncodeResponse> EncodeAccountEntryExtensionV2(Stellar.AccountEntryExtensionV2EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAccountEntryExtensionV2 request");
                return _service.EncodeAccountEntryExtensionV2(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAccountEntryExtensionV2");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAccountEntryExtensionV2 method</summary>
        public async Task<Stellar.AccountEntryExtensionV2DecodeResponse> DecodeAccountEntryExtensionV2(Stellar.AccountEntryExtensionV2DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAccountEntryExtensionV2 request");
                return _service.DecodeAccountEntryExtensionV2(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAccountEntryExtensionV2");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAccountEntryExtensionV1 method</summary>
        public async Task<Stellar.AccountEntryExtensionV1EncodeResponse> EncodeAccountEntryExtensionV1(Stellar.AccountEntryExtensionV1EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAccountEntryExtensionV1 request");
                return _service.EncodeAccountEntryExtensionV1(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAccountEntryExtensionV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAccountEntryExtensionV1 method</summary>
        public async Task<Stellar.AccountEntryExtensionV1DecodeResponse> DecodeAccountEntryExtensionV1(Stellar.AccountEntryExtensionV1DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAccountEntryExtensionV1 request");
                return _service.DecodeAccountEntryExtensionV1(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAccountEntryExtensionV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAccountEntry method</summary>
        public async Task<Stellar.AccountEntryEncodeResponse> EncodeAccountEntry(Stellar.AccountEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAccountEntry request");
                return _service.EncodeAccountEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAccountEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAccountEntry method</summary>
        public async Task<Stellar.AccountEntryDecodeResponse> DecodeAccountEntry(Stellar.AccountEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAccountEntry request");
                return _service.DecodeAccountEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAccountEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTrustLineFlags method</summary>
        public async Task<Stellar.TrustLineFlagsEncodeResponse> EncodeTrustLineFlags(Stellar.TrustLineFlagsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTrustLineFlags request");
                return _service.EncodeTrustLineFlags(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTrustLineFlags");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTrustLineFlags method</summary>
        public async Task<Stellar.TrustLineFlagsDecodeResponse> DecodeTrustLineFlags(Stellar.TrustLineFlagsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTrustLineFlags request");
                return _service.DecodeTrustLineFlags(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTrustLineFlags");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLiquidityPoolType method</summary>
        public async Task<Stellar.LiquidityPoolTypeEncodeResponse> EncodeLiquidityPoolType(Stellar.LiquidityPoolTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLiquidityPoolType request");
                return _service.EncodeLiquidityPoolType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLiquidityPoolType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLiquidityPoolType method</summary>
        public async Task<Stellar.LiquidityPoolTypeDecodeResponse> DecodeLiquidityPoolType(Stellar.LiquidityPoolTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLiquidityPoolType request");
                return _service.DecodeLiquidityPoolType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLiquidityPoolType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTrustLineAsset method</summary>
        public async Task<Stellar.TrustLineAssetEncodeResponse> EncodeTrustLineAsset(Stellar.TrustLineAssetEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTrustLineAsset request");
                return _service.EncodeTrustLineAsset(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTrustLineAsset");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTrustLineAsset method</summary>
        public async Task<Stellar.TrustLineAssetDecodeResponse> DecodeTrustLineAsset(Stellar.TrustLineAssetDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTrustLineAsset request");
                return _service.DecodeTrustLineAsset(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTrustLineAsset");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTrustLineEntryExtensionV2 method</summary>
        public async Task<Stellar.TrustLineEntryExtensionV2EncodeResponse> EncodeTrustLineEntryExtensionV2(Stellar.TrustLineEntryExtensionV2EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTrustLineEntryExtensionV2 request");
                return _service.EncodeTrustLineEntryExtensionV2(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTrustLineEntryExtensionV2");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTrustLineEntryExtensionV2 method</summary>
        public async Task<Stellar.TrustLineEntryExtensionV2DecodeResponse> DecodeTrustLineEntryExtensionV2(Stellar.TrustLineEntryExtensionV2DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTrustLineEntryExtensionV2 request");
                return _service.DecodeTrustLineEntryExtensionV2(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTrustLineEntryExtensionV2");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTrustLineEntry method</summary>
        public async Task<Stellar.TrustLineEntryEncodeResponse> EncodeTrustLineEntry(Stellar.TrustLineEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTrustLineEntry request");
                return _service.EncodeTrustLineEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTrustLineEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTrustLineEntry method</summary>
        public async Task<Stellar.TrustLineEntryDecodeResponse> DecodeTrustLineEntry(Stellar.TrustLineEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTrustLineEntry request");
                return _service.DecodeTrustLineEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTrustLineEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeOfferEntryFlags method</summary>
        public async Task<Stellar.OfferEntryFlagsEncodeResponse> EncodeOfferEntryFlags(Stellar.OfferEntryFlagsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeOfferEntryFlags request");
                return _service.EncodeOfferEntryFlags(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeOfferEntryFlags");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeOfferEntryFlags method</summary>
        public async Task<Stellar.OfferEntryFlagsDecodeResponse> DecodeOfferEntryFlags(Stellar.OfferEntryFlagsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeOfferEntryFlags request");
                return _service.DecodeOfferEntryFlags(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeOfferEntryFlags");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeOfferEntry method</summary>
        public async Task<Stellar.OfferEntryEncodeResponse> EncodeOfferEntry(Stellar.OfferEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeOfferEntry request");
                return _service.EncodeOfferEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeOfferEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeOfferEntry method</summary>
        public async Task<Stellar.OfferEntryDecodeResponse> DecodeOfferEntry(Stellar.OfferEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeOfferEntry request");
                return _service.DecodeOfferEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeOfferEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeDataEntry method</summary>
        public async Task<Stellar.DataEntryEncodeResponse> EncodeDataEntry(Stellar.DataEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeDataEntry request");
                return _service.EncodeDataEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeDataEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeDataEntry method</summary>
        public async Task<Stellar.DataEntryDecodeResponse> DecodeDataEntry(Stellar.DataEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeDataEntry request");
                return _service.DecodeDataEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeDataEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimPredicateType method</summary>
        public async Task<Stellar.ClaimPredicateTypeEncodeResponse> EncodeClaimPredicateType(Stellar.ClaimPredicateTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimPredicateType request");
                return _service.EncodeClaimPredicateType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimPredicateType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimPredicateType method</summary>
        public async Task<Stellar.ClaimPredicateTypeDecodeResponse> DecodeClaimPredicateType(Stellar.ClaimPredicateTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimPredicateType request");
                return _service.DecodeClaimPredicateType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimPredicateType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimPredicate method</summary>
        public async Task<Stellar.ClaimPredicateEncodeResponse> EncodeClaimPredicate(Stellar.ClaimPredicateEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimPredicate request");
                return _service.EncodeClaimPredicate(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimPredicate");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimPredicate method</summary>
        public async Task<Stellar.ClaimPredicateDecodeResponse> DecodeClaimPredicate(Stellar.ClaimPredicateDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimPredicate request");
                return _service.DecodeClaimPredicate(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimPredicate");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimantType method</summary>
        public async Task<Stellar.ClaimantTypeEncodeResponse> EncodeClaimantType(Stellar.ClaimantTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimantType request");
                return _service.EncodeClaimantType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimantType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimantType method</summary>
        public async Task<Stellar.ClaimantTypeDecodeResponse> DecodeClaimantType(Stellar.ClaimantTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimantType request");
                return _service.DecodeClaimantType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimantType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimant method</summary>
        public async Task<Stellar.ClaimantEncodeResponse> EncodeClaimant(Stellar.ClaimantEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimant request");
                return _service.EncodeClaimant(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimant");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimant method</summary>
        public async Task<Stellar.ClaimantDecodeResponse> DecodeClaimant(Stellar.ClaimantDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimant request");
                return _service.DecodeClaimant(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimant");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimableBalanceIDType method</summary>
        public async Task<Stellar.ClaimableBalanceIDTypeEncodeResponse> EncodeClaimableBalanceIDType(Stellar.ClaimableBalanceIDTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimableBalanceIDType request");
                return _service.EncodeClaimableBalanceIDType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimableBalanceIDType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimableBalanceIDType method</summary>
        public async Task<Stellar.ClaimableBalanceIDTypeDecodeResponse> DecodeClaimableBalanceIDType(Stellar.ClaimableBalanceIDTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimableBalanceIDType request");
                return _service.DecodeClaimableBalanceIDType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimableBalanceIDType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimableBalanceID method</summary>
        public async Task<Stellar.ClaimableBalanceIDEncodeResponse> EncodeClaimableBalanceID(Stellar.ClaimableBalanceIDEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimableBalanceID request");
                return _service.EncodeClaimableBalanceID(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimableBalanceID");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimableBalanceID method</summary>
        public async Task<Stellar.ClaimableBalanceIDDecodeResponse> DecodeClaimableBalanceID(Stellar.ClaimableBalanceIDDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimableBalanceID request");
                return _service.DecodeClaimableBalanceID(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimableBalanceID");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimableBalanceFlags method</summary>
        public async Task<Stellar.ClaimableBalanceFlagsEncodeResponse> EncodeClaimableBalanceFlags(Stellar.ClaimableBalanceFlagsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimableBalanceFlags request");
                return _service.EncodeClaimableBalanceFlags(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimableBalanceFlags");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimableBalanceFlags method</summary>
        public async Task<Stellar.ClaimableBalanceFlagsDecodeResponse> DecodeClaimableBalanceFlags(Stellar.ClaimableBalanceFlagsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimableBalanceFlags request");
                return _service.DecodeClaimableBalanceFlags(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimableBalanceFlags");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimableBalanceEntryExtensionV1 method</summary>
        public async Task<Stellar.ClaimableBalanceEntryExtensionV1EncodeResponse> EncodeClaimableBalanceEntryExtensionV1(Stellar.ClaimableBalanceEntryExtensionV1EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimableBalanceEntryExtensionV1 request");
                return _service.EncodeClaimableBalanceEntryExtensionV1(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimableBalanceEntryExtensionV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimableBalanceEntryExtensionV1 method</summary>
        public async Task<Stellar.ClaimableBalanceEntryExtensionV1DecodeResponse> DecodeClaimableBalanceEntryExtensionV1(Stellar.ClaimableBalanceEntryExtensionV1DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimableBalanceEntryExtensionV1 request");
                return _service.DecodeClaimableBalanceEntryExtensionV1(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimableBalanceEntryExtensionV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimableBalanceEntry method</summary>
        public async Task<Stellar.ClaimableBalanceEntryEncodeResponse> EncodeClaimableBalanceEntry(Stellar.ClaimableBalanceEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimableBalanceEntry request");
                return _service.EncodeClaimableBalanceEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimableBalanceEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimableBalanceEntry method</summary>
        public async Task<Stellar.ClaimableBalanceEntryDecodeResponse> DecodeClaimableBalanceEntry(Stellar.ClaimableBalanceEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimableBalanceEntry request");
                return _service.DecodeClaimableBalanceEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimableBalanceEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLiquidityPoolConstantProductParameters method</summary>
        public async Task<Stellar.LiquidityPoolConstantProductParametersEncodeResponse> EncodeLiquidityPoolConstantProductParameters(Stellar.LiquidityPoolConstantProductParametersEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLiquidityPoolConstantProductParameters request");
                return _service.EncodeLiquidityPoolConstantProductParameters(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLiquidityPoolConstantProductParameters");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLiquidityPoolConstantProductParameters method</summary>
        public async Task<Stellar.LiquidityPoolConstantProductParametersDecodeResponse> DecodeLiquidityPoolConstantProductParameters(Stellar.LiquidityPoolConstantProductParametersDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLiquidityPoolConstantProductParameters request");
                return _service.DecodeLiquidityPoolConstantProductParameters(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLiquidityPoolConstantProductParameters");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLiquidityPoolEntry method</summary>
        public async Task<Stellar.LiquidityPoolEntryEncodeResponse> EncodeLiquidityPoolEntry(Stellar.LiquidityPoolEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLiquidityPoolEntry request");
                return _service.EncodeLiquidityPoolEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLiquidityPoolEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLiquidityPoolEntry method</summary>
        public async Task<Stellar.LiquidityPoolEntryDecodeResponse> DecodeLiquidityPoolEntry(Stellar.LiquidityPoolEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLiquidityPoolEntry request");
                return _service.DecodeLiquidityPoolEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLiquidityPoolEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeContractDataDurability method</summary>
        public async Task<Stellar.ContractDataDurabilityEncodeResponse> EncodeContractDataDurability(Stellar.ContractDataDurabilityEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeContractDataDurability request");
                return _service.EncodeContractDataDurability(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeContractDataDurability");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeContractDataDurability method</summary>
        public async Task<Stellar.ContractDataDurabilityDecodeResponse> DecodeContractDataDurability(Stellar.ContractDataDurabilityDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeContractDataDurability request");
                return _service.DecodeContractDataDurability(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeContractDataDurability");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeContractDataEntry method</summary>
        public async Task<Stellar.ContractDataEntryEncodeResponse> EncodeContractDataEntry(Stellar.ContractDataEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeContractDataEntry request");
                return _service.EncodeContractDataEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeContractDataEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeContractDataEntry method</summary>
        public async Task<Stellar.ContractDataEntryDecodeResponse> DecodeContractDataEntry(Stellar.ContractDataEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeContractDataEntry request");
                return _service.DecodeContractDataEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeContractDataEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeContractCodeCostInputs method</summary>
        public async Task<Stellar.ContractCodeCostInputsEncodeResponse> EncodeContractCodeCostInputs(Stellar.ContractCodeCostInputsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeContractCodeCostInputs request");
                return _service.EncodeContractCodeCostInputs(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeContractCodeCostInputs");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeContractCodeCostInputs method</summary>
        public async Task<Stellar.ContractCodeCostInputsDecodeResponse> DecodeContractCodeCostInputs(Stellar.ContractCodeCostInputsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeContractCodeCostInputs request");
                return _service.DecodeContractCodeCostInputs(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeContractCodeCostInputs");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeContractCodeEntry method</summary>
        public async Task<Stellar.ContractCodeEntryEncodeResponse> EncodeContractCodeEntry(Stellar.ContractCodeEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeContractCodeEntry request");
                return _service.EncodeContractCodeEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeContractCodeEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeContractCodeEntry method</summary>
        public async Task<Stellar.ContractCodeEntryDecodeResponse> DecodeContractCodeEntry(Stellar.ContractCodeEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeContractCodeEntry request");
                return _service.DecodeContractCodeEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeContractCodeEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTTLEntry method</summary>
        public async Task<Stellar.TTLEntryEncodeResponse> EncodeTTLEntry(Stellar.TTLEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTTLEntry request");
                return _service.EncodeTTLEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTTLEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTTLEntry method</summary>
        public async Task<Stellar.TTLEntryDecodeResponse> DecodeTTLEntry(Stellar.TTLEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTTLEntry request");
                return _service.DecodeTTLEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTTLEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerEntryExtensionV1 method</summary>
        public async Task<Stellar.LedgerEntryExtensionV1EncodeResponse> EncodeLedgerEntryExtensionV1(Stellar.LedgerEntryExtensionV1EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerEntryExtensionV1 request");
                return _service.EncodeLedgerEntryExtensionV1(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerEntryExtensionV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerEntryExtensionV1 method</summary>
        public async Task<Stellar.LedgerEntryExtensionV1DecodeResponse> DecodeLedgerEntryExtensionV1(Stellar.LedgerEntryExtensionV1DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerEntryExtensionV1 request");
                return _service.DecodeLedgerEntryExtensionV1(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerEntryExtensionV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerEntry method</summary>
        public async Task<Stellar.LedgerEntryEncodeResponse> EncodeLedgerEntry(Stellar.LedgerEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerEntry request");
                return _service.EncodeLedgerEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerEntry method</summary>
        public async Task<Stellar.LedgerEntryDecodeResponse> DecodeLedgerEntry(Stellar.LedgerEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerEntry request");
                return _service.DecodeLedgerEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerKey method</summary>
        public async Task<Stellar.LedgerKeyEncodeResponse> EncodeLedgerKey(Stellar.LedgerKeyEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerKey request");
                return _service.EncodeLedgerKey(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerKey");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerKey method</summary>
        public async Task<Stellar.LedgerKeyDecodeResponse> DecodeLedgerKey(Stellar.LedgerKeyDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerKey request");
                return _service.DecodeLedgerKey(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerKey");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeEnvelopeType method</summary>
        public async Task<Stellar.EnvelopeTypeEncodeResponse> EncodeEnvelopeType(Stellar.EnvelopeTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeEnvelopeType request");
                return _service.EncodeEnvelopeType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeEnvelopeType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeEnvelopeType method</summary>
        public async Task<Stellar.EnvelopeTypeDecodeResponse> DecodeEnvelopeType(Stellar.EnvelopeTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeEnvelopeType request");
                return _service.DecodeEnvelopeType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeEnvelopeType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeBucketListType method</summary>
        public async Task<Stellar.BucketListTypeEncodeResponse> EncodeBucketListType(Stellar.BucketListTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeBucketListType request");
                return _service.EncodeBucketListType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeBucketListType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeBucketListType method</summary>
        public async Task<Stellar.BucketListTypeDecodeResponse> DecodeBucketListType(Stellar.BucketListTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeBucketListType request");
                return _service.DecodeBucketListType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeBucketListType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeBucketEntryType method</summary>
        public async Task<Stellar.BucketEntryTypeEncodeResponse> EncodeBucketEntryType(Stellar.BucketEntryTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeBucketEntryType request");
                return _service.EncodeBucketEntryType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeBucketEntryType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeBucketEntryType method</summary>
        public async Task<Stellar.BucketEntryTypeDecodeResponse> DecodeBucketEntryType(Stellar.BucketEntryTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeBucketEntryType request");
                return _service.DecodeBucketEntryType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeBucketEntryType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeHotArchiveBucketEntryType method</summary>
        public async Task<Stellar.HotArchiveBucketEntryTypeEncodeResponse> EncodeHotArchiveBucketEntryType(Stellar.HotArchiveBucketEntryTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeHotArchiveBucketEntryType request");
                return _service.EncodeHotArchiveBucketEntryType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeHotArchiveBucketEntryType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeHotArchiveBucketEntryType method</summary>
        public async Task<Stellar.HotArchiveBucketEntryTypeDecodeResponse> DecodeHotArchiveBucketEntryType(Stellar.HotArchiveBucketEntryTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeHotArchiveBucketEntryType request");
                return _service.DecodeHotArchiveBucketEntryType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeHotArchiveBucketEntryType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeColdArchiveBucketEntryType method</summary>
        public async Task<Stellar.ColdArchiveBucketEntryTypeEncodeResponse> EncodeColdArchiveBucketEntryType(Stellar.ColdArchiveBucketEntryTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeColdArchiveBucketEntryType request");
                return _service.EncodeColdArchiveBucketEntryType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeColdArchiveBucketEntryType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeColdArchiveBucketEntryType method</summary>
        public async Task<Stellar.ColdArchiveBucketEntryTypeDecodeResponse> DecodeColdArchiveBucketEntryType(Stellar.ColdArchiveBucketEntryTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeColdArchiveBucketEntryType request");
                return _service.DecodeColdArchiveBucketEntryType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeColdArchiveBucketEntryType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeBucketMetadata method</summary>
        public async Task<Stellar.BucketMetadataEncodeResponse> EncodeBucketMetadata(Stellar.BucketMetadataEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeBucketMetadata request");
                return _service.EncodeBucketMetadata(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeBucketMetadata");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeBucketMetadata method</summary>
        public async Task<Stellar.BucketMetadataDecodeResponse> DecodeBucketMetadata(Stellar.BucketMetadataDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeBucketMetadata request");
                return _service.DecodeBucketMetadata(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeBucketMetadata");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeBucketEntry method</summary>
        public async Task<Stellar.BucketEntryEncodeResponse> EncodeBucketEntry(Stellar.BucketEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeBucketEntry request");
                return _service.EncodeBucketEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeBucketEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeBucketEntry method</summary>
        public async Task<Stellar.BucketEntryDecodeResponse> DecodeBucketEntry(Stellar.BucketEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeBucketEntry request");
                return _service.DecodeBucketEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeBucketEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeHotArchiveBucketEntry method</summary>
        public async Task<Stellar.HotArchiveBucketEntryEncodeResponse> EncodeHotArchiveBucketEntry(Stellar.HotArchiveBucketEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeHotArchiveBucketEntry request");
                return _service.EncodeHotArchiveBucketEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeHotArchiveBucketEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeHotArchiveBucketEntry method</summary>
        public async Task<Stellar.HotArchiveBucketEntryDecodeResponse> DecodeHotArchiveBucketEntry(Stellar.HotArchiveBucketEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeHotArchiveBucketEntry request");
                return _service.DecodeHotArchiveBucketEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeHotArchiveBucketEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeColdArchiveArchivedLeaf method</summary>
        public async Task<Stellar.ColdArchiveArchivedLeafEncodeResponse> EncodeColdArchiveArchivedLeaf(Stellar.ColdArchiveArchivedLeafEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeColdArchiveArchivedLeaf request");
                return _service.EncodeColdArchiveArchivedLeaf(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeColdArchiveArchivedLeaf");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeColdArchiveArchivedLeaf method</summary>
        public async Task<Stellar.ColdArchiveArchivedLeafDecodeResponse> DecodeColdArchiveArchivedLeaf(Stellar.ColdArchiveArchivedLeafDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeColdArchiveArchivedLeaf request");
                return _service.DecodeColdArchiveArchivedLeaf(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeColdArchiveArchivedLeaf");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeColdArchiveDeletedLeaf method</summary>
        public async Task<Stellar.ColdArchiveDeletedLeafEncodeResponse> EncodeColdArchiveDeletedLeaf(Stellar.ColdArchiveDeletedLeafEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeColdArchiveDeletedLeaf request");
                return _service.EncodeColdArchiveDeletedLeaf(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeColdArchiveDeletedLeaf");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeColdArchiveDeletedLeaf method</summary>
        public async Task<Stellar.ColdArchiveDeletedLeafDecodeResponse> DecodeColdArchiveDeletedLeaf(Stellar.ColdArchiveDeletedLeafDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeColdArchiveDeletedLeaf request");
                return _service.DecodeColdArchiveDeletedLeaf(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeColdArchiveDeletedLeaf");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeColdArchiveBoundaryLeaf method</summary>
        public async Task<Stellar.ColdArchiveBoundaryLeafEncodeResponse> EncodeColdArchiveBoundaryLeaf(Stellar.ColdArchiveBoundaryLeafEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeColdArchiveBoundaryLeaf request");
                return _service.EncodeColdArchiveBoundaryLeaf(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeColdArchiveBoundaryLeaf");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeColdArchiveBoundaryLeaf method</summary>
        public async Task<Stellar.ColdArchiveBoundaryLeafDecodeResponse> DecodeColdArchiveBoundaryLeaf(Stellar.ColdArchiveBoundaryLeafDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeColdArchiveBoundaryLeaf request");
                return _service.DecodeColdArchiveBoundaryLeaf(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeColdArchiveBoundaryLeaf");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeColdArchiveHashEntry method</summary>
        public async Task<Stellar.ColdArchiveHashEntryEncodeResponse> EncodeColdArchiveHashEntry(Stellar.ColdArchiveHashEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeColdArchiveHashEntry request");
                return _service.EncodeColdArchiveHashEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeColdArchiveHashEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeColdArchiveHashEntry method</summary>
        public async Task<Stellar.ColdArchiveHashEntryDecodeResponse> DecodeColdArchiveHashEntry(Stellar.ColdArchiveHashEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeColdArchiveHashEntry request");
                return _service.DecodeColdArchiveHashEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeColdArchiveHashEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeColdArchiveBucketEntry method</summary>
        public async Task<Stellar.ColdArchiveBucketEntryEncodeResponse> EncodeColdArchiveBucketEntry(Stellar.ColdArchiveBucketEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeColdArchiveBucketEntry request");
                return _service.EncodeColdArchiveBucketEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeColdArchiveBucketEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeColdArchiveBucketEntry method</summary>
        public async Task<Stellar.ColdArchiveBucketEntryDecodeResponse> DecodeColdArchiveBucketEntry(Stellar.ColdArchiveBucketEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeColdArchiveBucketEntry request");
                return _service.DecodeColdArchiveBucketEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeColdArchiveBucketEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeUpgradeType method</summary>
        public async Task<Stellar.UpgradeTypeEncodeResponse> EncodeUpgradeType(Stellar.UpgradeTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeUpgradeType request");
                return _service.EncodeUpgradeType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeUpgradeType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeUpgradeType method</summary>
        public async Task<Stellar.UpgradeTypeDecodeResponse> DecodeUpgradeType(Stellar.UpgradeTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeUpgradeType request");
                return _service.DecodeUpgradeType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeUpgradeType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeStellarValueType method</summary>
        public async Task<Stellar.StellarValueTypeEncodeResponse> EncodeStellarValueType(Stellar.StellarValueTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeStellarValueType request");
                return _service.EncodeStellarValueType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeStellarValueType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeStellarValueType method</summary>
        public async Task<Stellar.StellarValueTypeDecodeResponse> DecodeStellarValueType(Stellar.StellarValueTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeStellarValueType request");
                return _service.DecodeStellarValueType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeStellarValueType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerCloseValueSignature method</summary>
        public async Task<Stellar.LedgerCloseValueSignatureEncodeResponse> EncodeLedgerCloseValueSignature(Stellar.LedgerCloseValueSignatureEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerCloseValueSignature request");
                return _service.EncodeLedgerCloseValueSignature(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerCloseValueSignature");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerCloseValueSignature method</summary>
        public async Task<Stellar.LedgerCloseValueSignatureDecodeResponse> DecodeLedgerCloseValueSignature(Stellar.LedgerCloseValueSignatureDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerCloseValueSignature request");
                return _service.DecodeLedgerCloseValueSignature(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerCloseValueSignature");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeStellarValue method</summary>
        public async Task<Stellar.StellarValueEncodeResponse> EncodeStellarValue(Stellar.StellarValueEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeStellarValue request");
                return _service.EncodeStellarValue(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeStellarValue");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeStellarValue method</summary>
        public async Task<Stellar.StellarValueDecodeResponse> DecodeStellarValue(Stellar.StellarValueDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeStellarValue request");
                return _service.DecodeStellarValue(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeStellarValue");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerHeaderFlags method</summary>
        public async Task<Stellar.LedgerHeaderFlagsEncodeResponse> EncodeLedgerHeaderFlags(Stellar.LedgerHeaderFlagsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerHeaderFlags request");
                return _service.EncodeLedgerHeaderFlags(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerHeaderFlags");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerHeaderFlags method</summary>
        public async Task<Stellar.LedgerHeaderFlagsDecodeResponse> DecodeLedgerHeaderFlags(Stellar.LedgerHeaderFlagsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerHeaderFlags request");
                return _service.DecodeLedgerHeaderFlags(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerHeaderFlags");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerHeaderExtensionV1 method</summary>
        public async Task<Stellar.LedgerHeaderExtensionV1EncodeResponse> EncodeLedgerHeaderExtensionV1(Stellar.LedgerHeaderExtensionV1EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerHeaderExtensionV1 request");
                return _service.EncodeLedgerHeaderExtensionV1(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerHeaderExtensionV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerHeaderExtensionV1 method</summary>
        public async Task<Stellar.LedgerHeaderExtensionV1DecodeResponse> DecodeLedgerHeaderExtensionV1(Stellar.LedgerHeaderExtensionV1DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerHeaderExtensionV1 request");
                return _service.DecodeLedgerHeaderExtensionV1(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerHeaderExtensionV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerHeader method</summary>
        public async Task<Stellar.LedgerHeaderEncodeResponse> EncodeLedgerHeader(Stellar.LedgerHeaderEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerHeader request");
                return _service.EncodeLedgerHeader(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerHeader");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerHeader method</summary>
        public async Task<Stellar.LedgerHeaderDecodeResponse> DecodeLedgerHeader(Stellar.LedgerHeaderDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerHeader request");
                return _service.DecodeLedgerHeader(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerHeader");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerUpgradeType method</summary>
        public async Task<Stellar.LedgerUpgradeTypeEncodeResponse> EncodeLedgerUpgradeType(Stellar.LedgerUpgradeTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerUpgradeType request");
                return _service.EncodeLedgerUpgradeType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerUpgradeType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerUpgradeType method</summary>
        public async Task<Stellar.LedgerUpgradeTypeDecodeResponse> DecodeLedgerUpgradeType(Stellar.LedgerUpgradeTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerUpgradeType request");
                return _service.DecodeLedgerUpgradeType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerUpgradeType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeConfigUpgradeSetKey method</summary>
        public async Task<Stellar.ConfigUpgradeSetKeyEncodeResponse> EncodeConfigUpgradeSetKey(Stellar.ConfigUpgradeSetKeyEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeConfigUpgradeSetKey request");
                return _service.EncodeConfigUpgradeSetKey(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeConfigUpgradeSetKey");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeConfigUpgradeSetKey method</summary>
        public async Task<Stellar.ConfigUpgradeSetKeyDecodeResponse> DecodeConfigUpgradeSetKey(Stellar.ConfigUpgradeSetKeyDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeConfigUpgradeSetKey request");
                return _service.DecodeConfigUpgradeSetKey(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeConfigUpgradeSetKey");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerUpgrade method</summary>
        public async Task<Stellar.LedgerUpgradeEncodeResponse> EncodeLedgerUpgrade(Stellar.LedgerUpgradeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerUpgrade request");
                return _service.EncodeLedgerUpgrade(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerUpgrade");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerUpgrade method</summary>
        public async Task<Stellar.LedgerUpgradeDecodeResponse> DecodeLedgerUpgrade(Stellar.LedgerUpgradeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerUpgrade request");
                return _service.DecodeLedgerUpgrade(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerUpgrade");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeConfigUpgradeSet method</summary>
        public async Task<Stellar.ConfigUpgradeSetEncodeResponse> EncodeConfigUpgradeSet(Stellar.ConfigUpgradeSetEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeConfigUpgradeSet request");
                return _service.EncodeConfigUpgradeSet(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeConfigUpgradeSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeConfigUpgradeSet method</summary>
        public async Task<Stellar.ConfigUpgradeSetDecodeResponse> DecodeConfigUpgradeSet(Stellar.ConfigUpgradeSetDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeConfigUpgradeSet request");
                return _service.DecodeConfigUpgradeSet(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeConfigUpgradeSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTxSetComponentType method</summary>
        public async Task<Stellar.TxSetComponentTypeEncodeResponse> EncodeTxSetComponentType(Stellar.TxSetComponentTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTxSetComponentType request");
                return _service.EncodeTxSetComponentType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTxSetComponentType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTxSetComponentType method</summary>
        public async Task<Stellar.TxSetComponentTypeDecodeResponse> DecodeTxSetComponentType(Stellar.TxSetComponentTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTxSetComponentType request");
                return _service.DecodeTxSetComponentType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTxSetComponentType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTxSetComponent method</summary>
        public async Task<Stellar.TxSetComponentEncodeResponse> EncodeTxSetComponent(Stellar.TxSetComponentEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTxSetComponent request");
                return _service.EncodeTxSetComponent(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTxSetComponent");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTxSetComponent method</summary>
        public async Task<Stellar.TxSetComponentDecodeResponse> DecodeTxSetComponent(Stellar.TxSetComponentDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTxSetComponent request");
                return _service.DecodeTxSetComponent(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTxSetComponent");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionPhase method</summary>
        public async Task<Stellar.TransactionPhaseEncodeResponse> EncodeTransactionPhase(Stellar.TransactionPhaseEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionPhase request");
                return _service.EncodeTransactionPhase(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionPhase");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionPhase method</summary>
        public async Task<Stellar.TransactionPhaseDecodeResponse> DecodeTransactionPhase(Stellar.TransactionPhaseDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionPhase request");
                return _service.DecodeTransactionPhase(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionPhase");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionSet method</summary>
        public async Task<Stellar.TransactionSetEncodeResponse> EncodeTransactionSet(Stellar.TransactionSetEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionSet request");
                return _service.EncodeTransactionSet(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionSet method</summary>
        public async Task<Stellar.TransactionSetDecodeResponse> DecodeTransactionSet(Stellar.TransactionSetDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionSet request");
                return _service.DecodeTransactionSet(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionSetV1 method</summary>
        public async Task<Stellar.TransactionSetV1EncodeResponse> EncodeTransactionSetV1(Stellar.TransactionSetV1EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionSetV1 request");
                return _service.EncodeTransactionSetV1(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionSetV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionSetV1 method</summary>
        public async Task<Stellar.TransactionSetV1DecodeResponse> DecodeTransactionSetV1(Stellar.TransactionSetV1DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionSetV1 request");
                return _service.DecodeTransactionSetV1(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionSetV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeGeneralizedTransactionSet method</summary>
        public async Task<Stellar.GeneralizedTransactionSetEncodeResponse> EncodeGeneralizedTransactionSet(Stellar.GeneralizedTransactionSetEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeGeneralizedTransactionSet request");
                return _service.EncodeGeneralizedTransactionSet(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeGeneralizedTransactionSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeGeneralizedTransactionSet method</summary>
        public async Task<Stellar.GeneralizedTransactionSetDecodeResponse> DecodeGeneralizedTransactionSet(Stellar.GeneralizedTransactionSetDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeGeneralizedTransactionSet request");
                return _service.DecodeGeneralizedTransactionSet(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeGeneralizedTransactionSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionResultPair method</summary>
        public async Task<Stellar.TransactionResultPairEncodeResponse> EncodeTransactionResultPair(Stellar.TransactionResultPairEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionResultPair request");
                return _service.EncodeTransactionResultPair(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionResultPair");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionResultPair method</summary>
        public async Task<Stellar.TransactionResultPairDecodeResponse> DecodeTransactionResultPair(Stellar.TransactionResultPairDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionResultPair request");
                return _service.DecodeTransactionResultPair(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionResultPair");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionResultSet method</summary>
        public async Task<Stellar.TransactionResultSetEncodeResponse> EncodeTransactionResultSet(Stellar.TransactionResultSetEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionResultSet request");
                return _service.EncodeTransactionResultSet(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionResultSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionResultSet method</summary>
        public async Task<Stellar.TransactionResultSetDecodeResponse> DecodeTransactionResultSet(Stellar.TransactionResultSetDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionResultSet request");
                return _service.DecodeTransactionResultSet(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionResultSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionHistoryEntry method</summary>
        public async Task<Stellar.TransactionHistoryEntryEncodeResponse> EncodeTransactionHistoryEntry(Stellar.TransactionHistoryEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionHistoryEntry request");
                return _service.EncodeTransactionHistoryEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionHistoryEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionHistoryEntry method</summary>
        public async Task<Stellar.TransactionHistoryEntryDecodeResponse> DecodeTransactionHistoryEntry(Stellar.TransactionHistoryEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionHistoryEntry request");
                return _service.DecodeTransactionHistoryEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionHistoryEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionHistoryResultEntry method</summary>
        public async Task<Stellar.TransactionHistoryResultEntryEncodeResponse> EncodeTransactionHistoryResultEntry(Stellar.TransactionHistoryResultEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionHistoryResultEntry request");
                return _service.EncodeTransactionHistoryResultEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionHistoryResultEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionHistoryResultEntry method</summary>
        public async Task<Stellar.TransactionHistoryResultEntryDecodeResponse> DecodeTransactionHistoryResultEntry(Stellar.TransactionHistoryResultEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionHistoryResultEntry request");
                return _service.DecodeTransactionHistoryResultEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionHistoryResultEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerHeaderHistoryEntry method</summary>
        public async Task<Stellar.LedgerHeaderHistoryEntryEncodeResponse> EncodeLedgerHeaderHistoryEntry(Stellar.LedgerHeaderHistoryEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerHeaderHistoryEntry request");
                return _service.EncodeLedgerHeaderHistoryEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerHeaderHistoryEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerHeaderHistoryEntry method</summary>
        public async Task<Stellar.LedgerHeaderHistoryEntryDecodeResponse> DecodeLedgerHeaderHistoryEntry(Stellar.LedgerHeaderHistoryEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerHeaderHistoryEntry request");
                return _service.DecodeLedgerHeaderHistoryEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerHeaderHistoryEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerSCPMessages method</summary>
        public async Task<Stellar.LedgerSCPMessagesEncodeResponse> EncodeLedgerSCPMessages(Stellar.LedgerSCPMessagesEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerSCPMessages request");
                return _service.EncodeLedgerSCPMessages(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerSCPMessages");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerSCPMessages method</summary>
        public async Task<Stellar.LedgerSCPMessagesDecodeResponse> DecodeLedgerSCPMessages(Stellar.LedgerSCPMessagesDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerSCPMessages request");
                return _service.DecodeLedgerSCPMessages(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerSCPMessages");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCPHistoryEntryV0 method</summary>
        public async Task<Stellar.SCPHistoryEntryV0EncodeResponse> EncodeSCPHistoryEntryV0(Stellar.SCPHistoryEntryV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCPHistoryEntryV0 request");
                return _service.EncodeSCPHistoryEntryV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCPHistoryEntryV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCPHistoryEntryV0 method</summary>
        public async Task<Stellar.SCPHistoryEntryV0DecodeResponse> DecodeSCPHistoryEntryV0(Stellar.SCPHistoryEntryV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCPHistoryEntryV0 request");
                return _service.DecodeSCPHistoryEntryV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCPHistoryEntryV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCPHistoryEntry method</summary>
        public async Task<Stellar.SCPHistoryEntryEncodeResponse> EncodeSCPHistoryEntry(Stellar.SCPHistoryEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCPHistoryEntry request");
                return _service.EncodeSCPHistoryEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCPHistoryEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCPHistoryEntry method</summary>
        public async Task<Stellar.SCPHistoryEntryDecodeResponse> DecodeSCPHistoryEntry(Stellar.SCPHistoryEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCPHistoryEntry request");
                return _service.DecodeSCPHistoryEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCPHistoryEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerEntryChangeType method</summary>
        public async Task<Stellar.LedgerEntryChangeTypeEncodeResponse> EncodeLedgerEntryChangeType(Stellar.LedgerEntryChangeTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerEntryChangeType request");
                return _service.EncodeLedgerEntryChangeType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerEntryChangeType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerEntryChangeType method</summary>
        public async Task<Stellar.LedgerEntryChangeTypeDecodeResponse> DecodeLedgerEntryChangeType(Stellar.LedgerEntryChangeTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerEntryChangeType request");
                return _service.DecodeLedgerEntryChangeType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerEntryChangeType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerEntryChange method</summary>
        public async Task<Stellar.LedgerEntryChangeEncodeResponse> EncodeLedgerEntryChange(Stellar.LedgerEntryChangeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerEntryChange request");
                return _service.EncodeLedgerEntryChange(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerEntryChange");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerEntryChange method</summary>
        public async Task<Stellar.LedgerEntryChangeDecodeResponse> DecodeLedgerEntryChange(Stellar.LedgerEntryChangeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerEntryChange request");
                return _service.DecodeLedgerEntryChange(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerEntryChange");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerEntryChanges method</summary>
        public async Task<Stellar.LedgerEntryChangesEncodeResponse> EncodeLedgerEntryChanges(Stellar.LedgerEntryChangesEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerEntryChanges request");
                return _service.EncodeLedgerEntryChanges(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerEntryChanges");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerEntryChanges method</summary>
        public async Task<Stellar.LedgerEntryChangesDecodeResponse> DecodeLedgerEntryChanges(Stellar.LedgerEntryChangesDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerEntryChanges request");
                return _service.DecodeLedgerEntryChanges(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerEntryChanges");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeOperationMeta method</summary>
        public async Task<Stellar.OperationMetaEncodeResponse> EncodeOperationMeta(Stellar.OperationMetaEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeOperationMeta request");
                return _service.EncodeOperationMeta(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeOperationMeta");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeOperationMeta method</summary>
        public async Task<Stellar.OperationMetaDecodeResponse> DecodeOperationMeta(Stellar.OperationMetaDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeOperationMeta request");
                return _service.DecodeOperationMeta(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeOperationMeta");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionMetaV1 method</summary>
        public async Task<Stellar.TransactionMetaV1EncodeResponse> EncodeTransactionMetaV1(Stellar.TransactionMetaV1EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionMetaV1 request");
                return _service.EncodeTransactionMetaV1(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionMetaV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionMetaV1 method</summary>
        public async Task<Stellar.TransactionMetaV1DecodeResponse> DecodeTransactionMetaV1(Stellar.TransactionMetaV1DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionMetaV1 request");
                return _service.DecodeTransactionMetaV1(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionMetaV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionMetaV2 method</summary>
        public async Task<Stellar.TransactionMetaV2EncodeResponse> EncodeTransactionMetaV2(Stellar.TransactionMetaV2EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionMetaV2 request");
                return _service.EncodeTransactionMetaV2(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionMetaV2");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionMetaV2 method</summary>
        public async Task<Stellar.TransactionMetaV2DecodeResponse> DecodeTransactionMetaV2(Stellar.TransactionMetaV2DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionMetaV2 request");
                return _service.DecodeTransactionMetaV2(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionMetaV2");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeContractEventType method</summary>
        public async Task<Stellar.ContractEventTypeEncodeResponse> EncodeContractEventType(Stellar.ContractEventTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeContractEventType request");
                return _service.EncodeContractEventType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeContractEventType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeContractEventType method</summary>
        public async Task<Stellar.ContractEventTypeDecodeResponse> DecodeContractEventType(Stellar.ContractEventTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeContractEventType request");
                return _service.DecodeContractEventType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeContractEventType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeContractEvent method</summary>
        public async Task<Stellar.ContractEventEncodeResponse> EncodeContractEvent(Stellar.ContractEventEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeContractEvent request");
                return _service.EncodeContractEvent(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeContractEvent");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeContractEvent method</summary>
        public async Task<Stellar.ContractEventDecodeResponse> DecodeContractEvent(Stellar.ContractEventDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeContractEvent request");
                return _service.DecodeContractEvent(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeContractEvent");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeDiagnosticEvent method</summary>
        public async Task<Stellar.DiagnosticEventEncodeResponse> EncodeDiagnosticEvent(Stellar.DiagnosticEventEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeDiagnosticEvent request");
                return _service.EncodeDiagnosticEvent(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeDiagnosticEvent");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeDiagnosticEvent method</summary>
        public async Task<Stellar.DiagnosticEventDecodeResponse> DecodeDiagnosticEvent(Stellar.DiagnosticEventDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeDiagnosticEvent request");
                return _service.DecodeDiagnosticEvent(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeDiagnosticEvent");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeDiagnosticEvents method</summary>
        public async Task<Stellar.DiagnosticEventsEncodeResponse> EncodeDiagnosticEvents(Stellar.DiagnosticEventsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeDiagnosticEvents request");
                return _service.EncodeDiagnosticEvents(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeDiagnosticEvents");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeDiagnosticEvents method</summary>
        public async Task<Stellar.DiagnosticEventsDecodeResponse> DecodeDiagnosticEvents(Stellar.DiagnosticEventsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeDiagnosticEvents request");
                return _service.DecodeDiagnosticEvents(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeDiagnosticEvents");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSorobanTransactionMetaExtV1 method</summary>
        public async Task<Stellar.SorobanTransactionMetaExtV1EncodeResponse> EncodeSorobanTransactionMetaExtV1(Stellar.SorobanTransactionMetaExtV1EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSorobanTransactionMetaExtV1 request");
                return _service.EncodeSorobanTransactionMetaExtV1(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSorobanTransactionMetaExtV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSorobanTransactionMetaExtV1 method</summary>
        public async Task<Stellar.SorobanTransactionMetaExtV1DecodeResponse> DecodeSorobanTransactionMetaExtV1(Stellar.SorobanTransactionMetaExtV1DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSorobanTransactionMetaExtV1 request");
                return _service.DecodeSorobanTransactionMetaExtV1(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSorobanTransactionMetaExtV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSorobanTransactionMetaExt method</summary>
        public async Task<Stellar.SorobanTransactionMetaExtEncodeResponse> EncodeSorobanTransactionMetaExt(Stellar.SorobanTransactionMetaExtEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSorobanTransactionMetaExt request");
                return _service.EncodeSorobanTransactionMetaExt(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSorobanTransactionMetaExt");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSorobanTransactionMetaExt method</summary>
        public async Task<Stellar.SorobanTransactionMetaExtDecodeResponse> DecodeSorobanTransactionMetaExt(Stellar.SorobanTransactionMetaExtDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSorobanTransactionMetaExt request");
                return _service.DecodeSorobanTransactionMetaExt(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSorobanTransactionMetaExt");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSorobanTransactionMeta method</summary>
        public async Task<Stellar.SorobanTransactionMetaEncodeResponse> EncodeSorobanTransactionMeta(Stellar.SorobanTransactionMetaEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSorobanTransactionMeta request");
                return _service.EncodeSorobanTransactionMeta(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSorobanTransactionMeta");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSorobanTransactionMeta method</summary>
        public async Task<Stellar.SorobanTransactionMetaDecodeResponse> DecodeSorobanTransactionMeta(Stellar.SorobanTransactionMetaDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSorobanTransactionMeta request");
                return _service.DecodeSorobanTransactionMeta(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSorobanTransactionMeta");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionMetaV3 method</summary>
        public async Task<Stellar.TransactionMetaV3EncodeResponse> EncodeTransactionMetaV3(Stellar.TransactionMetaV3EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionMetaV3 request");
                return _service.EncodeTransactionMetaV3(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionMetaV3");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionMetaV3 method</summary>
        public async Task<Stellar.TransactionMetaV3DecodeResponse> DecodeTransactionMetaV3(Stellar.TransactionMetaV3DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionMetaV3 request");
                return _service.DecodeTransactionMetaV3(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionMetaV3");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeInvokeHostFunctionSuccessPreImage method</summary>
        public async Task<Stellar.InvokeHostFunctionSuccessPreImageEncodeResponse> EncodeInvokeHostFunctionSuccessPreImage(Stellar.InvokeHostFunctionSuccessPreImageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeInvokeHostFunctionSuccessPreImage request");
                return _service.EncodeInvokeHostFunctionSuccessPreImage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeInvokeHostFunctionSuccessPreImage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeInvokeHostFunctionSuccessPreImage method</summary>
        public async Task<Stellar.InvokeHostFunctionSuccessPreImageDecodeResponse> DecodeInvokeHostFunctionSuccessPreImage(Stellar.InvokeHostFunctionSuccessPreImageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeInvokeHostFunctionSuccessPreImage request");
                return _service.DecodeInvokeHostFunctionSuccessPreImage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeInvokeHostFunctionSuccessPreImage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionMeta method</summary>
        public async Task<Stellar.TransactionMetaEncodeResponse> EncodeTransactionMeta(Stellar.TransactionMetaEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionMeta request");
                return _service.EncodeTransactionMeta(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionMeta");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionMeta method</summary>
        public async Task<Stellar.TransactionMetaDecodeResponse> DecodeTransactionMeta(Stellar.TransactionMetaDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionMeta request");
                return _service.DecodeTransactionMeta(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionMeta");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionResultMeta method</summary>
        public async Task<Stellar.TransactionResultMetaEncodeResponse> EncodeTransactionResultMeta(Stellar.TransactionResultMetaEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionResultMeta request");
                return _service.EncodeTransactionResultMeta(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionResultMeta");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionResultMeta method</summary>
        public async Task<Stellar.TransactionResultMetaDecodeResponse> DecodeTransactionResultMeta(Stellar.TransactionResultMetaDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionResultMeta request");
                return _service.DecodeTransactionResultMeta(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionResultMeta");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeUpgradeEntryMeta method</summary>
        public async Task<Stellar.UpgradeEntryMetaEncodeResponse> EncodeUpgradeEntryMeta(Stellar.UpgradeEntryMetaEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeUpgradeEntryMeta request");
                return _service.EncodeUpgradeEntryMeta(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeUpgradeEntryMeta");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeUpgradeEntryMeta method</summary>
        public async Task<Stellar.UpgradeEntryMetaDecodeResponse> DecodeUpgradeEntryMeta(Stellar.UpgradeEntryMetaDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeUpgradeEntryMeta request");
                return _service.DecodeUpgradeEntryMeta(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeUpgradeEntryMeta");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerCloseMetaV0 method</summary>
        public async Task<Stellar.LedgerCloseMetaV0EncodeResponse> EncodeLedgerCloseMetaV0(Stellar.LedgerCloseMetaV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerCloseMetaV0 request");
                return _service.EncodeLedgerCloseMetaV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerCloseMetaV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerCloseMetaV0 method</summary>
        public async Task<Stellar.LedgerCloseMetaV0DecodeResponse> DecodeLedgerCloseMetaV0(Stellar.LedgerCloseMetaV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerCloseMetaV0 request");
                return _service.DecodeLedgerCloseMetaV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerCloseMetaV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerCloseMetaExtV1 method</summary>
        public async Task<Stellar.LedgerCloseMetaExtV1EncodeResponse> EncodeLedgerCloseMetaExtV1(Stellar.LedgerCloseMetaExtV1EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerCloseMetaExtV1 request");
                return _service.EncodeLedgerCloseMetaExtV1(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerCloseMetaExtV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerCloseMetaExtV1 method</summary>
        public async Task<Stellar.LedgerCloseMetaExtV1DecodeResponse> DecodeLedgerCloseMetaExtV1(Stellar.LedgerCloseMetaExtV1DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerCloseMetaExtV1 request");
                return _service.DecodeLedgerCloseMetaExtV1(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerCloseMetaExtV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerCloseMetaExt method</summary>
        public async Task<Stellar.LedgerCloseMetaExtEncodeResponse> EncodeLedgerCloseMetaExt(Stellar.LedgerCloseMetaExtEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerCloseMetaExt request");
                return _service.EncodeLedgerCloseMetaExt(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerCloseMetaExt");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerCloseMetaExt method</summary>
        public async Task<Stellar.LedgerCloseMetaExtDecodeResponse> DecodeLedgerCloseMetaExt(Stellar.LedgerCloseMetaExtDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerCloseMetaExt request");
                return _service.DecodeLedgerCloseMetaExt(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerCloseMetaExt");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerCloseMetaV1 method</summary>
        public async Task<Stellar.LedgerCloseMetaV1EncodeResponse> EncodeLedgerCloseMetaV1(Stellar.LedgerCloseMetaV1EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerCloseMetaV1 request");
                return _service.EncodeLedgerCloseMetaV1(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerCloseMetaV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerCloseMetaV1 method</summary>
        public async Task<Stellar.LedgerCloseMetaV1DecodeResponse> DecodeLedgerCloseMetaV1(Stellar.LedgerCloseMetaV1DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerCloseMetaV1 request");
                return _service.DecodeLedgerCloseMetaV1(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerCloseMetaV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerCloseMeta method</summary>
        public async Task<Stellar.LedgerCloseMetaEncodeResponse> EncodeLedgerCloseMeta(Stellar.LedgerCloseMetaEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerCloseMeta request");
                return _service.EncodeLedgerCloseMeta(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerCloseMeta");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerCloseMeta method</summary>
        public async Task<Stellar.LedgerCloseMetaDecodeResponse> DecodeLedgerCloseMeta(Stellar.LedgerCloseMetaDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerCloseMeta request");
                return _service.DecodeLedgerCloseMeta(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerCloseMeta");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeErrorCode method</summary>
        public async Task<Stellar.ErrorCodeEncodeResponse> EncodeErrorCode(Stellar.ErrorCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeErrorCode request");
                return _service.EncodeErrorCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeErrorCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeErrorCode method</summary>
        public async Task<Stellar.ErrorCodeDecodeResponse> DecodeErrorCode(Stellar.ErrorCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeErrorCode request");
                return _service.DecodeErrorCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeErrorCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeError method</summary>
        public async Task<Stellar.ErrorEncodeResponse> EncodeError(Stellar.ErrorEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeError request");
                return _service.EncodeError(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeError");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeError method</summary>
        public async Task<Stellar.ErrorDecodeResponse> DecodeError(Stellar.ErrorDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeError request");
                return _service.DecodeError(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeError");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSendMore method</summary>
        public async Task<Stellar.SendMoreEncodeResponse> EncodeSendMore(Stellar.SendMoreEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSendMore request");
                return _service.EncodeSendMore(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSendMore");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSendMore method</summary>
        public async Task<Stellar.SendMoreDecodeResponse> DecodeSendMore(Stellar.SendMoreDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSendMore request");
                return _service.DecodeSendMore(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSendMore");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSendMoreExtended method</summary>
        public async Task<Stellar.SendMoreExtendedEncodeResponse> EncodeSendMoreExtended(Stellar.SendMoreExtendedEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSendMoreExtended request");
                return _service.EncodeSendMoreExtended(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSendMoreExtended");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSendMoreExtended method</summary>
        public async Task<Stellar.SendMoreExtendedDecodeResponse> DecodeSendMoreExtended(Stellar.SendMoreExtendedDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSendMoreExtended request");
                return _service.DecodeSendMoreExtended(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSendMoreExtended");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAuthCert method</summary>
        public async Task<Stellar.AuthCertEncodeResponse> EncodeAuthCert(Stellar.AuthCertEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAuthCert request");
                return _service.EncodeAuthCert(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAuthCert");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAuthCert method</summary>
        public async Task<Stellar.AuthCertDecodeResponse> DecodeAuthCert(Stellar.AuthCertDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAuthCert request");
                return _service.DecodeAuthCert(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAuthCert");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeHello method</summary>
        public async Task<Stellar.HelloEncodeResponse> EncodeHello(Stellar.HelloEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeHello request");
                return _service.EncodeHello(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeHello");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeHello method</summary>
        public async Task<Stellar.HelloDecodeResponse> DecodeHello(Stellar.HelloDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeHello request");
                return _service.DecodeHello(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeHello");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAuth method</summary>
        public async Task<Stellar.AuthEncodeResponse> EncodeAuth(Stellar.AuthEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAuth request");
                return _service.EncodeAuth(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAuth");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAuth method</summary>
        public async Task<Stellar.AuthDecodeResponse> DecodeAuth(Stellar.AuthDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAuth request");
                return _service.DecodeAuth(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAuth");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeIPAddrType method</summary>
        public async Task<Stellar.IPAddrTypeEncodeResponse> EncodeIPAddrType(Stellar.IPAddrTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeIPAddrType request");
                return _service.EncodeIPAddrType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeIPAddrType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeIPAddrType method</summary>
        public async Task<Stellar.IPAddrTypeDecodeResponse> DecodeIPAddrType(Stellar.IPAddrTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeIPAddrType request");
                return _service.DecodeIPAddrType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeIPAddrType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePeerAddress method</summary>
        public async Task<Stellar.PeerAddressEncodeResponse> EncodePeerAddress(Stellar.PeerAddressEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePeerAddress request");
                return _service.EncodePeerAddress(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePeerAddress");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePeerAddress method</summary>
        public async Task<Stellar.PeerAddressDecodeResponse> DecodePeerAddress(Stellar.PeerAddressDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePeerAddress request");
                return _service.DecodePeerAddress(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePeerAddress");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeMessageType method</summary>
        public async Task<Stellar.MessageTypeEncodeResponse> EncodeMessageType(Stellar.MessageTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeMessageType request");
                return _service.EncodeMessageType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeMessageType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeMessageType method</summary>
        public async Task<Stellar.MessageTypeDecodeResponse> DecodeMessageType(Stellar.MessageTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeMessageType request");
                return _service.DecodeMessageType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeMessageType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeDontHave method</summary>
        public async Task<Stellar.DontHaveEncodeResponse> EncodeDontHave(Stellar.DontHaveEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeDontHave request");
                return _service.EncodeDontHave(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeDontHave");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeDontHave method</summary>
        public async Task<Stellar.DontHaveDecodeResponse> DecodeDontHave(Stellar.DontHaveDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeDontHave request");
                return _service.DecodeDontHave(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeDontHave");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSurveyMessageCommandType method</summary>
        public async Task<Stellar.SurveyMessageCommandTypeEncodeResponse> EncodeSurveyMessageCommandType(Stellar.SurveyMessageCommandTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSurveyMessageCommandType request");
                return _service.EncodeSurveyMessageCommandType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSurveyMessageCommandType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSurveyMessageCommandType method</summary>
        public async Task<Stellar.SurveyMessageCommandTypeDecodeResponse> DecodeSurveyMessageCommandType(Stellar.SurveyMessageCommandTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSurveyMessageCommandType request");
                return _service.DecodeSurveyMessageCommandType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSurveyMessageCommandType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSurveyMessageResponseType method</summary>
        public async Task<Stellar.SurveyMessageResponseTypeEncodeResponse> EncodeSurveyMessageResponseType(Stellar.SurveyMessageResponseTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSurveyMessageResponseType request");
                return _service.EncodeSurveyMessageResponseType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSurveyMessageResponseType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSurveyMessageResponseType method</summary>
        public async Task<Stellar.SurveyMessageResponseTypeDecodeResponse> DecodeSurveyMessageResponseType(Stellar.SurveyMessageResponseTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSurveyMessageResponseType request");
                return _service.DecodeSurveyMessageResponseType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSurveyMessageResponseType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTimeSlicedSurveyStartCollectingMessage method</summary>
        public async Task<Stellar.TimeSlicedSurveyStartCollectingMessageEncodeResponse> EncodeTimeSlicedSurveyStartCollectingMessage(Stellar.TimeSlicedSurveyStartCollectingMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTimeSlicedSurveyStartCollectingMessage request");
                return _service.EncodeTimeSlicedSurveyStartCollectingMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTimeSlicedSurveyStartCollectingMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTimeSlicedSurveyStartCollectingMessage method</summary>
        public async Task<Stellar.TimeSlicedSurveyStartCollectingMessageDecodeResponse> DecodeTimeSlicedSurveyStartCollectingMessage(Stellar.TimeSlicedSurveyStartCollectingMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTimeSlicedSurveyStartCollectingMessage request");
                return _service.DecodeTimeSlicedSurveyStartCollectingMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTimeSlicedSurveyStartCollectingMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSignedTimeSlicedSurveyStartCollectingMessage method</summary>
        public async Task<Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeResponse> EncodeSignedTimeSlicedSurveyStartCollectingMessage(Stellar.SignedTimeSlicedSurveyStartCollectingMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSignedTimeSlicedSurveyStartCollectingMessage request");
                return _service.EncodeSignedTimeSlicedSurveyStartCollectingMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSignedTimeSlicedSurveyStartCollectingMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSignedTimeSlicedSurveyStartCollectingMessage method</summary>
        public async Task<Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeResponse> DecodeSignedTimeSlicedSurveyStartCollectingMessage(Stellar.SignedTimeSlicedSurveyStartCollectingMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSignedTimeSlicedSurveyStartCollectingMessage request");
                return _service.DecodeSignedTimeSlicedSurveyStartCollectingMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSignedTimeSlicedSurveyStartCollectingMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTimeSlicedSurveyStopCollectingMessage method</summary>
        public async Task<Stellar.TimeSlicedSurveyStopCollectingMessageEncodeResponse> EncodeTimeSlicedSurveyStopCollectingMessage(Stellar.TimeSlicedSurveyStopCollectingMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTimeSlicedSurveyStopCollectingMessage request");
                return _service.EncodeTimeSlicedSurveyStopCollectingMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTimeSlicedSurveyStopCollectingMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTimeSlicedSurveyStopCollectingMessage method</summary>
        public async Task<Stellar.TimeSlicedSurveyStopCollectingMessageDecodeResponse> DecodeTimeSlicedSurveyStopCollectingMessage(Stellar.TimeSlicedSurveyStopCollectingMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTimeSlicedSurveyStopCollectingMessage request");
                return _service.DecodeTimeSlicedSurveyStopCollectingMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTimeSlicedSurveyStopCollectingMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSignedTimeSlicedSurveyStopCollectingMessage method</summary>
        public async Task<Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeResponse> EncodeSignedTimeSlicedSurveyStopCollectingMessage(Stellar.SignedTimeSlicedSurveyStopCollectingMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSignedTimeSlicedSurveyStopCollectingMessage request");
                return _service.EncodeSignedTimeSlicedSurveyStopCollectingMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSignedTimeSlicedSurveyStopCollectingMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSignedTimeSlicedSurveyStopCollectingMessage method</summary>
        public async Task<Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeResponse> DecodeSignedTimeSlicedSurveyStopCollectingMessage(Stellar.SignedTimeSlicedSurveyStopCollectingMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSignedTimeSlicedSurveyStopCollectingMessage request");
                return _service.DecodeSignedTimeSlicedSurveyStopCollectingMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSignedTimeSlicedSurveyStopCollectingMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSurveyRequestMessage method</summary>
        public async Task<Stellar.SurveyRequestMessageEncodeResponse> EncodeSurveyRequestMessage(Stellar.SurveyRequestMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSurveyRequestMessage request");
                return _service.EncodeSurveyRequestMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSurveyRequestMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSurveyRequestMessage method</summary>
        public async Task<Stellar.SurveyRequestMessageDecodeResponse> DecodeSurveyRequestMessage(Stellar.SurveyRequestMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSurveyRequestMessage request");
                return _service.DecodeSurveyRequestMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSurveyRequestMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTimeSlicedSurveyRequestMessage method</summary>
        public async Task<Stellar.TimeSlicedSurveyRequestMessageEncodeResponse> EncodeTimeSlicedSurveyRequestMessage(Stellar.TimeSlicedSurveyRequestMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTimeSlicedSurveyRequestMessage request");
                return _service.EncodeTimeSlicedSurveyRequestMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTimeSlicedSurveyRequestMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTimeSlicedSurveyRequestMessage method</summary>
        public async Task<Stellar.TimeSlicedSurveyRequestMessageDecodeResponse> DecodeTimeSlicedSurveyRequestMessage(Stellar.TimeSlicedSurveyRequestMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTimeSlicedSurveyRequestMessage request");
                return _service.DecodeTimeSlicedSurveyRequestMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTimeSlicedSurveyRequestMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSignedSurveyRequestMessage method</summary>
        public async Task<Stellar.SignedSurveyRequestMessageEncodeResponse> EncodeSignedSurveyRequestMessage(Stellar.SignedSurveyRequestMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSignedSurveyRequestMessage request");
                return _service.EncodeSignedSurveyRequestMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSignedSurveyRequestMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSignedSurveyRequestMessage method</summary>
        public async Task<Stellar.SignedSurveyRequestMessageDecodeResponse> DecodeSignedSurveyRequestMessage(Stellar.SignedSurveyRequestMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSignedSurveyRequestMessage request");
                return _service.DecodeSignedSurveyRequestMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSignedSurveyRequestMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSignedTimeSlicedSurveyRequestMessage method</summary>
        public async Task<Stellar.SignedTimeSlicedSurveyRequestMessageEncodeResponse> EncodeSignedTimeSlicedSurveyRequestMessage(Stellar.SignedTimeSlicedSurveyRequestMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSignedTimeSlicedSurveyRequestMessage request");
                return _service.EncodeSignedTimeSlicedSurveyRequestMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSignedTimeSlicedSurveyRequestMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSignedTimeSlicedSurveyRequestMessage method</summary>
        public async Task<Stellar.SignedTimeSlicedSurveyRequestMessageDecodeResponse> DecodeSignedTimeSlicedSurveyRequestMessage(Stellar.SignedTimeSlicedSurveyRequestMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSignedTimeSlicedSurveyRequestMessage request");
                return _service.DecodeSignedTimeSlicedSurveyRequestMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSignedTimeSlicedSurveyRequestMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeEncryptedBody method</summary>
        public async Task<Stellar.EncryptedBodyEncodeResponse> EncodeEncryptedBody(Stellar.EncryptedBodyEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeEncryptedBody request");
                return _service.EncodeEncryptedBody(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeEncryptedBody");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeEncryptedBody method</summary>
        public async Task<Stellar.EncryptedBodyDecodeResponse> DecodeEncryptedBody(Stellar.EncryptedBodyDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeEncryptedBody request");
                return _service.DecodeEncryptedBody(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeEncryptedBody");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSurveyResponseMessage method</summary>
        public async Task<Stellar.SurveyResponseMessageEncodeResponse> EncodeSurveyResponseMessage(Stellar.SurveyResponseMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSurveyResponseMessage request");
                return _service.EncodeSurveyResponseMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSurveyResponseMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSurveyResponseMessage method</summary>
        public async Task<Stellar.SurveyResponseMessageDecodeResponse> DecodeSurveyResponseMessage(Stellar.SurveyResponseMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSurveyResponseMessage request");
                return _service.DecodeSurveyResponseMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSurveyResponseMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTimeSlicedSurveyResponseMessage method</summary>
        public async Task<Stellar.TimeSlicedSurveyResponseMessageEncodeResponse> EncodeTimeSlicedSurveyResponseMessage(Stellar.TimeSlicedSurveyResponseMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTimeSlicedSurveyResponseMessage request");
                return _service.EncodeTimeSlicedSurveyResponseMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTimeSlicedSurveyResponseMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTimeSlicedSurveyResponseMessage method</summary>
        public async Task<Stellar.TimeSlicedSurveyResponseMessageDecodeResponse> DecodeTimeSlicedSurveyResponseMessage(Stellar.TimeSlicedSurveyResponseMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTimeSlicedSurveyResponseMessage request");
                return _service.DecodeTimeSlicedSurveyResponseMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTimeSlicedSurveyResponseMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSignedSurveyResponseMessage method</summary>
        public async Task<Stellar.SignedSurveyResponseMessageEncodeResponse> EncodeSignedSurveyResponseMessage(Stellar.SignedSurveyResponseMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSignedSurveyResponseMessage request");
                return _service.EncodeSignedSurveyResponseMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSignedSurveyResponseMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSignedSurveyResponseMessage method</summary>
        public async Task<Stellar.SignedSurveyResponseMessageDecodeResponse> DecodeSignedSurveyResponseMessage(Stellar.SignedSurveyResponseMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSignedSurveyResponseMessage request");
                return _service.DecodeSignedSurveyResponseMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSignedSurveyResponseMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSignedTimeSlicedSurveyResponseMessage method</summary>
        public async Task<Stellar.SignedTimeSlicedSurveyResponseMessageEncodeResponse> EncodeSignedTimeSlicedSurveyResponseMessage(Stellar.SignedTimeSlicedSurveyResponseMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSignedTimeSlicedSurveyResponseMessage request");
                return _service.EncodeSignedTimeSlicedSurveyResponseMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSignedTimeSlicedSurveyResponseMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSignedTimeSlicedSurveyResponseMessage method</summary>
        public async Task<Stellar.SignedTimeSlicedSurveyResponseMessageDecodeResponse> DecodeSignedTimeSlicedSurveyResponseMessage(Stellar.SignedTimeSlicedSurveyResponseMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSignedTimeSlicedSurveyResponseMessage request");
                return _service.DecodeSignedTimeSlicedSurveyResponseMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSignedTimeSlicedSurveyResponseMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePeerStats method</summary>
        public async Task<Stellar.PeerStatsEncodeResponse> EncodePeerStats(Stellar.PeerStatsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePeerStats request");
                return _service.EncodePeerStats(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePeerStats");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePeerStats method</summary>
        public async Task<Stellar.PeerStatsDecodeResponse> DecodePeerStats(Stellar.PeerStatsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePeerStats request");
                return _service.DecodePeerStats(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePeerStats");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePeerStatList method</summary>
        public async Task<Stellar.PeerStatListEncodeResponse> EncodePeerStatList(Stellar.PeerStatListEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePeerStatList request");
                return _service.EncodePeerStatList(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePeerStatList");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePeerStatList method</summary>
        public async Task<Stellar.PeerStatListDecodeResponse> DecodePeerStatList(Stellar.PeerStatListDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePeerStatList request");
                return _service.DecodePeerStatList(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePeerStatList");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTimeSlicedNodeData method</summary>
        public async Task<Stellar.TimeSlicedNodeDataEncodeResponse> EncodeTimeSlicedNodeData(Stellar.TimeSlicedNodeDataEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTimeSlicedNodeData request");
                return _service.EncodeTimeSlicedNodeData(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTimeSlicedNodeData");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTimeSlicedNodeData method</summary>
        public async Task<Stellar.TimeSlicedNodeDataDecodeResponse> DecodeTimeSlicedNodeData(Stellar.TimeSlicedNodeDataDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTimeSlicedNodeData request");
                return _service.DecodeTimeSlicedNodeData(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTimeSlicedNodeData");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTimeSlicedPeerData method</summary>
        public async Task<Stellar.TimeSlicedPeerDataEncodeResponse> EncodeTimeSlicedPeerData(Stellar.TimeSlicedPeerDataEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTimeSlicedPeerData request");
                return _service.EncodeTimeSlicedPeerData(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTimeSlicedPeerData");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTimeSlicedPeerData method</summary>
        public async Task<Stellar.TimeSlicedPeerDataDecodeResponse> DecodeTimeSlicedPeerData(Stellar.TimeSlicedPeerDataDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTimeSlicedPeerData request");
                return _service.DecodeTimeSlicedPeerData(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTimeSlicedPeerData");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTimeSlicedPeerDataList method</summary>
        public async Task<Stellar.TimeSlicedPeerDataListEncodeResponse> EncodeTimeSlicedPeerDataList(Stellar.TimeSlicedPeerDataListEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTimeSlicedPeerDataList request");
                return _service.EncodeTimeSlicedPeerDataList(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTimeSlicedPeerDataList");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTimeSlicedPeerDataList method</summary>
        public async Task<Stellar.TimeSlicedPeerDataListDecodeResponse> DecodeTimeSlicedPeerDataList(Stellar.TimeSlicedPeerDataListDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTimeSlicedPeerDataList request");
                return _service.DecodeTimeSlicedPeerDataList(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTimeSlicedPeerDataList");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTopologyResponseBodyV0 method</summary>
        public async Task<Stellar.TopologyResponseBodyV0EncodeResponse> EncodeTopologyResponseBodyV0(Stellar.TopologyResponseBodyV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTopologyResponseBodyV0 request");
                return _service.EncodeTopologyResponseBodyV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTopologyResponseBodyV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTopologyResponseBodyV0 method</summary>
        public async Task<Stellar.TopologyResponseBodyV0DecodeResponse> DecodeTopologyResponseBodyV0(Stellar.TopologyResponseBodyV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTopologyResponseBodyV0 request");
                return _service.DecodeTopologyResponseBodyV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTopologyResponseBodyV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTopologyResponseBodyV1 method</summary>
        public async Task<Stellar.TopologyResponseBodyV1EncodeResponse> EncodeTopologyResponseBodyV1(Stellar.TopologyResponseBodyV1EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTopologyResponseBodyV1 request");
                return _service.EncodeTopologyResponseBodyV1(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTopologyResponseBodyV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTopologyResponseBodyV1 method</summary>
        public async Task<Stellar.TopologyResponseBodyV1DecodeResponse> DecodeTopologyResponseBodyV1(Stellar.TopologyResponseBodyV1DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTopologyResponseBodyV1 request");
                return _service.DecodeTopologyResponseBodyV1(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTopologyResponseBodyV1");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTopologyResponseBodyV2 method</summary>
        public async Task<Stellar.TopologyResponseBodyV2EncodeResponse> EncodeTopologyResponseBodyV2(Stellar.TopologyResponseBodyV2EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTopologyResponseBodyV2 request");
                return _service.EncodeTopologyResponseBodyV2(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTopologyResponseBodyV2");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTopologyResponseBodyV2 method</summary>
        public async Task<Stellar.TopologyResponseBodyV2DecodeResponse> DecodeTopologyResponseBodyV2(Stellar.TopologyResponseBodyV2DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTopologyResponseBodyV2 request");
                return _service.DecodeTopologyResponseBodyV2(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTopologyResponseBodyV2");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSurveyResponseBody method</summary>
        public async Task<Stellar.SurveyResponseBodyEncodeResponse> EncodeSurveyResponseBody(Stellar.SurveyResponseBodyEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSurveyResponseBody request");
                return _service.EncodeSurveyResponseBody(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSurveyResponseBody");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSurveyResponseBody method</summary>
        public async Task<Stellar.SurveyResponseBodyDecodeResponse> DecodeSurveyResponseBody(Stellar.SurveyResponseBodyDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSurveyResponseBody request");
                return _service.DecodeSurveyResponseBody(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSurveyResponseBody");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTxAdvertVector method</summary>
        public async Task<Stellar.TxAdvertVectorEncodeResponse> EncodeTxAdvertVector(Stellar.TxAdvertVectorEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTxAdvertVector request");
                return _service.EncodeTxAdvertVector(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTxAdvertVector");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTxAdvertVector method</summary>
        public async Task<Stellar.TxAdvertVectorDecodeResponse> DecodeTxAdvertVector(Stellar.TxAdvertVectorDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTxAdvertVector request");
                return _service.DecodeTxAdvertVector(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTxAdvertVector");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeFloodAdvert method</summary>
        public async Task<Stellar.FloodAdvertEncodeResponse> EncodeFloodAdvert(Stellar.FloodAdvertEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeFloodAdvert request");
                return _service.EncodeFloodAdvert(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeFloodAdvert");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeFloodAdvert method</summary>
        public async Task<Stellar.FloodAdvertDecodeResponse> DecodeFloodAdvert(Stellar.FloodAdvertDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeFloodAdvert request");
                return _service.DecodeFloodAdvert(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeFloodAdvert");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTxDemandVector method</summary>
        public async Task<Stellar.TxDemandVectorEncodeResponse> EncodeTxDemandVector(Stellar.TxDemandVectorEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTxDemandVector request");
                return _service.EncodeTxDemandVector(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTxDemandVector");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTxDemandVector method</summary>
        public async Task<Stellar.TxDemandVectorDecodeResponse> DecodeTxDemandVector(Stellar.TxDemandVectorDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTxDemandVector request");
                return _service.DecodeTxDemandVector(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTxDemandVector");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeFloodDemand method</summary>
        public async Task<Stellar.FloodDemandEncodeResponse> EncodeFloodDemand(Stellar.FloodDemandEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeFloodDemand request");
                return _service.EncodeFloodDemand(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeFloodDemand");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeFloodDemand method</summary>
        public async Task<Stellar.FloodDemandDecodeResponse> DecodeFloodDemand(Stellar.FloodDemandDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeFloodDemand request");
                return _service.DecodeFloodDemand(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeFloodDemand");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeStellarMessage method</summary>
        public async Task<Stellar.StellarMessageEncodeResponse> EncodeStellarMessage(Stellar.StellarMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeStellarMessage request");
                return _service.EncodeStellarMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeStellarMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeStellarMessage method</summary>
        public async Task<Stellar.StellarMessageDecodeResponse> DecodeStellarMessage(Stellar.StellarMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeStellarMessage request");
                return _service.DecodeStellarMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeStellarMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAuthenticatedMessage method</summary>
        public async Task<Stellar.AuthenticatedMessageEncodeResponse> EncodeAuthenticatedMessage(Stellar.AuthenticatedMessageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAuthenticatedMessage request");
                return _service.EncodeAuthenticatedMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAuthenticatedMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAuthenticatedMessage method</summary>
        public async Task<Stellar.AuthenticatedMessageDecodeResponse> DecodeAuthenticatedMessage(Stellar.AuthenticatedMessageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAuthenticatedMessage request");
                return _service.DecodeAuthenticatedMessage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAuthenticatedMessage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeValue method</summary>
        public async Task<Stellar.ValueEncodeResponse> EncodeValue(Stellar.ValueEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeValue request");
                return _service.EncodeValue(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeValue");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeValue method</summary>
        public async Task<Stellar.ValueDecodeResponse> DecodeValue(Stellar.ValueDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeValue request");
                return _service.DecodeValue(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeValue");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCPBallot method</summary>
        public async Task<Stellar.SCPBallotEncodeResponse> EncodeSCPBallot(Stellar.SCPBallotEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCPBallot request");
                return _service.EncodeSCPBallot(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCPBallot");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCPBallot method</summary>
        public async Task<Stellar.SCPBallotDecodeResponse> DecodeSCPBallot(Stellar.SCPBallotDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCPBallot request");
                return _service.DecodeSCPBallot(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCPBallot");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCPStatementType method</summary>
        public async Task<Stellar.SCPStatementTypeEncodeResponse> EncodeSCPStatementType(Stellar.SCPStatementTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCPStatementType request");
                return _service.EncodeSCPStatementType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCPStatementType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCPStatementType method</summary>
        public async Task<Stellar.SCPStatementTypeDecodeResponse> DecodeSCPStatementType(Stellar.SCPStatementTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCPStatementType request");
                return _service.DecodeSCPStatementType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCPStatementType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCPNomination method</summary>
        public async Task<Stellar.SCPNominationEncodeResponse> EncodeSCPNomination(Stellar.SCPNominationEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCPNomination request");
                return _service.EncodeSCPNomination(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCPNomination");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCPNomination method</summary>
        public async Task<Stellar.SCPNominationDecodeResponse> DecodeSCPNomination(Stellar.SCPNominationDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCPNomination request");
                return _service.DecodeSCPNomination(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCPNomination");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCPStatement method</summary>
        public async Task<Stellar.SCPStatementEncodeResponse> EncodeSCPStatement(Stellar.SCPStatementEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCPStatement request");
                return _service.EncodeSCPStatement(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCPStatement");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCPStatement method</summary>
        public async Task<Stellar.SCPStatementDecodeResponse> DecodeSCPStatement(Stellar.SCPStatementDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCPStatement request");
                return _service.DecodeSCPStatement(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCPStatement");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCPEnvelope method</summary>
        public async Task<Stellar.SCPEnvelopeEncodeResponse> EncodeSCPEnvelope(Stellar.SCPEnvelopeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCPEnvelope request");
                return _service.EncodeSCPEnvelope(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCPEnvelope");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCPEnvelope method</summary>
        public async Task<Stellar.SCPEnvelopeDecodeResponse> DecodeSCPEnvelope(Stellar.SCPEnvelopeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCPEnvelope request");
                return _service.DecodeSCPEnvelope(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCPEnvelope");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSCPQuorumSet method</summary>
        public async Task<Stellar.SCPQuorumSetEncodeResponse> EncodeSCPQuorumSet(Stellar.SCPQuorumSetEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSCPQuorumSet request");
                return _service.EncodeSCPQuorumSet(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSCPQuorumSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSCPQuorumSet method</summary>
        public async Task<Stellar.SCPQuorumSetDecodeResponse> DecodeSCPQuorumSet(Stellar.SCPQuorumSetDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSCPQuorumSet request");
                return _service.DecodeSCPQuorumSet(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSCPQuorumSet");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLiquidityPoolParameters method</summary>
        public async Task<Stellar.LiquidityPoolParametersEncodeResponse> EncodeLiquidityPoolParameters(Stellar.LiquidityPoolParametersEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLiquidityPoolParameters request");
                return _service.EncodeLiquidityPoolParameters(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLiquidityPoolParameters");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLiquidityPoolParameters method</summary>
        public async Task<Stellar.LiquidityPoolParametersDecodeResponse> DecodeLiquidityPoolParameters(Stellar.LiquidityPoolParametersDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLiquidityPoolParameters request");
                return _service.DecodeLiquidityPoolParameters(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLiquidityPoolParameters");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeMuxedAccount method</summary>
        public async Task<Stellar.MuxedAccountEncodeResponse> EncodeMuxedAccount(Stellar.MuxedAccountEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeMuxedAccount request");
                return _service.EncodeMuxedAccount(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeMuxedAccount");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeMuxedAccount method</summary>
        public async Task<Stellar.MuxedAccountDecodeResponse> DecodeMuxedAccount(Stellar.MuxedAccountDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeMuxedAccount request");
                return _service.DecodeMuxedAccount(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeMuxedAccount");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeDecoratedSignature method</summary>
        public async Task<Stellar.DecoratedSignatureEncodeResponse> EncodeDecoratedSignature(Stellar.DecoratedSignatureEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeDecoratedSignature request");
                return _service.EncodeDecoratedSignature(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeDecoratedSignature");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeDecoratedSignature method</summary>
        public async Task<Stellar.DecoratedSignatureDecodeResponse> DecodeDecoratedSignature(Stellar.DecoratedSignatureDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeDecoratedSignature request");
                return _service.DecodeDecoratedSignature(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeDecoratedSignature");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeOperationType method</summary>
        public async Task<Stellar.OperationTypeEncodeResponse> EncodeOperationType(Stellar.OperationTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeOperationType request");
                return _service.EncodeOperationType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeOperationType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeOperationType method</summary>
        public async Task<Stellar.OperationTypeDecodeResponse> DecodeOperationType(Stellar.OperationTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeOperationType request");
                return _service.DecodeOperationType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeOperationType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeCreateAccountOp method</summary>
        public async Task<Stellar.CreateAccountOpEncodeResponse> EncodeCreateAccountOp(Stellar.CreateAccountOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeCreateAccountOp request");
                return _service.EncodeCreateAccountOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeCreateAccountOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeCreateAccountOp method</summary>
        public async Task<Stellar.CreateAccountOpDecodeResponse> DecodeCreateAccountOp(Stellar.CreateAccountOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeCreateAccountOp request");
                return _service.DecodeCreateAccountOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeCreateAccountOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePaymentOp method</summary>
        public async Task<Stellar.PaymentOpEncodeResponse> EncodePaymentOp(Stellar.PaymentOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePaymentOp request");
                return _service.EncodePaymentOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePaymentOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePaymentOp method</summary>
        public async Task<Stellar.PaymentOpDecodeResponse> DecodePaymentOp(Stellar.PaymentOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePaymentOp request");
                return _service.DecodePaymentOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePaymentOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePathPaymentStrictReceiveOp method</summary>
        public async Task<Stellar.PathPaymentStrictReceiveOpEncodeResponse> EncodePathPaymentStrictReceiveOp(Stellar.PathPaymentStrictReceiveOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePathPaymentStrictReceiveOp request");
                return _service.EncodePathPaymentStrictReceiveOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePathPaymentStrictReceiveOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePathPaymentStrictReceiveOp method</summary>
        public async Task<Stellar.PathPaymentStrictReceiveOpDecodeResponse> DecodePathPaymentStrictReceiveOp(Stellar.PathPaymentStrictReceiveOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePathPaymentStrictReceiveOp request");
                return _service.DecodePathPaymentStrictReceiveOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePathPaymentStrictReceiveOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePathPaymentStrictSendOp method</summary>
        public async Task<Stellar.PathPaymentStrictSendOpEncodeResponse> EncodePathPaymentStrictSendOp(Stellar.PathPaymentStrictSendOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePathPaymentStrictSendOp request");
                return _service.EncodePathPaymentStrictSendOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePathPaymentStrictSendOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePathPaymentStrictSendOp method</summary>
        public async Task<Stellar.PathPaymentStrictSendOpDecodeResponse> DecodePathPaymentStrictSendOp(Stellar.PathPaymentStrictSendOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePathPaymentStrictSendOp request");
                return _service.DecodePathPaymentStrictSendOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePathPaymentStrictSendOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeManageSellOfferOp method</summary>
        public async Task<Stellar.ManageSellOfferOpEncodeResponse> EncodeManageSellOfferOp(Stellar.ManageSellOfferOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeManageSellOfferOp request");
                return _service.EncodeManageSellOfferOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeManageSellOfferOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeManageSellOfferOp method</summary>
        public async Task<Stellar.ManageSellOfferOpDecodeResponse> DecodeManageSellOfferOp(Stellar.ManageSellOfferOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeManageSellOfferOp request");
                return _service.DecodeManageSellOfferOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeManageSellOfferOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeManageBuyOfferOp method</summary>
        public async Task<Stellar.ManageBuyOfferOpEncodeResponse> EncodeManageBuyOfferOp(Stellar.ManageBuyOfferOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeManageBuyOfferOp request");
                return _service.EncodeManageBuyOfferOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeManageBuyOfferOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeManageBuyOfferOp method</summary>
        public async Task<Stellar.ManageBuyOfferOpDecodeResponse> DecodeManageBuyOfferOp(Stellar.ManageBuyOfferOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeManageBuyOfferOp request");
                return _service.DecodeManageBuyOfferOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeManageBuyOfferOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeCreatePassiveSellOfferOp method</summary>
        public async Task<Stellar.CreatePassiveSellOfferOpEncodeResponse> EncodeCreatePassiveSellOfferOp(Stellar.CreatePassiveSellOfferOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeCreatePassiveSellOfferOp request");
                return _service.EncodeCreatePassiveSellOfferOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeCreatePassiveSellOfferOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeCreatePassiveSellOfferOp method</summary>
        public async Task<Stellar.CreatePassiveSellOfferOpDecodeResponse> DecodeCreatePassiveSellOfferOp(Stellar.CreatePassiveSellOfferOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeCreatePassiveSellOfferOp request");
                return _service.DecodeCreatePassiveSellOfferOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeCreatePassiveSellOfferOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSetOptionsOp method</summary>
        public async Task<Stellar.SetOptionsOpEncodeResponse> EncodeSetOptionsOp(Stellar.SetOptionsOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSetOptionsOp request");
                return _service.EncodeSetOptionsOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSetOptionsOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSetOptionsOp method</summary>
        public async Task<Stellar.SetOptionsOpDecodeResponse> DecodeSetOptionsOp(Stellar.SetOptionsOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSetOptionsOp request");
                return _service.DecodeSetOptionsOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSetOptionsOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeChangeTrustAsset method</summary>
        public async Task<Stellar.ChangeTrustAssetEncodeResponse> EncodeChangeTrustAsset(Stellar.ChangeTrustAssetEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeChangeTrustAsset request");
                return _service.EncodeChangeTrustAsset(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeChangeTrustAsset");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeChangeTrustAsset method</summary>
        public async Task<Stellar.ChangeTrustAssetDecodeResponse> DecodeChangeTrustAsset(Stellar.ChangeTrustAssetDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeChangeTrustAsset request");
                return _service.DecodeChangeTrustAsset(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeChangeTrustAsset");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeChangeTrustOp method</summary>
        public async Task<Stellar.ChangeTrustOpEncodeResponse> EncodeChangeTrustOp(Stellar.ChangeTrustOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeChangeTrustOp request");
                return _service.EncodeChangeTrustOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeChangeTrustOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeChangeTrustOp method</summary>
        public async Task<Stellar.ChangeTrustOpDecodeResponse> DecodeChangeTrustOp(Stellar.ChangeTrustOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeChangeTrustOp request");
                return _service.DecodeChangeTrustOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeChangeTrustOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAllowTrustOp method</summary>
        public async Task<Stellar.AllowTrustOpEncodeResponse> EncodeAllowTrustOp(Stellar.AllowTrustOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAllowTrustOp request");
                return _service.EncodeAllowTrustOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAllowTrustOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAllowTrustOp method</summary>
        public async Task<Stellar.AllowTrustOpDecodeResponse> DecodeAllowTrustOp(Stellar.AllowTrustOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAllowTrustOp request");
                return _service.DecodeAllowTrustOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAllowTrustOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeManageDataOp method</summary>
        public async Task<Stellar.ManageDataOpEncodeResponse> EncodeManageDataOp(Stellar.ManageDataOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeManageDataOp request");
                return _service.EncodeManageDataOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeManageDataOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeManageDataOp method</summary>
        public async Task<Stellar.ManageDataOpDecodeResponse> DecodeManageDataOp(Stellar.ManageDataOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeManageDataOp request");
                return _service.DecodeManageDataOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeManageDataOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeBumpSequenceOp method</summary>
        public async Task<Stellar.BumpSequenceOpEncodeResponse> EncodeBumpSequenceOp(Stellar.BumpSequenceOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeBumpSequenceOp request");
                return _service.EncodeBumpSequenceOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeBumpSequenceOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeBumpSequenceOp method</summary>
        public async Task<Stellar.BumpSequenceOpDecodeResponse> DecodeBumpSequenceOp(Stellar.BumpSequenceOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeBumpSequenceOp request");
                return _service.DecodeBumpSequenceOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeBumpSequenceOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeCreateClaimableBalanceOp method</summary>
        public async Task<Stellar.CreateClaimableBalanceOpEncodeResponse> EncodeCreateClaimableBalanceOp(Stellar.CreateClaimableBalanceOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeCreateClaimableBalanceOp request");
                return _service.EncodeCreateClaimableBalanceOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeCreateClaimableBalanceOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeCreateClaimableBalanceOp method</summary>
        public async Task<Stellar.CreateClaimableBalanceOpDecodeResponse> DecodeCreateClaimableBalanceOp(Stellar.CreateClaimableBalanceOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeCreateClaimableBalanceOp request");
                return _service.DecodeCreateClaimableBalanceOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeCreateClaimableBalanceOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimClaimableBalanceOp method</summary>
        public async Task<Stellar.ClaimClaimableBalanceOpEncodeResponse> EncodeClaimClaimableBalanceOp(Stellar.ClaimClaimableBalanceOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimClaimableBalanceOp request");
                return _service.EncodeClaimClaimableBalanceOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimClaimableBalanceOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimClaimableBalanceOp method</summary>
        public async Task<Stellar.ClaimClaimableBalanceOpDecodeResponse> DecodeClaimClaimableBalanceOp(Stellar.ClaimClaimableBalanceOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimClaimableBalanceOp request");
                return _service.DecodeClaimClaimableBalanceOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimClaimableBalanceOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeBeginSponsoringFutureReservesOp method</summary>
        public async Task<Stellar.BeginSponsoringFutureReservesOpEncodeResponse> EncodeBeginSponsoringFutureReservesOp(Stellar.BeginSponsoringFutureReservesOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeBeginSponsoringFutureReservesOp request");
                return _service.EncodeBeginSponsoringFutureReservesOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeBeginSponsoringFutureReservesOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeBeginSponsoringFutureReservesOp method</summary>
        public async Task<Stellar.BeginSponsoringFutureReservesOpDecodeResponse> DecodeBeginSponsoringFutureReservesOp(Stellar.BeginSponsoringFutureReservesOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeBeginSponsoringFutureReservesOp request");
                return _service.DecodeBeginSponsoringFutureReservesOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeBeginSponsoringFutureReservesOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeRevokeSponsorshipType method</summary>
        public async Task<Stellar.RevokeSponsorshipTypeEncodeResponse> EncodeRevokeSponsorshipType(Stellar.RevokeSponsorshipTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeRevokeSponsorshipType request");
                return _service.EncodeRevokeSponsorshipType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeRevokeSponsorshipType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeRevokeSponsorshipType method</summary>
        public async Task<Stellar.RevokeSponsorshipTypeDecodeResponse> DecodeRevokeSponsorshipType(Stellar.RevokeSponsorshipTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeRevokeSponsorshipType request");
                return _service.DecodeRevokeSponsorshipType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeRevokeSponsorshipType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeRevokeSponsorshipOp method</summary>
        public async Task<Stellar.RevokeSponsorshipOpEncodeResponse> EncodeRevokeSponsorshipOp(Stellar.RevokeSponsorshipOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeRevokeSponsorshipOp request");
                return _service.EncodeRevokeSponsorshipOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeRevokeSponsorshipOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeRevokeSponsorshipOp method</summary>
        public async Task<Stellar.RevokeSponsorshipOpDecodeResponse> DecodeRevokeSponsorshipOp(Stellar.RevokeSponsorshipOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeRevokeSponsorshipOp request");
                return _service.DecodeRevokeSponsorshipOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeRevokeSponsorshipOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClawbackOp method</summary>
        public async Task<Stellar.ClawbackOpEncodeResponse> EncodeClawbackOp(Stellar.ClawbackOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClawbackOp request");
                return _service.EncodeClawbackOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClawbackOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClawbackOp method</summary>
        public async Task<Stellar.ClawbackOpDecodeResponse> DecodeClawbackOp(Stellar.ClawbackOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClawbackOp request");
                return _service.DecodeClawbackOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClawbackOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClawbackClaimableBalanceOp method</summary>
        public async Task<Stellar.ClawbackClaimableBalanceOpEncodeResponse> EncodeClawbackClaimableBalanceOp(Stellar.ClawbackClaimableBalanceOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClawbackClaimableBalanceOp request");
                return _service.EncodeClawbackClaimableBalanceOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClawbackClaimableBalanceOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClawbackClaimableBalanceOp method</summary>
        public async Task<Stellar.ClawbackClaimableBalanceOpDecodeResponse> DecodeClawbackClaimableBalanceOp(Stellar.ClawbackClaimableBalanceOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClawbackClaimableBalanceOp request");
                return _service.DecodeClawbackClaimableBalanceOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClawbackClaimableBalanceOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSetTrustLineFlagsOp method</summary>
        public async Task<Stellar.SetTrustLineFlagsOpEncodeResponse> EncodeSetTrustLineFlagsOp(Stellar.SetTrustLineFlagsOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSetTrustLineFlagsOp request");
                return _service.EncodeSetTrustLineFlagsOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSetTrustLineFlagsOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSetTrustLineFlagsOp method</summary>
        public async Task<Stellar.SetTrustLineFlagsOpDecodeResponse> DecodeSetTrustLineFlagsOp(Stellar.SetTrustLineFlagsOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSetTrustLineFlagsOp request");
                return _service.DecodeSetTrustLineFlagsOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSetTrustLineFlagsOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLiquidityPoolDepositOp method</summary>
        public async Task<Stellar.LiquidityPoolDepositOpEncodeResponse> EncodeLiquidityPoolDepositOp(Stellar.LiquidityPoolDepositOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLiquidityPoolDepositOp request");
                return _service.EncodeLiquidityPoolDepositOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLiquidityPoolDepositOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLiquidityPoolDepositOp method</summary>
        public async Task<Stellar.LiquidityPoolDepositOpDecodeResponse> DecodeLiquidityPoolDepositOp(Stellar.LiquidityPoolDepositOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLiquidityPoolDepositOp request");
                return _service.DecodeLiquidityPoolDepositOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLiquidityPoolDepositOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLiquidityPoolWithdrawOp method</summary>
        public async Task<Stellar.LiquidityPoolWithdrawOpEncodeResponse> EncodeLiquidityPoolWithdrawOp(Stellar.LiquidityPoolWithdrawOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLiquidityPoolWithdrawOp request");
                return _service.EncodeLiquidityPoolWithdrawOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLiquidityPoolWithdrawOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLiquidityPoolWithdrawOp method</summary>
        public async Task<Stellar.LiquidityPoolWithdrawOpDecodeResponse> DecodeLiquidityPoolWithdrawOp(Stellar.LiquidityPoolWithdrawOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLiquidityPoolWithdrawOp request");
                return _service.DecodeLiquidityPoolWithdrawOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLiquidityPoolWithdrawOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeHostFunctionType method</summary>
        public async Task<Stellar.HostFunctionTypeEncodeResponse> EncodeHostFunctionType(Stellar.HostFunctionTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeHostFunctionType request");
                return _service.EncodeHostFunctionType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeHostFunctionType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeHostFunctionType method</summary>
        public async Task<Stellar.HostFunctionTypeDecodeResponse> DecodeHostFunctionType(Stellar.HostFunctionTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeHostFunctionType request");
                return _service.DecodeHostFunctionType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeHostFunctionType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeContractIDPreimageType method</summary>
        public async Task<Stellar.ContractIDPreimageTypeEncodeResponse> EncodeContractIDPreimageType(Stellar.ContractIDPreimageTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeContractIDPreimageType request");
                return _service.EncodeContractIDPreimageType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeContractIDPreimageType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeContractIDPreimageType method</summary>
        public async Task<Stellar.ContractIDPreimageTypeDecodeResponse> DecodeContractIDPreimageType(Stellar.ContractIDPreimageTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeContractIDPreimageType request");
                return _service.DecodeContractIDPreimageType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeContractIDPreimageType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeContractIDPreimage method</summary>
        public async Task<Stellar.ContractIDPreimageEncodeResponse> EncodeContractIDPreimage(Stellar.ContractIDPreimageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeContractIDPreimage request");
                return _service.EncodeContractIDPreimage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeContractIDPreimage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeContractIDPreimage method</summary>
        public async Task<Stellar.ContractIDPreimageDecodeResponse> DecodeContractIDPreimage(Stellar.ContractIDPreimageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeContractIDPreimage request");
                return _service.DecodeContractIDPreimage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeContractIDPreimage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeCreateContractArgs method</summary>
        public async Task<Stellar.CreateContractArgsEncodeResponse> EncodeCreateContractArgs(Stellar.CreateContractArgsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeCreateContractArgs request");
                return _service.EncodeCreateContractArgs(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeCreateContractArgs");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeCreateContractArgs method</summary>
        public async Task<Stellar.CreateContractArgsDecodeResponse> DecodeCreateContractArgs(Stellar.CreateContractArgsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeCreateContractArgs request");
                return _service.DecodeCreateContractArgs(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeCreateContractArgs");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeCreateContractArgsV2 method</summary>
        public async Task<Stellar.CreateContractArgsV2EncodeResponse> EncodeCreateContractArgsV2(Stellar.CreateContractArgsV2EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeCreateContractArgsV2 request");
                return _service.EncodeCreateContractArgsV2(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeCreateContractArgsV2");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeCreateContractArgsV2 method</summary>
        public async Task<Stellar.CreateContractArgsV2DecodeResponse> DecodeCreateContractArgsV2(Stellar.CreateContractArgsV2DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeCreateContractArgsV2 request");
                return _service.DecodeCreateContractArgsV2(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeCreateContractArgsV2");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeInvokeContractArgs method</summary>
        public async Task<Stellar.InvokeContractArgsEncodeResponse> EncodeInvokeContractArgs(Stellar.InvokeContractArgsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeInvokeContractArgs request");
                return _service.EncodeInvokeContractArgs(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeInvokeContractArgs");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeInvokeContractArgs method</summary>
        public async Task<Stellar.InvokeContractArgsDecodeResponse> DecodeInvokeContractArgs(Stellar.InvokeContractArgsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeInvokeContractArgs request");
                return _service.DecodeInvokeContractArgs(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeInvokeContractArgs");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeHostFunction method</summary>
        public async Task<Stellar.HostFunctionEncodeResponse> EncodeHostFunction(Stellar.HostFunctionEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeHostFunction request");
                return _service.EncodeHostFunction(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeHostFunction");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeHostFunction method</summary>
        public async Task<Stellar.HostFunctionDecodeResponse> DecodeHostFunction(Stellar.HostFunctionDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeHostFunction request");
                return _service.DecodeHostFunction(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeHostFunction");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSorobanAuthorizedFunctionType method</summary>
        public async Task<Stellar.SorobanAuthorizedFunctionTypeEncodeResponse> EncodeSorobanAuthorizedFunctionType(Stellar.SorobanAuthorizedFunctionTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSorobanAuthorizedFunctionType request");
                return _service.EncodeSorobanAuthorizedFunctionType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSorobanAuthorizedFunctionType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSorobanAuthorizedFunctionType method</summary>
        public async Task<Stellar.SorobanAuthorizedFunctionTypeDecodeResponse> DecodeSorobanAuthorizedFunctionType(Stellar.SorobanAuthorizedFunctionTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSorobanAuthorizedFunctionType request");
                return _service.DecodeSorobanAuthorizedFunctionType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSorobanAuthorizedFunctionType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSorobanAuthorizedFunction method</summary>
        public async Task<Stellar.SorobanAuthorizedFunctionEncodeResponse> EncodeSorobanAuthorizedFunction(Stellar.SorobanAuthorizedFunctionEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSorobanAuthorizedFunction request");
                return _service.EncodeSorobanAuthorizedFunction(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSorobanAuthorizedFunction");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSorobanAuthorizedFunction method</summary>
        public async Task<Stellar.SorobanAuthorizedFunctionDecodeResponse> DecodeSorobanAuthorizedFunction(Stellar.SorobanAuthorizedFunctionDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSorobanAuthorizedFunction request");
                return _service.DecodeSorobanAuthorizedFunction(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSorobanAuthorizedFunction");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSorobanAuthorizedInvocation method</summary>
        public async Task<Stellar.SorobanAuthorizedInvocationEncodeResponse> EncodeSorobanAuthorizedInvocation(Stellar.SorobanAuthorizedInvocationEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSorobanAuthorizedInvocation request");
                return _service.EncodeSorobanAuthorizedInvocation(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSorobanAuthorizedInvocation");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSorobanAuthorizedInvocation method</summary>
        public async Task<Stellar.SorobanAuthorizedInvocationDecodeResponse> DecodeSorobanAuthorizedInvocation(Stellar.SorobanAuthorizedInvocationDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSorobanAuthorizedInvocation request");
                return _service.DecodeSorobanAuthorizedInvocation(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSorobanAuthorizedInvocation");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSorobanAddressCredentials method</summary>
        public async Task<Stellar.SorobanAddressCredentialsEncodeResponse> EncodeSorobanAddressCredentials(Stellar.SorobanAddressCredentialsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSorobanAddressCredentials request");
                return _service.EncodeSorobanAddressCredentials(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSorobanAddressCredentials");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSorobanAddressCredentials method</summary>
        public async Task<Stellar.SorobanAddressCredentialsDecodeResponse> DecodeSorobanAddressCredentials(Stellar.SorobanAddressCredentialsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSorobanAddressCredentials request");
                return _service.DecodeSorobanAddressCredentials(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSorobanAddressCredentials");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSorobanCredentialsType method</summary>
        public async Task<Stellar.SorobanCredentialsTypeEncodeResponse> EncodeSorobanCredentialsType(Stellar.SorobanCredentialsTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSorobanCredentialsType request");
                return _service.EncodeSorobanCredentialsType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSorobanCredentialsType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSorobanCredentialsType method</summary>
        public async Task<Stellar.SorobanCredentialsTypeDecodeResponse> DecodeSorobanCredentialsType(Stellar.SorobanCredentialsTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSorobanCredentialsType request");
                return _service.DecodeSorobanCredentialsType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSorobanCredentialsType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSorobanCredentials method</summary>
        public async Task<Stellar.SorobanCredentialsEncodeResponse> EncodeSorobanCredentials(Stellar.SorobanCredentialsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSorobanCredentials request");
                return _service.EncodeSorobanCredentials(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSorobanCredentials");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSorobanCredentials method</summary>
        public async Task<Stellar.SorobanCredentialsDecodeResponse> DecodeSorobanCredentials(Stellar.SorobanCredentialsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSorobanCredentials request");
                return _service.DecodeSorobanCredentials(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSorobanCredentials");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSorobanAuthorizationEntry method</summary>
        public async Task<Stellar.SorobanAuthorizationEntryEncodeResponse> EncodeSorobanAuthorizationEntry(Stellar.SorobanAuthorizationEntryEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSorobanAuthorizationEntry request");
                return _service.EncodeSorobanAuthorizationEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSorobanAuthorizationEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSorobanAuthorizationEntry method</summary>
        public async Task<Stellar.SorobanAuthorizationEntryDecodeResponse> DecodeSorobanAuthorizationEntry(Stellar.SorobanAuthorizationEntryDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSorobanAuthorizationEntry request");
                return _service.DecodeSorobanAuthorizationEntry(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSorobanAuthorizationEntry");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeInvokeHostFunctionOp method</summary>
        public async Task<Stellar.InvokeHostFunctionOpEncodeResponse> EncodeInvokeHostFunctionOp(Stellar.InvokeHostFunctionOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeInvokeHostFunctionOp request");
                return _service.EncodeInvokeHostFunctionOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeInvokeHostFunctionOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeInvokeHostFunctionOp method</summary>
        public async Task<Stellar.InvokeHostFunctionOpDecodeResponse> DecodeInvokeHostFunctionOp(Stellar.InvokeHostFunctionOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeInvokeHostFunctionOp request");
                return _service.DecodeInvokeHostFunctionOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeInvokeHostFunctionOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeExtendFootprintTTLOp method</summary>
        public async Task<Stellar.ExtendFootprintTTLOpEncodeResponse> EncodeExtendFootprintTTLOp(Stellar.ExtendFootprintTTLOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeExtendFootprintTTLOp request");
                return _service.EncodeExtendFootprintTTLOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeExtendFootprintTTLOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeExtendFootprintTTLOp method</summary>
        public async Task<Stellar.ExtendFootprintTTLOpDecodeResponse> DecodeExtendFootprintTTLOp(Stellar.ExtendFootprintTTLOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeExtendFootprintTTLOp request");
                return _service.DecodeExtendFootprintTTLOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeExtendFootprintTTLOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeRestoreFootprintOp method</summary>
        public async Task<Stellar.RestoreFootprintOpEncodeResponse> EncodeRestoreFootprintOp(Stellar.RestoreFootprintOpEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeRestoreFootprintOp request");
                return _service.EncodeRestoreFootprintOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeRestoreFootprintOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeRestoreFootprintOp method</summary>
        public async Task<Stellar.RestoreFootprintOpDecodeResponse> DecodeRestoreFootprintOp(Stellar.RestoreFootprintOpDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeRestoreFootprintOp request");
                return _service.DecodeRestoreFootprintOp(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeRestoreFootprintOp");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeOperation method</summary>
        public async Task<Stellar.OperationEncodeResponse> EncodeOperation(Stellar.OperationEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeOperation request");
                return _service.EncodeOperation(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeOperation");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeOperation method</summary>
        public async Task<Stellar.OperationDecodeResponse> DecodeOperation(Stellar.OperationDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeOperation request");
                return _service.DecodeOperation(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeOperation");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeHashIDPreimage method</summary>
        public async Task<Stellar.HashIDPreimageEncodeResponse> EncodeHashIDPreimage(Stellar.HashIDPreimageEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeHashIDPreimage request");
                return _service.EncodeHashIDPreimage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeHashIDPreimage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeHashIDPreimage method</summary>
        public async Task<Stellar.HashIDPreimageDecodeResponse> DecodeHashIDPreimage(Stellar.HashIDPreimageDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeHashIDPreimage request");
                return _service.DecodeHashIDPreimage(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeHashIDPreimage");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeMemoType method</summary>
        public async Task<Stellar.MemoTypeEncodeResponse> EncodeMemoType(Stellar.MemoTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeMemoType request");
                return _service.EncodeMemoType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeMemoType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeMemoType method</summary>
        public async Task<Stellar.MemoTypeDecodeResponse> DecodeMemoType(Stellar.MemoTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeMemoType request");
                return _service.DecodeMemoType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeMemoType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeMemo method</summary>
        public async Task<Stellar.MemoEncodeResponse> EncodeMemo(Stellar.MemoEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeMemo request");
                return _service.EncodeMemo(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeMemo");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeMemo method</summary>
        public async Task<Stellar.MemoDecodeResponse> DecodeMemo(Stellar.MemoDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeMemo request");
                return _service.DecodeMemo(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeMemo");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTimeBounds method</summary>
        public async Task<Stellar.TimeBoundsEncodeResponse> EncodeTimeBounds(Stellar.TimeBoundsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTimeBounds request");
                return _service.EncodeTimeBounds(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTimeBounds");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTimeBounds method</summary>
        public async Task<Stellar.TimeBoundsDecodeResponse> DecodeTimeBounds(Stellar.TimeBoundsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTimeBounds request");
                return _service.DecodeTimeBounds(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTimeBounds");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerBounds method</summary>
        public async Task<Stellar.LedgerBoundsEncodeResponse> EncodeLedgerBounds(Stellar.LedgerBoundsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerBounds request");
                return _service.EncodeLedgerBounds(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerBounds");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerBounds method</summary>
        public async Task<Stellar.LedgerBoundsDecodeResponse> DecodeLedgerBounds(Stellar.LedgerBoundsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerBounds request");
                return _service.DecodeLedgerBounds(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerBounds");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePreconditionsV2 method</summary>
        public async Task<Stellar.PreconditionsV2EncodeResponse> EncodePreconditionsV2(Stellar.PreconditionsV2EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePreconditionsV2 request");
                return _service.EncodePreconditionsV2(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePreconditionsV2");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePreconditionsV2 method</summary>
        public async Task<Stellar.PreconditionsV2DecodeResponse> DecodePreconditionsV2(Stellar.PreconditionsV2DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePreconditionsV2 request");
                return _service.DecodePreconditionsV2(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePreconditionsV2");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePreconditionType method</summary>
        public async Task<Stellar.PreconditionTypeEncodeResponse> EncodePreconditionType(Stellar.PreconditionTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePreconditionType request");
                return _service.EncodePreconditionType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePreconditionType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePreconditionType method</summary>
        public async Task<Stellar.PreconditionTypeDecodeResponse> DecodePreconditionType(Stellar.PreconditionTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePreconditionType request");
                return _service.DecodePreconditionType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePreconditionType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePreconditions method</summary>
        public async Task<Stellar.PreconditionsEncodeResponse> EncodePreconditions(Stellar.PreconditionsEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePreconditions request");
                return _service.EncodePreconditions(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePreconditions");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePreconditions method</summary>
        public async Task<Stellar.PreconditionsDecodeResponse> DecodePreconditions(Stellar.PreconditionsDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePreconditions request");
                return _service.DecodePreconditions(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePreconditions");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLedgerFootprint method</summary>
        public async Task<Stellar.LedgerFootprintEncodeResponse> EncodeLedgerFootprint(Stellar.LedgerFootprintEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLedgerFootprint request");
                return _service.EncodeLedgerFootprint(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLedgerFootprint");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLedgerFootprint method</summary>
        public async Task<Stellar.LedgerFootprintDecodeResponse> DecodeLedgerFootprint(Stellar.LedgerFootprintDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLedgerFootprint request");
                return _service.DecodeLedgerFootprint(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLedgerFootprint");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeArchivalProofType method</summary>
        public async Task<Stellar.ArchivalProofTypeEncodeResponse> EncodeArchivalProofType(Stellar.ArchivalProofTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeArchivalProofType request");
                return _service.EncodeArchivalProofType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeArchivalProofType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeArchivalProofType method</summary>
        public async Task<Stellar.ArchivalProofTypeDecodeResponse> DecodeArchivalProofType(Stellar.ArchivalProofTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeArchivalProofType request");
                return _service.DecodeArchivalProofType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeArchivalProofType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeArchivalProofNode method</summary>
        public async Task<Stellar.ArchivalProofNodeEncodeResponse> EncodeArchivalProofNode(Stellar.ArchivalProofNodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeArchivalProofNode request");
                return _service.EncodeArchivalProofNode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeArchivalProofNode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeArchivalProofNode method</summary>
        public async Task<Stellar.ArchivalProofNodeDecodeResponse> DecodeArchivalProofNode(Stellar.ArchivalProofNodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeArchivalProofNode request");
                return _service.DecodeArchivalProofNode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeArchivalProofNode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeProofLevel method</summary>
        public async Task<Stellar.ProofLevelEncodeResponse> EncodeProofLevel(Stellar.ProofLevelEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeProofLevel request");
                return _service.EncodeProofLevel(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeProofLevel");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeProofLevel method</summary>
        public async Task<Stellar.ProofLevelDecodeResponse> DecodeProofLevel(Stellar.ProofLevelDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeProofLevel request");
                return _service.DecodeProofLevel(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeProofLevel");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeNonexistenceProofBody method</summary>
        public async Task<Stellar.NonexistenceProofBodyEncodeResponse> EncodeNonexistenceProofBody(Stellar.NonexistenceProofBodyEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeNonexistenceProofBody request");
                return _service.EncodeNonexistenceProofBody(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeNonexistenceProofBody");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeNonexistenceProofBody method</summary>
        public async Task<Stellar.NonexistenceProofBodyDecodeResponse> DecodeNonexistenceProofBody(Stellar.NonexistenceProofBodyDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeNonexistenceProofBody request");
                return _service.DecodeNonexistenceProofBody(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeNonexistenceProofBody");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeExistenceProofBody method</summary>
        public async Task<Stellar.ExistenceProofBodyEncodeResponse> EncodeExistenceProofBody(Stellar.ExistenceProofBodyEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeExistenceProofBody request");
                return _service.EncodeExistenceProofBody(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeExistenceProofBody");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeExistenceProofBody method</summary>
        public async Task<Stellar.ExistenceProofBodyDecodeResponse> DecodeExistenceProofBody(Stellar.ExistenceProofBodyDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeExistenceProofBody request");
                return _service.DecodeExistenceProofBody(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeExistenceProofBody");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeArchivalProof method</summary>
        public async Task<Stellar.ArchivalProofEncodeResponse> EncodeArchivalProof(Stellar.ArchivalProofEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeArchivalProof request");
                return _service.EncodeArchivalProof(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeArchivalProof");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeArchivalProof method</summary>
        public async Task<Stellar.ArchivalProofDecodeResponse> DecodeArchivalProof(Stellar.ArchivalProofDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeArchivalProof request");
                return _service.DecodeArchivalProof(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeArchivalProof");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSorobanResources method</summary>
        public async Task<Stellar.SorobanResourcesEncodeResponse> EncodeSorobanResources(Stellar.SorobanResourcesEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSorobanResources request");
                return _service.EncodeSorobanResources(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSorobanResources");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSorobanResources method</summary>
        public async Task<Stellar.SorobanResourcesDecodeResponse> DecodeSorobanResources(Stellar.SorobanResourcesDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSorobanResources request");
                return _service.DecodeSorobanResources(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSorobanResources");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSorobanTransactionData method</summary>
        public async Task<Stellar.SorobanTransactionDataEncodeResponse> EncodeSorobanTransactionData(Stellar.SorobanTransactionDataEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSorobanTransactionData request");
                return _service.EncodeSorobanTransactionData(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSorobanTransactionData");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSorobanTransactionData method</summary>
        public async Task<Stellar.SorobanTransactionDataDecodeResponse> DecodeSorobanTransactionData(Stellar.SorobanTransactionDataDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSorobanTransactionData request");
                return _service.DecodeSorobanTransactionData(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSorobanTransactionData");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionV0 method</summary>
        public async Task<Stellar.TransactionV0EncodeResponse> EncodeTransactionV0(Stellar.TransactionV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionV0 request");
                return _service.EncodeTransactionV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionV0 method</summary>
        public async Task<Stellar.TransactionV0DecodeResponse> DecodeTransactionV0(Stellar.TransactionV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionV0 request");
                return _service.DecodeTransactionV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionV0Envelope method</summary>
        public async Task<Stellar.TransactionV0EnvelopeEncodeResponse> EncodeTransactionV0Envelope(Stellar.TransactionV0EnvelopeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionV0Envelope request");
                return _service.EncodeTransactionV0Envelope(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionV0Envelope");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionV0Envelope method</summary>
        public async Task<Stellar.TransactionV0EnvelopeDecodeResponse> DecodeTransactionV0Envelope(Stellar.TransactionV0EnvelopeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionV0Envelope request");
                return _service.DecodeTransactionV0Envelope(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionV0Envelope");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransaction method</summary>
        public async Task<Stellar.TransactionEncodeResponse> EncodeTransaction(Stellar.TransactionEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransaction request");
                return _service.EncodeTransaction(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransaction");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransaction method</summary>
        public async Task<Stellar.TransactionDecodeResponse> DecodeTransaction(Stellar.TransactionDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransaction request");
                return _service.DecodeTransaction(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransaction");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionV1Envelope method</summary>
        public async Task<Stellar.TransactionV1EnvelopeEncodeResponse> EncodeTransactionV1Envelope(Stellar.TransactionV1EnvelopeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionV1Envelope request");
                return _service.EncodeTransactionV1Envelope(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionV1Envelope");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionV1Envelope method</summary>
        public async Task<Stellar.TransactionV1EnvelopeDecodeResponse> DecodeTransactionV1Envelope(Stellar.TransactionV1EnvelopeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionV1Envelope request");
                return _service.DecodeTransactionV1Envelope(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionV1Envelope");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeFeeBumpTransaction method</summary>
        public async Task<Stellar.FeeBumpTransactionEncodeResponse> EncodeFeeBumpTransaction(Stellar.FeeBumpTransactionEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeFeeBumpTransaction request");
                return _service.EncodeFeeBumpTransaction(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeFeeBumpTransaction");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeFeeBumpTransaction method</summary>
        public async Task<Stellar.FeeBumpTransactionDecodeResponse> DecodeFeeBumpTransaction(Stellar.FeeBumpTransactionDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeFeeBumpTransaction request");
                return _service.DecodeFeeBumpTransaction(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeFeeBumpTransaction");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeFeeBumpTransactionEnvelope method</summary>
        public async Task<Stellar.FeeBumpTransactionEnvelopeEncodeResponse> EncodeFeeBumpTransactionEnvelope(Stellar.FeeBumpTransactionEnvelopeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeFeeBumpTransactionEnvelope request");
                return _service.EncodeFeeBumpTransactionEnvelope(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeFeeBumpTransactionEnvelope");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeFeeBumpTransactionEnvelope method</summary>
        public async Task<Stellar.FeeBumpTransactionEnvelopeDecodeResponse> DecodeFeeBumpTransactionEnvelope(Stellar.FeeBumpTransactionEnvelopeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeFeeBumpTransactionEnvelope request");
                return _service.DecodeFeeBumpTransactionEnvelope(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeFeeBumpTransactionEnvelope");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionEnvelope method</summary>
        public async Task<Stellar.TransactionEnvelopeEncodeResponse> EncodeTransactionEnvelope(Stellar.TransactionEnvelopeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionEnvelope request");
                return _service.EncodeTransactionEnvelope(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionEnvelope");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionEnvelope method</summary>
        public async Task<Stellar.TransactionEnvelopeDecodeResponse> DecodeTransactionEnvelope(Stellar.TransactionEnvelopeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionEnvelope request");
                return _service.DecodeTransactionEnvelope(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionEnvelope");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionSignaturePayload method</summary>
        public async Task<Stellar.TransactionSignaturePayloadEncodeResponse> EncodeTransactionSignaturePayload(Stellar.TransactionSignaturePayloadEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionSignaturePayload request");
                return _service.EncodeTransactionSignaturePayload(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionSignaturePayload");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionSignaturePayload method</summary>
        public async Task<Stellar.TransactionSignaturePayloadDecodeResponse> DecodeTransactionSignaturePayload(Stellar.TransactionSignaturePayloadDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionSignaturePayload request");
                return _service.DecodeTransactionSignaturePayload(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionSignaturePayload");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimAtomType method</summary>
        public async Task<Stellar.ClaimAtomTypeEncodeResponse> EncodeClaimAtomType(Stellar.ClaimAtomTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimAtomType request");
                return _service.EncodeClaimAtomType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimAtomType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimAtomType method</summary>
        public async Task<Stellar.ClaimAtomTypeDecodeResponse> DecodeClaimAtomType(Stellar.ClaimAtomTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimAtomType request");
                return _service.DecodeClaimAtomType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimAtomType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimOfferAtomV0 method</summary>
        public async Task<Stellar.ClaimOfferAtomV0EncodeResponse> EncodeClaimOfferAtomV0(Stellar.ClaimOfferAtomV0EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimOfferAtomV0 request");
                return _service.EncodeClaimOfferAtomV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimOfferAtomV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimOfferAtomV0 method</summary>
        public async Task<Stellar.ClaimOfferAtomV0DecodeResponse> DecodeClaimOfferAtomV0(Stellar.ClaimOfferAtomV0DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimOfferAtomV0 request");
                return _service.DecodeClaimOfferAtomV0(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimOfferAtomV0");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimOfferAtom method</summary>
        public async Task<Stellar.ClaimOfferAtomEncodeResponse> EncodeClaimOfferAtom(Stellar.ClaimOfferAtomEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimOfferAtom request");
                return _service.EncodeClaimOfferAtom(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimOfferAtom");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimOfferAtom method</summary>
        public async Task<Stellar.ClaimOfferAtomDecodeResponse> DecodeClaimOfferAtom(Stellar.ClaimOfferAtomDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimOfferAtom request");
                return _service.DecodeClaimOfferAtom(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimOfferAtom");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimLiquidityAtom method</summary>
        public async Task<Stellar.ClaimLiquidityAtomEncodeResponse> EncodeClaimLiquidityAtom(Stellar.ClaimLiquidityAtomEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimLiquidityAtom request");
                return _service.EncodeClaimLiquidityAtom(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimLiquidityAtom");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimLiquidityAtom method</summary>
        public async Task<Stellar.ClaimLiquidityAtomDecodeResponse> DecodeClaimLiquidityAtom(Stellar.ClaimLiquidityAtomDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimLiquidityAtom request");
                return _service.DecodeClaimLiquidityAtom(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimLiquidityAtom");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimAtom method</summary>
        public async Task<Stellar.ClaimAtomEncodeResponse> EncodeClaimAtom(Stellar.ClaimAtomEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimAtom request");
                return _service.EncodeClaimAtom(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimAtom");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimAtom method</summary>
        public async Task<Stellar.ClaimAtomDecodeResponse> DecodeClaimAtom(Stellar.ClaimAtomDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimAtom request");
                return _service.DecodeClaimAtom(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimAtom");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeCreateAccountResultCode method</summary>
        public async Task<Stellar.CreateAccountResultCodeEncodeResponse> EncodeCreateAccountResultCode(Stellar.CreateAccountResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeCreateAccountResultCode request");
                return _service.EncodeCreateAccountResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeCreateAccountResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeCreateAccountResultCode method</summary>
        public async Task<Stellar.CreateAccountResultCodeDecodeResponse> DecodeCreateAccountResultCode(Stellar.CreateAccountResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeCreateAccountResultCode request");
                return _service.DecodeCreateAccountResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeCreateAccountResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeCreateAccountResult method</summary>
        public async Task<Stellar.CreateAccountResultEncodeResponse> EncodeCreateAccountResult(Stellar.CreateAccountResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeCreateAccountResult request");
                return _service.EncodeCreateAccountResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeCreateAccountResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeCreateAccountResult method</summary>
        public async Task<Stellar.CreateAccountResultDecodeResponse> DecodeCreateAccountResult(Stellar.CreateAccountResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeCreateAccountResult request");
                return _service.DecodeCreateAccountResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeCreateAccountResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePaymentResultCode method</summary>
        public async Task<Stellar.PaymentResultCodeEncodeResponse> EncodePaymentResultCode(Stellar.PaymentResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePaymentResultCode request");
                return _service.EncodePaymentResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePaymentResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePaymentResultCode method</summary>
        public async Task<Stellar.PaymentResultCodeDecodeResponse> DecodePaymentResultCode(Stellar.PaymentResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePaymentResultCode request");
                return _service.DecodePaymentResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePaymentResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePaymentResult method</summary>
        public async Task<Stellar.PaymentResultEncodeResponse> EncodePaymentResult(Stellar.PaymentResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePaymentResult request");
                return _service.EncodePaymentResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePaymentResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePaymentResult method</summary>
        public async Task<Stellar.PaymentResultDecodeResponse> DecodePaymentResult(Stellar.PaymentResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePaymentResult request");
                return _service.DecodePaymentResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePaymentResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePathPaymentStrictReceiveResultCode method</summary>
        public async Task<Stellar.PathPaymentStrictReceiveResultCodeEncodeResponse> EncodePathPaymentStrictReceiveResultCode(Stellar.PathPaymentStrictReceiveResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePathPaymentStrictReceiveResultCode request");
                return _service.EncodePathPaymentStrictReceiveResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePathPaymentStrictReceiveResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePathPaymentStrictReceiveResultCode method</summary>
        public async Task<Stellar.PathPaymentStrictReceiveResultCodeDecodeResponse> DecodePathPaymentStrictReceiveResultCode(Stellar.PathPaymentStrictReceiveResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePathPaymentStrictReceiveResultCode request");
                return _service.DecodePathPaymentStrictReceiveResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePathPaymentStrictReceiveResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSimplePaymentResult method</summary>
        public async Task<Stellar.SimplePaymentResultEncodeResponse> EncodeSimplePaymentResult(Stellar.SimplePaymentResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSimplePaymentResult request");
                return _service.EncodeSimplePaymentResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSimplePaymentResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSimplePaymentResult method</summary>
        public async Task<Stellar.SimplePaymentResultDecodeResponse> DecodeSimplePaymentResult(Stellar.SimplePaymentResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSimplePaymentResult request");
                return _service.DecodeSimplePaymentResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSimplePaymentResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePathPaymentStrictReceiveResult method</summary>
        public async Task<Stellar.PathPaymentStrictReceiveResultEncodeResponse> EncodePathPaymentStrictReceiveResult(Stellar.PathPaymentStrictReceiveResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePathPaymentStrictReceiveResult request");
                return _service.EncodePathPaymentStrictReceiveResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePathPaymentStrictReceiveResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePathPaymentStrictReceiveResult method</summary>
        public async Task<Stellar.PathPaymentStrictReceiveResultDecodeResponse> DecodePathPaymentStrictReceiveResult(Stellar.PathPaymentStrictReceiveResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePathPaymentStrictReceiveResult request");
                return _service.DecodePathPaymentStrictReceiveResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePathPaymentStrictReceiveResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePathPaymentStrictSendResultCode method</summary>
        public async Task<Stellar.PathPaymentStrictSendResultCodeEncodeResponse> EncodePathPaymentStrictSendResultCode(Stellar.PathPaymentStrictSendResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePathPaymentStrictSendResultCode request");
                return _service.EncodePathPaymentStrictSendResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePathPaymentStrictSendResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePathPaymentStrictSendResultCode method</summary>
        public async Task<Stellar.PathPaymentStrictSendResultCodeDecodeResponse> DecodePathPaymentStrictSendResultCode(Stellar.PathPaymentStrictSendResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePathPaymentStrictSendResultCode request");
                return _service.DecodePathPaymentStrictSendResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePathPaymentStrictSendResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePathPaymentStrictSendResult method</summary>
        public async Task<Stellar.PathPaymentStrictSendResultEncodeResponse> EncodePathPaymentStrictSendResult(Stellar.PathPaymentStrictSendResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePathPaymentStrictSendResult request");
                return _service.EncodePathPaymentStrictSendResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePathPaymentStrictSendResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePathPaymentStrictSendResult method</summary>
        public async Task<Stellar.PathPaymentStrictSendResultDecodeResponse> DecodePathPaymentStrictSendResult(Stellar.PathPaymentStrictSendResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePathPaymentStrictSendResult request");
                return _service.DecodePathPaymentStrictSendResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePathPaymentStrictSendResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeManageSellOfferResultCode method</summary>
        public async Task<Stellar.ManageSellOfferResultCodeEncodeResponse> EncodeManageSellOfferResultCode(Stellar.ManageSellOfferResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeManageSellOfferResultCode request");
                return _service.EncodeManageSellOfferResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeManageSellOfferResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeManageSellOfferResultCode method</summary>
        public async Task<Stellar.ManageSellOfferResultCodeDecodeResponse> DecodeManageSellOfferResultCode(Stellar.ManageSellOfferResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeManageSellOfferResultCode request");
                return _service.DecodeManageSellOfferResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeManageSellOfferResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeManageOfferEffect method</summary>
        public async Task<Stellar.ManageOfferEffectEncodeResponse> EncodeManageOfferEffect(Stellar.ManageOfferEffectEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeManageOfferEffect request");
                return _service.EncodeManageOfferEffect(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeManageOfferEffect");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeManageOfferEffect method</summary>
        public async Task<Stellar.ManageOfferEffectDecodeResponse> DecodeManageOfferEffect(Stellar.ManageOfferEffectDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeManageOfferEffect request");
                return _service.DecodeManageOfferEffect(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeManageOfferEffect");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeManageOfferSuccessResult method</summary>
        public async Task<Stellar.ManageOfferSuccessResultEncodeResponse> EncodeManageOfferSuccessResult(Stellar.ManageOfferSuccessResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeManageOfferSuccessResult request");
                return _service.EncodeManageOfferSuccessResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeManageOfferSuccessResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeManageOfferSuccessResult method</summary>
        public async Task<Stellar.ManageOfferSuccessResultDecodeResponse> DecodeManageOfferSuccessResult(Stellar.ManageOfferSuccessResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeManageOfferSuccessResult request");
                return _service.DecodeManageOfferSuccessResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeManageOfferSuccessResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeManageSellOfferResult method</summary>
        public async Task<Stellar.ManageSellOfferResultEncodeResponse> EncodeManageSellOfferResult(Stellar.ManageSellOfferResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeManageSellOfferResult request");
                return _service.EncodeManageSellOfferResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeManageSellOfferResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeManageSellOfferResult method</summary>
        public async Task<Stellar.ManageSellOfferResultDecodeResponse> DecodeManageSellOfferResult(Stellar.ManageSellOfferResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeManageSellOfferResult request");
                return _service.DecodeManageSellOfferResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeManageSellOfferResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeManageBuyOfferResultCode method</summary>
        public async Task<Stellar.ManageBuyOfferResultCodeEncodeResponse> EncodeManageBuyOfferResultCode(Stellar.ManageBuyOfferResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeManageBuyOfferResultCode request");
                return _service.EncodeManageBuyOfferResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeManageBuyOfferResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeManageBuyOfferResultCode method</summary>
        public async Task<Stellar.ManageBuyOfferResultCodeDecodeResponse> DecodeManageBuyOfferResultCode(Stellar.ManageBuyOfferResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeManageBuyOfferResultCode request");
                return _service.DecodeManageBuyOfferResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeManageBuyOfferResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeManageBuyOfferResult method</summary>
        public async Task<Stellar.ManageBuyOfferResultEncodeResponse> EncodeManageBuyOfferResult(Stellar.ManageBuyOfferResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeManageBuyOfferResult request");
                return _service.EncodeManageBuyOfferResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeManageBuyOfferResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeManageBuyOfferResult method</summary>
        public async Task<Stellar.ManageBuyOfferResultDecodeResponse> DecodeManageBuyOfferResult(Stellar.ManageBuyOfferResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeManageBuyOfferResult request");
                return _service.DecodeManageBuyOfferResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeManageBuyOfferResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSetOptionsResultCode method</summary>
        public async Task<Stellar.SetOptionsResultCodeEncodeResponse> EncodeSetOptionsResultCode(Stellar.SetOptionsResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSetOptionsResultCode request");
                return _service.EncodeSetOptionsResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSetOptionsResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSetOptionsResultCode method</summary>
        public async Task<Stellar.SetOptionsResultCodeDecodeResponse> DecodeSetOptionsResultCode(Stellar.SetOptionsResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSetOptionsResultCode request");
                return _service.DecodeSetOptionsResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSetOptionsResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSetOptionsResult method</summary>
        public async Task<Stellar.SetOptionsResultEncodeResponse> EncodeSetOptionsResult(Stellar.SetOptionsResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSetOptionsResult request");
                return _service.EncodeSetOptionsResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSetOptionsResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSetOptionsResult method</summary>
        public async Task<Stellar.SetOptionsResultDecodeResponse> DecodeSetOptionsResult(Stellar.SetOptionsResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSetOptionsResult request");
                return _service.DecodeSetOptionsResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSetOptionsResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeChangeTrustResultCode method</summary>
        public async Task<Stellar.ChangeTrustResultCodeEncodeResponse> EncodeChangeTrustResultCode(Stellar.ChangeTrustResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeChangeTrustResultCode request");
                return _service.EncodeChangeTrustResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeChangeTrustResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeChangeTrustResultCode method</summary>
        public async Task<Stellar.ChangeTrustResultCodeDecodeResponse> DecodeChangeTrustResultCode(Stellar.ChangeTrustResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeChangeTrustResultCode request");
                return _service.DecodeChangeTrustResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeChangeTrustResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeChangeTrustResult method</summary>
        public async Task<Stellar.ChangeTrustResultEncodeResponse> EncodeChangeTrustResult(Stellar.ChangeTrustResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeChangeTrustResult request");
                return _service.EncodeChangeTrustResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeChangeTrustResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeChangeTrustResult method</summary>
        public async Task<Stellar.ChangeTrustResultDecodeResponse> DecodeChangeTrustResult(Stellar.ChangeTrustResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeChangeTrustResult request");
                return _service.DecodeChangeTrustResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeChangeTrustResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAllowTrustResultCode method</summary>
        public async Task<Stellar.AllowTrustResultCodeEncodeResponse> EncodeAllowTrustResultCode(Stellar.AllowTrustResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAllowTrustResultCode request");
                return _service.EncodeAllowTrustResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAllowTrustResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAllowTrustResultCode method</summary>
        public async Task<Stellar.AllowTrustResultCodeDecodeResponse> DecodeAllowTrustResultCode(Stellar.AllowTrustResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAllowTrustResultCode request");
                return _service.DecodeAllowTrustResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAllowTrustResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAllowTrustResult method</summary>
        public async Task<Stellar.AllowTrustResultEncodeResponse> EncodeAllowTrustResult(Stellar.AllowTrustResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAllowTrustResult request");
                return _service.EncodeAllowTrustResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAllowTrustResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAllowTrustResult method</summary>
        public async Task<Stellar.AllowTrustResultDecodeResponse> DecodeAllowTrustResult(Stellar.AllowTrustResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAllowTrustResult request");
                return _service.DecodeAllowTrustResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAllowTrustResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAccountMergeResultCode method</summary>
        public async Task<Stellar.AccountMergeResultCodeEncodeResponse> EncodeAccountMergeResultCode(Stellar.AccountMergeResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAccountMergeResultCode request");
                return _service.EncodeAccountMergeResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAccountMergeResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAccountMergeResultCode method</summary>
        public async Task<Stellar.AccountMergeResultCodeDecodeResponse> DecodeAccountMergeResultCode(Stellar.AccountMergeResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAccountMergeResultCode request");
                return _service.DecodeAccountMergeResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAccountMergeResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAccountMergeResult method</summary>
        public async Task<Stellar.AccountMergeResultEncodeResponse> EncodeAccountMergeResult(Stellar.AccountMergeResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAccountMergeResult request");
                return _service.EncodeAccountMergeResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAccountMergeResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAccountMergeResult method</summary>
        public async Task<Stellar.AccountMergeResultDecodeResponse> DecodeAccountMergeResult(Stellar.AccountMergeResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAccountMergeResult request");
                return _service.DecodeAccountMergeResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAccountMergeResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeInflationResultCode method</summary>
        public async Task<Stellar.InflationResultCodeEncodeResponse> EncodeInflationResultCode(Stellar.InflationResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeInflationResultCode request");
                return _service.EncodeInflationResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeInflationResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeInflationResultCode method</summary>
        public async Task<Stellar.InflationResultCodeDecodeResponse> DecodeInflationResultCode(Stellar.InflationResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeInflationResultCode request");
                return _service.DecodeInflationResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeInflationResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeInflationPayout method</summary>
        public async Task<Stellar.InflationPayoutEncodeResponse> EncodeInflationPayout(Stellar.InflationPayoutEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeInflationPayout request");
                return _service.EncodeInflationPayout(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeInflationPayout");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeInflationPayout method</summary>
        public async Task<Stellar.InflationPayoutDecodeResponse> DecodeInflationPayout(Stellar.InflationPayoutDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeInflationPayout request");
                return _service.DecodeInflationPayout(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeInflationPayout");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeInflationResult method</summary>
        public async Task<Stellar.InflationResultEncodeResponse> EncodeInflationResult(Stellar.InflationResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeInflationResult request");
                return _service.EncodeInflationResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeInflationResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeInflationResult method</summary>
        public async Task<Stellar.InflationResultDecodeResponse> DecodeInflationResult(Stellar.InflationResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeInflationResult request");
                return _service.DecodeInflationResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeInflationResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeManageDataResultCode method</summary>
        public async Task<Stellar.ManageDataResultCodeEncodeResponse> EncodeManageDataResultCode(Stellar.ManageDataResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeManageDataResultCode request");
                return _service.EncodeManageDataResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeManageDataResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeManageDataResultCode method</summary>
        public async Task<Stellar.ManageDataResultCodeDecodeResponse> DecodeManageDataResultCode(Stellar.ManageDataResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeManageDataResultCode request");
                return _service.DecodeManageDataResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeManageDataResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeManageDataResult method</summary>
        public async Task<Stellar.ManageDataResultEncodeResponse> EncodeManageDataResult(Stellar.ManageDataResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeManageDataResult request");
                return _service.EncodeManageDataResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeManageDataResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeManageDataResult method</summary>
        public async Task<Stellar.ManageDataResultDecodeResponse> DecodeManageDataResult(Stellar.ManageDataResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeManageDataResult request");
                return _service.DecodeManageDataResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeManageDataResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeBumpSequenceResultCode method</summary>
        public async Task<Stellar.BumpSequenceResultCodeEncodeResponse> EncodeBumpSequenceResultCode(Stellar.BumpSequenceResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeBumpSequenceResultCode request");
                return _service.EncodeBumpSequenceResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeBumpSequenceResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeBumpSequenceResultCode method</summary>
        public async Task<Stellar.BumpSequenceResultCodeDecodeResponse> DecodeBumpSequenceResultCode(Stellar.BumpSequenceResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeBumpSequenceResultCode request");
                return _service.DecodeBumpSequenceResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeBumpSequenceResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeBumpSequenceResult method</summary>
        public async Task<Stellar.BumpSequenceResultEncodeResponse> EncodeBumpSequenceResult(Stellar.BumpSequenceResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeBumpSequenceResult request");
                return _service.EncodeBumpSequenceResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeBumpSequenceResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeBumpSequenceResult method</summary>
        public async Task<Stellar.BumpSequenceResultDecodeResponse> DecodeBumpSequenceResult(Stellar.BumpSequenceResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeBumpSequenceResult request");
                return _service.DecodeBumpSequenceResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeBumpSequenceResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeCreateClaimableBalanceResultCode method</summary>
        public async Task<Stellar.CreateClaimableBalanceResultCodeEncodeResponse> EncodeCreateClaimableBalanceResultCode(Stellar.CreateClaimableBalanceResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeCreateClaimableBalanceResultCode request");
                return _service.EncodeCreateClaimableBalanceResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeCreateClaimableBalanceResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeCreateClaimableBalanceResultCode method</summary>
        public async Task<Stellar.CreateClaimableBalanceResultCodeDecodeResponse> DecodeCreateClaimableBalanceResultCode(Stellar.CreateClaimableBalanceResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeCreateClaimableBalanceResultCode request");
                return _service.DecodeCreateClaimableBalanceResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeCreateClaimableBalanceResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeCreateClaimableBalanceResult method</summary>
        public async Task<Stellar.CreateClaimableBalanceResultEncodeResponse> EncodeCreateClaimableBalanceResult(Stellar.CreateClaimableBalanceResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeCreateClaimableBalanceResult request");
                return _service.EncodeCreateClaimableBalanceResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeCreateClaimableBalanceResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeCreateClaimableBalanceResult method</summary>
        public async Task<Stellar.CreateClaimableBalanceResultDecodeResponse> DecodeCreateClaimableBalanceResult(Stellar.CreateClaimableBalanceResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeCreateClaimableBalanceResult request");
                return _service.DecodeCreateClaimableBalanceResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeCreateClaimableBalanceResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimClaimableBalanceResultCode method</summary>
        public async Task<Stellar.ClaimClaimableBalanceResultCodeEncodeResponse> EncodeClaimClaimableBalanceResultCode(Stellar.ClaimClaimableBalanceResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimClaimableBalanceResultCode request");
                return _service.EncodeClaimClaimableBalanceResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimClaimableBalanceResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimClaimableBalanceResultCode method</summary>
        public async Task<Stellar.ClaimClaimableBalanceResultCodeDecodeResponse> DecodeClaimClaimableBalanceResultCode(Stellar.ClaimClaimableBalanceResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimClaimableBalanceResultCode request");
                return _service.DecodeClaimClaimableBalanceResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimClaimableBalanceResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClaimClaimableBalanceResult method</summary>
        public async Task<Stellar.ClaimClaimableBalanceResultEncodeResponse> EncodeClaimClaimableBalanceResult(Stellar.ClaimClaimableBalanceResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClaimClaimableBalanceResult request");
                return _service.EncodeClaimClaimableBalanceResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClaimClaimableBalanceResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClaimClaimableBalanceResult method</summary>
        public async Task<Stellar.ClaimClaimableBalanceResultDecodeResponse> DecodeClaimClaimableBalanceResult(Stellar.ClaimClaimableBalanceResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClaimClaimableBalanceResult request");
                return _service.DecodeClaimClaimableBalanceResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClaimClaimableBalanceResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeBeginSponsoringFutureReservesResultCode method</summary>
        public async Task<Stellar.BeginSponsoringFutureReservesResultCodeEncodeResponse> EncodeBeginSponsoringFutureReservesResultCode(Stellar.BeginSponsoringFutureReservesResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeBeginSponsoringFutureReservesResultCode request");
                return _service.EncodeBeginSponsoringFutureReservesResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeBeginSponsoringFutureReservesResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeBeginSponsoringFutureReservesResultCode method</summary>
        public async Task<Stellar.BeginSponsoringFutureReservesResultCodeDecodeResponse> DecodeBeginSponsoringFutureReservesResultCode(Stellar.BeginSponsoringFutureReservesResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeBeginSponsoringFutureReservesResultCode request");
                return _service.DecodeBeginSponsoringFutureReservesResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeBeginSponsoringFutureReservesResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeBeginSponsoringFutureReservesResult method</summary>
        public async Task<Stellar.BeginSponsoringFutureReservesResultEncodeResponse> EncodeBeginSponsoringFutureReservesResult(Stellar.BeginSponsoringFutureReservesResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeBeginSponsoringFutureReservesResult request");
                return _service.EncodeBeginSponsoringFutureReservesResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeBeginSponsoringFutureReservesResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeBeginSponsoringFutureReservesResult method</summary>
        public async Task<Stellar.BeginSponsoringFutureReservesResultDecodeResponse> DecodeBeginSponsoringFutureReservesResult(Stellar.BeginSponsoringFutureReservesResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeBeginSponsoringFutureReservesResult request");
                return _service.DecodeBeginSponsoringFutureReservesResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeBeginSponsoringFutureReservesResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeEndSponsoringFutureReservesResultCode method</summary>
        public async Task<Stellar.EndSponsoringFutureReservesResultCodeEncodeResponse> EncodeEndSponsoringFutureReservesResultCode(Stellar.EndSponsoringFutureReservesResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeEndSponsoringFutureReservesResultCode request");
                return _service.EncodeEndSponsoringFutureReservesResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeEndSponsoringFutureReservesResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeEndSponsoringFutureReservesResultCode method</summary>
        public async Task<Stellar.EndSponsoringFutureReservesResultCodeDecodeResponse> DecodeEndSponsoringFutureReservesResultCode(Stellar.EndSponsoringFutureReservesResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeEndSponsoringFutureReservesResultCode request");
                return _service.DecodeEndSponsoringFutureReservesResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeEndSponsoringFutureReservesResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeEndSponsoringFutureReservesResult method</summary>
        public async Task<Stellar.EndSponsoringFutureReservesResultEncodeResponse> EncodeEndSponsoringFutureReservesResult(Stellar.EndSponsoringFutureReservesResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeEndSponsoringFutureReservesResult request");
                return _service.EncodeEndSponsoringFutureReservesResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeEndSponsoringFutureReservesResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeEndSponsoringFutureReservesResult method</summary>
        public async Task<Stellar.EndSponsoringFutureReservesResultDecodeResponse> DecodeEndSponsoringFutureReservesResult(Stellar.EndSponsoringFutureReservesResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeEndSponsoringFutureReservesResult request");
                return _service.DecodeEndSponsoringFutureReservesResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeEndSponsoringFutureReservesResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeRevokeSponsorshipResultCode method</summary>
        public async Task<Stellar.RevokeSponsorshipResultCodeEncodeResponse> EncodeRevokeSponsorshipResultCode(Stellar.RevokeSponsorshipResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeRevokeSponsorshipResultCode request");
                return _service.EncodeRevokeSponsorshipResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeRevokeSponsorshipResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeRevokeSponsorshipResultCode method</summary>
        public async Task<Stellar.RevokeSponsorshipResultCodeDecodeResponse> DecodeRevokeSponsorshipResultCode(Stellar.RevokeSponsorshipResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeRevokeSponsorshipResultCode request");
                return _service.DecodeRevokeSponsorshipResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeRevokeSponsorshipResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeRevokeSponsorshipResult method</summary>
        public async Task<Stellar.RevokeSponsorshipResultEncodeResponse> EncodeRevokeSponsorshipResult(Stellar.RevokeSponsorshipResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeRevokeSponsorshipResult request");
                return _service.EncodeRevokeSponsorshipResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeRevokeSponsorshipResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeRevokeSponsorshipResult method</summary>
        public async Task<Stellar.RevokeSponsorshipResultDecodeResponse> DecodeRevokeSponsorshipResult(Stellar.RevokeSponsorshipResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeRevokeSponsorshipResult request");
                return _service.DecodeRevokeSponsorshipResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeRevokeSponsorshipResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClawbackResultCode method</summary>
        public async Task<Stellar.ClawbackResultCodeEncodeResponse> EncodeClawbackResultCode(Stellar.ClawbackResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClawbackResultCode request");
                return _service.EncodeClawbackResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClawbackResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClawbackResultCode method</summary>
        public async Task<Stellar.ClawbackResultCodeDecodeResponse> DecodeClawbackResultCode(Stellar.ClawbackResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClawbackResultCode request");
                return _service.DecodeClawbackResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClawbackResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClawbackResult method</summary>
        public async Task<Stellar.ClawbackResultEncodeResponse> EncodeClawbackResult(Stellar.ClawbackResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClawbackResult request");
                return _service.EncodeClawbackResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClawbackResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClawbackResult method</summary>
        public async Task<Stellar.ClawbackResultDecodeResponse> DecodeClawbackResult(Stellar.ClawbackResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClawbackResult request");
                return _service.DecodeClawbackResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClawbackResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClawbackClaimableBalanceResultCode method</summary>
        public async Task<Stellar.ClawbackClaimableBalanceResultCodeEncodeResponse> EncodeClawbackClaimableBalanceResultCode(Stellar.ClawbackClaimableBalanceResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClawbackClaimableBalanceResultCode request");
                return _service.EncodeClawbackClaimableBalanceResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClawbackClaimableBalanceResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClawbackClaimableBalanceResultCode method</summary>
        public async Task<Stellar.ClawbackClaimableBalanceResultCodeDecodeResponse> DecodeClawbackClaimableBalanceResultCode(Stellar.ClawbackClaimableBalanceResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClawbackClaimableBalanceResultCode request");
                return _service.DecodeClawbackClaimableBalanceResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClawbackClaimableBalanceResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeClawbackClaimableBalanceResult method</summary>
        public async Task<Stellar.ClawbackClaimableBalanceResultEncodeResponse> EncodeClawbackClaimableBalanceResult(Stellar.ClawbackClaimableBalanceResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeClawbackClaimableBalanceResult request");
                return _service.EncodeClawbackClaimableBalanceResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeClawbackClaimableBalanceResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeClawbackClaimableBalanceResult method</summary>
        public async Task<Stellar.ClawbackClaimableBalanceResultDecodeResponse> DecodeClawbackClaimableBalanceResult(Stellar.ClawbackClaimableBalanceResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeClawbackClaimableBalanceResult request");
                return _service.DecodeClawbackClaimableBalanceResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeClawbackClaimableBalanceResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSetTrustLineFlagsResultCode method</summary>
        public async Task<Stellar.SetTrustLineFlagsResultCodeEncodeResponse> EncodeSetTrustLineFlagsResultCode(Stellar.SetTrustLineFlagsResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSetTrustLineFlagsResultCode request");
                return _service.EncodeSetTrustLineFlagsResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSetTrustLineFlagsResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSetTrustLineFlagsResultCode method</summary>
        public async Task<Stellar.SetTrustLineFlagsResultCodeDecodeResponse> DecodeSetTrustLineFlagsResultCode(Stellar.SetTrustLineFlagsResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSetTrustLineFlagsResultCode request");
                return _service.DecodeSetTrustLineFlagsResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSetTrustLineFlagsResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSetTrustLineFlagsResult method</summary>
        public async Task<Stellar.SetTrustLineFlagsResultEncodeResponse> EncodeSetTrustLineFlagsResult(Stellar.SetTrustLineFlagsResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSetTrustLineFlagsResult request");
                return _service.EncodeSetTrustLineFlagsResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSetTrustLineFlagsResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSetTrustLineFlagsResult method</summary>
        public async Task<Stellar.SetTrustLineFlagsResultDecodeResponse> DecodeSetTrustLineFlagsResult(Stellar.SetTrustLineFlagsResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSetTrustLineFlagsResult request");
                return _service.DecodeSetTrustLineFlagsResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSetTrustLineFlagsResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLiquidityPoolDepositResultCode method</summary>
        public async Task<Stellar.LiquidityPoolDepositResultCodeEncodeResponse> EncodeLiquidityPoolDepositResultCode(Stellar.LiquidityPoolDepositResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLiquidityPoolDepositResultCode request");
                return _service.EncodeLiquidityPoolDepositResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLiquidityPoolDepositResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLiquidityPoolDepositResultCode method</summary>
        public async Task<Stellar.LiquidityPoolDepositResultCodeDecodeResponse> DecodeLiquidityPoolDepositResultCode(Stellar.LiquidityPoolDepositResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLiquidityPoolDepositResultCode request");
                return _service.DecodeLiquidityPoolDepositResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLiquidityPoolDepositResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLiquidityPoolDepositResult method</summary>
        public async Task<Stellar.LiquidityPoolDepositResultEncodeResponse> EncodeLiquidityPoolDepositResult(Stellar.LiquidityPoolDepositResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLiquidityPoolDepositResult request");
                return _service.EncodeLiquidityPoolDepositResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLiquidityPoolDepositResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLiquidityPoolDepositResult method</summary>
        public async Task<Stellar.LiquidityPoolDepositResultDecodeResponse> DecodeLiquidityPoolDepositResult(Stellar.LiquidityPoolDepositResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLiquidityPoolDepositResult request");
                return _service.DecodeLiquidityPoolDepositResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLiquidityPoolDepositResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLiquidityPoolWithdrawResultCode method</summary>
        public async Task<Stellar.LiquidityPoolWithdrawResultCodeEncodeResponse> EncodeLiquidityPoolWithdrawResultCode(Stellar.LiquidityPoolWithdrawResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLiquidityPoolWithdrawResultCode request");
                return _service.EncodeLiquidityPoolWithdrawResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLiquidityPoolWithdrawResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLiquidityPoolWithdrawResultCode method</summary>
        public async Task<Stellar.LiquidityPoolWithdrawResultCodeDecodeResponse> DecodeLiquidityPoolWithdrawResultCode(Stellar.LiquidityPoolWithdrawResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLiquidityPoolWithdrawResultCode request");
                return _service.DecodeLiquidityPoolWithdrawResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLiquidityPoolWithdrawResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeLiquidityPoolWithdrawResult method</summary>
        public async Task<Stellar.LiquidityPoolWithdrawResultEncodeResponse> EncodeLiquidityPoolWithdrawResult(Stellar.LiquidityPoolWithdrawResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeLiquidityPoolWithdrawResult request");
                return _service.EncodeLiquidityPoolWithdrawResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeLiquidityPoolWithdrawResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeLiquidityPoolWithdrawResult method</summary>
        public async Task<Stellar.LiquidityPoolWithdrawResultDecodeResponse> DecodeLiquidityPoolWithdrawResult(Stellar.LiquidityPoolWithdrawResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeLiquidityPoolWithdrawResult request");
                return _service.DecodeLiquidityPoolWithdrawResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeLiquidityPoolWithdrawResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeInvokeHostFunctionResultCode method</summary>
        public async Task<Stellar.InvokeHostFunctionResultCodeEncodeResponse> EncodeInvokeHostFunctionResultCode(Stellar.InvokeHostFunctionResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeInvokeHostFunctionResultCode request");
                return _service.EncodeInvokeHostFunctionResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeInvokeHostFunctionResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeInvokeHostFunctionResultCode method</summary>
        public async Task<Stellar.InvokeHostFunctionResultCodeDecodeResponse> DecodeInvokeHostFunctionResultCode(Stellar.InvokeHostFunctionResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeInvokeHostFunctionResultCode request");
                return _service.DecodeInvokeHostFunctionResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeInvokeHostFunctionResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeInvokeHostFunctionResult method</summary>
        public async Task<Stellar.InvokeHostFunctionResultEncodeResponse> EncodeInvokeHostFunctionResult(Stellar.InvokeHostFunctionResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeInvokeHostFunctionResult request");
                return _service.EncodeInvokeHostFunctionResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeInvokeHostFunctionResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeInvokeHostFunctionResult method</summary>
        public async Task<Stellar.InvokeHostFunctionResultDecodeResponse> DecodeInvokeHostFunctionResult(Stellar.InvokeHostFunctionResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeInvokeHostFunctionResult request");
                return _service.DecodeInvokeHostFunctionResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeInvokeHostFunctionResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeExtendFootprintTTLResultCode method</summary>
        public async Task<Stellar.ExtendFootprintTTLResultCodeEncodeResponse> EncodeExtendFootprintTTLResultCode(Stellar.ExtendFootprintTTLResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeExtendFootprintTTLResultCode request");
                return _service.EncodeExtendFootprintTTLResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeExtendFootprintTTLResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeExtendFootprintTTLResultCode method</summary>
        public async Task<Stellar.ExtendFootprintTTLResultCodeDecodeResponse> DecodeExtendFootprintTTLResultCode(Stellar.ExtendFootprintTTLResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeExtendFootprintTTLResultCode request");
                return _service.DecodeExtendFootprintTTLResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeExtendFootprintTTLResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeExtendFootprintTTLResult method</summary>
        public async Task<Stellar.ExtendFootprintTTLResultEncodeResponse> EncodeExtendFootprintTTLResult(Stellar.ExtendFootprintTTLResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeExtendFootprintTTLResult request");
                return _service.EncodeExtendFootprintTTLResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeExtendFootprintTTLResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeExtendFootprintTTLResult method</summary>
        public async Task<Stellar.ExtendFootprintTTLResultDecodeResponse> DecodeExtendFootprintTTLResult(Stellar.ExtendFootprintTTLResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeExtendFootprintTTLResult request");
                return _service.DecodeExtendFootprintTTLResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeExtendFootprintTTLResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeRestoreFootprintResultCode method</summary>
        public async Task<Stellar.RestoreFootprintResultCodeEncodeResponse> EncodeRestoreFootprintResultCode(Stellar.RestoreFootprintResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeRestoreFootprintResultCode request");
                return _service.EncodeRestoreFootprintResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeRestoreFootprintResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeRestoreFootprintResultCode method</summary>
        public async Task<Stellar.RestoreFootprintResultCodeDecodeResponse> DecodeRestoreFootprintResultCode(Stellar.RestoreFootprintResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeRestoreFootprintResultCode request");
                return _service.DecodeRestoreFootprintResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeRestoreFootprintResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeRestoreFootprintResult method</summary>
        public async Task<Stellar.RestoreFootprintResultEncodeResponse> EncodeRestoreFootprintResult(Stellar.RestoreFootprintResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeRestoreFootprintResult request");
                return _service.EncodeRestoreFootprintResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeRestoreFootprintResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeRestoreFootprintResult method</summary>
        public async Task<Stellar.RestoreFootprintResultDecodeResponse> DecodeRestoreFootprintResult(Stellar.RestoreFootprintResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeRestoreFootprintResult request");
                return _service.DecodeRestoreFootprintResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeRestoreFootprintResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeOperationResultCode method</summary>
        public async Task<Stellar.OperationResultCodeEncodeResponse> EncodeOperationResultCode(Stellar.OperationResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeOperationResultCode request");
                return _service.EncodeOperationResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeOperationResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeOperationResultCode method</summary>
        public async Task<Stellar.OperationResultCodeDecodeResponse> DecodeOperationResultCode(Stellar.OperationResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeOperationResultCode request");
                return _service.DecodeOperationResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeOperationResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeOperationResult method</summary>
        public async Task<Stellar.OperationResultEncodeResponse> EncodeOperationResult(Stellar.OperationResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeOperationResult request");
                return _service.EncodeOperationResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeOperationResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeOperationResult method</summary>
        public async Task<Stellar.OperationResultDecodeResponse> DecodeOperationResult(Stellar.OperationResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeOperationResult request");
                return _service.DecodeOperationResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeOperationResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionResultCode method</summary>
        public async Task<Stellar.TransactionResultCodeEncodeResponse> EncodeTransactionResultCode(Stellar.TransactionResultCodeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionResultCode request");
                return _service.EncodeTransactionResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionResultCode method</summary>
        public async Task<Stellar.TransactionResultCodeDecodeResponse> DecodeTransactionResultCode(Stellar.TransactionResultCodeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionResultCode request");
                return _service.DecodeTransactionResultCode(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionResultCode");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeInnerTransactionResult method</summary>
        public async Task<Stellar.InnerTransactionResultEncodeResponse> EncodeInnerTransactionResult(Stellar.InnerTransactionResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeInnerTransactionResult request");
                return _service.EncodeInnerTransactionResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeInnerTransactionResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeInnerTransactionResult method</summary>
        public async Task<Stellar.InnerTransactionResultDecodeResponse> DecodeInnerTransactionResult(Stellar.InnerTransactionResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeInnerTransactionResult request");
                return _service.DecodeInnerTransactionResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeInnerTransactionResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeInnerTransactionResultPair method</summary>
        public async Task<Stellar.InnerTransactionResultPairEncodeResponse> EncodeInnerTransactionResultPair(Stellar.InnerTransactionResultPairEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeInnerTransactionResultPair request");
                return _service.EncodeInnerTransactionResultPair(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeInnerTransactionResultPair");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeInnerTransactionResultPair method</summary>
        public async Task<Stellar.InnerTransactionResultPairDecodeResponse> DecodeInnerTransactionResultPair(Stellar.InnerTransactionResultPairDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeInnerTransactionResultPair request");
                return _service.DecodeInnerTransactionResultPair(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeInnerTransactionResultPair");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTransactionResult method</summary>
        public async Task<Stellar.TransactionResultEncodeResponse> EncodeTransactionResult(Stellar.TransactionResultEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTransactionResult request");
                return _service.EncodeTransactionResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTransactionResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTransactionResult method</summary>
        public async Task<Stellar.TransactionResultDecodeResponse> DecodeTransactionResult(Stellar.TransactionResultDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTransactionResult request");
                return _service.DecodeTransactionResult(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTransactionResult");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeHash method</summary>
        public async Task<Stellar.HashEncodeResponse> EncodeHash(Stellar.HashEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeHash request");
                return _service.EncodeHash(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeHash");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeHash method</summary>
        public async Task<Stellar.HashDecodeResponse> DecodeHash(Stellar.HashDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeHash request");
                return _service.DecodeHash(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeHash");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Encodeuint256 method</summary>
        public async Task<Stellar.uint256EncodeResponse> Encodeuint256(Stellar.uint256EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Encodeuint256 request");
                return _service.Encodeuint256(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Encodeuint256");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Decodeuint256 method</summary>
        public async Task<Stellar.uint256DecodeResponse> Decodeuint256(Stellar.uint256DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Decodeuint256 request");
                return _service.Decodeuint256(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Decodeuint256");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Encodeuint32 method</summary>
        public async Task<Stellar.uint32EncodeResponse> Encodeuint32(Stellar.uint32EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Encodeuint32 request");
                return _service.Encodeuint32(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Encodeuint32");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Decodeuint32 method</summary>
        public async Task<Stellar.uint32DecodeResponse> Decodeuint32(Stellar.uint32DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Decodeuint32 request");
                return _service.Decodeuint32(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Decodeuint32");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Encodeint32 method</summary>
        public async Task<Stellar.int32EncodeResponse> Encodeint32(Stellar.int32EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Encodeint32 request");
                return _service.Encodeint32(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Encodeint32");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Decodeint32 method</summary>
        public async Task<Stellar.int32DecodeResponse> Decodeint32(Stellar.int32DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Decodeint32 request");
                return _service.Decodeint32(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Decodeint32");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Encodeuint64 method</summary>
        public async Task<Stellar.uint64EncodeResponse> Encodeuint64(Stellar.uint64EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Encodeuint64 request");
                return _service.Encodeuint64(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Encodeuint64");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Decodeuint64 method</summary>
        public async Task<Stellar.uint64DecodeResponse> Decodeuint64(Stellar.uint64DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Decodeuint64 request");
                return _service.Decodeuint64(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Decodeuint64");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Encodeint64 method</summary>
        public async Task<Stellar.int64EncodeResponse> Encodeint64(Stellar.int64EncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Encodeint64 request");
                return _service.Encodeint64(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Encodeint64");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for Decodeint64 method</summary>
        public async Task<Stellar.int64DecodeResponse> Decodeint64(Stellar.int64DecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing Decodeint64 request");
                return _service.Decodeint64(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in Decodeint64");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeTimePoint method</summary>
        public async Task<Stellar.TimePointEncodeResponse> EncodeTimePoint(Stellar.TimePointEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeTimePoint request");
                return _service.EncodeTimePoint(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeTimePoint");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeTimePoint method</summary>
        public async Task<Stellar.TimePointDecodeResponse> DecodeTimePoint(Stellar.TimePointDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeTimePoint request");
                return _service.DecodeTimePoint(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeTimePoint");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeDuration method</summary>
        public async Task<Stellar.DurationEncodeResponse> EncodeDuration(Stellar.DurationEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeDuration request");
                return _service.EncodeDuration(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeDuration");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeDuration method</summary>
        public async Task<Stellar.DurationDecodeResponse> DecodeDuration(Stellar.DurationDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeDuration request");
                return _service.DecodeDuration(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeDuration");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeExtensionPoint method</summary>
        public async Task<Stellar.ExtensionPointEncodeResponse> EncodeExtensionPoint(Stellar.ExtensionPointEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeExtensionPoint request");
                return _service.EncodeExtensionPoint(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeExtensionPoint");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeExtensionPoint method</summary>
        public async Task<Stellar.ExtensionPointDecodeResponse> DecodeExtensionPoint(Stellar.ExtensionPointDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeExtensionPoint request");
                return _service.DecodeExtensionPoint(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeExtensionPoint");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeCryptoKeyType method</summary>
        public async Task<Stellar.CryptoKeyTypeEncodeResponse> EncodeCryptoKeyType(Stellar.CryptoKeyTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeCryptoKeyType request");
                return _service.EncodeCryptoKeyType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeCryptoKeyType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeCryptoKeyType method</summary>
        public async Task<Stellar.CryptoKeyTypeDecodeResponse> DecodeCryptoKeyType(Stellar.CryptoKeyTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeCryptoKeyType request");
                return _service.DecodeCryptoKeyType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeCryptoKeyType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePublicKeyType method</summary>
        public async Task<Stellar.PublicKeyTypeEncodeResponse> EncodePublicKeyType(Stellar.PublicKeyTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePublicKeyType request");
                return _service.EncodePublicKeyType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePublicKeyType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePublicKeyType method</summary>
        public async Task<Stellar.PublicKeyTypeDecodeResponse> DecodePublicKeyType(Stellar.PublicKeyTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePublicKeyType request");
                return _service.DecodePublicKeyType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePublicKeyType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSignerKeyType method</summary>
        public async Task<Stellar.SignerKeyTypeEncodeResponse> EncodeSignerKeyType(Stellar.SignerKeyTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSignerKeyType request");
                return _service.EncodeSignerKeyType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSignerKeyType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSignerKeyType method</summary>
        public async Task<Stellar.SignerKeyTypeDecodeResponse> DecodeSignerKeyType(Stellar.SignerKeyTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSignerKeyType request");
                return _service.DecodeSignerKeyType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSignerKeyType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodePublicKey method</summary>
        public async Task<Stellar.PublicKeyEncodeResponse> EncodePublicKey(Stellar.PublicKeyEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodePublicKey request");
                return _service.EncodePublicKey(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodePublicKey");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodePublicKey method</summary>
        public async Task<Stellar.PublicKeyDecodeResponse> DecodePublicKey(Stellar.PublicKeyDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodePublicKey request");
                return _service.DecodePublicKey(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodePublicKey");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSignerKey method</summary>
        public async Task<Stellar.SignerKeyEncodeResponse> EncodeSignerKey(Stellar.SignerKeyEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSignerKey request");
                return _service.EncodeSignerKey(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSignerKey");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSignerKey method</summary>
        public async Task<Stellar.SignerKeyDecodeResponse> DecodeSignerKey(Stellar.SignerKeyDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSignerKey request");
                return _service.DecodeSignerKey(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSignerKey");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSignature method</summary>
        public async Task<Stellar.SignatureEncodeResponse> EncodeSignature(Stellar.SignatureEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSignature request");
                return _service.EncodeSignature(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSignature");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSignature method</summary>
        public async Task<Stellar.SignatureDecodeResponse> DecodeSignature(Stellar.SignatureDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSignature request");
                return _service.DecodeSignature(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSignature");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSignatureHint method</summary>
        public async Task<Stellar.SignatureHintEncodeResponse> EncodeSignatureHint(Stellar.SignatureHintEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSignatureHint request");
                return _service.EncodeSignatureHint(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSignatureHint");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSignatureHint method</summary>
        public async Task<Stellar.SignatureHintDecodeResponse> DecodeSignatureHint(Stellar.SignatureHintDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSignatureHint request");
                return _service.DecodeSignatureHint(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSignatureHint");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeNodeID method</summary>
        public async Task<Stellar.NodeIDEncodeResponse> EncodeNodeID(Stellar.NodeIDEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeNodeID request");
                return _service.EncodeNodeID(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeNodeID");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeNodeID method</summary>
        public async Task<Stellar.NodeIDDecodeResponse> DecodeNodeID(Stellar.NodeIDDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeNodeID request");
                return _service.DecodeNodeID(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeNodeID");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeAccountID method</summary>
        public async Task<Stellar.AccountIDEncodeResponse> EncodeAccountID(Stellar.AccountIDEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeAccountID request");
                return _service.EncodeAccountID(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeAccountID");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeAccountID method</summary>
        public async Task<Stellar.AccountIDDecodeResponse> DecodeAccountID(Stellar.AccountIDDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeAccountID request");
                return _service.DecodeAccountID(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeAccountID");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeCurve25519Secret method</summary>
        public async Task<Stellar.Curve25519SecretEncodeResponse> EncodeCurve25519Secret(Stellar.Curve25519SecretEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeCurve25519Secret request");
                return _service.EncodeCurve25519Secret(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeCurve25519Secret");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeCurve25519Secret method</summary>
        public async Task<Stellar.Curve25519SecretDecodeResponse> DecodeCurve25519Secret(Stellar.Curve25519SecretDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeCurve25519Secret request");
                return _service.DecodeCurve25519Secret(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeCurve25519Secret");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeCurve25519Public method</summary>
        public async Task<Stellar.Curve25519PublicEncodeResponse> EncodeCurve25519Public(Stellar.Curve25519PublicEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeCurve25519Public request");
                return _service.EncodeCurve25519Public(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeCurve25519Public");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeCurve25519Public method</summary>
        public async Task<Stellar.Curve25519PublicDecodeResponse> DecodeCurve25519Public(Stellar.Curve25519PublicDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeCurve25519Public request");
                return _service.DecodeCurve25519Public(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeCurve25519Public");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeHmacSha256Key method</summary>
        public async Task<Stellar.HmacSha256KeyEncodeResponse> EncodeHmacSha256Key(Stellar.HmacSha256KeyEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeHmacSha256Key request");
                return _service.EncodeHmacSha256Key(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeHmacSha256Key");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeHmacSha256Key method</summary>
        public async Task<Stellar.HmacSha256KeyDecodeResponse> DecodeHmacSha256Key(Stellar.HmacSha256KeyDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeHmacSha256Key request");
                return _service.DecodeHmacSha256Key(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeHmacSha256Key");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeHmacSha256Mac method</summary>
        public async Task<Stellar.HmacSha256MacEncodeResponse> EncodeHmacSha256Mac(Stellar.HmacSha256MacEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeHmacSha256Mac request");
                return _service.EncodeHmacSha256Mac(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeHmacSha256Mac");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeHmacSha256Mac method</summary>
        public async Task<Stellar.HmacSha256MacDecodeResponse> DecodeHmacSha256Mac(Stellar.HmacSha256MacDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeHmacSha256Mac request");
                return _service.DecodeHmacSha256Mac(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeHmacSha256Mac");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeShortHashSeed method</summary>
        public async Task<Stellar.ShortHashSeedEncodeResponse> EncodeShortHashSeed(Stellar.ShortHashSeedEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeShortHashSeed request");
                return _service.EncodeShortHashSeed(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeShortHashSeed");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeShortHashSeed method</summary>
        public async Task<Stellar.ShortHashSeedDecodeResponse> DecodeShortHashSeed(Stellar.ShortHashSeedDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeShortHashSeed request");
                return _service.DecodeShortHashSeed(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeShortHashSeed");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeBinaryFuseFilterType method</summary>
        public async Task<Stellar.BinaryFuseFilterTypeEncodeResponse> EncodeBinaryFuseFilterType(Stellar.BinaryFuseFilterTypeEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeBinaryFuseFilterType request");
                return _service.EncodeBinaryFuseFilterType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeBinaryFuseFilterType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeBinaryFuseFilterType method</summary>
        public async Task<Stellar.BinaryFuseFilterTypeDecodeResponse> DecodeBinaryFuseFilterType(Stellar.BinaryFuseFilterTypeDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeBinaryFuseFilterType request");
                return _service.DecodeBinaryFuseFilterType(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeBinaryFuseFilterType");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for EncodeSerializedBinaryFuseFilter method</summary>
        public async Task<Stellar.SerializedBinaryFuseFilterEncodeResponse> EncodeSerializedBinaryFuseFilter(Stellar.SerializedBinaryFuseFilterEncodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing EncodeSerializedBinaryFuseFilter request");
                return _service.EncodeSerializedBinaryFuseFilter(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in EncodeSerializedBinaryFuseFilter");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

        /// <summary>Handler for DecodeSerializedBinaryFuseFilter method</summary>
        public async Task<Stellar.SerializedBinaryFuseFilterDecodeResponse> DecodeSerializedBinaryFuseFilter(Stellar.SerializedBinaryFuseFilterDecodeRequest request, ServerCallContext context)
        {
            try
            {
                _logger.LogInformation("Processing DecodeSerializedBinaryFuseFilter request");
                return _service.DecodeSerializedBinaryFuseFilter(request);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in DecodeSerializedBinaryFuseFilter");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

    }
}
