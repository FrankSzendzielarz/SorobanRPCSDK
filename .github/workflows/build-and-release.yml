name: Build and Release SDK

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'SDK Version (e.g., 1.0.0)'
        required: true
      update_specs:
        description: 'Update OpenRPC and XDR specifications'
        type: boolean
        default: false

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Update Specifications
        if: ${{ inputs.update_specs == 'true' }}
        run: |
          mkdir -p StellarOpenRPC
          mkdir -p StellarXDR
          curl -L https://raw.githubusercontent.com/stellar/stellar-rpc/main/docs/specs/stellar-rpc.openrpc.json -o StellarOpenRPC/stellar-rpc.openrpc.json
          git clone https://github.com/stellar/stellar-core.git temp-stellar-core
          cp temp-stellar-core/src/protocol-curr/*.x StellarXDR/
          rm -rf temp-stellar-core

      - name: Clean Generated Directories
        run: |
            rm -rf StellarRPCSDK/Stellar/Generated/*
            rm -rf StellarRPCSDK/RPC/Generated/*
            mkdir -p StellarRPCSDK/Stellar/Generated
            mkdir -p StellarRPCSDK/RPC/Generated

      - name: Generate SDK Code
        run: |
          ROOT_DIR=$(pwd)
          dotnet run --project Generator/Generator.csproj -- "$ROOT_DIR/StellarXDR" "$ROOT_DIR/StellarOpenRPC/stellar-rpc.openrpc.json" "$ROOT_DIR/StellarRPCSDK/Stellar/Generated" "$ROOT_DIR/StellarRPCSDK/RPC/Generated"

      # Build each configuration separately and ensure output is preserved
      - name: Build SDK - Release
        run: dotnet build StellarRPCSDK/StellarRPCSDK.csproj -c Release -p:Version=${{ inputs.version }}

      - name: Build SDK - Unity
        run: dotnet build StellarRPCSDK/StellarRPCSDK.csproj -c Unity -p:Version=${{ inputs.version }} -v:detailed p:DoILRepack=true

      - name: Build SDK - Tizen
        run: dotnet build StellarRPCSDK/StellarRPCSDK.csproj -c Tizen -p:Version=${{ inputs.version }}

      - name: Build SDK - NativeAOT
        run: dotnet build StellarRPCSDK/StellarRPCSDK.csproj -c NativeAOT -p:Version=${{ inputs.version }}

      # Build the Native RPC SDK explicitly with NativeAOT configuration
      - name: Build Native SDK - NativeAOT
        run: dotnet build StellarRPCSDK_Native/StellarRPCSDK_Native.csproj -c NativeAOT -p:Version=${{ inputs.version }}

      - name: Generate Protocol Buffer Wrappers
        run: |
          GRPC_OUTPUT_DIR="$(pwd)/StellarRPCSDK_Native/gRPC"
          mkdir -p "$GRPC_OUTPUT_DIR"
          dotnet run --project ProtoGenerator/ProtoGenerator.csproj -- --proto "$(pwd)/StellarRPCSDK_Native" --grpc-aot "$GRPC_OUTPUT_DIR"

      - name: Create NuGet Packages
        run: |
          mkdir -p Releases/NuGet
          # Create NuGet packages for Standard and Tizen
          dotnet pack StellarRPCSDK/StellarRPCSDK.csproj -c Release -p:PackageVersion=${{ inputs.version }} -o Releases/NuGet
          dotnet pack StellarRPCSDK/StellarRPCSDK.csproj -c Tizen -p:PackageVersion=${{ inputs.version }} -o Releases/NuGet/Tizen

      # Copy each configuration's output to dedicated folders
      - name: Prepare Output Folders
        run: |
          # Create output directories
          mkdir -p Releases/Release
          mkdir -p Releases/Unity
          mkdir -p Releases/Tizen
          mkdir -p Releases/NativeAOT
          
          # Copy Release build
          cp -r StellarRPCSDK/bin/Release/* Releases/Release/
          
          # Copy Unity build
          cp -r StellarRPCSDK/bin/Unity/* Releases/Unity/
          
          # Copy Tizen build
          cp -r StellarRPCSDK/bin/Tizen/* Releases/Tizen/
          
          # Copy NativeAOT build
          cp -r StellarRPCSDK/bin/NativeAOT/* Releases/NativeAOT/

      - name: Upload NuGet Packages
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: Releases/NuGet

      - name: Upload Release Build
        uses: actions/upload-artifact@v4
        with:
          name: release-build
          path: Releases/Release

      - name: Upload Unity Build
        uses: actions/upload-artifact@v4
        with:
          name: unity-build
          path: Releases/Unity

      - name: Upload Tizen Build
        uses: actions/upload-artifact@v4
        with:
          name: tizen-build
          path: Releases/Tizen

      - name: Upload NativeAOT Build
        uses: actions/upload-artifact@v4
        with:
          name: nativeaot-build
          path: Releases/NativeAOT

      # Upload generated protobuf files for later use
      - name: Upload Protobuf Files
        uses: actions/upload-artifact@v4
        with:
          name: protobuf-files
          path: |
            StellarRPCSDK_Native/Stellar.proto
            StellarRPCSDK_Native/Stellar.RPC.proto

      # Prepare archive with only the necessary files
      - name: Prepare Archive Files
        run: |
          mkdir -p archive_content
          cp -r StellarRPCSDK archive_content/
          cp -r StellarRPCSDK_Native archive_content/
          cp -r ProtoGenerator archive_content/
          cp -r StellarOpenRPC archive_content/
          cp -r StellarXDR archive_content/

      # Create a complete build archive with only the necessary content
      - name: Create Build Archive
        run: |
          cd archive_content
          tar -czf ../build-archive.tar.gz .
          cd ..
          ls -la

      - name: Upload Build Archive
        uses: actions/upload-artifact@v4
        with:
          name: build-archive
          path: build-archive.tar.gz

  publish_native_windows:
    needs: build
    strategy:
      matrix:
        platform: [win-x64, win-arm64]
    runs-on: windows-latest
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Create a directory to extract to
      - name: Create Extract Directory
        run: mkdir extract_dir

      # Download the build archive
      - name: Download Build Archive
        uses: actions/download-artifact@v4
        with:
          name: build-archive
          path: .

      # Extract the archive
      - name: Extract Build Archive
        shell: pwsh
        run: |
          tar -xzf build-archive.tar.gz -C extract_dir
          dir extract_dir
          dir extract_dir\StellarRPCSDK
          dir extract_dir\StellarRPCSDK_Native

      - name: Publish Native Binary
        shell: pwsh
        run: |
          mkdir -p Releases/Binaries/${{ matrix.platform }}
          dotnet publish extract_dir/StellarRPCSDK_Native/StellarRPCSDK_Native.csproj -c NativeAOT -r ${{ matrix.platform }} --self-contained -p:Version=${{ github.event.inputs.version }} -o Releases/Binaries/${{ matrix.platform }}

      - name: Upload Native Binary
        uses: actions/upload-artifact@v4
        with:
          name: native-binary-${{ matrix.platform }}
          path: Releases/Binaries/${{ matrix.platform }}

  publish_native_linux_x64:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Create a directory to extract to
      - name: Create Extract Directory
        run: mkdir extract_dir

      # Download the build archive
      - name: Download Build Archive
        uses: actions/download-artifact@v4
        with:
          name: build-archive
          path: .

      # Extract the archive
      - name: Extract Build Archive
        run: |
          tar -xzf build-archive.tar.gz -C extract_dir
          ls -la extract_dir
          ls -la extract_dir/StellarRPCSDK
          ls -la extract_dir/StellarRPCSDK_Native

      - name: Publish Native Binary
        run: |
          mkdir -p Releases/Binaries/linux-x64
          dotnet publish extract_dir/StellarRPCSDK_Native/StellarRPCSDK_Native.csproj \
            -c NativeAOT \
            -r linux-x64 \
            --self-contained \
            -p:Version=${{ github.event.inputs.version }} \
            -o Releases/Binaries/linux-x64

      - name: Upload Native Binary
        uses: actions/upload-artifact@v4
        with:
          name: native-binary-linux-x64
          path: Releases/Binaries/linux-x64

  publish_native_linux_arm64:
    needs: build
    # Use the GitHub-hosted ARM64 runner with the correct label
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Create a directory to extract to
      - name: Create Extract Directory
        run: mkdir extract_dir

      # Download the build archive
      - name: Download Build Archive
        uses: actions/download-artifact@v4
        with:
          name: build-archive
          path: .

      # Extract the archive
      - name: Extract Build Archive
        run: |
          tar -xzf build-archive.tar.gz -C extract_dir
          ls -la extract_dir
          ls -la extract_dir/StellarRPCSDK
          ls -la extract_dir/StellarRPCSDK_Native

      - name: Publish Native Binary
        run: |
          mkdir -p Releases/Binaries/linux-arm64
          dotnet publish extract_dir/StellarRPCSDK_Native/StellarRPCSDK_Native.csproj \
            -c NativeAOT \
            -r linux-arm64 \
            --self-contained \
            -p:Version=${{ github.event.inputs.version }} \
            -o Releases/Binaries/linux-arm64

      - name: Upload Native Binary
        uses: actions/upload-artifact@v4
        with:
          name: native-binary-linux-arm64
          path: Releases/Binaries/linux-arm64

  publish_native_macos_x64:
    needs: build
    runs-on: macos-13
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Create a directory to extract to
      - name: Create Extract Directory
        run: mkdir extract_dir

      # Download the build archive
      - name: Download Build Archive
        uses: actions/download-artifact@v4
        with:
          name: build-archive
          path: .

      # Extract the archive
      - name: Extract Build Archive
        run: |
          tar -xzf build-archive.tar.gz -C extract_dir
          ls -la extract_dir
          ls -la extract_dir/StellarRPCSDK
          ls -la extract_dir/StellarRPCSDK_Native

      - name: Publish Native Binary
        run: |
          mkdir -p Releases/Binaries/osx-x64
          dotnet publish extract_dir/StellarRPCSDK_Native/StellarRPCSDK_Native.csproj \
            -c NativeAOT \
            -r osx-x64 \
            --self-contained \
            -p:Version=${{ github.event.inputs.version }} \
            -o Releases/Binaries/osx-x64

      - name: Upload Native Binary
        uses: actions/upload-artifact@v4
        with:
          name: native-binary-osx-x64
          path: Releases/Binaries/osx-x64

  publish_native_macos_arm64:
    needs: build
    # macOS ARM64 - technically can use the newer macOS ARM runners, but can also cross-compile from Intel
    runs-on: macos-latest
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Create a directory to extract to
      - name: Create Extract Directory
        run: mkdir extract_dir

      # Download the build archive
      - name: Download Build Archive
        uses: actions/download-artifact@v4
        with:
          name: build-archive
          path: .

      # Extract the archive
      - name: Extract Build Archive
        run: |
          tar -xzf build-archive.tar.gz -C extract_dir
          ls -la extract_dir
          ls -la extract_dir/StellarRPCSDK
          ls -la extract_dir/StellarRPCSDK_Native

      - name: Publish Native Binary
        run: |
          mkdir -p Releases/Binaries/osx-arm64
          dotnet publish extract_dir/StellarRPCSDK_Native/StellarRPCSDK_Native.csproj \
            -c NativeAOT \
            -r osx-arm64 \
            --self-contained \
            -p:Version=${{ github.event.inputs.version }} \
            -o Releases/Binaries/osx-arm64

      - name: Upload Native Binary
        uses: actions/upload-artifact@v4
        with:
          name: native-binary-osx-arm64
          path: Releases/Binaries/osx-arm64

  release:
    needs: [build, publish_native_windows, publish_native_linux_x64, publish_native_linux_arm64, publish_native_macos_x64, publish_native_macos_arm64]
    runs-on: ubuntu-latest
    steps:
      # Check out the repository first for git context
      - name: Check out code
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # List artifact files for debugging
      - name: List artifact files
        run: |
          find artifacts -type f | sort

      # Prepare release files in a clean directory structure
      - name: Prepare release files
        run: |
          mkdir -p release_files/nuget
          mkdir -p release_files/release
          mkdir -p release_files/unity
          mkdir -p release_files/tizen
          mkdir -p release_files/nativeaot
          mkdir -p release_files/native/win-x64
          mkdir -p release_files/native/win-arm64
          mkdir -p release_files/native/linux-x64
          mkdir -p release_files/native/linux-arm64
          mkdir -p release_files/native/osx-x64
          mkdir -p release_files/native/osx-arm64
          mkdir -p release_files/native/proto
          
          # Copy artifacts to release folders
          cp -r artifacts/nuget-packages/* release_files/nuget/
          cp -r artifacts/release-build/* release_files/release/
          cp -r artifacts/unity-build/* release_files/unity/
          cp -r artifacts/tizen-build/* release_files/tizen/
          cp -r artifacts/nativeaot-build/* release_files/nativeaot/
          cp -r artifacts/native-binary-win-x64/* release_files/native/win-x64/
          cp -r artifacts/native-binary-win-arm64/* release_files/native/win-arm64/
          cp -r artifacts/native-binary-linux-x64/* release_files/native/linux-x64/
          cp -r artifacts/native-binary-linux-arm64/* release_files/native/linux-arm64/
          cp -r artifacts/native-binary-osx-x64/* release_files/native/osx-x64/
          cp -r artifacts/native-binary-osx-arm64/* release_files/native/osx-arm64/
          
          # Copy protobuf files to the native release folder
          cp -r artifacts/protobuf-files/* release_files/native/proto/
          
          # Create ZIP archives for each component
          cd release_files
          zip -r ../stellar-sdk-nuget-v${{ github.event.inputs.version }}.zip nuget
          zip -r ../stellar-sdk-release-v${{ github.event.inputs.version }}.zip release
          zip -r ../stellar-sdk-unity-v${{ github.event.inputs.version }}.zip unity
          zip -r ../stellar-sdk-tizen-v${{ github.event.inputs.version }}.zip tizen
          zip -r ../stellar-sdk-nativeaot-v${{ github.event.inputs.version }}.zip nativeaot
          zip -r ../stellar-sdk-native-v${{ github.event.inputs.version }}.zip native
          cd ..

      # Try deleting any existing release, ignoring errors
      - name: Try deleting existing release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release delete v${{ github.event.inputs.version }} --yes || true

      # Create a fresh release
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ github.event.inputs.version }} \
            --title "Release v${{ github.event.inputs.version }}" \
            --draft \
            stellar-sdk-nuget-v${{ github.event.inputs.version }}.zip \
            stellar-sdk-release-v${{ github.event.inputs.version }}.zip \
            stellar-sdk-unity-v${{ github.event.inputs.version }}.zip \
            stellar-sdk-tizen-v${{ github.event.inputs.version }}.zip \
            stellar-sdk-nativeaot-v${{ github.event.inputs.version }}.zip \
            stellar-sdk-native-v${{ github.event.inputs.version }}.zip

      # - name: Publish NuGet Packages
      #   run: |
      #     for package in artifacts/nuget-packages/*.nupkg; do
      #       dotnet nuget push $package --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
      #     done